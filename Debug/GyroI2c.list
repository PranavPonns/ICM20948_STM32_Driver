
GyroI2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800acb8  0800acb8  0001acb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b274  0800b274  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b27c  0800b27c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001e4  0800b468  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800b468  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011282  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233f  00000000  00000000  00031496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000337d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b1f  00000000  00000000  00034ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd45  00000000  00000000  0005a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfffa  00000000  00000000  0006a70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  0013a758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aca0 	.word	0x0800aca0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800aca0 	.word	0x0800aca0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_ZN9ICM_20948C1E17I2C_HandleTypeDefh>:
 *      Author: Pranav Ponnusamy
 */

#include "ICM_20948.h"

ICM_20948::ICM_20948(I2C_HandleTypeDef handle, uint8_t addr) {
 8001038:	b084      	sub	sp, #16
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	f107 0014 	add.w	r0, r7, #20
 8001046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	address = addr;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001050:	701a      	strb	r2, [r3, #0]
	i2c = handle;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3304      	adds	r3, #4
 8001056:	f107 0114 	add.w	r1, r7, #20
 800105a:	2254      	movs	r2, #84	; 0x54
 800105c:	4618      	mov	r0, r3
 800105e:	f005 f9b9 	bl	80063d4 <memcpy>
}
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800106e:	b004      	add	sp, #16
 8001070:	4770      	bx	lr

08001072 <_ZN9ICM_2094811updateAccelEv>:
	gyroReading.x = twoComplementToDec(addBinary(temp[1], temp[0]));
	gyroReading.y = twoComplementToDec(addBinary(temp[3], temp[2]));
	gyroReading.z = twoComplementToDec(addBinary(temp[5], temp[4]));
}

void ICM_20948::updateAccel() {
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	uint8_t temp[6];

	readReg(ACCEL_XOUT_H, temp, 6);
 800107a:	f107 0208 	add.w	r2, r7, #8
 800107e:	2306      	movs	r3, #6
 8001080:	212d      	movs	r1, #45	; 0x2d
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f86a 	bl	800115c <_ZN9ICM_209487readRegEiPhi>

	accelReading.x = twoComplementToDec(addBinary(temp[1], temp[0]));
 8001088:	7a7b      	ldrb	r3, [r7, #9]
 800108a:	7a3a      	ldrb	r2, [r7, #8]
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f884 	bl	800119c <_ZN9ICM_209489addBinaryEhh>
 8001094:	4603      	mov	r3, r0
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f895 	bl	80011c8 <_ZN9ICM_2094818twoComplementToDecEt>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	accelReading.y = twoComplementToDec(addBinary(temp[3], temp[2]));
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	7aba      	ldrb	r2, [r7, #10]
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f874 	bl	800119c <_ZN9ICM_209489addBinaryEhh>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4619      	mov	r1, r3
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f885 	bl	80011c8 <_ZN9ICM_2094818twoComplementToDecEt>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	accelReading.z = twoComplementToDec(addBinary(temp[5], temp[4]));
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	7b3a      	ldrb	r2, [r7, #12]
 80010cc:	4619      	mov	r1, r3
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f864 	bl	800119c <_ZN9ICM_209489addBinaryEhh>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f875 	bl	80011c8 <_ZN9ICM_2094818twoComplementToDecEt>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_ZN9ICM_209488getPitchEv>:
}

//float ICM_20948::getPitch() {
//	return atan2(getAccelX(), getAccelZ()) * 360 / (2 * M_PI);
//}
float ICM_20948::getPitch() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	updateAccel();
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffba 	bl	8001072 <_ZN9ICM_2094811updateAccelEv>
	return atan2(accelReading.x, accelReading.z) * 360 / (2 * M_PI);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f9b3 205e 	ldrsh.w	r2, [r3, #94]	; 0x5e
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f000 f875 	bl	80011fc <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001112:	ec51 0b10 	vmov	r0, r1, d0
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <_ZN9ICM_209488getPitchEv+0x68>)
 800111c:	f7ff fa8c 	bl	8000638 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	a309      	add	r3, pc, #36	; (adr r3, 8001150 <_ZN9ICM_209488getPitchEv+0x60>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fbad 	bl	800088c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd75 	bl	8000c28 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	ee07 3a90 	vmov	s15, r3
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	54442d18 	.word	0x54442d18
 8001154:	401921fb 	.word	0x401921fb
 8001158:	40768000 	.word	0x40768000

0800115c <_ZN9ICM_209487readRegEiPhi>:
	HAL_MAX_DELAY);
	return ret;
}

HAL_StatusTypeDef ICM_20948::readReg(int regAddress, uint8_t *buf,
		int dataAmount) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b08b      	sub	sp, #44	; 0x2c
 8001160:	af04      	add	r7, sp, #16
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(&i2c, address, regAddress, 1, buf, dataAmount,
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1d18      	adds	r0, r3, #4
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b299      	uxth	r1, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	b29a      	uxth	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f04f 34ff 	mov.w	r4, #4294967295
 8001180:	9402      	str	r4, [sp, #8]
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	f001 fa55 	bl	8002638 <HAL_I2C_Mem_Read>
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);
	return ret;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <_ZN9ICM_209489addBinaryEhh>:
	HAL_MAX_DELAY);
	return buf[0];
}

//Works
uint16_t ICM_20948::addBinary(uint8_t lowByte, uint8_t highByte) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
	return ((highByte << 8) | lowByte);
 80011ac:	78bb      	ldrb	r3, [r7, #2]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZN9ICM_2094818twoComplementToDecEt>:

//Works
int16_t ICM_20948::twoComplementToDec(uint16_t val) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	if ((val & 0x8000) == 0) {
 80011d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db02      	blt.n	80011e2 <_ZN9ICM_2094818twoComplementToDecEt+0x1a>
		return val;
 80011dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011e0:	e006      	b.n	80011f0 <_ZN9ICM_2094818twoComplementToDecEt+0x28>
	} else {
		val = ~(val) + 1;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	425b      	negs	r3, r3
 80011e6:	807b      	strh	r3, [r7, #2]
		return -val;
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	425b      	negs	r3, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b21b      	sxth	r3, r3
	}
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 800120c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9a7 	bl	8000564 <__aeabi_i2d>
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9a0 	bl	8000564 <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	ec43 2b11 	vmov	d1, r2, r3
 800122c:	ec45 4b10 	vmov	d0, r4, r5
 8001230:	f004 fe20 	bl	8005e74 <atan2>
 8001234:	eeb0 7a40 	vmov.f32	s14, s0
 8001238:	eef0 7a60 	vmov.f32	s15, s1
    }
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800124c <_Z6UprintPc>:
//	}
//
//	sendToUsb((uint8_t*) "Scan done.\n");
//}

void Uprint(char message[]){
 800124c:	b580      	push	{r7, lr}
 800124e:	b09c      	sub	sp, #112	; 0x70
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	char uart_buf[100];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	f006 f884 	bl	8007368 <siprintf>
 8001260:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001264:	b29a      	uxth	r2, r3
 8001266:	f107 0108 	add.w	r1, r7, #8
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <_Z6UprintPc+0x30>)
 800126e:	f004 fa8c 	bl	800578a <HAL_UART_Transmit>
}
 8001272:	bf00      	nop
 8001274:	3770      	adds	r7, #112	; 0x70
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000254 	.word	0x20000254

08001280 <_Z9configRegiii>:
//		ans = 0;
//	}
//	return ans;
}

HAL_StatusTypeDef configReg(int regAddress, int regSize, int data){
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af04      	add	r7, sp, #16
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t temp = data;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	75bb      	strb	r3, [r7, #22]
	ret = HAL_I2C_Mem_Write(&hi2c1, addr, regAddress, regSize, &temp, regSize, HAL_MAX_DELAY);
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <_Z9configRegiii+0x48>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b299      	uxth	r1, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b29a      	uxth	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	b298      	uxth	r0, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f04f 34ff 	mov.w	r4, #4294967295
 80012a8:	9402      	str	r4, [sp, #8]
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f107 0316 	add.w	r3, r7, #22
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	4603      	mov	r3, r0
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <_Z9configRegiii+0x4c>)
 80012b6:	f001 f8c5 	bl	8002444 <HAL_I2C_Mem_Write>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]

	return ret;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000200 	.word	0x20000200

080012d0 <_Z9configIMUv>:

void configIMU(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;


//	Clock and sleep settings
	ret = configReg(0x06, 1, 0b00000001);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2101      	movs	r1, #1
 80012da:	2006      	movs	r0, #6
 80012dc:	f7ff ffd0 	bl	8001280 <_Z9configRegiii>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
//	Ensure that accelerometer and gyroscope are both enabled
	ret = configReg(0x07, 1, 0b00000000);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2101      	movs	r1, #1
 80012e8:	2007      	movs	r0, #7
 80012ea:	f7ff ffc9 	bl	8001280 <_Z9configRegiii>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]

//	Mag Config
//	ret = configReg(0x31, 1, 0b00000010);


	if (ret == HAL_OK) {
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <_Z9configIMUv+0x30>
		Uprint("write worked\r\n");
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <_Z9configIMUv+0x8c>)
 80012fa:	f7ff ffa7 	bl	800124c <_Z6UprintPc>
 80012fe:	e002      	b.n	8001306 <_Z9configIMUv+0x36>
	} else {
		Uprint("write failed\r\n");
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <_Z9configIMUv+0x90>)
 8001302:	f7ff ffa3 	bl	800124c <_Z6UprintPc>
	}

	uint8_t buf[1];
	char str[10];

	ret = HAL_I2C_Mem_Read(&hi2c1, addr, 0x01, 1, buf, 1, HAL_MAX_DELAY);
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <_Z9configIMUv+0x94>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b299      	uxth	r1, r3
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2301      	movs	r3, #1
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2201      	movs	r2, #1
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <_Z9configIMUv+0x98>)
 8001322:	f001 f989 	bl	8002638 <HAL_I2C_Mem_Read>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK) {
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10e      	bne.n	800134e <_Z9configIMUv+0x7e>
			Uprint("read worked\r\n");
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <_Z9configIMUv+0x9c>)
 8001332:	f7ff ff8b 	bl	800124c <_Z6UprintPc>
			sprintf(str, "%d\r\n", buf[0]);
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	461a      	mov	r2, r3
 800133a:	463b      	mov	r3, r7
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <_Z9configIMUv+0xa0>)
 800133e:	4618      	mov	r0, r3
 8001340:	f006 f812 	bl	8007368 <siprintf>
			Uprint(str);
 8001344:	463b      	mov	r3, r7
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff80 	bl	800124c <_Z6UprintPc>
		} else {
			Uprint("read failed\r\n");
		}

}
 800134c:	e002      	b.n	8001354 <_Z9configIMUv+0x84>
			Uprint("read failed\r\n");
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <_Z9configIMUv+0xa4>)
 8001350:	f7ff ff7c 	bl	800124c <_Z6UprintPc>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800acb8 	.word	0x0800acb8
 8001360:	0800acc8 	.word	0x0800acc8
 8001364:	20000000 	.word	0x20000000
 8001368:	20000200 	.word	0x20000200
 800136c:	0800acd8 	.word	0x0800acd8
 8001370:	0800ace8 	.word	0x0800ace8
 8001374:	0800acf0 	.word	0x0800acf0

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b0ca      	sub	sp, #296	; 0x128
 800137c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fb97 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f853 	bl	800142c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 f929 	bl	80015dc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800138a:	f000 f8f9 	bl	8001580 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 800138e:	f000 f8c3 	bl	8001518 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 100);
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <main+0xa0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b299      	uxth	r1, r3
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	2201      	movs	r2, #1
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <main+0xa4>)
 800139e:	f001 fb71 	bl	8002a84 <HAL_I2C_IsDeviceReady>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(ret == HAL_OK){
 80013a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <main+0x40>
	  Uprint("The device is ready\r\n");
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <main+0xa8>)
 80013b2:	f7ff ff4b 	bl	800124c <_Z6UprintPc>
 80013b6:	e002      	b.n	80013be <main+0x46>
  }
  else {
	  Uprint("The device is not ready. Check cables\r\n");
 80013b8:	481a      	ldr	r0, [pc, #104]	; (8001424 <main+0xac>)
 80013ba:	f7ff ff47 	bl	800124c <_Z6UprintPc>
  }

  configIMU();
 80013be:	f7ff ff87 	bl	80012d0 <_Z9configIMUv>
//	HAL_StatusTypeDef ret;
//	uint8_t buf[12];
//	int16_t val;
//	float temp_c;

  	ICM_20948 IMU(hi2c1, addr);
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <main+0xa0>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4c15      	ldr	r4, [pc, #84]	; (800141c <main+0xa4>)
 80013c8:	f107 0568 	add.w	r5, r7, #104	; 0x68
 80013cc:	9312      	str	r3, [sp, #72]	; 0x48
 80013ce:	4668      	mov	r0, sp
 80013d0:	f104 030c 	add.w	r3, r4, #12
 80013d4:	2248      	movs	r2, #72	; 0x48
 80013d6:	4619      	mov	r1, r3
 80013d8:	f004 fffc 	bl	80063d4 <memcpy>
 80013dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80013e0:	4628      	mov	r0, r5
 80013e2:	f7ff fe29 	bl	8001038 <_ZN9ICM_20948C1E17I2C_HandleTypeDefh>
//		Uprint(str);
//		sprintf(str, "GYRO X:%d Y:%d Z:%d\r\n", IMU.getGyroX(), IMU.getGyroY(), IMU.getGyroZ());
//		Uprint(str);


		sprintf(str, "%f\r\n", IMU.getPitch());
 80013e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fe80 	bl	80010f0 <_ZN9ICM_209488getPitchEv>
 80013f0:	ee10 3a10 	vmov	r3, s0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8c7 	bl	8000588 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	1d38      	adds	r0, r7, #4
 8001400:	4909      	ldr	r1, [pc, #36]	; (8001428 <main+0xb0>)
 8001402:	f005 ffb1 	bl	8007368 <siprintf>
		Uprint(str);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff1f 	bl	800124c <_Z6UprintPc>
		HAL_Delay(100);
 800140e:	2064      	movs	r0, #100	; 0x64
 8001410:	f000 fbc0 	bl	8001b94 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	}
 8001414:	e7e7      	b.n	80013e6 <main+0x6e>
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000
 800141c:	20000200 	.word	0x20000200
 8001420:	0800ad00 	.word	0x0800ad00
 8001424:	0800ad18 	.word	0x0800ad18
 8001428:	0800ad40 	.word	0x0800ad40

0800142c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2234      	movs	r2, #52	; 0x34
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f004 ffd8 	bl	80063f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <_Z18SystemClock_Configv+0xe4>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <_Z18SystemClock_Configv+0xe4>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <_Z18SystemClock_Configv+0xe4>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800146c:	2300      	movs	r3, #0
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <_Z18SystemClock_Configv+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001478:	4a26      	ldr	r2, [pc, #152]	; (8001514 <_Z18SystemClock_Configv+0xe8>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <_Z18SystemClock_Configv+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014a4:	2348      	movs	r3, #72	; 0x48
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014ac:	2303      	movs	r3, #3
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fe7b 	bl	80051b4 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80014ce:	f000 f8f3 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fb16 	bl	8004b20 <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bf14      	ite	ne
 80014fa:	2301      	movne	r3, #1
 80014fc:	2300      	moveq	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8001504:	f000 f8d8 	bl	80016b8 <Error_Handler>
  }
}
 8001508:	bf00      	nop
 800150a:	3750      	adds	r7, #80	; 0x50
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <_ZL12MX_I2C1_Initv+0x60>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <_ZL12MX_I2C1_Initv+0x64>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 8001536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <_ZL12MX_I2C1_Initv+0x5c>)
 8001556:	f000 fe31 	bl	80021bc <HAL_I2C_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800156a:	f000 f8a5 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000200 	.word	0x20000200
 8001578:	40005400 	.word	0x40005400
 800157c:	000186a0 	.word	0x000186a0

08001580 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015b8:	f004 f89a 	bl	80056f0 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80015cc:	f000 f874 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000254 	.word	0x20000254
 80015d8:	40004400 	.word	0x40004400

080015dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a25      	ldr	r2, [pc, #148]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_ZL12MX_GPIO_Initv+0xd0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2120      	movs	r1, #32
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <_ZL12MX_GPIO_Initv+0xd4>)
 8001668:	f000 fd8e 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001684:	f000 fbec 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001688:	2320      	movs	r3, #32
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <_ZL12MX_GPIO_Initv+0xd4>)
 80016a0:	f000 fbde 	bl	8001e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020800 	.word	0x40020800

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1) {
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f000 fb3a 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_I2C_MspInit+0x94>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d134      	bne.n	80017a0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_I2C_MspInit+0x98>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_I2C_MspInit+0x98>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0x98>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001758:	2312      	movs	r3, #18
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175c:	2301      	movs	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001764:	2304      	movs	r3, #4
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4810      	ldr	r0, [pc, #64]	; (80017b0 <HAL_I2C_MspInit+0x9c>)
 8001770:	f000 fb76 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_I2C_MspInit+0x98>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_I2C_MspInit+0x98>)
 800177e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_I2C_MspInit+0x98>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	201f      	movs	r0, #31
 8001796:	f000 fafc 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800179a:	201f      	movs	r0, #31
 800179c:	f000 fb15 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40005400 	.word	0x40005400
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_UART_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_UART_MspInit+0x88>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_UART_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_UART_MspInit+0x8c>)
 800182a:	f000 fb19 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f960 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <I2C1_EV_IRQHandler+0x10>)
 800189e:	f001 fa1f 	bl	8002ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000200 	.word	0x20000200

080018ac <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80018c6:	f004 fd53 	bl	8006370 <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
	return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit(int status) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
	while (1) {
 80018ee:	e7fe      	b.n	80018ee <_exit+0x12>

080018f0 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
		*ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
	}

	return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
		__io_putchar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
	}
	return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file) {
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_fstat>:

int _fstat(int file, struct stat *st) {
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	605a      	str	r2, [r3, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_isatty>:

int _isatty(int file) {
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f004 fcb8 	bl	8006370 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20020000 	.word	0x20020000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000298 	.word	0x20000298
 8001a34:	200002b0 	.word	0x200002b0

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a86:	f7ff ffd7 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f004 fc77 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8e:	f7ff fc73 	bl	8001378 <main>
  bx  lr    
 8001a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001aa0:	0800b284 	.word	0x0800b284
  ldr r2, =_sbss
 8001aa4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001aa8:	200002b0 	.word	0x200002b0

08001aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_Init+0x40>)
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_Init+0x40>)
 8001ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_Init+0x40>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f94f 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 f808 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae4:	f7ff fdee 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f967 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 f92f 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	2000029c 	.word	0x2000029c

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000029c 	.word	0x2000029c

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffee 	bl	8001b7c <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e00c      	b.n	8001e36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2205      	movs	r2, #5
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e165      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8154 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80ae 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_GPIO_Init+0x300>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a5c      	ldr	r2, [pc, #368]	; (8002160 <HAL_GPIO_Init+0x300>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_GPIO_Init+0x300>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4f      	ldr	r2, [pc, #316]	; (8002168 <HAL_GPIO_Init+0x308>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x21a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4e      	ldr	r2, [pc, #312]	; (800216c <HAL_GPIO_Init+0x30c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x216>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4d      	ldr	r2, [pc, #308]	; (8002170 <HAL_GPIO_Init+0x310>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x212>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_GPIO_Init+0x314>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x20e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_GPIO_Init+0x318>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x20a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4a      	ldr	r2, [pc, #296]	; (800217c <HAL_GPIO_Init+0x31c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x206>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_GPIO_Init+0x320>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x202>
 800205e:	2306      	movs	r3, #6
 8002060:	e00c      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002062:	2307      	movs	r3, #7
 8002064:	e00a      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002066:	2305      	movs	r3, #5
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800206a:	2304      	movs	r3, #4
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208c:	4935      	ldr	r1, [pc, #212]	; (8002164 <HAL_GPIO_Init+0x304>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <HAL_GPIO_Init+0x324>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_GPIO_Init+0x324>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x324>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_GPIO_Init+0x324>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f ae96 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40021400 	.word	0x40021400
 8002180:	40021800 	.word	0x40021800
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12b      	b.n	8002426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fa96 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f002 fd70 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a81      	ldr	r2, [pc, #516]	; (8002430 <HAL_I2C_Init+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x84>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_I2C_Init+0x278>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x92>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a7d      	ldr	r2, [pc, #500]	; (8002438 <HAL_I2C_Init+0x27c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0e7      	b.n	8002426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a78      	ldr	r2, [pc, #480]	; (800243c <HAL_I2C_Init+0x280>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_I2C_Init+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xd4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_I2C_Init+0x284>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	495c      	ldr	r1, [pc, #368]	; (8002430 <HAL_I2C_Init+0x274>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d819      	bhi.n	80022f8 <HAL_I2C_Init+0x13c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d8:	400b      	ands	r3, r1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_I2C_Init+0x138>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e59      	subs	r1, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	e051      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e04f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_I2C_Init+0x168>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e012      	b.n	800234a <HAL_I2C_Init+0x18e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x196>
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <HAL_I2C_Init+0x1bc>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e58      	subs	r0, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	fbb0 f3f3 	udiv	r3, r0, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6809      	ldr	r1, [r1, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6911      	ldr	r1, [r2, #16]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	000186a0 	.word	0x000186a0
 8002434:	001e847f 	.word	0x001e847f
 8002438:	003d08ff 	.word	0x003d08ff
 800243c:	431bde83 	.word	0x431bde83
 8002440:	10624dd3 	.word	0x10624dd3

08002444 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	817b      	strh	r3, [r7, #10]
 8002456:	460b      	mov	r3, r1
 8002458:	813b      	strh	r3, [r7, #8]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245e:	f7ff fb8d 	bl	8001b7c <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b20      	cmp	r3, #32
 800246e:	f040 80d9 	bne.w	8002624 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2319      	movs	r3, #25
 8002478:	2201      	movs	r2, #1
 800247a:	496d      	ldr	r1, [pc, #436]	; (8002630 <HAL_I2C_Mem_Write+0x1ec>)
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f002 f925 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
 800248a:	e0cc      	b.n	8002626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_I2C_Mem_Write+0x56>
 8002496:	2302      	movs	r3, #2
 8002498:	e0c5      	b.n	8002626 <HAL_I2C_Mem_Write+0x1e2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d007      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2221      	movs	r2, #33	; 0x21
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a3a      	ldr	r2, [r7, #32]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_I2C_Mem_Write+0x1f0>)
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002502:	88f8      	ldrh	r0, [r7, #6]
 8002504:	893a      	ldrh	r2, [r7, #8]
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4603      	mov	r3, r0
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f001 feb4 	bl	8004280 <I2C_RequestMemoryWrite>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d052      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e081      	b.n	8002626 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f002 f9a6 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b04      	cmp	r3, #4
 8002538:	d107      	bne.n	800254a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d11b      	bne.n	80025c4 <HAL_I2C_Mem_Write+0x180>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d017      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1aa      	bne.n	8002522 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f002 f992 	bl	80048fa <I2C_WaitOnBTFFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d107      	bne.n	80025f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e016      	b.n	8002626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	00100002 	.word	0x00100002
 8002634:	ffff0000 	.word	0xffff0000

08002638 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	460b      	mov	r3, r1
 800264c:	813b      	strh	r3, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002652:	f7ff fa93 	bl	8001b7c <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b20      	cmp	r3, #32
 8002662:	f040 8208 	bne.w	8002a76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2319      	movs	r3, #25
 800266c:	2201      	movs	r2, #1
 800266e:	497b      	ldr	r1, [pc, #492]	; (800285c <HAL_I2C_Mem_Read+0x224>)
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f002 f82b 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	e1fb      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_I2C_Mem_Read+0x56>
 800268a:	2302      	movs	r3, #2
 800268c:	e1f4      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d007      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2222      	movs	r2, #34	; 0x22
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a5b      	ldr	r2, [pc, #364]	; (8002860 <HAL_I2C_Mem_Read+0x228>)
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f6:	88f8      	ldrh	r0, [r7, #6]
 80026f8:	893a      	ldrh	r2, [r7, #8]
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4603      	mov	r3, r0
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f001 fe50 	bl	80043ac <I2C_RequestMemoryRead>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1b0      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	623b      	str	r3, [r7, #32]
 8002732:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e184      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	2b01      	cmp	r3, #1
 800274c:	d11b      	bne.n	8002786 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e164      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	2b02      	cmp	r3, #2
 800278c:	d11b      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	e144      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027dc:	e138      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	f200 80f1 	bhi.w	80029ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d123      	bne.n	8002838 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f002 f8f3 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e139      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002836:	e10b      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	d14e      	bne.n	80028de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	2200      	movs	r2, #0
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <HAL_I2C_Mem_Read+0x22c>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f001 ff3e 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e10e      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000
 8002864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028dc:	e0b8      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	2200      	movs	r2, #0
 80028e6:	4966      	ldr	r1, [pc, #408]	; (8002a80 <HAL_I2C_Mem_Read+0x448>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f001 feef 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0bf      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	2200      	movs	r2, #0
 8002942:	494f      	ldr	r1, [pc, #316]	; (8002a80 <HAL_I2C_Mem_Read+0x448>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f001 fec1 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e091      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c8:	e042      	b.n	8002a50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f002 f806 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04c      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d118      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f aec2 	bne.w	80027de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	00010004 	.word	0x00010004

08002a84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff f872 	bl	8001b7c <HAL_GetTick>
 8002a98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	f040 8111 	bne.w	8002cce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2319      	movs	r3, #25
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4988      	ldr	r1, [pc, #544]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f001 fe08 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e104      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2C_IsDeviceReady+0x50>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0fd      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d007      	beq.n	8002afa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2224      	movs	r2, #36	; 0x24
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a70      	ldr	r2, [pc, #448]	; (8002cdc <HAL_I2C_IsDeviceReady+0x258>)
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 fdc6 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d103      	bne.n	8002b5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b6      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b72:	f7ff f803 	bl	8001b7c <HAL_GetTick>
 8002b76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ba6:	e025      	b.n	8002bf4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7fe ffe8 	bl	8001b7c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <HAL_I2C_IsDeviceReady+0x13a>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22a0      	movs	r2, #160	; 0xa0
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2ba0      	cmp	r3, #160	; 0xa0
 8002bfe:	d005      	beq.n	8002c0c <HAL_I2C_IsDeviceReady+0x188>
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_I2C_IsDeviceReady+0x188>
 8002c06:	7dbb      	ldrb	r3, [r7, #22]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0cd      	beq.n	8002ba8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d129      	bne.n	8002c76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4921      	ldr	r1, [pc, #132]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f001 fd3a 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e036      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e02c      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	490f      	ldr	r1, [pc, #60]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f001 fd16 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e012      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3301      	adds	r3, #1
 8002cae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f4ff af32 	bcc.w	8002b1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	00100002 	.word	0x00100002
 8002cdc:	ffff0000 	.word	0xffff0000

08002ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d003      	beq.n	8002d18 <HAL_I2C_EV_IRQHandler+0x38>
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	f040 80c1 	bne.w	8002e9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <HAL_I2C_EV_IRQHandler+0x6e>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d38:	d003      	beq.n	8002d42 <HAL_I2C_EV_IRQHandler+0x62>
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_EV_IRQHandler+0x66>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_I2C_EV_IRQHandler+0x68>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f000 8132 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <HAL_I2C_EV_IRQHandler+0x92>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	0a5b      	lsrs	r3, r3, #9
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 fec0 	bl	8004aea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fcdc 	bl	8003728 <I2C_Master_SB>
 8002d70:	e092      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0xb2>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	0a5b      	lsrs	r3, r3, #9
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fd52 	bl	8003834 <I2C_Master_ADD10>
 8002d90:	e082      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fd6c 	bl	8003888 <I2C_Master_ADDR>
 8002db0:	e072      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d03b      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dcc:	f000 80f3 	beq.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	09db      	lsrs	r3, r3, #7
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00f      	beq.n	8002dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f94c 	bl	8003092 <I2C_MasterTransmit_TXE>
 8002dfa:	e04d      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80d6 	beq.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	0a5b      	lsrs	r3, r3, #9
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80cf 	beq.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	2b21      	cmp	r3, #33	; 0x21
 8002e1c:	d103      	bne.n	8002e26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9d3 	bl	80031ca <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e24:	e0c7      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	f040 80c4 	bne.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fa41 	bl	80032b6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e34:	e0bf      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e44:	f000 80b7 	beq.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00f      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0x194>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0x194>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fab6 	bl	80033de <I2C_MasterReceive_RXNE>
 8002e72:	e011      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 809a 	beq.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a5b      	lsrs	r3, r3, #9
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8093 	beq.w	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb5f 	bl	8003554 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e96:	e08e      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e98:	e08d      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	e007      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <HAL_I2C_EV_IRQHandler+0x20e>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	0a5b      	lsrs	r3, r3, #9
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ee4:	69b9      	ldr	r1, [r7, #24]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 ff1d 	bl	8003d26 <I2C_Slave_ADDR>
 8002eec:	e066      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x22e>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	0a5b      	lsrs	r3, r3, #9
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 ff58 	bl	8003dbc <I2C_Slave_STOPF>
 8002f0c:	e056      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	2b21      	cmp	r3, #33	; 0x21
 8002f12:	d002      	beq.n	8002f1a <HAL_I2C_EV_IRQHandler+0x23a>
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	2b29      	cmp	r3, #41	; 0x29
 8002f18:	d125      	bne.n	8002f66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	09db      	lsrs	r3, r3, #7
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00f      	beq.n	8002f46 <HAL_I2C_EV_IRQHandler+0x266>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	0a9b      	lsrs	r3, r3, #10
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_I2C_EV_IRQHandler+0x266>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fe33 	bl	8003baa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f44:	e039      	b.n	8002fba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d033      	beq.n	8002fba <HAL_I2C_EV_IRQHandler+0x2da>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	0a5b      	lsrs	r3, r3, #9
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d02d      	beq.n	8002fba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fe60 	bl	8003c24 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f64:	e029      	b.n	8002fba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00f      	beq.n	8002f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a9b      	lsrs	r3, r3, #10
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fe6b 	bl	8003c66 <I2C_SlaveReceive_RXNE>
 8002f90:	e014      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00e      	beq.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	0a5b      	lsrs	r3, r3, #9
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fe99 	bl	8003ce2 <I2C_SlaveReceive_BTF>
 8002fb0:	e004      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
 800301e:	4613      	mov	r3, r2
 8003020:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d150      	bne.n	800315a <I2C_MasterTransmit_TXE+0xc8>
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b21      	cmp	r3, #33	; 0x21
 80030bc:	d14d      	bne.n	800315a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d01d      	beq.n	8003100 <I2C_MasterTransmit_TXE+0x6e>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d01a      	beq.n	8003100 <I2C_MasterTransmit_TXE+0x6e>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d0:	d016      	beq.n	8003100 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2211      	movs	r2, #17
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff62 	bl	8002fc2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030fe:	e060      	b.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800310e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d107      	bne.n	800314a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff7d 	bl	8003042 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003148:	e03b      	b.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ff35 	bl	8002fc2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003158:	e033      	b.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b21      	cmp	r3, #33	; 0x21
 800315e:	d005      	beq.n	800316c <I2C_MasterTransmit_TXE+0xda>
 8003160:	7bbb      	ldrb	r3, [r7, #14]
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d12d      	bne.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b22      	cmp	r3, #34	; 0x22
 800316a:	d12a      	bne.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003186:	e01c      	b.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d103      	bne.n	800319c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f88e 	bl	80032b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800319a:	e012      	b.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031c0:	e7ff      	b.n	80031c2 <I2C_MasterTransmit_TXE+0x130>
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b21      	cmp	r3, #33	; 0x21
 80031e2:	d164      	bne.n	80032ae <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d012      	beq.n	8003214 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003212:	e04c      	b.n	80032ae <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d01d      	beq.n	8003256 <I2C_MasterTransmit_BTF+0x8c>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b20      	cmp	r3, #32
 800321e:	d01a      	beq.n	8003256 <I2C_MasterTransmit_BTF+0x8c>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003226:	d016      	beq.n	8003256 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003236:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2211      	movs	r2, #17
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff feb7 	bl	8002fc2 <HAL_I2C_MasterTxCpltCallback>
}
 8003254:	e02b      	b.n	80032ae <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003264:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d107      	bne.n	80032a0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fed2 	bl	8003042 <HAL_I2C_MemTxCpltCallback>
}
 800329e:	e006      	b.n	80032ae <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fe8a 	bl	8002fc2 <HAL_I2C_MasterTxCpltCallback>
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11d      	bne.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10b      	bne.n	80032ee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032ec:	e073      	b.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	121b      	asrs	r3, r3, #8
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003308:	e065      	b.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10b      	bne.n	800332a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003316:	b2da      	uxtb	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003328:	e055      	b.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	2b02      	cmp	r3, #2
 8003330:	d151      	bne.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b22      	cmp	r3, #34	; 0x22
 8003336:	d10d      	bne.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003352:	e040      	b.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d015      	beq.n	800338a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d112      	bne.n	800338a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003388:	e025      	b.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d120      	bne.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b21      	cmp	r3, #33	; 0x21
 8003398:	d11d      	bne.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033a8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fe36 	bl	8003042 <HAL_I2C_MemTxCpltCallback>
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b22      	cmp	r3, #34	; 0x22
 80033f0:	f040 80ac 	bne.w	800354c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d921      	bls.n	8003446 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b03      	cmp	r3, #3
 8003430:	f040 808c 	bne.w	800354c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003444:	e082      	b.n	800354c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	2b02      	cmp	r3, #2
 800344c:	d075      	beq.n	800353a <I2C_MasterReceive_RXNE+0x15c>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d002      	beq.n	800345a <I2C_MasterReceive_RXNE+0x7c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d16f      	bne.n	800353a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f001 fa8e 	bl	800497c <I2C_WaitOnSTOPRequestThroughIT>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d142      	bne.n	80034ec <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003474:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003484:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d10a      	bne.n	80034d6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fdc1 	bl	8003056 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034d4:	e03a      	b.n	800354c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2212      	movs	r2, #18
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fd76 	bl	8002fd6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034ea:	e02f      	b.n	800354c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fd99 	bl	800306a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003538:	e008      	b.n	800354c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	605a      	str	r2, [r3, #4]
}
 800354a:	e7ff      	b.n	800354c <I2C_MasterReceive_RXNE+0x16e>
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80035a2:	e0bd      	b.n	8003720 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d129      	bne.n	8003602 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d00a      	beq.n	80035da <I2C_MasterReceive_BTF+0x86>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d007      	beq.n	80035da <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003600:	e08e      	b.n	8003720 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d176      	bne.n	80036fa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d002      	beq.n	8003618 <I2C_MasterReceive_BTF+0xc4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b10      	cmp	r3, #16
 8003616:	d108      	bne.n	800362a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e019      	b.n	800365e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d002      	beq.n	8003636 <I2C_MasterReceive_BTF+0xe2>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d108      	bne.n	8003648 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e00a      	b.n	800365e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b10      	cmp	r3, #16
 800364c:	d007      	beq.n	800365e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d10a      	bne.n	80036e4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fcba 	bl	8003056 <HAL_I2C_MemRxCpltCallback>
}
 80036e2:	e01d      	b.n	8003720 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2212      	movs	r2, #18
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fc6f 	bl	8002fd6 <HAL_I2C_MasterRxCpltCallback>
}
 80036f8:	e012      	b.n	8003720 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d117      	bne.n	800376c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003754:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003756:	e067      	b.n	8003828 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	b2da      	uxtb	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	611a      	str	r2, [r3, #16]
}
 800376a:	e05d      	b.n	8003828 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d133      	bne.n	80037de <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b21      	cmp	r3, #33	; 0x21
 8003780:	d109      	bne.n	8003796 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003792:	611a      	str	r2, [r3, #16]
 8003794:	e008      	b.n	80037a8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <I2C_Master_SB+0x92>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d032      	beq.n	8003828 <I2C_Master_SB+0x100>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02d      	beq.n	8003828 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037da:	605a      	str	r2, [r3, #4]
}
 80037dc:	e024      	b.n	8003828 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10e      	bne.n	8003804 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	11db      	asrs	r3, r3, #7
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0306 	and.w	r3, r3, #6
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f063 030f 	orn	r3, r3, #15
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]
}
 8003802:	e011      	b.n	8003828 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10d      	bne.n	8003828 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	b29b      	uxth	r3, r3
 8003812:	11db      	asrs	r3, r3, #7
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f063 030e 	orn	r3, r3, #14
 8003820:	b2da      	uxtb	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	b2da      	uxtb	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <I2C_Master_ADD10+0x26>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <I2C_Master_ADD10+0x48>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	605a      	str	r2, [r3, #4]
  }
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003888:	b480      	push	{r7}
 800388a:	b091      	sub	sp, #68	; 0x44
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003896:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b22      	cmp	r3, #34	; 0x22
 80038b0:	f040 8169 	bne.w	8003b86 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <I2C_Master_ADDR+0x54>
 80038bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d10b      	bne.n	80038dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c4:	2300      	movs	r3, #0
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	e160      	b.n	8003b9e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11d      	bne.n	8003920 <I2C_Master_ADDR+0x98>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ec:	d118      	bne.n	8003920 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003912:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	651a      	str	r2, [r3, #80]	; 0x50
 800391e:	e13e      	b.n	8003b9e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e115      	b.n	8003b7e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 808a 	bne.w	8003a72 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003964:	d137      	bne.n	80039d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003984:	d113      	bne.n	80039ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	e0e7      	b.n	8003b7e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	623b      	str	r3, [r7, #32]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e0d3      	b.n	8003b7e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d02e      	beq.n	8003a3a <I2C_Master_ADDR+0x1b2>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d02b      	beq.n	8003a3a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	2b12      	cmp	r3, #18
 80039e6:	d102      	bne.n	80039ee <I2C_Master_ADDR+0x166>
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d125      	bne.n	8003a3a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d00e      	beq.n	8003a12 <I2C_Master_ADDR+0x18a>
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d00b      	beq.n	8003a12 <I2C_Master_ADDR+0x18a>
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d008      	beq.n	8003a12 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e007      	b.n	8003a22 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	e0a1      	b.n	8003b7e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e085      	b.n	8003b7e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d14d      	bne.n	8003b18 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d016      	beq.n	8003ab0 <I2C_Master_ADDR+0x228>
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d013      	beq.n	8003ab0 <I2C_Master_ADDR+0x228>
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d010      	beq.n	8003ab0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e007      	b.n	8003ac0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ace:	d117      	bne.n	8003b00 <I2C_Master_ADDR+0x278>
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad6:	d00b      	beq.n	8003af0 <I2C_Master_ADDR+0x268>
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d008      	beq.n	8003af0 <I2C_Master_ADDR+0x268>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d005      	beq.n	8003af0 <I2C_Master_ADDR+0x268>
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d002      	beq.n	8003af0 <I2C_Master_ADDR+0x268>
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d107      	bne.n	8003b00 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003afe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	e032      	b.n	8003b7e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d117      	bne.n	8003b68 <I2C_Master_ADDR+0x2e0>
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b3e:	d00b      	beq.n	8003b58 <I2C_Master_ADDR+0x2d0>
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d008      	beq.n	8003b58 <I2C_Master_ADDR+0x2d0>
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d005      	beq.n	8003b58 <I2C_Master_ADDR+0x2d0>
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d002      	beq.n	8003b58 <I2C_Master_ADDR+0x2d0>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d107      	bne.n	8003b68 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b66:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b84:	e00b      	b.n	8003b9e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	e7ff      	b.n	8003b9e <I2C_Master_ADDR+0x316>
 8003b9e:	bf00      	nop
 8003ba0:	3744      	adds	r7, #68	; 0x44
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02b      	beq.n	8003c1c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d114      	bne.n	8003c1c <I2C_SlaveTransmit_TXE+0x72>
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b29      	cmp	r3, #41	; 0x29
 8003bf6:	d111      	bne.n	8003c1c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2221      	movs	r2, #33	; 0x21
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2228      	movs	r2, #40	; 0x28
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff f9e7 	bl	8002fea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02c      	beq.n	8003cda <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d114      	bne.n	8003cda <I2C_SlaveReceive_RXNE+0x74>
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb4:	d111      	bne.n	8003cda <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2222      	movs	r2, #34	; 0x22
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2228      	movs	r2, #40	; 0x28
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff f992 	bl	8002ffe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d40:	2b28      	cmp	r3, #40	; 0x28
 8003d42:	d127      	bne.n	8003d94 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	09db      	lsrs	r3, r3, #7
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	81bb      	strh	r3, [r7, #12]
 8003d76:	e002      	b.n	8003d7e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d86:	89ba      	ldrh	r2, [r7, #12]
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff f940 	bl	8003012 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d92:	e00e      	b.n	8003db2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d172      	bne.n	8003f00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b22      	cmp	r3, #34	; 0x22
 8003e1e:	d002      	beq.n	8003e26 <I2C_Slave_STOPF+0x6a>
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b2a      	cmp	r3, #42	; 0x2a
 8003e24:	d135      	bne.n	8003e92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd ffef 	bl	8001e42 <HAL_DMA_GetState>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d049      	beq.n	8003efe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	4a69      	ldr	r2, [pc, #420]	; (8004014 <I2C_Slave_STOPF+0x258>)
 8003e70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd ffc1 	bl	8001dfe <HAL_DMA_Abort_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03d      	beq.n	8003efe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e90:	e035      	b.n	8003efe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd ffb9 	bl	8001e42 <HAL_DMA_GetState>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d014      	beq.n	8003f00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <I2C_Slave_STOPF+0x258>)
 8003edc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd ff8b 	bl	8001dfe <HAL_DMA_Abort_IT>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4798      	blx	r3
 8003efc:	e000      	b.n	8003f00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003efe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03e      	beq.n	8003f88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d112      	bne.n	8003f3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d112      	bne.n	8003f72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f043 0204 	orr.w	r2, r3, #4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f843 	bl	800401c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f96:	e039      	b.n	800400c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9c:	d109      	bne.n	8003fb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2228      	movs	r2, #40	; 0x28
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff f826 	bl	8002ffe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b28      	cmp	r3, #40	; 0x28
 8003fbc:	d111      	bne.n	8003fe2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	; (8004018 <I2C_Slave_STOPF+0x25c>)
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff f827 	bl	800302e <HAL_I2C_ListenCpltCallback>
}
 8003fe0:	e014      	b.n	800400c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	2b22      	cmp	r3, #34	; 0x22
 8003fe8:	d002      	beq.n	8003ff0 <I2C_Slave_STOPF+0x234>
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b22      	cmp	r3, #34	; 0x22
 8003fee:	d10d      	bne.n	800400c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fe fff9 	bl	8002ffe <HAL_I2C_SlaveRxCpltCallback>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	0800457d 	.word	0x0800457d
 8004018:	ffff0000 	.word	0xffff0000

0800401c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004032:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004034:	7bbb      	ldrb	r3, [r7, #14]
 8004036:	2b10      	cmp	r3, #16
 8004038:	d002      	beq.n	8004040 <I2C_ITError+0x24>
 800403a:	7bbb      	ldrb	r3, [r7, #14]
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d10a      	bne.n	8004056 <I2C_ITError+0x3a>
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b22      	cmp	r3, #34	; 0x22
 8004044:	d107      	bne.n	8004056 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004054:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800405c:	2b28      	cmp	r3, #40	; 0x28
 800405e:	d107      	bne.n	8004070 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2228      	movs	r2, #40	; 0x28
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800406e:	e015      	b.n	800409c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	d00a      	beq.n	8004096 <I2C_ITError+0x7a>
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b60      	cmp	r3, #96	; 0x60
 8004084:	d007      	beq.n	8004096 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040aa:	d162      	bne.n	8004172 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d020      	beq.n	800410c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	4a6a      	ldr	r2, [pc, #424]	; (8004278 <I2C_ITError+0x25c>)
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd fe91 	bl	8001dfe <HAL_DMA_Abort_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8089 	beq.w	80041f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004106:	4610      	mov	r0, r2
 8004108:	4798      	blx	r3
 800410a:	e074      	b.n	80041f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	4a59      	ldr	r2, [pc, #356]	; (8004278 <I2C_ITError+0x25c>)
 8004112:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd fe70 	bl	8001dfe <HAL_DMA_Abort_IT>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d068      	beq.n	80041f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d10b      	bne.n	800414a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800416c:	4610      	mov	r0, r2
 800416e:	4798      	blx	r3
 8004170:	e041      	b.n	80041f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b60      	cmp	r3, #96	; 0x60
 800417c:	d125      	bne.n	80041ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d10b      	bne.n	80041b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe ff5b 	bl	800307e <HAL_I2C_AbortCpltCallback>
 80041c8:	e015      	b.n	80041f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d10b      	bne.n	80041f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fe ff3a 	bl	800306a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10e      	bne.n	8004224 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004232:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d113      	bne.n	8004270 <I2C_ITError+0x254>
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b28      	cmp	r3, #40	; 0x28
 800424c:	d110      	bne.n	8004270 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <I2C_ITError+0x260>)
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe fedf 	bl	800302e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	0800457d 	.word	0x0800457d
 800427c:	ffff0000 	.word	0xffff0000

08004280 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	460b      	mov	r3, r1
 8004294:	813b      	strh	r3, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fa08 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d0:	d103      	bne.n	80042da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e05f      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	492d      	ldr	r1, [pc, #180]	; (80043a8 <I2C_RequestMemoryWrite+0x128>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fa40 	bl	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e04c      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	6a39      	ldr	r1, [r7, #32]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 faaa 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b04      	cmp	r3, #4
 8004330:	d107      	bne.n	8004342 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e02b      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	e021      	b.n	800439c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b29b      	uxth	r3, r3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa84 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e005      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004392:	893b      	ldrh	r3, [r7, #8]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	00010002 	.word	0x00010002

080043ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	460b      	mov	r3, r1
 80043c0:	813b      	strh	r3, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f96a 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440c:	d103      	bne.n	8004416 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0aa      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	4952      	ldr	r1, [pc, #328]	; (8004578 <I2C_RequestMemoryRead+0x1cc>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f9a2 	bl	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e097      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fa0c 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e076      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e021      	b.n	80044d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004494:	893b      	ldrh	r3, [r7, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f9e6 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e050      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	6a39      	ldr	r1, [r7, #32]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9cb 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d107      	bne.n	8004500 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e035      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004512:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2200      	movs	r2, #0
 800451c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f8d3 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	d103      	bne.n	8004544 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e013      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	4906      	ldr	r1, [pc, #24]	; (8004578 <I2C_RequestMemoryRead+0x1cc>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f90b 	bl	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	00010002 	.word	0x00010002

0800457c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004596:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <I2C_DMAAbort+0x148>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	08db      	lsrs	r3, r3, #3
 800459c:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <I2C_DMAAbort+0x14c>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0a1a      	lsrs	r2, r3, #8
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00da      	lsls	r2, r3, #3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80045c2:	e00a      	b.n	80045da <I2C_DMAAbort+0x5e>
    }
    count--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d8:	d0ea      	beq.n	80045b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	2200      	movs	r2, #0
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	2200      	movs	r2, #0
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	2200      	movs	r2, #0
 800462e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b60      	cmp	r3, #96	; 0x60
 800464a:	d10e      	bne.n	800466a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7fe fd0b 	bl	800307e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004668:	e027      	b.n	80046ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004670:	2b28      	cmp	r3, #40	; 0x28
 8004672:	d117      	bne.n	80046a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004692:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2228      	movs	r2, #40	; 0x28
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046a2:	e007      	b.n	80046b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046b4:	6978      	ldr	r0, [r7, #20]
 80046b6:	f7fe fcd8 	bl	800306a <HAL_I2C_ErrorCallback>
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000004 	.word	0x20000004
 80046c8:	14f8b589 	.word	0x14f8b589

080046cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046dc:	e025      	b.n	800472a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d021      	beq.n	800472a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fd fa49 	bl	8001b7c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e023      	b.n	8004772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10d      	bne.n	8004750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	e00c      	b.n	800476a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	43da      	mvns	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4013      	ands	r3, r2
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	429a      	cmp	r2, r3
 800476e:	d0b6      	beq.n	80046de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004788:	e051      	b.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004798:	d123      	bne.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e046      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d021      	beq.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fd f9c7 	bl	8001b7c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d116      	bne.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e020      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10c      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	e00b      	b.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	43da      	mvns	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4013      	ands	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d18d      	bne.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004884:	e02d      	b.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f900 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e02d      	b.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d021      	beq.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fd f96d 	bl	8001b7c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e007      	b.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d1ca      	bne.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004906:	e02d      	b.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f8bf 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e02d      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d021      	beq.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004920:	f7fd f92c 	bl	8001b7c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e007      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d1ca      	bne.n	8004908 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	08db      	lsrs	r3, r3, #3
 800498e:	4a13      	ldr	r2, [pc, #76]	; (80049dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	0a1a      	lsrs	r2, r3, #8
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e008      	b.n	80049cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d0e9      	beq.n	800499e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000004 	.word	0x20000004
 80049dc:	14f8b589 	.word	0x14f8b589

080049e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ec:	e042      	b.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d119      	bne.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e029      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fd f8a4 	bl	8001b7c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d1b5      	bne.n	80049ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa2:	d11b      	bne.n	8004adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f043 0204 	orr.w	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004afa:	d103      	bne.n	8004b04 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b02:	e007      	b.n	8004b14 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b0c:	d102      	bne.n	8004b14 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0cc      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d90c      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0b8      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b74:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a58      	ldr	r2, [pc, #352]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a52      	ldr	r2, [pc, #328]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	494d      	ldr	r1, [pc, #308]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d044      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d119      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e07f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d003      	beq.n	8004bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d107      	bne.n	8004bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bde:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e067      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4934      	ldr	r1, [pc, #208]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c10:	f7fc ffb4 	bl	8001b7c <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c18:	f7fc ffb0 	bl	8001b7c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e04f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 020c 	and.w	r2, r3, #12
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d1eb      	bne.n	8004c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d20c      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e032      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4916      	ldr	r1, [pc, #88]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	490e      	ldr	r1, [pc, #56]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ca6:	f000 f855 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	490a      	ldr	r1, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	5ccb      	ldrb	r3, [r1, r3]
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc ff14 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	0800ad48 	.word	0x0800ad48
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	20000008 	.word	0x20000008

08004cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000004 	.word	0x20000004

08004d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d08:	f7ff fff0 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0a9b      	lsrs	r3, r3, #10
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4903      	ldr	r1, [pc, #12]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	0800ad58 	.word	0x0800ad58

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d30:	f7ff ffdc 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0b5b      	lsrs	r3, r3, #13
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4903      	ldr	r1, [pc, #12]	; (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	0800ad58 	.word	0x0800ad58

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d58:	b0ae      	sub	sp, #184	; 0xb8
 8004d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d7a:	4bcb      	ldr	r3, [pc, #812]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	f200 8206 	bhi.w	8005194 <HAL_RCC_GetSysClockFreq+0x440>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08005195 	.word	0x08005195
 8004d98:	08005195 	.word	0x08005195
 8004d9c:	08005195 	.word	0x08005195
 8004da0:	08004dcd 	.word	0x08004dcd
 8004da4:	08005195 	.word	0x08005195
 8004da8:	08005195 	.word	0x08005195
 8004dac:	08005195 	.word	0x08005195
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08005195 	.word	0x08005195
 8004db8:	08005195 	.word	0x08005195
 8004dbc:	08005195 	.word	0x08005195
 8004dc0:	08004fc5 	.word	0x08004fc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc4:	4bb9      	ldr	r3, [pc, #740]	; (80050ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004dca:	e1e7      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dcc:	4bb8      	ldr	r3, [pc, #736]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dd2:	e1e3      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd4:	4bb4      	ldr	r3, [pc, #720]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de0:	4bb1      	ldr	r3, [pc, #708]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d071      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dec:	4bae      	ldr	r3, [pc, #696]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e24:	0150      	lsls	r0, r2, #5
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	1a51      	subs	r1, r2, r1
 8004e2e:	6439      	str	r1, [r7, #64]	; 0x40
 8004e30:	4629      	mov	r1, r5
 8004e32:	eb63 0301 	sbc.w	r3, r3, r1
 8004e36:	647b      	str	r3, [r7, #68]	; 0x44
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004e44:	4649      	mov	r1, r9
 8004e46:	018b      	lsls	r3, r1, #6
 8004e48:	4641      	mov	r1, r8
 8004e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4e:	4641      	mov	r1, r8
 8004e50:	018a      	lsls	r2, r1, #6
 8004e52:	4641      	mov	r1, r8
 8004e54:	1a51      	subs	r1, r2, r1
 8004e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e58:	4649      	mov	r1, r9
 8004e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4641      	mov	r1, r8
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4641      	mov	r1, r8
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4622      	mov	r2, r4
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
 8004e86:	462b      	mov	r3, r5
 8004e88:	460a      	mov	r2, r1
 8004e8a:	eb42 0303 	adc.w	r3, r2, r3
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	024b      	lsls	r3, r1, #9
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	024a      	lsls	r2, r1, #9
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ebc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ec0:	f7fb ff02 	bl	8000cc8 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ece:	e067      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed0:	4b75      	ldr	r3, [pc, #468]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004edc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eea:	2300      	movs	r3, #0
 8004eec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004eee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	f04f 0000 	mov.w	r0, #0
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	0159      	lsls	r1, r3, #5
 8004f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f04:	0150      	lsls	r0, r2, #5
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	1a51      	subs	r1, r2, r1
 8004f0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f10:	4629      	mov	r1, r5
 8004f12:	eb63 0301 	sbc.w	r3, r3, r1
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004f24:	4649      	mov	r1, r9
 8004f26:	018b      	lsls	r3, r1, #6
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f2e:	4641      	mov	r1, r8
 8004f30:	018a      	lsls	r2, r1, #6
 8004f32:	4641      	mov	r1, r8
 8004f34:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f38:	4649      	mov	r1, r9
 8004f3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f52:	4692      	mov	sl, r2
 8004f54:	469b      	mov	fp, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	eb1a 0303 	adds.w	r3, sl, r3
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	462b      	mov	r3, r5
 8004f60:	eb4b 0303 	adc.w	r3, fp, r3
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004f72:	4629      	mov	r1, r5
 8004f74:	028b      	lsls	r3, r1, #10
 8004f76:	4621      	mov	r1, r4
 8004f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	028a      	lsls	r2, r1, #10
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f88:	2200      	movs	r2, #0
 8004f8a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f8c:	677a      	str	r2, [r7, #116]	; 0x74
 8004f8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004f92:	f7fb fe99 	bl	8000cc8 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa0:	4b41      	ldr	r3, [pc, #260]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fc2:	e0eb      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d06b      	beq.n	80050b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fdc:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fee:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ff4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	f04f 0000 	mov.w	r0, #0
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	0159      	lsls	r1, r3, #5
 8005006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500a:	0150      	lsls	r0, r2, #5
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4621      	mov	r1, r4
 8005012:	1a51      	subs	r1, r2, r1
 8005014:	61b9      	str	r1, [r7, #24]
 8005016:	4629      	mov	r1, r5
 8005018:	eb63 0301 	sbc.w	r3, r3, r1
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800502a:	4659      	mov	r1, fp
 800502c:	018b      	lsls	r3, r1, #6
 800502e:	4651      	mov	r1, sl
 8005030:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005034:	4651      	mov	r1, sl
 8005036:	018a      	lsls	r2, r1, #6
 8005038:	4651      	mov	r1, sl
 800503a:	ebb2 0801 	subs.w	r8, r2, r1
 800503e:	4659      	mov	r1, fp
 8005040:	eb63 0901 	sbc.w	r9, r3, r1
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005050:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005054:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005058:	4690      	mov	r8, r2
 800505a:	4699      	mov	r9, r3
 800505c:	4623      	mov	r3, r4
 800505e:	eb18 0303 	adds.w	r3, r8, r3
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	462b      	mov	r3, r5
 8005066:	eb49 0303 	adc.w	r3, r9, r3
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005078:	4629      	mov	r1, r5
 800507a:	024b      	lsls	r3, r1, #9
 800507c:	4621      	mov	r1, r4
 800507e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005082:	4621      	mov	r1, r4
 8005084:	024a      	lsls	r2, r1, #9
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800508e:	2200      	movs	r2, #0
 8005090:	65bb      	str	r3, [r7, #88]	; 0x58
 8005092:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005094:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005098:	f7fb fe16 	bl	8000cc8 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050a6:	e065      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x420>
 80050a8:	40023800 	.word	0x40023800
 80050ac:	00f42400 	.word	0x00f42400
 80050b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b4:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_GetSysClockFreq+0x458>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	099b      	lsrs	r3, r3, #6
 80050ba:	2200      	movs	r2, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	4611      	mov	r1, r2
 80050c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
 80050c6:	2300      	movs	r3, #0
 80050c8:	657b      	str	r3, [r7, #84]	; 0x54
 80050ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f04f 0100 	mov.w	r1, #0
 80050da:	0159      	lsls	r1, r3, #5
 80050dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e0:	0150      	lsls	r0, r2, #5
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4641      	mov	r1, r8
 80050e8:	1a51      	subs	r1, r2, r1
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	4649      	mov	r1, r9
 80050ee:	eb63 0301 	sbc.w	r3, r3, r1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005100:	4659      	mov	r1, fp
 8005102:	018b      	lsls	r3, r1, #6
 8005104:	4651      	mov	r1, sl
 8005106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800510a:	4651      	mov	r1, sl
 800510c:	018a      	lsls	r2, r1, #6
 800510e:	4651      	mov	r1, sl
 8005110:	1a54      	subs	r4, r2, r1
 8005112:	4659      	mov	r1, fp
 8005114:	eb63 0501 	sbc.w	r5, r3, r1
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	00eb      	lsls	r3, r5, #3
 8005122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005126:	00e2      	lsls	r2, r4, #3
 8005128:	4614      	mov	r4, r2
 800512a:	461d      	mov	r5, r3
 800512c:	4643      	mov	r3, r8
 800512e:	18e3      	adds	r3, r4, r3
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	464b      	mov	r3, r9
 8005134:	eb45 0303 	adc.w	r3, r5, r3
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005146:	4629      	mov	r1, r5
 8005148:	028b      	lsls	r3, r1, #10
 800514a:	4621      	mov	r1, r4
 800514c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005150:	4621      	mov	r1, r4
 8005152:	028a      	lsls	r2, r1, #10
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800515c:	2200      	movs	r2, #0
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005160:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005162:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005166:	f7fb fdaf 	bl	8000cc8 <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4613      	mov	r3, r2
 8005170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <HAL_RCC_GetSysClockFreq+0x458>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	0f1b      	lsrs	r3, r3, #28
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005192:	e003      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800519a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800519c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	37b8      	adds	r7, #184	; 0xb8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
 80051b0:	00f42400 	.word	0x00f42400

080051b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e28d      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8083 	beq.w	80052da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051d4:	4b94      	ldr	r3, [pc, #592]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d019      	beq.n	8005214 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051e0:	4b91      	ldr	r3, [pc, #580]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051ec:	4b8e      	ldr	r3, [pc, #568]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f8:	d00c      	beq.n	8005214 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051fa:	4b8b      	ldr	r3, [pc, #556]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d112      	bne.n	800522c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005206:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005212:	d10b      	bne.n	800522c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005214:	4b84      	ldr	r3, [pc, #528]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d05b      	beq.n	80052d8 <HAL_RCC_OscConfig+0x124>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d157      	bne.n	80052d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e25a      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005234:	d106      	bne.n	8005244 <HAL_RCC_OscConfig+0x90>
 8005236:	4b7c      	ldr	r3, [pc, #496]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a7b      	ldr	r2, [pc, #492]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e01d      	b.n	8005280 <HAL_RCC_OscConfig+0xcc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800524c:	d10c      	bne.n	8005268 <HAL_RCC_OscConfig+0xb4>
 800524e:	4b76      	ldr	r3, [pc, #472]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a75      	ldr	r2, [pc, #468]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b73      	ldr	r3, [pc, #460]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a72      	ldr	r2, [pc, #456]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e00b      	b.n	8005280 <HAL_RCC_OscConfig+0xcc>
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6e      	ldr	r2, [pc, #440]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800526e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a6b      	ldr	r2, [pc, #428]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800527a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800527e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d013      	beq.n	80052b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fc fc78 	bl	8001b7c <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005290:	f7fc fc74 	bl	8001b7c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e21f      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a2:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0xdc>
 80052ae:	e014      	b.n	80052da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fc fc64 	bl	8001b7c <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fc fc60 	bl	8001b7c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e20b      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ca:	4b57      	ldr	r3, [pc, #348]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x104>
 80052d6:	e000      	b.n	80052da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d06f      	beq.n	80053c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052e6:	4b50      	ldr	r3, [pc, #320]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d017      	beq.n	8005322 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052f2:	4b4d      	ldr	r3, [pc, #308]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d105      	bne.n	800530a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530a:	4b47      	ldr	r3, [pc, #284]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d11c      	bne.n	8005350 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005316:	4b44      	ldr	r3, [pc, #272]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d116      	bne.n	8005350 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_RCC_OscConfig+0x186>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d001      	beq.n	800533a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e1d3      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4937      	ldr	r1, [pc, #220]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534e:	e03a      	b.n	80053c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005358:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_OscConfig+0x278>)
 800535a:	2201      	movs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fc fc0d 	bl	8001b7c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005366:	f7fc fc09 	bl	8001b7c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e1b4      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005378:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005384:	4b28      	ldr	r3, [pc, #160]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4925      	ldr	r1, [pc, #148]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
 8005398:	e015      	b.n	80053c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_OscConfig+0x278>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fc fbec 	bl	8001b7c <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a8:	f7fc fbe8 	bl	8001b7c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e193      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d036      	beq.n	8005440 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fc fbcc 	bl	8001b7c <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e8:	f7fc fbc8 	bl	8001b7c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e173      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_OscConfig+0x274>)
 80053fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x234>
 8005406:	e01b      	b.n	8005440 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_OscConfig+0x27c>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fc fbb5 	bl	8001b7c <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005414:	e00e      	b.n	8005434 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005416:	f7fc fbb1 	bl	8001b7c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d907      	bls.n	8005434 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e15c      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
 8005428:	40023800 	.word	0x40023800
 800542c:	42470000 	.word	0x42470000
 8005430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005434:	4b8a      	ldr	r3, [pc, #552]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ea      	bne.n	8005416 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8097 	beq.w	800557c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005452:	4b83      	ldr	r3, [pc, #524]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	4b7f      	ldr	r3, [pc, #508]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a7e      	ldr	r2, [pc, #504]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b7c      	ldr	r3, [pc, #496]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547a:	2301      	movs	r3, #1
 800547c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	4b79      	ldr	r3, [pc, #484]	; (8005664 <HAL_RCC_OscConfig+0x4b0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d118      	bne.n	80054bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548a:	4b76      	ldr	r3, [pc, #472]	; (8005664 <HAL_RCC_OscConfig+0x4b0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a75      	ldr	r2, [pc, #468]	; (8005664 <HAL_RCC_OscConfig+0x4b0>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005496:	f7fc fb71 	bl	8001b7c <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549e:	f7fc fb6d 	bl	8001b7c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e118      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b0:	4b6c      	ldr	r3, [pc, #432]	; (8005664 <HAL_RCC_OscConfig+0x4b0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d106      	bne.n	80054d2 <HAL_RCC_OscConfig+0x31e>
 80054c4:	4b66      	ldr	r3, [pc, #408]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	4a65      	ldr	r2, [pc, #404]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6713      	str	r3, [r2, #112]	; 0x70
 80054d0:	e01c      	b.n	800550c <HAL_RCC_OscConfig+0x358>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d10c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x340>
 80054da:	4b61      	ldr	r3, [pc, #388]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a60      	ldr	r2, [pc, #384]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
 80054e6:	4b5e      	ldr	r3, [pc, #376]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a5d      	ldr	r2, [pc, #372]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
 80054f2:	e00b      	b.n	800550c <HAL_RCC_OscConfig+0x358>
 80054f4:	4b5a      	ldr	r3, [pc, #360]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4a59      	ldr	r2, [pc, #356]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005500:	4b57      	ldr	r3, [pc, #348]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	4a56      	ldr	r2, [pc, #344]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005506:	f023 0304 	bic.w	r3, r3, #4
 800550a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d015      	beq.n	8005540 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fc fb32 	bl	8001b7c <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fc fb2e 	bl	8001b7c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0d7      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005532:	4b4b      	ldr	r3, [pc, #300]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ee      	beq.n	800551c <HAL_RCC_OscConfig+0x368>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005540:	f7fc fb1c 	bl	8001b7c <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005546:	e00a      	b.n	800555e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005548:	f7fc fb18 	bl	8001b7c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	; 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0c1      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555e:	4b40      	ldr	r3, [pc, #256]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1ee      	bne.n	8005548 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005570:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	4a3a      	ldr	r2, [pc, #232]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80ad 	beq.w	80056e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b08      	cmp	r3, #8
 8005590:	d060      	beq.n	8005654 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d145      	bne.n	8005626 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559a:	4b33      	ldr	r3, [pc, #204]	; (8005668 <HAL_RCC_OscConfig+0x4b4>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fc faec 	bl	8001b7c <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a8:	f7fc fae8 	bl	8001b7c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e093      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	019b      	lsls	r3, r3, #6
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	3b01      	subs	r3, #1
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	491b      	ldr	r1, [pc, #108]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <HAL_RCC_OscConfig+0x4b4>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fc fabd 	bl	8001b7c <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005606:	f7fc fab9 	bl	8001b7c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e064      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x452>
 8005624:	e05c      	b.n	80056e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <HAL_RCC_OscConfig+0x4b4>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc faa6 	bl	8001b7c <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005634:	f7fc faa2 	bl	8001b7c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e04d      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x480>
 8005652:	e045      	b.n	80056e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e040      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
 8005660:	40023800 	.word	0x40023800
 8005664:	40007000 	.word	0x40007000
 8005668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800566c:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <HAL_RCC_OscConfig+0x538>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d030      	beq.n	80056dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d129      	bne.n	80056dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d122      	bne.n	80056dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d119      	bne.n	80056dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	3b01      	subs	r3, #1
 80056b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d10f      	bne.n	80056dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800

080056f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e03f      	b.n	8005782 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc f84c 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f929 	bl	800598c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08a      	sub	sp, #40	; 0x28
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d17c      	bne.n	80058a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_Transmit+0x2c>
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e075      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x3e>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e06e      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2221      	movs	r2, #33	; 0x21
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057de:	f7fc f9cd 	bl	8001b7c <HAL_GetTick>
 80057e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d108      	bne.n	800580c <HAL_UART_Transmit+0x82>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e003      	b.n	8005814 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800581c:	e02a      	b.n	8005874 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f840 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e036      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800584c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	3302      	adds	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e007      	b.n	8005866 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1cf      	bne.n	800581e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2140      	movs	r1, #64	; 0x40
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f810 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e006      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b090      	sub	sp, #64	; 0x40
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	e050      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d04c      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <UART_WaitOnFlagUntilTimeout+0x30>
 80058ce:	f7fc f955 	bl	8001b7c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058da:	429a      	cmp	r2, r3
 80058dc:	d241      	bcs.n	8005962 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e5      	bne.n	80058de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	613b      	str	r3, [r7, #16]
   return(result);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005932:	623a      	str	r2, [r7, #32]
 8005934:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	69f9      	ldr	r1, [r7, #28]
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00f      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	429a      	cmp	r2, r3
 800597e:	d09f      	beq.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3740      	adds	r7, #64	; 0x40
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800598c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005990:	b0c0      	sub	sp, #256	; 0x100
 8005992:	af00      	add	r7, sp, #0
 8005994:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	68d9      	ldr	r1, [r3, #12]
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	ea40 0301 	orr.w	r3, r0, r1
 80059b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059e4:	f021 010c 	bic.w	r1, r1, #12
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059f2:	430b      	orrs	r3, r1
 80059f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	6999      	ldr	r1, [r3, #24]
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	ea40 0301 	orr.w	r3, r0, r1
 8005a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <UART_SetConfig+0x2cc>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d005      	beq.n	8005a2c <UART_SetConfig+0xa0>
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b8d      	ldr	r3, [pc, #564]	; (8005c5c <UART_SetConfig+0x2d0>)
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d104      	bne.n	8005a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a2c:	f7ff f97e 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8005a30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a34:	e003      	b.n	8005a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a36:	f7ff f965 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8005a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a48:	f040 810c 	bne.w	8005c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	1891      	adds	r1, r2, r2
 8005a64:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a66:	415b      	adcs	r3, r3
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a6e:	4621      	mov	r1, r4
 8005a70:	eb12 0801 	adds.w	r8, r2, r1
 8005a74:	4629      	mov	r1, r5
 8005a76:	eb43 0901 	adc.w	r9, r3, r1
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a8e:	4690      	mov	r8, r2
 8005a90:	4699      	mov	r9, r3
 8005a92:	4623      	mov	r3, r4
 8005a94:	eb18 0303 	adds.w	r3, r8, r3
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	eb49 0303 	adc.w	r3, r9, r3
 8005aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005aba:	460b      	mov	r3, r1
 8005abc:	18db      	adds	r3, r3, r3
 8005abe:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	eb42 0303 	adc.w	r3, r2, r3
 8005ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ad0:	f7fb f8fa 	bl	8000cc8 <__aeabi_uldivmod>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005ada:	fba3 2302 	umull	r2, r3, r3, r2
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	011c      	lsls	r4, r3, #4
 8005ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	1891      	adds	r1, r2, r2
 8005afa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005afc:	415b      	adcs	r3, r3
 8005afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b04:	4641      	mov	r1, r8
 8005b06:	eb12 0a01 	adds.w	sl, r2, r1
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b24:	4692      	mov	sl, r2
 8005b26:	469b      	mov	fp, r3
 8005b28:	4643      	mov	r3, r8
 8005b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b32:	464b      	mov	r3, r9
 8005b34:	eb4b 0303 	adc.w	r3, fp, r3
 8005b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b50:	460b      	mov	r3, r1
 8005b52:	18db      	adds	r3, r3, r3
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40
 8005b56:	4613      	mov	r3, r2
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b66:	f7fb f8af 	bl	8000cc8 <__aeabi_uldivmod>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005b72:	fba3 2301 	umull	r2, r3, r3, r1
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2264      	movs	r2, #100	; 0x64
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	1acb      	subs	r3, r1, r3
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b86:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005b88:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b94:	441c      	add	r4, r3
 8005b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	1891      	adds	r1, r2, r2
 8005bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bb0:	415b      	adcs	r3, r3
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bb8:	4641      	mov	r1, r8
 8005bba:	1851      	adds	r1, r2, r1
 8005bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	414b      	adcs	r3, r1
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bd0:	4659      	mov	r1, fp
 8005bd2:	00cb      	lsls	r3, r1, #3
 8005bd4:	4651      	mov	r1, sl
 8005bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bda:	4651      	mov	r1, sl
 8005bdc:	00ca      	lsls	r2, r1, #3
 8005bde:	4610      	mov	r0, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	4642      	mov	r2, r8
 8005be6:	189b      	adds	r3, r3, r2
 8005be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bec:	464b      	mov	r3, r9
 8005bee:	460a      	mov	r2, r1
 8005bf0:	eb42 0303 	adc.w	r3, r2, r3
 8005bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	18db      	adds	r3, r3, r3
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c12:	4613      	mov	r3, r2
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c22:	f7fb f851 	bl	8000cc8 <__aeabi_uldivmod>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	2164      	movs	r1, #100	; 0x64
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	3332      	adds	r3, #50	; 0x32
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <UART_SetConfig+0x2d4>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	f003 0207 	and.w	r2, r3, #7
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4422      	add	r2, r4
 8005c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c54:	e105      	b.n	8005e62 <UART_SetConfig+0x4d6>
 8005c56:	bf00      	nop
 8005c58:	40011000 	.word	0x40011000
 8005c5c:	40011400 	.word	0x40011400
 8005c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c76:	4642      	mov	r2, r8
 8005c78:	464b      	mov	r3, r9
 8005c7a:	1891      	adds	r1, r2, r2
 8005c7c:	6239      	str	r1, [r7, #32]
 8005c7e:	415b      	adcs	r3, r3
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
 8005c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c86:	4641      	mov	r1, r8
 8005c88:	1854      	adds	r4, r2, r1
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	eb43 0501 	adc.w	r5, r3, r1
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	00eb      	lsls	r3, r5, #3
 8005c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c9e:	00e2      	lsls	r2, r4, #3
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	18e3      	adds	r3, r4, r3
 8005ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cac:	464b      	mov	r3, r9
 8005cae:	eb45 0303 	adc.w	r3, r5, r3
 8005cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	008b      	lsls	r3, r1, #2
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cdc:	4621      	mov	r1, r4
 8005cde:	008a      	lsls	r2, r1, #2
 8005ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ce4:	f7fa fff0 	bl	8000cc8 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4b60      	ldr	r3, [pc, #384]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005cee:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	011c      	lsls	r4, r3, #4
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	1891      	adds	r1, r2, r2
 8005d0e:	61b9      	str	r1, [r7, #24]
 8005d10:	415b      	adcs	r3, r3
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d18:	4641      	mov	r1, r8
 8005d1a:	1851      	adds	r1, r2, r1
 8005d1c:	6139      	str	r1, [r7, #16]
 8005d1e:	4649      	mov	r1, r9
 8005d20:	414b      	adcs	r3, r1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d30:	4659      	mov	r1, fp
 8005d32:	00cb      	lsls	r3, r1, #3
 8005d34:	4651      	mov	r1, sl
 8005d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	00ca      	lsls	r2, r1, #3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	4642      	mov	r2, r8
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	460a      	mov	r2, r1
 8005d50:	eb42 0303 	adc.w	r3, r2, r3
 8005d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d70:	4649      	mov	r1, r9
 8005d72:	008b      	lsls	r3, r1, #2
 8005d74:	4641      	mov	r1, r8
 8005d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	008a      	lsls	r2, r1, #2
 8005d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d82:	f7fa ffa1 	bl	8000cc8 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	2164      	movs	r1, #100	; 0x64
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	3332      	adds	r3, #50	; 0x32
 8005d9e:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005daa:	441c      	add	r4, r3
 8005dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db0:	2200      	movs	r2, #0
 8005db2:	673b      	str	r3, [r7, #112]	; 0x70
 8005db4:	677a      	str	r2, [r7, #116]	; 0x74
 8005db6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	1891      	adds	r1, r2, r2
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	415b      	adcs	r3, r3
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dca:	4641      	mov	r1, r8
 8005dcc:	1851      	adds	r1, r2, r1
 8005dce:	6039      	str	r1, [r7, #0]
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	414b      	adcs	r3, r1
 8005dd4:	607b      	str	r3, [r7, #4]
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005de2:	4659      	mov	r1, fp
 8005de4:	00cb      	lsls	r3, r1, #3
 8005de6:	4651      	mov	r1, sl
 8005de8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dec:	4651      	mov	r1, sl
 8005dee:	00ca      	lsls	r2, r1, #3
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	4603      	mov	r3, r0
 8005df6:	4642      	mov	r2, r8
 8005df8:	189b      	adds	r3, r3, r2
 8005dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	460a      	mov	r2, r1
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e10:	667a      	str	r2, [r7, #100]	; 0x64
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e1e:	4649      	mov	r1, r9
 8005e20:	008b      	lsls	r3, r1, #2
 8005e22:	4641      	mov	r1, r8
 8005e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e28:	4641      	mov	r1, r8
 8005e2a:	008a      	lsls	r2, r1, #2
 8005e2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e30:	f7fa ff4a 	bl	8000cc8 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	2164      	movs	r1, #100	; 0x64
 8005e42:	fb01 f303 	mul.w	r3, r1, r3
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	3332      	adds	r3, #50	; 0x32
 8005e4c:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <UART_SetConfig+0x4e4>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	f003 020f 	and.w	r2, r3, #15
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4422      	add	r2, r4
 8005e60:	609a      	str	r2, [r3, #8]
}
 8005e62:	bf00      	nop
 8005e64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e6e:	bf00      	nop
 8005e70:	51eb851f 	.word	0x51eb851f

08005e74 <atan2>:
 8005e74:	f000 b800 	b.w	8005e78 <__ieee754_atan2>

08005e78 <__ieee754_atan2>:
 8005e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e7c:	ec57 6b11 	vmov	r6, r7, d1
 8005e80:	4273      	negs	r3, r6
 8005e82:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006008 <__ieee754_atan2+0x190>
 8005e86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005e8a:	4333      	orrs	r3, r6
 8005e8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005e90:	4573      	cmp	r3, lr
 8005e92:	ec51 0b10 	vmov	r0, r1, d0
 8005e96:	ee11 8a10 	vmov	r8, s2
 8005e9a:	d80a      	bhi.n	8005eb2 <__ieee754_atan2+0x3a>
 8005e9c:	4244      	negs	r4, r0
 8005e9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ea2:	4304      	orrs	r4, r0
 8005ea4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005ea8:	4574      	cmp	r4, lr
 8005eaa:	ee10 9a10 	vmov	r9, s0
 8005eae:	468c      	mov	ip, r1
 8005eb0:	d907      	bls.n	8005ec2 <__ieee754_atan2+0x4a>
 8005eb2:	4632      	mov	r2, r6
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	f7fa fa09 	bl	80002cc <__adddf3>
 8005eba:	ec41 0b10 	vmov	d0, r0, r1
 8005ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005ec6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005eca:	4334      	orrs	r4, r6
 8005ecc:	d103      	bne.n	8005ed6 <__ieee754_atan2+0x5e>
 8005ece:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed2:	f000 b89d 	b.w	8006010 <atan>
 8005ed6:	17bc      	asrs	r4, r7, #30
 8005ed8:	f004 0402 	and.w	r4, r4, #2
 8005edc:	ea53 0909 	orrs.w	r9, r3, r9
 8005ee0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005ee4:	d107      	bne.n	8005ef6 <__ieee754_atan2+0x7e>
 8005ee6:	2c02      	cmp	r4, #2
 8005ee8:	d060      	beq.n	8005fac <__ieee754_atan2+0x134>
 8005eea:	2c03      	cmp	r4, #3
 8005eec:	d1e5      	bne.n	8005eba <__ieee754_atan2+0x42>
 8005eee:	a142      	add	r1, pc, #264	; (adr r1, 8005ff8 <__ieee754_atan2+0x180>)
 8005ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef4:	e7e1      	b.n	8005eba <__ieee754_atan2+0x42>
 8005ef6:	ea52 0808 	orrs.w	r8, r2, r8
 8005efa:	d106      	bne.n	8005f0a <__ieee754_atan2+0x92>
 8005efc:	f1bc 0f00 	cmp.w	ip, #0
 8005f00:	da5f      	bge.n	8005fc2 <__ieee754_atan2+0x14a>
 8005f02:	a13f      	add	r1, pc, #252	; (adr r1, 8006000 <__ieee754_atan2+0x188>)
 8005f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f08:	e7d7      	b.n	8005eba <__ieee754_atan2+0x42>
 8005f0a:	4572      	cmp	r2, lr
 8005f0c:	d10f      	bne.n	8005f2e <__ieee754_atan2+0xb6>
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f14:	d107      	bne.n	8005f26 <__ieee754_atan2+0xae>
 8005f16:	2c02      	cmp	r4, #2
 8005f18:	d84c      	bhi.n	8005fb4 <__ieee754_atan2+0x13c>
 8005f1a:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <__ieee754_atan2+0x178>)
 8005f1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005f20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005f24:	e7c9      	b.n	8005eba <__ieee754_atan2+0x42>
 8005f26:	2c02      	cmp	r4, #2
 8005f28:	d848      	bhi.n	8005fbc <__ieee754_atan2+0x144>
 8005f2a:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <__ieee754_atan2+0x17c>)
 8005f2c:	e7f6      	b.n	8005f1c <__ieee754_atan2+0xa4>
 8005f2e:	4573      	cmp	r3, lr
 8005f30:	d0e4      	beq.n	8005efc <__ieee754_atan2+0x84>
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005f38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005f3c:	da1e      	bge.n	8005f7c <__ieee754_atan2+0x104>
 8005f3e:	2f00      	cmp	r7, #0
 8005f40:	da01      	bge.n	8005f46 <__ieee754_atan2+0xce>
 8005f42:	323c      	adds	r2, #60	; 0x3c
 8005f44:	db1e      	blt.n	8005f84 <__ieee754_atan2+0x10c>
 8005f46:	4632      	mov	r2, r6
 8005f48:	463b      	mov	r3, r7
 8005f4a:	f7fa fc9f 	bl	800088c <__aeabi_ddiv>
 8005f4e:	ec41 0b10 	vmov	d0, r0, r1
 8005f52:	f000 f9fd 	bl	8006350 <fabs>
 8005f56:	f000 f85b 	bl	8006010 <atan>
 8005f5a:	ec51 0b10 	vmov	r0, r1, d0
 8005f5e:	2c01      	cmp	r4, #1
 8005f60:	d013      	beq.n	8005f8a <__ieee754_atan2+0x112>
 8005f62:	2c02      	cmp	r4, #2
 8005f64:	d015      	beq.n	8005f92 <__ieee754_atan2+0x11a>
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	d0a7      	beq.n	8005eba <__ieee754_atan2+0x42>
 8005f6a:	a319      	add	r3, pc, #100	; (adr r3, 8005fd0 <__ieee754_atan2+0x158>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa f9aa 	bl	80002c8 <__aeabi_dsub>
 8005f74:	a318      	add	r3, pc, #96	; (adr r3, 8005fd8 <__ieee754_atan2+0x160>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	e014      	b.n	8005fa6 <__ieee754_atan2+0x12e>
 8005f7c:	a118      	add	r1, pc, #96	; (adr r1, 8005fe0 <__ieee754_atan2+0x168>)
 8005f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f82:	e7ec      	b.n	8005f5e <__ieee754_atan2+0xe6>
 8005f84:	2000      	movs	r0, #0
 8005f86:	2100      	movs	r1, #0
 8005f88:	e7e9      	b.n	8005f5e <__ieee754_atan2+0xe6>
 8005f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f8e:	4619      	mov	r1, r3
 8005f90:	e793      	b.n	8005eba <__ieee754_atan2+0x42>
 8005f92:	a30f      	add	r3, pc, #60	; (adr r3, 8005fd0 <__ieee754_atan2+0x158>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f7fa f996 	bl	80002c8 <__aeabi_dsub>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	a10d      	add	r1, pc, #52	; (adr r1, 8005fd8 <__ieee754_atan2+0x160>)
 8005fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa6:	f7fa f98f 	bl	80002c8 <__aeabi_dsub>
 8005faa:	e786      	b.n	8005eba <__ieee754_atan2+0x42>
 8005fac:	a10a      	add	r1, pc, #40	; (adr r1, 8005fd8 <__ieee754_atan2+0x160>)
 8005fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fb2:	e782      	b.n	8005eba <__ieee754_atan2+0x42>
 8005fb4:	a10c      	add	r1, pc, #48	; (adr r1, 8005fe8 <__ieee754_atan2+0x170>)
 8005fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fba:	e77e      	b.n	8005eba <__ieee754_atan2+0x42>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	e77b      	b.n	8005eba <__ieee754_atan2+0x42>
 8005fc2:	a107      	add	r1, pc, #28	; (adr r1, 8005fe0 <__ieee754_atan2+0x168>)
 8005fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fc8:	e777      	b.n	8005eba <__ieee754_atan2+0x42>
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	33145c07 	.word	0x33145c07
 8005fd4:	3ca1a626 	.word	0x3ca1a626
 8005fd8:	54442d18 	.word	0x54442d18
 8005fdc:	400921fb 	.word	0x400921fb
 8005fe0:	54442d18 	.word	0x54442d18
 8005fe4:	3ff921fb 	.word	0x3ff921fb
 8005fe8:	54442d18 	.word	0x54442d18
 8005fec:	3fe921fb 	.word	0x3fe921fb
 8005ff0:	0800ad60 	.word	0x0800ad60
 8005ff4:	0800ad78 	.word	0x0800ad78
 8005ff8:	54442d18 	.word	0x54442d18
 8005ffc:	c00921fb 	.word	0xc00921fb
 8006000:	54442d18 	.word	0x54442d18
 8006004:	bff921fb 	.word	0xbff921fb
 8006008:	7ff00000 	.word	0x7ff00000
 800600c:	00000000 	.word	0x00000000

08006010 <atan>:
 8006010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	ec55 4b10 	vmov	r4, r5, d0
 8006018:	4bc3      	ldr	r3, [pc, #780]	; (8006328 <atan+0x318>)
 800601a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800601e:	429e      	cmp	r6, r3
 8006020:	46ab      	mov	fp, r5
 8006022:	dd18      	ble.n	8006056 <atan+0x46>
 8006024:	4bc1      	ldr	r3, [pc, #772]	; (800632c <atan+0x31c>)
 8006026:	429e      	cmp	r6, r3
 8006028:	dc01      	bgt.n	800602e <atan+0x1e>
 800602a:	d109      	bne.n	8006040 <atan+0x30>
 800602c:	b144      	cbz	r4, 8006040 <atan+0x30>
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	4620      	mov	r0, r4
 8006034:	4629      	mov	r1, r5
 8006036:	f7fa f949 	bl	80002cc <__adddf3>
 800603a:	4604      	mov	r4, r0
 800603c:	460d      	mov	r5, r1
 800603e:	e006      	b.n	800604e <atan+0x3e>
 8006040:	f1bb 0f00 	cmp.w	fp, #0
 8006044:	f300 8131 	bgt.w	80062aa <atan+0x29a>
 8006048:	a59b      	add	r5, pc, #620	; (adr r5, 80062b8 <atan+0x2a8>)
 800604a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800604e:	ec45 4b10 	vmov	d0, r4, r5
 8006052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	4bb6      	ldr	r3, [pc, #728]	; (8006330 <atan+0x320>)
 8006058:	429e      	cmp	r6, r3
 800605a:	dc14      	bgt.n	8006086 <atan+0x76>
 800605c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006060:	429e      	cmp	r6, r3
 8006062:	dc0d      	bgt.n	8006080 <atan+0x70>
 8006064:	a396      	add	r3, pc, #600	; (adr r3, 80062c0 <atan+0x2b0>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	ee10 0a10 	vmov	r0, s0
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa f92c 	bl	80002cc <__adddf3>
 8006074:	4baf      	ldr	r3, [pc, #700]	; (8006334 <atan+0x324>)
 8006076:	2200      	movs	r2, #0
 8006078:	f7fa fd6e 	bl	8000b58 <__aeabi_dcmpgt>
 800607c:	2800      	cmp	r0, #0
 800607e:	d1e6      	bne.n	800604e <atan+0x3e>
 8006080:	f04f 3aff 	mov.w	sl, #4294967295
 8006084:	e02b      	b.n	80060de <atan+0xce>
 8006086:	f000 f963 	bl	8006350 <fabs>
 800608a:	4bab      	ldr	r3, [pc, #684]	; (8006338 <atan+0x328>)
 800608c:	429e      	cmp	r6, r3
 800608e:	ec55 4b10 	vmov	r4, r5, d0
 8006092:	f300 80bf 	bgt.w	8006214 <atan+0x204>
 8006096:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800609a:	429e      	cmp	r6, r3
 800609c:	f300 80a0 	bgt.w	80061e0 <atan+0x1d0>
 80060a0:	ee10 2a10 	vmov	r2, s0
 80060a4:	ee10 0a10 	vmov	r0, s0
 80060a8:	462b      	mov	r3, r5
 80060aa:	4629      	mov	r1, r5
 80060ac:	f7fa f90e 	bl	80002cc <__adddf3>
 80060b0:	4ba0      	ldr	r3, [pc, #640]	; (8006334 <atan+0x324>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	f7fa f908 	bl	80002c8 <__aeabi_dsub>
 80060b8:	2200      	movs	r2, #0
 80060ba:	4606      	mov	r6, r0
 80060bc:	460f      	mov	r7, r1
 80060be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f7fa f901 	bl	80002cc <__adddf3>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa fbdb 	bl	800088c <__aeabi_ddiv>
 80060d6:	f04f 0a00 	mov.w	sl, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	460d      	mov	r5, r1
 80060de:	4622      	mov	r2, r4
 80060e0:	462b      	mov	r3, r5
 80060e2:	4620      	mov	r0, r4
 80060e4:	4629      	mov	r1, r5
 80060e6:	f7fa faa7 	bl	8000638 <__aeabi_dmul>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4680      	mov	r8, r0
 80060f0:	4689      	mov	r9, r1
 80060f2:	f7fa faa1 	bl	8000638 <__aeabi_dmul>
 80060f6:	a374      	add	r3, pc, #464	; (adr r3, 80062c8 <atan+0x2b8>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	f7fa fa9a 	bl	8000638 <__aeabi_dmul>
 8006104:	a372      	add	r3, pc, #456	; (adr r3, 80062d0 <atan+0x2c0>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f7fa f8df 	bl	80002cc <__adddf3>
 800610e:	4632      	mov	r2, r6
 8006110:	463b      	mov	r3, r7
 8006112:	f7fa fa91 	bl	8000638 <__aeabi_dmul>
 8006116:	a370      	add	r3, pc, #448	; (adr r3, 80062d8 <atan+0x2c8>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f7fa f8d6 	bl	80002cc <__adddf3>
 8006120:	4632      	mov	r2, r6
 8006122:	463b      	mov	r3, r7
 8006124:	f7fa fa88 	bl	8000638 <__aeabi_dmul>
 8006128:	a36d      	add	r3, pc, #436	; (adr r3, 80062e0 <atan+0x2d0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa f8cd 	bl	80002cc <__adddf3>
 8006132:	4632      	mov	r2, r6
 8006134:	463b      	mov	r3, r7
 8006136:	f7fa fa7f 	bl	8000638 <__aeabi_dmul>
 800613a:	a36b      	add	r3, pc, #428	; (adr r3, 80062e8 <atan+0x2d8>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f7fa f8c4 	bl	80002cc <__adddf3>
 8006144:	4632      	mov	r2, r6
 8006146:	463b      	mov	r3, r7
 8006148:	f7fa fa76 	bl	8000638 <__aeabi_dmul>
 800614c:	a368      	add	r3, pc, #416	; (adr r3, 80062f0 <atan+0x2e0>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa f8bb 	bl	80002cc <__adddf3>
 8006156:	4642      	mov	r2, r8
 8006158:	464b      	mov	r3, r9
 800615a:	f7fa fa6d 	bl	8000638 <__aeabi_dmul>
 800615e:	a366      	add	r3, pc, #408	; (adr r3, 80062f8 <atan+0x2e8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	4680      	mov	r8, r0
 8006166:	4689      	mov	r9, r1
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa fa64 	bl	8000638 <__aeabi_dmul>
 8006170:	a363      	add	r3, pc, #396	; (adr r3, 8006300 <atan+0x2f0>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa f8a7 	bl	80002c8 <__aeabi_dsub>
 800617a:	4632      	mov	r2, r6
 800617c:	463b      	mov	r3, r7
 800617e:	f7fa fa5b 	bl	8000638 <__aeabi_dmul>
 8006182:	a361      	add	r3, pc, #388	; (adr r3, 8006308 <atan+0x2f8>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f89e 	bl	80002c8 <__aeabi_dsub>
 800618c:	4632      	mov	r2, r6
 800618e:	463b      	mov	r3, r7
 8006190:	f7fa fa52 	bl	8000638 <__aeabi_dmul>
 8006194:	a35e      	add	r3, pc, #376	; (adr r3, 8006310 <atan+0x300>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa f895 	bl	80002c8 <__aeabi_dsub>
 800619e:	4632      	mov	r2, r6
 80061a0:	463b      	mov	r3, r7
 80061a2:	f7fa fa49 	bl	8000638 <__aeabi_dmul>
 80061a6:	a35c      	add	r3, pc, #368	; (adr r3, 8006318 <atan+0x308>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fa f88c 	bl	80002c8 <__aeabi_dsub>
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	f7fa fa40 	bl	8000638 <__aeabi_dmul>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4640      	mov	r0, r8
 80061be:	4649      	mov	r1, r9
 80061c0:	f7fa f884 	bl	80002cc <__adddf3>
 80061c4:	4622      	mov	r2, r4
 80061c6:	462b      	mov	r3, r5
 80061c8:	f7fa fa36 	bl	8000638 <__aeabi_dmul>
 80061cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	d14b      	bne.n	800626e <atan+0x25e>
 80061d6:	4620      	mov	r0, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	f7fa f875 	bl	80002c8 <__aeabi_dsub>
 80061de:	e72c      	b.n	800603a <atan+0x2a>
 80061e0:	ee10 0a10 	vmov	r0, s0
 80061e4:	4b53      	ldr	r3, [pc, #332]	; (8006334 <atan+0x324>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	4629      	mov	r1, r5
 80061ea:	f7fa f86d 	bl	80002c8 <__aeabi_dsub>
 80061ee:	4b51      	ldr	r3, [pc, #324]	; (8006334 <atan+0x324>)
 80061f0:	4606      	mov	r6, r0
 80061f2:	460f      	mov	r7, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f867 	bl	80002cc <__adddf3>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4630      	mov	r0, r6
 8006204:	4639      	mov	r1, r7
 8006206:	f7fa fb41 	bl	800088c <__aeabi_ddiv>
 800620a:	f04f 0a01 	mov.w	sl, #1
 800620e:	4604      	mov	r4, r0
 8006210:	460d      	mov	r5, r1
 8006212:	e764      	b.n	80060de <atan+0xce>
 8006214:	4b49      	ldr	r3, [pc, #292]	; (800633c <atan+0x32c>)
 8006216:	429e      	cmp	r6, r3
 8006218:	da1d      	bge.n	8006256 <atan+0x246>
 800621a:	ee10 0a10 	vmov	r0, s0
 800621e:	4b48      	ldr	r3, [pc, #288]	; (8006340 <atan+0x330>)
 8006220:	2200      	movs	r2, #0
 8006222:	4629      	mov	r1, r5
 8006224:	f7fa f850 	bl	80002c8 <__aeabi_dsub>
 8006228:	4b45      	ldr	r3, [pc, #276]	; (8006340 <atan+0x330>)
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	2200      	movs	r2, #0
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f7fa fa00 	bl	8000638 <__aeabi_dmul>
 8006238:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <atan+0x324>)
 800623a:	2200      	movs	r2, #0
 800623c:	f7fa f846 	bl	80002cc <__adddf3>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4630      	mov	r0, r6
 8006246:	4639      	mov	r1, r7
 8006248:	f7fa fb20 	bl	800088c <__aeabi_ddiv>
 800624c:	f04f 0a02 	mov.w	sl, #2
 8006250:	4604      	mov	r4, r0
 8006252:	460d      	mov	r5, r1
 8006254:	e743      	b.n	80060de <atan+0xce>
 8006256:	462b      	mov	r3, r5
 8006258:	ee10 2a10 	vmov	r2, s0
 800625c:	4939      	ldr	r1, [pc, #228]	; (8006344 <atan+0x334>)
 800625e:	2000      	movs	r0, #0
 8006260:	f7fa fb14 	bl	800088c <__aeabi_ddiv>
 8006264:	f04f 0a03 	mov.w	sl, #3
 8006268:	4604      	mov	r4, r0
 800626a:	460d      	mov	r5, r1
 800626c:	e737      	b.n	80060de <atan+0xce>
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <atan+0x338>)
 8006270:	4e36      	ldr	r6, [pc, #216]	; (800634c <atan+0x33c>)
 8006272:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006276:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800627a:	e9da 2300 	ldrd	r2, r3, [sl]
 800627e:	f7fa f823 	bl	80002c8 <__aeabi_dsub>
 8006282:	4622      	mov	r2, r4
 8006284:	462b      	mov	r3, r5
 8006286:	f7fa f81f 	bl	80002c8 <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006292:	f7fa f819 	bl	80002c8 <__aeabi_dsub>
 8006296:	f1bb 0f00 	cmp.w	fp, #0
 800629a:	4604      	mov	r4, r0
 800629c:	460d      	mov	r5, r1
 800629e:	f6bf aed6 	bge.w	800604e <atan+0x3e>
 80062a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062a6:	461d      	mov	r5, r3
 80062a8:	e6d1      	b.n	800604e <atan+0x3e>
 80062aa:	a51d      	add	r5, pc, #116	; (adr r5, 8006320 <atan+0x310>)
 80062ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062b0:	e6cd      	b.n	800604e <atan+0x3e>
 80062b2:	bf00      	nop
 80062b4:	f3af 8000 	nop.w
 80062b8:	54442d18 	.word	0x54442d18
 80062bc:	bff921fb 	.word	0xbff921fb
 80062c0:	8800759c 	.word	0x8800759c
 80062c4:	7e37e43c 	.word	0x7e37e43c
 80062c8:	e322da11 	.word	0xe322da11
 80062cc:	3f90ad3a 	.word	0x3f90ad3a
 80062d0:	24760deb 	.word	0x24760deb
 80062d4:	3fa97b4b 	.word	0x3fa97b4b
 80062d8:	a0d03d51 	.word	0xa0d03d51
 80062dc:	3fb10d66 	.word	0x3fb10d66
 80062e0:	c54c206e 	.word	0xc54c206e
 80062e4:	3fb745cd 	.word	0x3fb745cd
 80062e8:	920083ff 	.word	0x920083ff
 80062ec:	3fc24924 	.word	0x3fc24924
 80062f0:	5555550d 	.word	0x5555550d
 80062f4:	3fd55555 	.word	0x3fd55555
 80062f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80062fc:	bfa2b444 	.word	0xbfa2b444
 8006300:	52defd9a 	.word	0x52defd9a
 8006304:	3fadde2d 	.word	0x3fadde2d
 8006308:	af749a6d 	.word	0xaf749a6d
 800630c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006310:	fe231671 	.word	0xfe231671
 8006314:	3fbc71c6 	.word	0x3fbc71c6
 8006318:	9998ebc4 	.word	0x9998ebc4
 800631c:	3fc99999 	.word	0x3fc99999
 8006320:	54442d18 	.word	0x54442d18
 8006324:	3ff921fb 	.word	0x3ff921fb
 8006328:	440fffff 	.word	0x440fffff
 800632c:	7ff00000 	.word	0x7ff00000
 8006330:	3fdbffff 	.word	0x3fdbffff
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	3ff2ffff 	.word	0x3ff2ffff
 800633c:	40038000 	.word	0x40038000
 8006340:	3ff80000 	.word	0x3ff80000
 8006344:	bff00000 	.word	0xbff00000
 8006348:	0800adb0 	.word	0x0800adb0
 800634c:	0800ad90 	.word	0x0800ad90

08006350 <fabs>:
 8006350:	ec51 0b10 	vmov	r0, r1, d0
 8006354:	ee10 2a10 	vmov	r2, s0
 8006358:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800635c:	ec43 2b10 	vmov	d0, r2, r3
 8006360:	4770      	bx	lr

08006362 <abort>:
 8006362:	b508      	push	{r3, lr}
 8006364:	2006      	movs	r0, #6
 8006366:	f000 ffe3 	bl	8007330 <raise>
 800636a:	2001      	movs	r0, #1
 800636c:	f7fb fab6 	bl	80018dc <_exit>

08006370 <__errno>:
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <__errno+0x8>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000010 	.word	0x20000010

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f004 fc86 	bl	800aca0 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	0800b27c 	.word	0x0800b27c
 80063b8:	0800b27c 	.word	0x0800b27c
 80063bc:	0800b27c 	.word	0x0800b27c
 80063c0:	0800b280 	.word	0x0800b280

080063c4 <malloc>:
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <malloc+0xc>)
 80063c6:	4601      	mov	r1, r0
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	f000 b885 	b.w	80064d8 <_malloc_r>
 80063ce:	bf00      	nop
 80063d0:	20000010 	.word	0x20000010

080063d4 <memcpy>:
 80063d4:	440a      	add	r2, r1
 80063d6:	4291      	cmp	r1, r2
 80063d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	4770      	bx	lr
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d1f9      	bne.n	80063e2 <memcpy+0xe>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <memset>:
 80063f0:	4402      	add	r2, r0
 80063f2:	4603      	mov	r3, r0
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d100      	bne.n	80063fa <memset+0xa>
 80063f8:	4770      	bx	lr
 80063fa:	f803 1b01 	strb.w	r1, [r3], #1
 80063fe:	e7f9      	b.n	80063f4 <memset+0x4>

08006400 <_free_r>:
 8006400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006402:	2900      	cmp	r1, #0
 8006404:	d044      	beq.n	8006490 <_free_r+0x90>
 8006406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640a:	9001      	str	r0, [sp, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f1a1 0404 	sub.w	r4, r1, #4
 8006412:	bfb8      	it	lt
 8006414:	18e4      	addlt	r4, r4, r3
 8006416:	f003 f873 	bl	8009500 <__malloc_lock>
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <_free_r+0x94>)
 800641c:	9801      	ldr	r0, [sp, #4]
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	b933      	cbnz	r3, 8006430 <_free_r+0x30>
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	6014      	str	r4, [r2, #0]
 8006426:	b003      	add	sp, #12
 8006428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800642c:	f003 b86e 	b.w	800950c <__malloc_unlock>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d908      	bls.n	8006446 <_free_r+0x46>
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	1961      	adds	r1, r4, r5
 8006438:	428b      	cmp	r3, r1
 800643a:	bf01      	itttt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	1949      	addeq	r1, r1, r5
 8006442:	6021      	streq	r1, [r4, #0]
 8006444:	e7ed      	b.n	8006422 <_free_r+0x22>
 8006446:	461a      	mov	r2, r3
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	b10b      	cbz	r3, 8006450 <_free_r+0x50>
 800644c:	42a3      	cmp	r3, r4
 800644e:	d9fa      	bls.n	8006446 <_free_r+0x46>
 8006450:	6811      	ldr	r1, [r2, #0]
 8006452:	1855      	adds	r5, r2, r1
 8006454:	42a5      	cmp	r5, r4
 8006456:	d10b      	bne.n	8006470 <_free_r+0x70>
 8006458:	6824      	ldr	r4, [r4, #0]
 800645a:	4421      	add	r1, r4
 800645c:	1854      	adds	r4, r2, r1
 800645e:	42a3      	cmp	r3, r4
 8006460:	6011      	str	r1, [r2, #0]
 8006462:	d1e0      	bne.n	8006426 <_free_r+0x26>
 8006464:	681c      	ldr	r4, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6053      	str	r3, [r2, #4]
 800646a:	4421      	add	r1, r4
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	e7da      	b.n	8006426 <_free_r+0x26>
 8006470:	d902      	bls.n	8006478 <_free_r+0x78>
 8006472:	230c      	movs	r3, #12
 8006474:	6003      	str	r3, [r0, #0]
 8006476:	e7d6      	b.n	8006426 <_free_r+0x26>
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	1961      	adds	r1, r4, r5
 800647c:	428b      	cmp	r3, r1
 800647e:	bf04      	itt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	bf04      	itt	eq
 8006488:	1949      	addeq	r1, r1, r5
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	6054      	str	r4, [r2, #4]
 800648e:	e7ca      	b.n	8006426 <_free_r+0x26>
 8006490:	b003      	add	sp, #12
 8006492:	bd30      	pop	{r4, r5, pc}
 8006494:	200002a0 	.word	0x200002a0

08006498 <sbrk_aligned>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4e0e      	ldr	r6, [pc, #56]	; (80064d4 <sbrk_aligned+0x3c>)
 800649c:	460c      	mov	r4, r1
 800649e:	6831      	ldr	r1, [r6, #0]
 80064a0:	4605      	mov	r5, r0
 80064a2:	b911      	cbnz	r1, 80064aa <sbrk_aligned+0x12>
 80064a4:	f000 ff06 	bl	80072b4 <_sbrk_r>
 80064a8:	6030      	str	r0, [r6, #0]
 80064aa:	4621      	mov	r1, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 ff01 	bl	80072b4 <_sbrk_r>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d00a      	beq.n	80064cc <sbrk_aligned+0x34>
 80064b6:	1cc4      	adds	r4, r0, #3
 80064b8:	f024 0403 	bic.w	r4, r4, #3
 80064bc:	42a0      	cmp	r0, r4
 80064be:	d007      	beq.n	80064d0 <sbrk_aligned+0x38>
 80064c0:	1a21      	subs	r1, r4, r0
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 fef6 	bl	80072b4 <_sbrk_r>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d101      	bne.n	80064d0 <sbrk_aligned+0x38>
 80064cc:	f04f 34ff 	mov.w	r4, #4294967295
 80064d0:	4620      	mov	r0, r4
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	200002a4 	.word	0x200002a4

080064d8 <_malloc_r>:
 80064d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064dc:	1ccd      	adds	r5, r1, #3
 80064de:	f025 0503 	bic.w	r5, r5, #3
 80064e2:	3508      	adds	r5, #8
 80064e4:	2d0c      	cmp	r5, #12
 80064e6:	bf38      	it	cc
 80064e8:	250c      	movcc	r5, #12
 80064ea:	2d00      	cmp	r5, #0
 80064ec:	4607      	mov	r7, r0
 80064ee:	db01      	blt.n	80064f4 <_malloc_r+0x1c>
 80064f0:	42a9      	cmp	r1, r5
 80064f2:	d905      	bls.n	8006500 <_malloc_r+0x28>
 80064f4:	230c      	movs	r3, #12
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	2600      	movs	r6, #0
 80064fa:	4630      	mov	r0, r6
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	4e2e      	ldr	r6, [pc, #184]	; (80065bc <_malloc_r+0xe4>)
 8006502:	f002 fffd 	bl	8009500 <__malloc_lock>
 8006506:	6833      	ldr	r3, [r6, #0]
 8006508:	461c      	mov	r4, r3
 800650a:	bb34      	cbnz	r4, 800655a <_malloc_r+0x82>
 800650c:	4629      	mov	r1, r5
 800650e:	4638      	mov	r0, r7
 8006510:	f7ff ffc2 	bl	8006498 <sbrk_aligned>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	4604      	mov	r4, r0
 8006518:	d14d      	bne.n	80065b6 <_malloc_r+0xde>
 800651a:	6834      	ldr	r4, [r6, #0]
 800651c:	4626      	mov	r6, r4
 800651e:	2e00      	cmp	r6, #0
 8006520:	d140      	bne.n	80065a4 <_malloc_r+0xcc>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	4631      	mov	r1, r6
 8006526:	4638      	mov	r0, r7
 8006528:	eb04 0803 	add.w	r8, r4, r3
 800652c:	f000 fec2 	bl	80072b4 <_sbrk_r>
 8006530:	4580      	cmp	r8, r0
 8006532:	d13a      	bne.n	80065aa <_malloc_r+0xd2>
 8006534:	6821      	ldr	r1, [r4, #0]
 8006536:	3503      	adds	r5, #3
 8006538:	1a6d      	subs	r5, r5, r1
 800653a:	f025 0503 	bic.w	r5, r5, #3
 800653e:	3508      	adds	r5, #8
 8006540:	2d0c      	cmp	r5, #12
 8006542:	bf38      	it	cc
 8006544:	250c      	movcc	r5, #12
 8006546:	4629      	mov	r1, r5
 8006548:	4638      	mov	r0, r7
 800654a:	f7ff ffa5 	bl	8006498 <sbrk_aligned>
 800654e:	3001      	adds	r0, #1
 8006550:	d02b      	beq.n	80065aa <_malloc_r+0xd2>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	442b      	add	r3, r5
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	e00e      	b.n	8006578 <_malloc_r+0xa0>
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	1b52      	subs	r2, r2, r5
 800655e:	d41e      	bmi.n	800659e <_malloc_r+0xc6>
 8006560:	2a0b      	cmp	r2, #11
 8006562:	d916      	bls.n	8006592 <_malloc_r+0xba>
 8006564:	1961      	adds	r1, r4, r5
 8006566:	42a3      	cmp	r3, r4
 8006568:	6025      	str	r5, [r4, #0]
 800656a:	bf18      	it	ne
 800656c:	6059      	strne	r1, [r3, #4]
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	bf08      	it	eq
 8006572:	6031      	streq	r1, [r6, #0]
 8006574:	5162      	str	r2, [r4, r5]
 8006576:	604b      	str	r3, [r1, #4]
 8006578:	4638      	mov	r0, r7
 800657a:	f104 060b 	add.w	r6, r4, #11
 800657e:	f002 ffc5 	bl	800950c <__malloc_unlock>
 8006582:	f026 0607 	bic.w	r6, r6, #7
 8006586:	1d23      	adds	r3, r4, #4
 8006588:	1af2      	subs	r2, r6, r3
 800658a:	d0b6      	beq.n	80064fa <_malloc_r+0x22>
 800658c:	1b9b      	subs	r3, r3, r6
 800658e:	50a3      	str	r3, [r4, r2]
 8006590:	e7b3      	b.n	80064fa <_malloc_r+0x22>
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	42a3      	cmp	r3, r4
 8006596:	bf0c      	ite	eq
 8006598:	6032      	streq	r2, [r6, #0]
 800659a:	605a      	strne	r2, [r3, #4]
 800659c:	e7ec      	b.n	8006578 <_malloc_r+0xa0>
 800659e:	4623      	mov	r3, r4
 80065a0:	6864      	ldr	r4, [r4, #4]
 80065a2:	e7b2      	b.n	800650a <_malloc_r+0x32>
 80065a4:	4634      	mov	r4, r6
 80065a6:	6876      	ldr	r6, [r6, #4]
 80065a8:	e7b9      	b.n	800651e <_malloc_r+0x46>
 80065aa:	230c      	movs	r3, #12
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	4638      	mov	r0, r7
 80065b0:	f002 ffac 	bl	800950c <__malloc_unlock>
 80065b4:	e7a1      	b.n	80064fa <_malloc_r+0x22>
 80065b6:	6025      	str	r5, [r4, #0]
 80065b8:	e7de      	b.n	8006578 <_malloc_r+0xa0>
 80065ba:	bf00      	nop
 80065bc:	200002a0 	.word	0x200002a0

080065c0 <__cvt>:
 80065c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	ec55 4b10 	vmov	r4, r5, d0
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	460e      	mov	r6, r1
 80065cc:	4619      	mov	r1, r3
 80065ce:	462b      	mov	r3, r5
 80065d0:	bfbb      	ittet	lt
 80065d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065d6:	461d      	movlt	r5, r3
 80065d8:	2300      	movge	r3, #0
 80065da:	232d      	movlt	r3, #45	; 0x2d
 80065dc:	700b      	strb	r3, [r1, #0]
 80065de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065e4:	4691      	mov	r9, r2
 80065e6:	f023 0820 	bic.w	r8, r3, #32
 80065ea:	bfbc      	itt	lt
 80065ec:	4622      	movlt	r2, r4
 80065ee:	4614      	movlt	r4, r2
 80065f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065f4:	d005      	beq.n	8006602 <__cvt+0x42>
 80065f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065fa:	d100      	bne.n	80065fe <__cvt+0x3e>
 80065fc:	3601      	adds	r6, #1
 80065fe:	2102      	movs	r1, #2
 8006600:	e000      	b.n	8006604 <__cvt+0x44>
 8006602:	2103      	movs	r1, #3
 8006604:	ab03      	add	r3, sp, #12
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	ab02      	add	r3, sp, #8
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	ec45 4b10 	vmov	d0, r4, r5
 8006610:	4653      	mov	r3, sl
 8006612:	4632      	mov	r2, r6
 8006614:	f001 fe00 	bl	8008218 <_dtoa_r>
 8006618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800661c:	4607      	mov	r7, r0
 800661e:	d102      	bne.n	8006626 <__cvt+0x66>
 8006620:	f019 0f01 	tst.w	r9, #1
 8006624:	d022      	beq.n	800666c <__cvt+0xac>
 8006626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800662a:	eb07 0906 	add.w	r9, r7, r6
 800662e:	d110      	bne.n	8006652 <__cvt+0x92>
 8006630:	783b      	ldrb	r3, [r7, #0]
 8006632:	2b30      	cmp	r3, #48	; 0x30
 8006634:	d10a      	bne.n	800664c <__cvt+0x8c>
 8006636:	2200      	movs	r2, #0
 8006638:	2300      	movs	r3, #0
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7fa fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8006642:	b918      	cbnz	r0, 800664c <__cvt+0x8c>
 8006644:	f1c6 0601 	rsb	r6, r6, #1
 8006648:	f8ca 6000 	str.w	r6, [sl]
 800664c:	f8da 3000 	ldr.w	r3, [sl]
 8006650:	4499      	add	r9, r3
 8006652:	2200      	movs	r2, #0
 8006654:	2300      	movs	r3, #0
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa fa55 	bl	8000b08 <__aeabi_dcmpeq>
 800665e:	b108      	cbz	r0, 8006664 <__cvt+0xa4>
 8006660:	f8cd 900c 	str.w	r9, [sp, #12]
 8006664:	2230      	movs	r2, #48	; 0x30
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	454b      	cmp	r3, r9
 800666a:	d307      	bcc.n	800667c <__cvt+0xbc>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006670:	1bdb      	subs	r3, r3, r7
 8006672:	4638      	mov	r0, r7
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	b004      	add	sp, #16
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	1c59      	adds	r1, r3, #1
 800667e:	9103      	str	r1, [sp, #12]
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e7f0      	b.n	8006666 <__cvt+0xa6>

08006684 <__exponent>:
 8006684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006686:	4603      	mov	r3, r0
 8006688:	2900      	cmp	r1, #0
 800668a:	bfb8      	it	lt
 800668c:	4249      	neglt	r1, r1
 800668e:	f803 2b02 	strb.w	r2, [r3], #2
 8006692:	bfb4      	ite	lt
 8006694:	222d      	movlt	r2, #45	; 0x2d
 8006696:	222b      	movge	r2, #43	; 0x2b
 8006698:	2909      	cmp	r1, #9
 800669a:	7042      	strb	r2, [r0, #1]
 800669c:	dd2a      	ble.n	80066f4 <__exponent+0x70>
 800669e:	f10d 0407 	add.w	r4, sp, #7
 80066a2:	46a4      	mov	ip, r4
 80066a4:	270a      	movs	r7, #10
 80066a6:	46a6      	mov	lr, r4
 80066a8:	460a      	mov	r2, r1
 80066aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80066ae:	fb07 1516 	mls	r5, r7, r6, r1
 80066b2:	3530      	adds	r5, #48	; 0x30
 80066b4:	2a63      	cmp	r2, #99	; 0x63
 80066b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066be:	4631      	mov	r1, r6
 80066c0:	dcf1      	bgt.n	80066a6 <__exponent+0x22>
 80066c2:	3130      	adds	r1, #48	; 0x30
 80066c4:	f1ae 0502 	sub.w	r5, lr, #2
 80066c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066cc:	1c44      	adds	r4, r0, #1
 80066ce:	4629      	mov	r1, r5
 80066d0:	4561      	cmp	r1, ip
 80066d2:	d30a      	bcc.n	80066ea <__exponent+0x66>
 80066d4:	f10d 0209 	add.w	r2, sp, #9
 80066d8:	eba2 020e 	sub.w	r2, r2, lr
 80066dc:	4565      	cmp	r5, ip
 80066de:	bf88      	it	hi
 80066e0:	2200      	movhi	r2, #0
 80066e2:	4413      	add	r3, r2
 80066e4:	1a18      	subs	r0, r3, r0
 80066e6:	b003      	add	sp, #12
 80066e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066f2:	e7ed      	b.n	80066d0 <__exponent+0x4c>
 80066f4:	2330      	movs	r3, #48	; 0x30
 80066f6:	3130      	adds	r1, #48	; 0x30
 80066f8:	7083      	strb	r3, [r0, #2]
 80066fa:	70c1      	strb	r1, [r0, #3]
 80066fc:	1d03      	adds	r3, r0, #4
 80066fe:	e7f1      	b.n	80066e4 <__exponent+0x60>

08006700 <_printf_float>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	ed2d 8b02 	vpush	{d8}
 8006708:	b08d      	sub	sp, #52	; 0x34
 800670a:	460c      	mov	r4, r1
 800670c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006710:	4616      	mov	r6, r2
 8006712:	461f      	mov	r7, r3
 8006714:	4605      	mov	r5, r0
 8006716:	f002 fedd 	bl	80094d4 <_localeconv_r>
 800671a:	f8d0 a000 	ldr.w	sl, [r0]
 800671e:	4650      	mov	r0, sl
 8006720:	f7f9 fd76 	bl	8000210 <strlen>
 8006724:	2300      	movs	r3, #0
 8006726:	930a      	str	r3, [sp, #40]	; 0x28
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	f8d8 3000 	ldr.w	r3, [r8]
 8006730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006734:	3307      	adds	r3, #7
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	f103 0208 	add.w	r2, r3, #8
 800673e:	f8c8 2000 	str.w	r2, [r8]
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800674a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800674e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	f8cd 8018 	str.w	r8, [sp, #24]
 8006758:	ee08 0a10 	vmov	s16, r0
 800675c:	4b9f      	ldr	r3, [pc, #636]	; (80069dc <_printf_float+0x2dc>)
 800675e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006762:	f04f 32ff 	mov.w	r2, #4294967295
 8006766:	f7fa fa01 	bl	8000b6c <__aeabi_dcmpun>
 800676a:	bb88      	cbnz	r0, 80067d0 <_printf_float+0xd0>
 800676c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006770:	4b9a      	ldr	r3, [pc, #616]	; (80069dc <_printf_float+0x2dc>)
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	f7fa f9db 	bl	8000b30 <__aeabi_dcmple>
 800677a:	bb48      	cbnz	r0, 80067d0 <_printf_float+0xd0>
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8006788:	b110      	cbz	r0, 8006790 <_printf_float+0x90>
 800678a:	232d      	movs	r3, #45	; 0x2d
 800678c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006790:	4b93      	ldr	r3, [pc, #588]	; (80069e0 <_printf_float+0x2e0>)
 8006792:	4894      	ldr	r0, [pc, #592]	; (80069e4 <_printf_float+0x2e4>)
 8006794:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006798:	bf94      	ite	ls
 800679a:	4698      	movls	r8, r3
 800679c:	4680      	movhi	r8, r0
 800679e:	2303      	movs	r3, #3
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	9b05      	ldr	r3, [sp, #20]
 80067a4:	f023 0204 	bic.w	r2, r3, #4
 80067a8:	6022      	str	r2, [r4, #0]
 80067aa:	f04f 0900 	mov.w	r9, #0
 80067ae:	9700      	str	r7, [sp, #0]
 80067b0:	4633      	mov	r3, r6
 80067b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80067b4:	4621      	mov	r1, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 f9d8 	bl	8006b6c <_printf_common>
 80067bc:	3001      	adds	r0, #1
 80067be:	f040 8090 	bne.w	80068e2 <_printf_float+0x1e2>
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	b00d      	add	sp, #52	; 0x34
 80067c8:	ecbd 8b02 	vpop	{d8}
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7fa f9c8 	bl	8000b6c <__aeabi_dcmpun>
 80067dc:	b140      	cbz	r0, 80067f0 <_printf_float+0xf0>
 80067de:	464b      	mov	r3, r9
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bfbc      	itt	lt
 80067e4:	232d      	movlt	r3, #45	; 0x2d
 80067e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067ea:	487f      	ldr	r0, [pc, #508]	; (80069e8 <_printf_float+0x2e8>)
 80067ec:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <_printf_float+0x2ec>)
 80067ee:	e7d1      	b.n	8006794 <_printf_float+0x94>
 80067f0:	6863      	ldr	r3, [r4, #4]
 80067f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067f6:	9206      	str	r2, [sp, #24]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	d13f      	bne.n	800687c <_printf_float+0x17c>
 80067fc:	2306      	movs	r3, #6
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	6861      	ldr	r1, [r4, #4]
 8006804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006808:	2300      	movs	r3, #0
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	ab0a      	add	r3, sp, #40	; 0x28
 800680e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006812:	ab09      	add	r3, sp, #36	; 0x24
 8006814:	ec49 8b10 	vmov	d0, r8, r9
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006820:	4628      	mov	r0, r5
 8006822:	f7ff fecd 	bl	80065c0 <__cvt>
 8006826:	9b06      	ldr	r3, [sp, #24]
 8006828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800682a:	2b47      	cmp	r3, #71	; 0x47
 800682c:	4680      	mov	r8, r0
 800682e:	d108      	bne.n	8006842 <_printf_float+0x142>
 8006830:	1cc8      	adds	r0, r1, #3
 8006832:	db02      	blt.n	800683a <_printf_float+0x13a>
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	4299      	cmp	r1, r3
 8006838:	dd41      	ble.n	80068be <_printf_float+0x1be>
 800683a:	f1ab 0b02 	sub.w	fp, fp, #2
 800683e:	fa5f fb8b 	uxtb.w	fp, fp
 8006842:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006846:	d820      	bhi.n	800688a <_printf_float+0x18a>
 8006848:	3901      	subs	r1, #1
 800684a:	465a      	mov	r2, fp
 800684c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006850:	9109      	str	r1, [sp, #36]	; 0x24
 8006852:	f7ff ff17 	bl	8006684 <__exponent>
 8006856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006858:	1813      	adds	r3, r2, r0
 800685a:	2a01      	cmp	r2, #1
 800685c:	4681      	mov	r9, r0
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	dc02      	bgt.n	8006868 <_printf_float+0x168>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	07d2      	lsls	r2, r2, #31
 8006866:	d501      	bpl.n	800686c <_printf_float+0x16c>
 8006868:	3301      	adds	r3, #1
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006870:	2b00      	cmp	r3, #0
 8006872:	d09c      	beq.n	80067ae <_printf_float+0xae>
 8006874:	232d      	movs	r3, #45	; 0x2d
 8006876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687a:	e798      	b.n	80067ae <_printf_float+0xae>
 800687c:	9a06      	ldr	r2, [sp, #24]
 800687e:	2a47      	cmp	r2, #71	; 0x47
 8006880:	d1be      	bne.n	8006800 <_printf_float+0x100>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1bc      	bne.n	8006800 <_printf_float+0x100>
 8006886:	2301      	movs	r3, #1
 8006888:	e7b9      	b.n	80067fe <_printf_float+0xfe>
 800688a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800688e:	d118      	bne.n	80068c2 <_printf_float+0x1c2>
 8006890:	2900      	cmp	r1, #0
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	dd0b      	ble.n	80068ae <_printf_float+0x1ae>
 8006896:	6121      	str	r1, [r4, #16]
 8006898:	b913      	cbnz	r3, 80068a0 <_printf_float+0x1a0>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	07d0      	lsls	r0, r2, #31
 800689e:	d502      	bpl.n	80068a6 <_printf_float+0x1a6>
 80068a0:	3301      	adds	r3, #1
 80068a2:	440b      	add	r3, r1
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068a8:	f04f 0900 	mov.w	r9, #0
 80068ac:	e7de      	b.n	800686c <_printf_float+0x16c>
 80068ae:	b913      	cbnz	r3, 80068b6 <_printf_float+0x1b6>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	07d2      	lsls	r2, r2, #31
 80068b4:	d501      	bpl.n	80068ba <_printf_float+0x1ba>
 80068b6:	3302      	adds	r3, #2
 80068b8:	e7f4      	b.n	80068a4 <_printf_float+0x1a4>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7f2      	b.n	80068a4 <_printf_float+0x1a4>
 80068be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c4:	4299      	cmp	r1, r3
 80068c6:	db05      	blt.n	80068d4 <_printf_float+0x1d4>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	6121      	str	r1, [r4, #16]
 80068cc:	07d8      	lsls	r0, r3, #31
 80068ce:	d5ea      	bpl.n	80068a6 <_printf_float+0x1a6>
 80068d0:	1c4b      	adds	r3, r1, #1
 80068d2:	e7e7      	b.n	80068a4 <_printf_float+0x1a4>
 80068d4:	2900      	cmp	r1, #0
 80068d6:	bfd4      	ite	le
 80068d8:	f1c1 0202 	rsble	r2, r1, #2
 80068dc:	2201      	movgt	r2, #1
 80068de:	4413      	add	r3, r2
 80068e0:	e7e0      	b.n	80068a4 <_printf_float+0x1a4>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	055a      	lsls	r2, r3, #21
 80068e6:	d407      	bmi.n	80068f8 <_printf_float+0x1f8>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	4642      	mov	r2, r8
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	d12c      	bne.n	8006950 <_printf_float+0x250>
 80068f6:	e764      	b.n	80067c2 <_printf_float+0xc2>
 80068f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068fc:	f240 80e0 	bls.w	8006ac0 <_printf_float+0x3c0>
 8006900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006904:	2200      	movs	r2, #0
 8006906:	2300      	movs	r3, #0
 8006908:	f7fa f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800690c:	2800      	cmp	r0, #0
 800690e:	d034      	beq.n	800697a <_printf_float+0x27a>
 8006910:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <_printf_float+0x2f0>)
 8006912:	2301      	movs	r3, #1
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af51 	beq.w	80067c2 <_printf_float+0xc2>
 8006920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006924:	429a      	cmp	r2, r3
 8006926:	db02      	blt.n	800692e <_printf_float+0x22e>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	07d8      	lsls	r0, r3, #31
 800692c:	d510      	bpl.n	8006950 <_printf_float+0x250>
 800692e:	ee18 3a10 	vmov	r3, s16
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af41 	beq.w	80067c2 <_printf_float+0xc2>
 8006940:	f04f 0800 	mov.w	r8, #0
 8006944:	f104 091a 	add.w	r9, r4, #26
 8006948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	4543      	cmp	r3, r8
 800694e:	dc09      	bgt.n	8006964 <_printf_float+0x264>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	f100 8105 	bmi.w	8006b62 <_printf_float+0x462>
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695c:	4298      	cmp	r0, r3
 800695e:	bfb8      	it	lt
 8006960:	4618      	movlt	r0, r3
 8006962:	e730      	b.n	80067c6 <_printf_float+0xc6>
 8006964:	2301      	movs	r3, #1
 8006966:	464a      	mov	r2, r9
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af27 	beq.w	80067c2 <_printf_float+0xc2>
 8006974:	f108 0801 	add.w	r8, r8, #1
 8006978:	e7e6      	b.n	8006948 <_printf_float+0x248>
 800697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	dc39      	bgt.n	80069f4 <_printf_float+0x2f4>
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <_printf_float+0x2f0>)
 8006982:	2301      	movs	r3, #1
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af19 	beq.w	80067c2 <_printf_float+0xc2>
 8006990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006994:	4313      	orrs	r3, r2
 8006996:	d102      	bne.n	800699e <_printf_float+0x29e>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	07d9      	lsls	r1, r3, #31
 800699c:	d5d8      	bpl.n	8006950 <_printf_float+0x250>
 800699e:	ee18 3a10 	vmov	r3, s16
 80069a2:	4652      	mov	r2, sl
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af09 	beq.w	80067c2 <_printf_float+0xc2>
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	f104 0a1a 	add.w	sl, r4, #26
 80069b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ba:	425b      	negs	r3, r3
 80069bc:	454b      	cmp	r3, r9
 80069be:	dc01      	bgt.n	80069c4 <_printf_float+0x2c4>
 80069c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c2:	e792      	b.n	80068ea <_printf_float+0x1ea>
 80069c4:	2301      	movs	r3, #1
 80069c6:	4652      	mov	r2, sl
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f aef7 	beq.w	80067c2 <_printf_float+0xc2>
 80069d4:	f109 0901 	add.w	r9, r9, #1
 80069d8:	e7ee      	b.n	80069b8 <_printf_float+0x2b8>
 80069da:	bf00      	nop
 80069dc:	7fefffff 	.word	0x7fefffff
 80069e0:	0800add4 	.word	0x0800add4
 80069e4:	0800add8 	.word	0x0800add8
 80069e8:	0800ade0 	.word	0x0800ade0
 80069ec:	0800addc 	.word	0x0800addc
 80069f0:	0800ade4 	.word	0x0800ade4
 80069f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069f8:	429a      	cmp	r2, r3
 80069fa:	bfa8      	it	ge
 80069fc:	461a      	movge	r2, r3
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	4691      	mov	r9, r2
 8006a02:	dc37      	bgt.n	8006a74 <_printf_float+0x374>
 8006a04:	f04f 0b00 	mov.w	fp, #0
 8006a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0c:	f104 021a 	add.w	r2, r4, #26
 8006a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	eba3 0309 	sub.w	r3, r3, r9
 8006a18:	455b      	cmp	r3, fp
 8006a1a:	dc33      	bgt.n	8006a84 <_printf_float+0x384>
 8006a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a20:	429a      	cmp	r2, r3
 8006a22:	db3b      	blt.n	8006a9c <_printf_float+0x39c>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07da      	lsls	r2, r3, #31
 8006a28:	d438      	bmi.n	8006a9c <_printf_float+0x39c>
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2c:	9a05      	ldr	r2, [sp, #20]
 8006a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a30:	1a9a      	subs	r2, r3, r2
 8006a32:	eba3 0901 	sub.w	r9, r3, r1
 8006a36:	4591      	cmp	r9, r2
 8006a38:	bfa8      	it	ge
 8006a3a:	4691      	movge	r9, r2
 8006a3c:	f1b9 0f00 	cmp.w	r9, #0
 8006a40:	dc35      	bgt.n	8006aae <_printf_float+0x3ae>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a4a:	f104 0a1a 	add.w	sl, r4, #26
 8006a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	eba3 0309 	sub.w	r3, r3, r9
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	f77f af79 	ble.w	8006950 <_printf_float+0x250>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f aeaa 	beq.w	80067c2 <_printf_float+0xc2>
 8006a6e:	f108 0801 	add.w	r8, r8, #1
 8006a72:	e7ec      	b.n	8006a4e <_printf_float+0x34e>
 8006a74:	4613      	mov	r3, r2
 8006a76:	4631      	mov	r1, r6
 8006a78:	4642      	mov	r2, r8
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d1c0      	bne.n	8006a04 <_printf_float+0x304>
 8006a82:	e69e      	b.n	80067c2 <_printf_float+0xc2>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	9205      	str	r2, [sp, #20]
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	f43f ae97 	beq.w	80067c2 <_printf_float+0xc2>
 8006a94:	9a05      	ldr	r2, [sp, #20]
 8006a96:	f10b 0b01 	add.w	fp, fp, #1
 8006a9a:	e7b9      	b.n	8006a10 <_printf_float+0x310>
 8006a9c:	ee18 3a10 	vmov	r3, s16
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d1be      	bne.n	8006a2a <_printf_float+0x32a>
 8006aac:	e689      	b.n	80067c2 <_printf_float+0xc2>
 8006aae:	9a05      	ldr	r2, [sp, #20]
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	4442      	add	r2, r8
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	d1c1      	bne.n	8006a42 <_printf_float+0x342>
 8006abe:	e680      	b.n	80067c2 <_printf_float+0xc2>
 8006ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ac2:	2a01      	cmp	r2, #1
 8006ac4:	dc01      	bgt.n	8006aca <_printf_float+0x3ca>
 8006ac6:	07db      	lsls	r3, r3, #31
 8006ac8:	d538      	bpl.n	8006b3c <_printf_float+0x43c>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f ae74 	beq.w	80067c2 <_printf_float+0xc2>
 8006ada:	ee18 3a10 	vmov	r3, s16
 8006ade:	4652      	mov	r2, sl
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	f43f ae6b 	beq.w	80067c2 <_printf_float+0xc2>
 8006aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006af0:	2200      	movs	r2, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	f7fa f808 	bl	8000b08 <__aeabi_dcmpeq>
 8006af8:	b9d8      	cbnz	r0, 8006b32 <_printf_float+0x432>
 8006afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afc:	f108 0201 	add.w	r2, r8, #1
 8006b00:	3b01      	subs	r3, #1
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d10e      	bne.n	8006b2a <_printf_float+0x42a>
 8006b0c:	e659      	b.n	80067c2 <_printf_float+0xc2>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4652      	mov	r2, sl
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae52 	beq.w	80067c2 <_printf_float+0xc2>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4543      	cmp	r3, r8
 8006b28:	dcf1      	bgt.n	8006b0e <_printf_float+0x40e>
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b30:	e6dc      	b.n	80068ec <_printf_float+0x1ec>
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	f104 0a1a 	add.w	sl, r4, #26
 8006b3a:	e7f2      	b.n	8006b22 <_printf_float+0x422>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4642      	mov	r2, r8
 8006b40:	e7df      	b.n	8006b02 <_printf_float+0x402>
 8006b42:	2301      	movs	r3, #1
 8006b44:	464a      	mov	r2, r9
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f43f ae38 	beq.w	80067c2 <_printf_float+0xc2>
 8006b52:	f108 0801 	add.w	r8, r8, #1
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b5a:	1a5b      	subs	r3, r3, r1
 8006b5c:	4543      	cmp	r3, r8
 8006b5e:	dcf0      	bgt.n	8006b42 <_printf_float+0x442>
 8006b60:	e6fa      	b.n	8006958 <_printf_float+0x258>
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	f104 0919 	add.w	r9, r4, #25
 8006b6a:	e7f4      	b.n	8006b56 <_printf_float+0x456>

08006b6c <_printf_common>:
 8006b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	4616      	mov	r6, r2
 8006b72:	4699      	mov	r9, r3
 8006b74:	688a      	ldr	r2, [r1, #8]
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bfb8      	it	lt
 8006b80:	4613      	movlt	r3, r2
 8006b82:	6033      	str	r3, [r6, #0]
 8006b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b88:	4607      	mov	r7, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	b10a      	cbz	r2, 8006b92 <_printf_common+0x26>
 8006b8e:	3301      	adds	r3, #1
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	0699      	lsls	r1, r3, #26
 8006b96:	bf42      	ittt	mi
 8006b98:	6833      	ldrmi	r3, [r6, #0]
 8006b9a:	3302      	addmi	r3, #2
 8006b9c:	6033      	strmi	r3, [r6, #0]
 8006b9e:	6825      	ldr	r5, [r4, #0]
 8006ba0:	f015 0506 	ands.w	r5, r5, #6
 8006ba4:	d106      	bne.n	8006bb4 <_printf_common+0x48>
 8006ba6:	f104 0a19 	add.w	sl, r4, #25
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	6832      	ldr	r2, [r6, #0]
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dc26      	bgt.n	8006c02 <_printf_common+0x96>
 8006bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bb8:	1e13      	subs	r3, r2, #0
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	bf18      	it	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	0692      	lsls	r2, r2, #26
 8006bc2:	d42b      	bmi.n	8006c1c <_printf_common+0xb0>
 8006bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bc8:	4649      	mov	r1, r9
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d01e      	beq.n	8006c10 <_printf_common+0xa4>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	68e5      	ldr	r5, [r4, #12]
 8006bd6:	6832      	ldr	r2, [r6, #0]
 8006bd8:	f003 0306 	and.w	r3, r3, #6
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	bf08      	it	eq
 8006be0:	1aad      	subeq	r5, r5, r2
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	6922      	ldr	r2, [r4, #16]
 8006be6:	bf0c      	ite	eq
 8006be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bec:	2500      	movne	r5, #0
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bfc4      	itt	gt
 8006bf2:	1a9b      	subgt	r3, r3, r2
 8006bf4:	18ed      	addgt	r5, r5, r3
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	341a      	adds	r4, #26
 8006bfa:	42b5      	cmp	r5, r6
 8006bfc:	d11a      	bne.n	8006c34 <_printf_common+0xc8>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e008      	b.n	8006c14 <_printf_common+0xa8>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4652      	mov	r2, sl
 8006c06:	4649      	mov	r1, r9
 8006c08:	4638      	mov	r0, r7
 8006c0a:	47c0      	blx	r8
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d103      	bne.n	8006c18 <_printf_common+0xac>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	3501      	adds	r5, #1
 8006c1a:	e7c6      	b.n	8006baa <_printf_common+0x3e>
 8006c1c:	18e1      	adds	r1, r4, r3
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	2030      	movs	r0, #48	; 0x30
 8006c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c26:	4422      	add	r2, r4
 8006c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c30:	3302      	adds	r3, #2
 8006c32:	e7c7      	b.n	8006bc4 <_printf_common+0x58>
 8006c34:	2301      	movs	r3, #1
 8006c36:	4622      	mov	r2, r4
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c0      	blx	r8
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d0e6      	beq.n	8006c10 <_printf_common+0xa4>
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7d9      	b.n	8006bfa <_printf_common+0x8e>
	...

08006c48 <_printf_i>:
 8006c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	7e0f      	ldrb	r7, [r1, #24]
 8006c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c50:	2f78      	cmp	r7, #120	; 0x78
 8006c52:	4691      	mov	r9, r2
 8006c54:	4680      	mov	r8, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	469a      	mov	sl, r3
 8006c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c5e:	d807      	bhi.n	8006c70 <_printf_i+0x28>
 8006c60:	2f62      	cmp	r7, #98	; 0x62
 8006c62:	d80a      	bhi.n	8006c7a <_printf_i+0x32>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	f000 80d8 	beq.w	8006e1a <_printf_i+0x1d2>
 8006c6a:	2f58      	cmp	r7, #88	; 0x58
 8006c6c:	f000 80a3 	beq.w	8006db6 <_printf_i+0x16e>
 8006c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c78:	e03a      	b.n	8006cf0 <_printf_i+0xa8>
 8006c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c7e:	2b15      	cmp	r3, #21
 8006c80:	d8f6      	bhi.n	8006c70 <_printf_i+0x28>
 8006c82:	a101      	add	r1, pc, #4	; (adr r1, 8006c88 <_printf_i+0x40>)
 8006c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006cf5 	.word	0x08006cf5
 8006c90:	08006c71 	.word	0x08006c71
 8006c94:	08006c71 	.word	0x08006c71
 8006c98:	08006c71 	.word	0x08006c71
 8006c9c:	08006c71 	.word	0x08006c71
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006c71 	.word	0x08006c71
 8006ca8:	08006c71 	.word	0x08006c71
 8006cac:	08006c71 	.word	0x08006c71
 8006cb0:	08006c71 	.word	0x08006c71
 8006cb4:	08006e01 	.word	0x08006e01
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006de3 	.word	0x08006de3
 8006cc0:	08006c71 	.word	0x08006c71
 8006cc4:	08006c71 	.word	0x08006c71
 8006cc8:	08006e23 	.word	0x08006e23
 8006ccc:	08006c71 	.word	0x08006c71
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006c71 	.word	0x08006c71
 8006cd8:	08006c71 	.word	0x08006c71
 8006cdc:	08006deb 	.word	0x08006deb
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	602a      	str	r2, [r5, #0]
 8006ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0a3      	b.n	8006e3c <_printf_i+0x1f4>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	6829      	ldr	r1, [r5, #0]
 8006cf8:	0606      	lsls	r6, r0, #24
 8006cfa:	f101 0304 	add.w	r3, r1, #4
 8006cfe:	d50a      	bpl.n	8006d16 <_printf_i+0xce>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	da03      	bge.n	8006d10 <_printf_i+0xc8>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	4276      	negs	r6, r6
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d10:	485e      	ldr	r0, [pc, #376]	; (8006e8c <_printf_i+0x244>)
 8006d12:	230a      	movs	r3, #10
 8006d14:	e019      	b.n	8006d4a <_printf_i+0x102>
 8006d16:	680e      	ldr	r6, [r1, #0]
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d1e:	bf18      	it	ne
 8006d20:	b236      	sxthne	r6, r6
 8006d22:	e7ef      	b.n	8006d04 <_printf_i+0xbc>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	6029      	str	r1, [r5, #0]
 8006d2c:	0601      	lsls	r1, r0, #24
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0xec>
 8006d30:	681e      	ldr	r6, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0xf2>
 8006d34:	0646      	lsls	r6, r0, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0xe8>
 8006d38:	881e      	ldrh	r6, [r3, #0]
 8006d3a:	4854      	ldr	r0, [pc, #336]	; (8006e8c <_printf_i+0x244>)
 8006d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d3e:	bf0c      	ite	eq
 8006d40:	2308      	moveq	r3, #8
 8006d42:	230a      	movne	r3, #10
 8006d44:	2100      	movs	r1, #0
 8006d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d4a:	6865      	ldr	r5, [r4, #4]
 8006d4c:	60a5      	str	r5, [r4, #8]
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	bfa2      	ittt	ge
 8006d52:	6821      	ldrge	r1, [r4, #0]
 8006d54:	f021 0104 	bicge.w	r1, r1, #4
 8006d58:	6021      	strge	r1, [r4, #0]
 8006d5a:	b90e      	cbnz	r6, 8006d60 <_printf_i+0x118>
 8006d5c:	2d00      	cmp	r5, #0
 8006d5e:	d04d      	beq.n	8006dfc <_printf_i+0x1b4>
 8006d60:	4615      	mov	r5, r2
 8006d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d66:	fb03 6711 	mls	r7, r3, r1, r6
 8006d6a:	5dc7      	ldrb	r7, [r0, r7]
 8006d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d70:	4637      	mov	r7, r6
 8006d72:	42bb      	cmp	r3, r7
 8006d74:	460e      	mov	r6, r1
 8006d76:	d9f4      	bls.n	8006d62 <_printf_i+0x11a>
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d10b      	bne.n	8006d94 <_printf_i+0x14c>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07de      	lsls	r6, r3, #31
 8006d80:	d508      	bpl.n	8006d94 <_printf_i+0x14c>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	4299      	cmp	r1, r3
 8006d88:	bfde      	ittt	le
 8006d8a:	2330      	movle	r3, #48	; 0x30
 8006d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d94:	1b52      	subs	r2, r2, r5
 8006d96:	6122      	str	r2, [r4, #16]
 8006d98:	f8cd a000 	str.w	sl, [sp]
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	aa03      	add	r2, sp, #12
 8006da0:	4621      	mov	r1, r4
 8006da2:	4640      	mov	r0, r8
 8006da4:	f7ff fee2 	bl	8006b6c <_printf_common>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d14c      	bne.n	8006e46 <_printf_i+0x1fe>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	b004      	add	sp, #16
 8006db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db6:	4835      	ldr	r0, [pc, #212]	; (8006e8c <_printf_i+0x244>)
 8006db8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dc4:	6029      	str	r1, [r5, #0]
 8006dc6:	061d      	lsls	r5, r3, #24
 8006dc8:	d514      	bpl.n	8006df4 <_printf_i+0x1ac>
 8006dca:	07df      	lsls	r7, r3, #31
 8006dcc:	bf44      	itt	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6023      	strmi	r3, [r4, #0]
 8006dd4:	b91e      	cbnz	r6, 8006dde <_printf_i+0x196>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f023 0320 	bic.w	r3, r3, #32
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	2310      	movs	r3, #16
 8006de0:	e7b0      	b.n	8006d44 <_printf_i+0xfc>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f043 0320 	orr.w	r3, r3, #32
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	2378      	movs	r3, #120	; 0x78
 8006dec:	4828      	ldr	r0, [pc, #160]	; (8006e90 <_printf_i+0x248>)
 8006dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006df2:	e7e3      	b.n	8006dbc <_printf_i+0x174>
 8006df4:	0659      	lsls	r1, r3, #25
 8006df6:	bf48      	it	mi
 8006df8:	b2b6      	uxthmi	r6, r6
 8006dfa:	e7e6      	b.n	8006dca <_printf_i+0x182>
 8006dfc:	4615      	mov	r5, r2
 8006dfe:	e7bb      	b.n	8006d78 <_printf_i+0x130>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	6826      	ldr	r6, [r4, #0]
 8006e04:	6961      	ldr	r1, [r4, #20]
 8006e06:	1d18      	adds	r0, r3, #4
 8006e08:	6028      	str	r0, [r5, #0]
 8006e0a:	0635      	lsls	r5, r6, #24
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	d501      	bpl.n	8006e14 <_printf_i+0x1cc>
 8006e10:	6019      	str	r1, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <_printf_i+0x1d2>
 8006e14:	0670      	lsls	r0, r6, #25
 8006e16:	d5fb      	bpl.n	8006e10 <_printf_i+0x1c8>
 8006e18:	8019      	strh	r1, [r3, #0]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	4615      	mov	r5, r2
 8006e20:	e7ba      	b.n	8006d98 <_printf_i+0x150>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	1d1a      	adds	r2, r3, #4
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7f9 f9f6 	bl	8000220 <memchr>
 8006e34:	b108      	cbz	r0, 8006e3a <_printf_i+0x1f2>
 8006e36:	1b40      	subs	r0, r0, r5
 8006e38:	6060      	str	r0, [r4, #4]
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e44:	e7a8      	b.n	8006d98 <_printf_i+0x150>
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	47d0      	blx	sl
 8006e50:	3001      	adds	r0, #1
 8006e52:	d0ab      	beq.n	8006dac <_printf_i+0x164>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	079b      	lsls	r3, r3, #30
 8006e58:	d413      	bmi.n	8006e82 <_printf_i+0x23a>
 8006e5a:	68e0      	ldr	r0, [r4, #12]
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	bfb8      	it	lt
 8006e62:	4618      	movlt	r0, r3
 8006e64:	e7a4      	b.n	8006db0 <_printf_i+0x168>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	47d0      	blx	sl
 8006e70:	3001      	adds	r0, #1
 8006e72:	d09b      	beq.n	8006dac <_printf_i+0x164>
 8006e74:	3501      	adds	r5, #1
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	9903      	ldr	r1, [sp, #12]
 8006e7a:	1a5b      	subs	r3, r3, r1
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dcf2      	bgt.n	8006e66 <_printf_i+0x21e>
 8006e80:	e7eb      	b.n	8006e5a <_printf_i+0x212>
 8006e82:	2500      	movs	r5, #0
 8006e84:	f104 0619 	add.w	r6, r4, #25
 8006e88:	e7f5      	b.n	8006e76 <_printf_i+0x22e>
 8006e8a:	bf00      	nop
 8006e8c:	0800ade6 	.word	0x0800ade6
 8006e90:	0800adf7 	.word	0x0800adf7

08006e94 <_scanf_float>:
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	b087      	sub	sp, #28
 8006e9a:	4617      	mov	r7, r2
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	688b      	ldr	r3, [r1, #8]
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ea6:	bf83      	ittte	hi
 8006ea8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006eac:	195b      	addhi	r3, r3, r5
 8006eae:	9302      	strhi	r3, [sp, #8]
 8006eb0:	2300      	movls	r3, #0
 8006eb2:	bf86      	itte	hi
 8006eb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006eb8:	608b      	strhi	r3, [r1, #8]
 8006eba:	9302      	strls	r3, [sp, #8]
 8006ebc:	680b      	ldr	r3, [r1, #0]
 8006ebe:	468b      	mov	fp, r1
 8006ec0:	2500      	movs	r5, #0
 8006ec2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ec6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006eca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ece:	4680      	mov	r8, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	465e      	mov	r6, fp
 8006ed4:	46aa      	mov	sl, r5
 8006ed6:	46a9      	mov	r9, r5
 8006ed8:	9501      	str	r5, [sp, #4]
 8006eda:	68a2      	ldr	r2, [r4, #8]
 8006edc:	b152      	cbz	r2, 8006ef4 <_scanf_float+0x60>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ee4:	d864      	bhi.n	8006fb0 <_scanf_float+0x11c>
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d83c      	bhi.n	8006f64 <_scanf_float+0xd0>
 8006eea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006eee:	b2c8      	uxtb	r0, r1
 8006ef0:	280e      	cmp	r0, #14
 8006ef2:	d93a      	bls.n	8006f6a <_scanf_float+0xd6>
 8006ef4:	f1b9 0f00 	cmp.w	r9, #0
 8006ef8:	d003      	beq.n	8006f02 <_scanf_float+0x6e>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f06:	f1ba 0f01 	cmp.w	sl, #1
 8006f0a:	f200 8113 	bhi.w	8007134 <_scanf_float+0x2a0>
 8006f0e:	455e      	cmp	r6, fp
 8006f10:	f200 8105 	bhi.w	800711e <_scanf_float+0x28a>
 8006f14:	2501      	movs	r5, #1
 8006f16:	4628      	mov	r0, r5
 8006f18:	b007      	add	sp, #28
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f22:	2a0d      	cmp	r2, #13
 8006f24:	d8e6      	bhi.n	8006ef4 <_scanf_float+0x60>
 8006f26:	a101      	add	r1, pc, #4	; (adr r1, 8006f2c <_scanf_float+0x98>)
 8006f28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f2c:	0800706b 	.word	0x0800706b
 8006f30:	08006ef5 	.word	0x08006ef5
 8006f34:	08006ef5 	.word	0x08006ef5
 8006f38:	08006ef5 	.word	0x08006ef5
 8006f3c:	080070cb 	.word	0x080070cb
 8006f40:	080070a3 	.word	0x080070a3
 8006f44:	08006ef5 	.word	0x08006ef5
 8006f48:	08006ef5 	.word	0x08006ef5
 8006f4c:	08007079 	.word	0x08007079
 8006f50:	08006ef5 	.word	0x08006ef5
 8006f54:	08006ef5 	.word	0x08006ef5
 8006f58:	08006ef5 	.word	0x08006ef5
 8006f5c:	08006ef5 	.word	0x08006ef5
 8006f60:	08007031 	.word	0x08007031
 8006f64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f68:	e7db      	b.n	8006f22 <_scanf_float+0x8e>
 8006f6a:	290e      	cmp	r1, #14
 8006f6c:	d8c2      	bhi.n	8006ef4 <_scanf_float+0x60>
 8006f6e:	a001      	add	r0, pc, #4	; (adr r0, 8006f74 <_scanf_float+0xe0>)
 8006f70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f74:	08007023 	.word	0x08007023
 8006f78:	08006ef5 	.word	0x08006ef5
 8006f7c:	08007023 	.word	0x08007023
 8006f80:	080070b7 	.word	0x080070b7
 8006f84:	08006ef5 	.word	0x08006ef5
 8006f88:	08006fd1 	.word	0x08006fd1
 8006f8c:	0800700d 	.word	0x0800700d
 8006f90:	0800700d 	.word	0x0800700d
 8006f94:	0800700d 	.word	0x0800700d
 8006f98:	0800700d 	.word	0x0800700d
 8006f9c:	0800700d 	.word	0x0800700d
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	0800700d 	.word	0x0800700d
 8006fb0:	2b6e      	cmp	r3, #110	; 0x6e
 8006fb2:	d809      	bhi.n	8006fc8 <_scanf_float+0x134>
 8006fb4:	2b60      	cmp	r3, #96	; 0x60
 8006fb6:	d8b2      	bhi.n	8006f1e <_scanf_float+0x8a>
 8006fb8:	2b54      	cmp	r3, #84	; 0x54
 8006fba:	d077      	beq.n	80070ac <_scanf_float+0x218>
 8006fbc:	2b59      	cmp	r3, #89	; 0x59
 8006fbe:	d199      	bne.n	8006ef4 <_scanf_float+0x60>
 8006fc0:	2d07      	cmp	r5, #7
 8006fc2:	d197      	bne.n	8006ef4 <_scanf_float+0x60>
 8006fc4:	2508      	movs	r5, #8
 8006fc6:	e029      	b.n	800701c <_scanf_float+0x188>
 8006fc8:	2b74      	cmp	r3, #116	; 0x74
 8006fca:	d06f      	beq.n	80070ac <_scanf_float+0x218>
 8006fcc:	2b79      	cmp	r3, #121	; 0x79
 8006fce:	e7f6      	b.n	8006fbe <_scanf_float+0x12a>
 8006fd0:	6821      	ldr	r1, [r4, #0]
 8006fd2:	05c8      	lsls	r0, r1, #23
 8006fd4:	d51a      	bpl.n	800700c <_scanf_float+0x178>
 8006fd6:	9b02      	ldr	r3, [sp, #8]
 8006fd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fdc:	6021      	str	r1, [r4, #0]
 8006fde:	f109 0901 	add.w	r9, r9, #1
 8006fe2:	b11b      	cbz	r3, 8006fec <_scanf_float+0x158>
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	3201      	adds	r2, #1
 8006fe8:	9302      	str	r3, [sp, #8]
 8006fea:	60a2      	str	r2, [r4, #8]
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	607b      	str	r3, [r7, #4]
 8007000:	f340 8084 	ble.w	800710c <_scanf_float+0x278>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	e766      	b.n	8006eda <_scanf_float+0x46>
 800700c:	eb1a 0f05 	cmn.w	sl, r5
 8007010:	f47f af70 	bne.w	8006ef4 <_scanf_float+0x60>
 8007014:	6822      	ldr	r2, [r4, #0]
 8007016:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800701a:	6022      	str	r2, [r4, #0]
 800701c:	f806 3b01 	strb.w	r3, [r6], #1
 8007020:	e7e4      	b.n	8006fec <_scanf_float+0x158>
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	0610      	lsls	r0, r2, #24
 8007026:	f57f af65 	bpl.w	8006ef4 <_scanf_float+0x60>
 800702a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800702e:	e7f4      	b.n	800701a <_scanf_float+0x186>
 8007030:	f1ba 0f00 	cmp.w	sl, #0
 8007034:	d10e      	bne.n	8007054 <_scanf_float+0x1c0>
 8007036:	f1b9 0f00 	cmp.w	r9, #0
 800703a:	d10e      	bne.n	800705a <_scanf_float+0x1c6>
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007042:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007046:	d108      	bne.n	800705a <_scanf_float+0x1c6>
 8007048:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800704c:	6022      	str	r2, [r4, #0]
 800704e:	f04f 0a01 	mov.w	sl, #1
 8007052:	e7e3      	b.n	800701c <_scanf_float+0x188>
 8007054:	f1ba 0f02 	cmp.w	sl, #2
 8007058:	d055      	beq.n	8007106 <_scanf_float+0x272>
 800705a:	2d01      	cmp	r5, #1
 800705c:	d002      	beq.n	8007064 <_scanf_float+0x1d0>
 800705e:	2d04      	cmp	r5, #4
 8007060:	f47f af48 	bne.w	8006ef4 <_scanf_float+0x60>
 8007064:	3501      	adds	r5, #1
 8007066:	b2ed      	uxtb	r5, r5
 8007068:	e7d8      	b.n	800701c <_scanf_float+0x188>
 800706a:	f1ba 0f01 	cmp.w	sl, #1
 800706e:	f47f af41 	bne.w	8006ef4 <_scanf_float+0x60>
 8007072:	f04f 0a02 	mov.w	sl, #2
 8007076:	e7d1      	b.n	800701c <_scanf_float+0x188>
 8007078:	b97d      	cbnz	r5, 800709a <_scanf_float+0x206>
 800707a:	f1b9 0f00 	cmp.w	r9, #0
 800707e:	f47f af3c 	bne.w	8006efa <_scanf_float+0x66>
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007088:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800708c:	f47f af39 	bne.w	8006f02 <_scanf_float+0x6e>
 8007090:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007094:	6022      	str	r2, [r4, #0]
 8007096:	2501      	movs	r5, #1
 8007098:	e7c0      	b.n	800701c <_scanf_float+0x188>
 800709a:	2d03      	cmp	r5, #3
 800709c:	d0e2      	beq.n	8007064 <_scanf_float+0x1d0>
 800709e:	2d05      	cmp	r5, #5
 80070a0:	e7de      	b.n	8007060 <_scanf_float+0x1cc>
 80070a2:	2d02      	cmp	r5, #2
 80070a4:	f47f af26 	bne.w	8006ef4 <_scanf_float+0x60>
 80070a8:	2503      	movs	r5, #3
 80070aa:	e7b7      	b.n	800701c <_scanf_float+0x188>
 80070ac:	2d06      	cmp	r5, #6
 80070ae:	f47f af21 	bne.w	8006ef4 <_scanf_float+0x60>
 80070b2:	2507      	movs	r5, #7
 80070b4:	e7b2      	b.n	800701c <_scanf_float+0x188>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	0591      	lsls	r1, r2, #22
 80070ba:	f57f af1b 	bpl.w	8006ef4 <_scanf_float+0x60>
 80070be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070c2:	6022      	str	r2, [r4, #0]
 80070c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80070c8:	e7a8      	b.n	800701c <_scanf_float+0x188>
 80070ca:	6822      	ldr	r2, [r4, #0]
 80070cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070d4:	d006      	beq.n	80070e4 <_scanf_float+0x250>
 80070d6:	0550      	lsls	r0, r2, #21
 80070d8:	f57f af0c 	bpl.w	8006ef4 <_scanf_float+0x60>
 80070dc:	f1b9 0f00 	cmp.w	r9, #0
 80070e0:	f43f af0f 	beq.w	8006f02 <_scanf_float+0x6e>
 80070e4:	0591      	lsls	r1, r2, #22
 80070e6:	bf58      	it	pl
 80070e8:	9901      	ldrpl	r1, [sp, #4]
 80070ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070ee:	bf58      	it	pl
 80070f0:	eba9 0101 	subpl.w	r1, r9, r1
 80070f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070f8:	bf58      	it	pl
 80070fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070fe:	6022      	str	r2, [r4, #0]
 8007100:	f04f 0900 	mov.w	r9, #0
 8007104:	e78a      	b.n	800701c <_scanf_float+0x188>
 8007106:	f04f 0a03 	mov.w	sl, #3
 800710a:	e787      	b.n	800701c <_scanf_float+0x188>
 800710c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007110:	4639      	mov	r1, r7
 8007112:	4640      	mov	r0, r8
 8007114:	4798      	blx	r3
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f aedf 	beq.w	8006eda <_scanf_float+0x46>
 800711c:	e6ea      	b.n	8006ef4 <_scanf_float+0x60>
 800711e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007126:	463a      	mov	r2, r7
 8007128:	4640      	mov	r0, r8
 800712a:	4798      	blx	r3
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	e6ec      	b.n	8006f0e <_scanf_float+0x7a>
 8007134:	1e6b      	subs	r3, r5, #1
 8007136:	2b06      	cmp	r3, #6
 8007138:	d825      	bhi.n	8007186 <_scanf_float+0x2f2>
 800713a:	2d02      	cmp	r5, #2
 800713c:	d836      	bhi.n	80071ac <_scanf_float+0x318>
 800713e:	455e      	cmp	r6, fp
 8007140:	f67f aee8 	bls.w	8006f14 <_scanf_float+0x80>
 8007144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007148:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800714c:	463a      	mov	r2, r7
 800714e:	4640      	mov	r0, r8
 8007150:	4798      	blx	r3
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	3b01      	subs	r3, #1
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	e7f1      	b.n	800713e <_scanf_float+0x2aa>
 800715a:	9802      	ldr	r0, [sp, #8]
 800715c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007160:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007164:	9002      	str	r0, [sp, #8]
 8007166:	463a      	mov	r2, r7
 8007168:	4640      	mov	r0, r8
 800716a:	4798      	blx	r3
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	3b01      	subs	r3, #1
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007176:	fa5f fa8a 	uxtb.w	sl, sl
 800717a:	f1ba 0f02 	cmp.w	sl, #2
 800717e:	d1ec      	bne.n	800715a <_scanf_float+0x2c6>
 8007180:	3d03      	subs	r5, #3
 8007182:	b2ed      	uxtb	r5, r5
 8007184:	1b76      	subs	r6, r6, r5
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	05da      	lsls	r2, r3, #23
 800718a:	d52f      	bpl.n	80071ec <_scanf_float+0x358>
 800718c:	055b      	lsls	r3, r3, #21
 800718e:	d510      	bpl.n	80071b2 <_scanf_float+0x31e>
 8007190:	455e      	cmp	r6, fp
 8007192:	f67f aebf 	bls.w	8006f14 <_scanf_float+0x80>
 8007196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800719a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800719e:	463a      	mov	r2, r7
 80071a0:	4640      	mov	r0, r8
 80071a2:	4798      	blx	r3
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	e7f1      	b.n	8007190 <_scanf_float+0x2fc>
 80071ac:	46aa      	mov	sl, r5
 80071ae:	9602      	str	r6, [sp, #8]
 80071b0:	e7df      	b.n	8007172 <_scanf_float+0x2de>
 80071b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	2965      	cmp	r1, #101	; 0x65
 80071ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80071be:	f106 35ff 	add.w	r5, r6, #4294967295
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	d00c      	beq.n	80071e0 <_scanf_float+0x34c>
 80071c6:	2945      	cmp	r1, #69	; 0x45
 80071c8:	d00a      	beq.n	80071e0 <_scanf_float+0x34c>
 80071ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071ce:	463a      	mov	r2, r7
 80071d0:	4640      	mov	r0, r8
 80071d2:	4798      	blx	r3
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071da:	3b01      	subs	r3, #1
 80071dc:	1eb5      	subs	r5, r6, #2
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071e4:	463a      	mov	r2, r7
 80071e6:	4640      	mov	r0, r8
 80071e8:	4798      	blx	r3
 80071ea:	462e      	mov	r6, r5
 80071ec:	6825      	ldr	r5, [r4, #0]
 80071ee:	f015 0510 	ands.w	r5, r5, #16
 80071f2:	d159      	bne.n	80072a8 <_scanf_float+0x414>
 80071f4:	7035      	strb	r5, [r6, #0]
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007200:	d11b      	bne.n	800723a <_scanf_float+0x3a6>
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	454b      	cmp	r3, r9
 8007206:	eba3 0209 	sub.w	r2, r3, r9
 800720a:	d123      	bne.n	8007254 <_scanf_float+0x3c0>
 800720c:	2200      	movs	r2, #0
 800720e:	4659      	mov	r1, fp
 8007210:	4640      	mov	r0, r8
 8007212:	f000 feeb 	bl	8007fec <_strtod_r>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	f012 0f02 	tst.w	r2, #2
 800721e:	ec57 6b10 	vmov	r6, r7, d0
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	d021      	beq.n	800726a <_scanf_float+0x3d6>
 8007226:	9903      	ldr	r1, [sp, #12]
 8007228:	1d1a      	adds	r2, r3, #4
 800722a:	600a      	str	r2, [r1, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	e9c3 6700 	strd	r6, r7, [r3]
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60e3      	str	r3, [r4, #12]
 8007238:	e66d      	b.n	8006f16 <_scanf_float+0x82>
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0e5      	beq.n	800720c <_scanf_float+0x378>
 8007240:	9905      	ldr	r1, [sp, #20]
 8007242:	230a      	movs	r3, #10
 8007244:	462a      	mov	r2, r5
 8007246:	3101      	adds	r1, #1
 8007248:	4640      	mov	r0, r8
 800724a:	f000 ff57 	bl	80080fc <_strtol_r>
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	9e05      	ldr	r6, [sp, #20]
 8007252:	1ac2      	subs	r2, r0, r3
 8007254:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007258:	429e      	cmp	r6, r3
 800725a:	bf28      	it	cs
 800725c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007260:	4912      	ldr	r1, [pc, #72]	; (80072ac <_scanf_float+0x418>)
 8007262:	4630      	mov	r0, r6
 8007264:	f000 f880 	bl	8007368 <siprintf>
 8007268:	e7d0      	b.n	800720c <_scanf_float+0x378>
 800726a:	9903      	ldr	r1, [sp, #12]
 800726c:	f012 0f04 	tst.w	r2, #4
 8007270:	f103 0204 	add.w	r2, r3, #4
 8007274:	600a      	str	r2, [r1, #0]
 8007276:	d1d9      	bne.n	800722c <_scanf_float+0x398>
 8007278:	f8d3 8000 	ldr.w	r8, [r3]
 800727c:	ee10 2a10 	vmov	r2, s0
 8007280:	ee10 0a10 	vmov	r0, s0
 8007284:	463b      	mov	r3, r7
 8007286:	4639      	mov	r1, r7
 8007288:	f7f9 fc70 	bl	8000b6c <__aeabi_dcmpun>
 800728c:	b128      	cbz	r0, 800729a <_scanf_float+0x406>
 800728e:	4808      	ldr	r0, [pc, #32]	; (80072b0 <_scanf_float+0x41c>)
 8007290:	f000 f820 	bl	80072d4 <nanf>
 8007294:	ed88 0a00 	vstr	s0, [r8]
 8007298:	e7cb      	b.n	8007232 <_scanf_float+0x39e>
 800729a:	4630      	mov	r0, r6
 800729c:	4639      	mov	r1, r7
 800729e:	f7f9 fcc3 	bl	8000c28 <__aeabi_d2f>
 80072a2:	f8c8 0000 	str.w	r0, [r8]
 80072a6:	e7c4      	b.n	8007232 <_scanf_float+0x39e>
 80072a8:	2500      	movs	r5, #0
 80072aa:	e634      	b.n	8006f16 <_scanf_float+0x82>
 80072ac:	0800ae08 	.word	0x0800ae08
 80072b0:	0800b210 	.word	0x0800b210

080072b4 <_sbrk_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d06      	ldr	r5, [pc, #24]	; (80072d0 <_sbrk_r+0x1c>)
 80072b8:	2300      	movs	r3, #0
 80072ba:	4604      	mov	r4, r0
 80072bc:	4608      	mov	r0, r1
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	f7fa fb84 	bl	80019cc <_sbrk>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_sbrk_r+0x1a>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_sbrk_r+0x1a>
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	200002a8 	.word	0x200002a8

080072d4 <nanf>:
 80072d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072dc <nanf+0x8>
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	7fc00000 	.word	0x7fc00000

080072e0 <_raise_r>:
 80072e0:	291f      	cmp	r1, #31
 80072e2:	b538      	push	{r3, r4, r5, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	d904      	bls.n	80072f4 <_raise_r+0x14>
 80072ea:	2316      	movs	r3, #22
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072f6:	b112      	cbz	r2, 80072fe <_raise_r+0x1e>
 80072f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072fc:	b94b      	cbnz	r3, 8007312 <_raise_r+0x32>
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f830 	bl	8007364 <_getpid_r>
 8007304:	462a      	mov	r2, r5
 8007306:	4601      	mov	r1, r0
 8007308:	4620      	mov	r0, r4
 800730a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800730e:	f000 b817 	b.w	8007340 <_kill_r>
 8007312:	2b01      	cmp	r3, #1
 8007314:	d00a      	beq.n	800732c <_raise_r+0x4c>
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	d103      	bne.n	8007322 <_raise_r+0x42>
 800731a:	2316      	movs	r3, #22
 800731c:	6003      	str	r3, [r0, #0]
 800731e:	2001      	movs	r0, #1
 8007320:	e7e7      	b.n	80072f2 <_raise_r+0x12>
 8007322:	2400      	movs	r4, #0
 8007324:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007328:	4628      	mov	r0, r5
 800732a:	4798      	blx	r3
 800732c:	2000      	movs	r0, #0
 800732e:	e7e0      	b.n	80072f2 <_raise_r+0x12>

08007330 <raise>:
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <raise+0xc>)
 8007332:	4601      	mov	r1, r0
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f7ff bfd3 	b.w	80072e0 <_raise_r>
 800733a:	bf00      	nop
 800733c:	20000010 	.word	0x20000010

08007340 <_kill_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4d07      	ldr	r5, [pc, #28]	; (8007360 <_kill_r+0x20>)
 8007344:	2300      	movs	r3, #0
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	f7fa fab5 	bl	80018bc <_kill>
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	d102      	bne.n	800735c <_kill_r+0x1c>
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	b103      	cbz	r3, 800735c <_kill_r+0x1c>
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	bd38      	pop	{r3, r4, r5, pc}
 800735e:	bf00      	nop
 8007360:	200002a8 	.word	0x200002a8

08007364 <_getpid_r>:
 8007364:	f7fa baa2 	b.w	80018ac <_getpid>

08007368 <siprintf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b500      	push	{lr}
 800736c:	b09c      	sub	sp, #112	; 0x70
 800736e:	ab1d      	add	r3, sp, #116	; 0x74
 8007370:	9002      	str	r0, [sp, #8]
 8007372:	9006      	str	r0, [sp, #24]
 8007374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <siprintf+0x38>)
 800737a:	9107      	str	r1, [sp, #28]
 800737c:	9104      	str	r1, [sp, #16]
 800737e:	4909      	ldr	r1, [pc, #36]	; (80073a4 <siprintf+0x3c>)
 8007380:	f853 2b04 	ldr.w	r2, [r3], #4
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	a902      	add	r1, sp, #8
 800738c:	f002 fdf6 	bl	8009f7c <_svfiprintf_r>
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	b01c      	add	sp, #112	; 0x70
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b003      	add	sp, #12
 800739e:	4770      	bx	lr
 80073a0:	20000010 	.word	0x20000010
 80073a4:	ffff0208 	.word	0xffff0208

080073a8 <sulp>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	460d      	mov	r5, r1
 80073ae:	ec45 4b10 	vmov	d0, r4, r5
 80073b2:	4616      	mov	r6, r2
 80073b4:	f002 fc22 	bl	8009bfc <__ulp>
 80073b8:	ec51 0b10 	vmov	r0, r1, d0
 80073bc:	b17e      	cbz	r6, 80073de <sulp+0x36>
 80073be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80073c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd09      	ble.n	80073de <sulp+0x36>
 80073ca:	051b      	lsls	r3, r3, #20
 80073cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073d0:	2400      	movs	r4, #0
 80073d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073d6:	4622      	mov	r2, r4
 80073d8:	462b      	mov	r3, r5
 80073da:	f7f9 f92d 	bl	8000638 <__aeabi_dmul>
 80073de:	bd70      	pop	{r4, r5, r6, pc}

080073e0 <_strtod_l>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	ed2d 8b02 	vpush	{d8}
 80073e8:	b09d      	sub	sp, #116	; 0x74
 80073ea:	461f      	mov	r7, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	9318      	str	r3, [sp, #96]	; 0x60
 80073f0:	4ba2      	ldr	r3, [pc, #648]	; (800767c <_strtod_l+0x29c>)
 80073f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	4604      	mov	r4, r0
 80073fa:	4618      	mov	r0, r3
 80073fc:	4688      	mov	r8, r1
 80073fe:	f7f8 ff07 	bl	8000210 <strlen>
 8007402:	f04f 0a00 	mov.w	sl, #0
 8007406:	4605      	mov	r5, r0
 8007408:	f04f 0b00 	mov.w	fp, #0
 800740c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	2a2b      	cmp	r2, #43	; 0x2b
 8007416:	d04e      	beq.n	80074b6 <_strtod_l+0xd6>
 8007418:	d83b      	bhi.n	8007492 <_strtod_l+0xb2>
 800741a:	2a0d      	cmp	r2, #13
 800741c:	d834      	bhi.n	8007488 <_strtod_l+0xa8>
 800741e:	2a08      	cmp	r2, #8
 8007420:	d834      	bhi.n	800748c <_strtod_l+0xac>
 8007422:	2a00      	cmp	r2, #0
 8007424:	d03e      	beq.n	80074a4 <_strtod_l+0xc4>
 8007426:	2300      	movs	r3, #0
 8007428:	930a      	str	r3, [sp, #40]	; 0x28
 800742a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800742c:	7833      	ldrb	r3, [r6, #0]
 800742e:	2b30      	cmp	r3, #48	; 0x30
 8007430:	f040 80b0 	bne.w	8007594 <_strtod_l+0x1b4>
 8007434:	7873      	ldrb	r3, [r6, #1]
 8007436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800743a:	2b58      	cmp	r3, #88	; 0x58
 800743c:	d168      	bne.n	8007510 <_strtod_l+0x130>
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	ab18      	add	r3, sp, #96	; 0x60
 8007444:	9702      	str	r7, [sp, #8]
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4a8d      	ldr	r2, [pc, #564]	; (8007680 <_strtod_l+0x2a0>)
 800744a:	ab19      	add	r3, sp, #100	; 0x64
 800744c:	a917      	add	r1, sp, #92	; 0x5c
 800744e:	4620      	mov	r0, r4
 8007450:	f001 fd38 	bl	8008ec4 <__gethex>
 8007454:	f010 0707 	ands.w	r7, r0, #7
 8007458:	4605      	mov	r5, r0
 800745a:	d005      	beq.n	8007468 <_strtod_l+0x88>
 800745c:	2f06      	cmp	r7, #6
 800745e:	d12c      	bne.n	80074ba <_strtod_l+0xda>
 8007460:	3601      	adds	r6, #1
 8007462:	2300      	movs	r3, #0
 8007464:	9617      	str	r6, [sp, #92]	; 0x5c
 8007466:	930a      	str	r3, [sp, #40]	; 0x28
 8007468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 8590 	bne.w	8007f90 <_strtod_l+0xbb0>
 8007470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007472:	b1eb      	cbz	r3, 80074b0 <_strtod_l+0xd0>
 8007474:	4652      	mov	r2, sl
 8007476:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800747a:	ec43 2b10 	vmov	d0, r2, r3
 800747e:	b01d      	add	sp, #116	; 0x74
 8007480:	ecbd 8b02 	vpop	{d8}
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	2a20      	cmp	r2, #32
 800748a:	d1cc      	bne.n	8007426 <_strtod_l+0x46>
 800748c:	3301      	adds	r3, #1
 800748e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007490:	e7be      	b.n	8007410 <_strtod_l+0x30>
 8007492:	2a2d      	cmp	r2, #45	; 0x2d
 8007494:	d1c7      	bne.n	8007426 <_strtod_l+0x46>
 8007496:	2201      	movs	r2, #1
 8007498:	920a      	str	r2, [sp, #40]	; 0x28
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	9217      	str	r2, [sp, #92]	; 0x5c
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1c2      	bne.n	800742a <_strtod_l+0x4a>
 80074a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 856e 	bne.w	8007f8c <_strtod_l+0xbac>
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	e7e1      	b.n	800747a <_strtod_l+0x9a>
 80074b6:	2200      	movs	r2, #0
 80074b8:	e7ee      	b.n	8007498 <_strtod_l+0xb8>
 80074ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80074bc:	b13a      	cbz	r2, 80074ce <_strtod_l+0xee>
 80074be:	2135      	movs	r1, #53	; 0x35
 80074c0:	a81a      	add	r0, sp, #104	; 0x68
 80074c2:	f002 fca6 	bl	8009e12 <__copybits>
 80074c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074c8:	4620      	mov	r0, r4
 80074ca:	f002 f865 	bl	8009598 <_Bfree>
 80074ce:	3f01      	subs	r7, #1
 80074d0:	2f04      	cmp	r7, #4
 80074d2:	d806      	bhi.n	80074e2 <_strtod_l+0x102>
 80074d4:	e8df f007 	tbb	[pc, r7]
 80074d8:	1714030a 	.word	0x1714030a
 80074dc:	0a          	.byte	0x0a
 80074dd:	00          	.byte	0x00
 80074de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80074e2:	0728      	lsls	r0, r5, #28
 80074e4:	d5c0      	bpl.n	8007468 <_strtod_l+0x88>
 80074e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80074ea:	e7bd      	b.n	8007468 <_strtod_l+0x88>
 80074ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80074f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074fe:	e7f0      	b.n	80074e2 <_strtod_l+0x102>
 8007500:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007684 <_strtod_l+0x2a4>
 8007504:	e7ed      	b.n	80074e2 <_strtod_l+0x102>
 8007506:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800750a:	f04f 3aff 	mov.w	sl, #4294967295
 800750e:	e7e8      	b.n	80074e2 <_strtod_l+0x102>
 8007510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	9217      	str	r2, [sp, #92]	; 0x5c
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b30      	cmp	r3, #48	; 0x30
 800751a:	d0f9      	beq.n	8007510 <_strtod_l+0x130>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0a3      	beq.n	8007468 <_strtod_l+0x88>
 8007520:	2301      	movs	r3, #1
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800752a:	9308      	str	r3, [sp, #32]
 800752c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007530:	464f      	mov	r7, r9
 8007532:	220a      	movs	r2, #10
 8007534:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007536:	7806      	ldrb	r6, [r0, #0]
 8007538:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800753c:	b2d9      	uxtb	r1, r3
 800753e:	2909      	cmp	r1, #9
 8007540:	d92a      	bls.n	8007598 <_strtod_l+0x1b8>
 8007542:	9905      	ldr	r1, [sp, #20]
 8007544:	462a      	mov	r2, r5
 8007546:	f002 fe23 	bl	800a190 <strncmp>
 800754a:	b398      	cbz	r0, 80075b4 <_strtod_l+0x1d4>
 800754c:	2000      	movs	r0, #0
 800754e:	4632      	mov	r2, r6
 8007550:	463d      	mov	r5, r7
 8007552:	9005      	str	r0, [sp, #20]
 8007554:	4603      	mov	r3, r0
 8007556:	2a65      	cmp	r2, #101	; 0x65
 8007558:	d001      	beq.n	800755e <_strtod_l+0x17e>
 800755a:	2a45      	cmp	r2, #69	; 0x45
 800755c:	d118      	bne.n	8007590 <_strtod_l+0x1b0>
 800755e:	b91d      	cbnz	r5, 8007568 <_strtod_l+0x188>
 8007560:	9a04      	ldr	r2, [sp, #16]
 8007562:	4302      	orrs	r2, r0
 8007564:	d09e      	beq.n	80074a4 <_strtod_l+0xc4>
 8007566:	2500      	movs	r5, #0
 8007568:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800756c:	f108 0201 	add.w	r2, r8, #1
 8007570:	9217      	str	r2, [sp, #92]	; 0x5c
 8007572:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007576:	2a2b      	cmp	r2, #43	; 0x2b
 8007578:	d075      	beq.n	8007666 <_strtod_l+0x286>
 800757a:	2a2d      	cmp	r2, #45	; 0x2d
 800757c:	d07b      	beq.n	8007676 <_strtod_l+0x296>
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007586:	2909      	cmp	r1, #9
 8007588:	f240 8082 	bls.w	8007690 <_strtod_l+0x2b0>
 800758c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007590:	2600      	movs	r6, #0
 8007592:	e09d      	b.n	80076d0 <_strtod_l+0x2f0>
 8007594:	2300      	movs	r3, #0
 8007596:	e7c4      	b.n	8007522 <_strtod_l+0x142>
 8007598:	2f08      	cmp	r7, #8
 800759a:	bfd8      	it	le
 800759c:	9907      	ldrle	r1, [sp, #28]
 800759e:	f100 0001 	add.w	r0, r0, #1
 80075a2:	bfda      	itte	le
 80075a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80075a8:	9307      	strle	r3, [sp, #28]
 80075aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80075ae:	3701      	adds	r7, #1
 80075b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80075b2:	e7bf      	b.n	8007534 <_strtod_l+0x154>
 80075b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075b6:	195a      	adds	r2, r3, r5
 80075b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80075ba:	5d5a      	ldrb	r2, [r3, r5]
 80075bc:	2f00      	cmp	r7, #0
 80075be:	d037      	beq.n	8007630 <_strtod_l+0x250>
 80075c0:	9005      	str	r0, [sp, #20]
 80075c2:	463d      	mov	r5, r7
 80075c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80075c8:	2b09      	cmp	r3, #9
 80075ca:	d912      	bls.n	80075f2 <_strtod_l+0x212>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7c2      	b.n	8007556 <_strtod_l+0x176>
 80075d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80075d6:	785a      	ldrb	r2, [r3, #1]
 80075d8:	3001      	adds	r0, #1
 80075da:	2a30      	cmp	r2, #48	; 0x30
 80075dc:	d0f8      	beq.n	80075d0 <_strtod_l+0x1f0>
 80075de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	f200 84d9 	bhi.w	8007f9a <_strtod_l+0xbba>
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	9005      	str	r0, [sp, #20]
 80075ec:	2000      	movs	r0, #0
 80075ee:	9308      	str	r3, [sp, #32]
 80075f0:	4605      	mov	r5, r0
 80075f2:	3a30      	subs	r2, #48	; 0x30
 80075f4:	f100 0301 	add.w	r3, r0, #1
 80075f8:	d014      	beq.n	8007624 <_strtod_l+0x244>
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	4419      	add	r1, r3
 80075fe:	9105      	str	r1, [sp, #20]
 8007600:	462b      	mov	r3, r5
 8007602:	eb00 0e05 	add.w	lr, r0, r5
 8007606:	210a      	movs	r1, #10
 8007608:	4573      	cmp	r3, lr
 800760a:	d113      	bne.n	8007634 <_strtod_l+0x254>
 800760c:	182b      	adds	r3, r5, r0
 800760e:	2b08      	cmp	r3, #8
 8007610:	f105 0501 	add.w	r5, r5, #1
 8007614:	4405      	add	r5, r0
 8007616:	dc1c      	bgt.n	8007652 <_strtod_l+0x272>
 8007618:	9907      	ldr	r1, [sp, #28]
 800761a:	230a      	movs	r3, #10
 800761c:	fb03 2301 	mla	r3, r3, r1, r2
 8007620:	9307      	str	r3, [sp, #28]
 8007622:	2300      	movs	r3, #0
 8007624:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007626:	1c51      	adds	r1, r2, #1
 8007628:	9117      	str	r1, [sp, #92]	; 0x5c
 800762a:	7852      	ldrb	r2, [r2, #1]
 800762c:	4618      	mov	r0, r3
 800762e:	e7c9      	b.n	80075c4 <_strtod_l+0x1e4>
 8007630:	4638      	mov	r0, r7
 8007632:	e7d2      	b.n	80075da <_strtod_l+0x1fa>
 8007634:	2b08      	cmp	r3, #8
 8007636:	dc04      	bgt.n	8007642 <_strtod_l+0x262>
 8007638:	9e07      	ldr	r6, [sp, #28]
 800763a:	434e      	muls	r6, r1
 800763c:	9607      	str	r6, [sp, #28]
 800763e:	3301      	adds	r3, #1
 8007640:	e7e2      	b.n	8007608 <_strtod_l+0x228>
 8007642:	f103 0c01 	add.w	ip, r3, #1
 8007646:	f1bc 0f10 	cmp.w	ip, #16
 800764a:	bfd8      	it	le
 800764c:	fb01 f909 	mulle.w	r9, r1, r9
 8007650:	e7f5      	b.n	800763e <_strtod_l+0x25e>
 8007652:	2d10      	cmp	r5, #16
 8007654:	bfdc      	itt	le
 8007656:	230a      	movle	r3, #10
 8007658:	fb03 2909 	mlale	r9, r3, r9, r2
 800765c:	e7e1      	b.n	8007622 <_strtod_l+0x242>
 800765e:	2300      	movs	r3, #0
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	2301      	movs	r3, #1
 8007664:	e77c      	b.n	8007560 <_strtod_l+0x180>
 8007666:	f04f 0c00 	mov.w	ip, #0
 800766a:	f108 0202 	add.w	r2, r8, #2
 800766e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007670:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007674:	e785      	b.n	8007582 <_strtod_l+0x1a2>
 8007676:	f04f 0c01 	mov.w	ip, #1
 800767a:	e7f6      	b.n	800766a <_strtod_l+0x28a>
 800767c:	0800b058 	.word	0x0800b058
 8007680:	0800ae10 	.word	0x0800ae10
 8007684:	7ff00000 	.word	0x7ff00000
 8007688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800768a:	1c51      	adds	r1, r2, #1
 800768c:	9117      	str	r1, [sp, #92]	; 0x5c
 800768e:	7852      	ldrb	r2, [r2, #1]
 8007690:	2a30      	cmp	r2, #48	; 0x30
 8007692:	d0f9      	beq.n	8007688 <_strtod_l+0x2a8>
 8007694:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007698:	2908      	cmp	r1, #8
 800769a:	f63f af79 	bhi.w	8007590 <_strtod_l+0x1b0>
 800769e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80076a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076a4:	9206      	str	r2, [sp, #24]
 80076a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076a8:	1c51      	adds	r1, r2, #1
 80076aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ac:	7852      	ldrb	r2, [r2, #1]
 80076ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80076b2:	2e09      	cmp	r6, #9
 80076b4:	d937      	bls.n	8007726 <_strtod_l+0x346>
 80076b6:	9e06      	ldr	r6, [sp, #24]
 80076b8:	1b89      	subs	r1, r1, r6
 80076ba:	2908      	cmp	r1, #8
 80076bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80076c0:	dc02      	bgt.n	80076c8 <_strtod_l+0x2e8>
 80076c2:	4576      	cmp	r6, lr
 80076c4:	bfa8      	it	ge
 80076c6:	4676      	movge	r6, lr
 80076c8:	f1bc 0f00 	cmp.w	ip, #0
 80076cc:	d000      	beq.n	80076d0 <_strtod_l+0x2f0>
 80076ce:	4276      	negs	r6, r6
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	d14d      	bne.n	8007770 <_strtod_l+0x390>
 80076d4:	9904      	ldr	r1, [sp, #16]
 80076d6:	4301      	orrs	r1, r0
 80076d8:	f47f aec6 	bne.w	8007468 <_strtod_l+0x88>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f aee1 	bne.w	80074a4 <_strtod_l+0xc4>
 80076e2:	2a69      	cmp	r2, #105	; 0x69
 80076e4:	d027      	beq.n	8007736 <_strtod_l+0x356>
 80076e6:	dc24      	bgt.n	8007732 <_strtod_l+0x352>
 80076e8:	2a49      	cmp	r2, #73	; 0x49
 80076ea:	d024      	beq.n	8007736 <_strtod_l+0x356>
 80076ec:	2a4e      	cmp	r2, #78	; 0x4e
 80076ee:	f47f aed9 	bne.w	80074a4 <_strtod_l+0xc4>
 80076f2:	499f      	ldr	r1, [pc, #636]	; (8007970 <_strtod_l+0x590>)
 80076f4:	a817      	add	r0, sp, #92	; 0x5c
 80076f6:	f001 fe3d 	bl	8009374 <__match>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f43f aed2 	beq.w	80074a4 <_strtod_l+0xc4>
 8007700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b28      	cmp	r3, #40	; 0x28
 8007706:	d12d      	bne.n	8007764 <_strtod_l+0x384>
 8007708:	499a      	ldr	r1, [pc, #616]	; (8007974 <_strtod_l+0x594>)
 800770a:	aa1a      	add	r2, sp, #104	; 0x68
 800770c:	a817      	add	r0, sp, #92	; 0x5c
 800770e:	f001 fe45 	bl	800939c <__hexnan>
 8007712:	2805      	cmp	r0, #5
 8007714:	d126      	bne.n	8007764 <_strtod_l+0x384>
 8007716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007718:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800771c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007720:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007724:	e6a0      	b.n	8007468 <_strtod_l+0x88>
 8007726:	210a      	movs	r1, #10
 8007728:	fb01 2e0e 	mla	lr, r1, lr, r2
 800772c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007730:	e7b9      	b.n	80076a6 <_strtod_l+0x2c6>
 8007732:	2a6e      	cmp	r2, #110	; 0x6e
 8007734:	e7db      	b.n	80076ee <_strtod_l+0x30e>
 8007736:	4990      	ldr	r1, [pc, #576]	; (8007978 <_strtod_l+0x598>)
 8007738:	a817      	add	r0, sp, #92	; 0x5c
 800773a:	f001 fe1b 	bl	8009374 <__match>
 800773e:	2800      	cmp	r0, #0
 8007740:	f43f aeb0 	beq.w	80074a4 <_strtod_l+0xc4>
 8007744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007746:	498d      	ldr	r1, [pc, #564]	; (800797c <_strtod_l+0x59c>)
 8007748:	3b01      	subs	r3, #1
 800774a:	a817      	add	r0, sp, #92	; 0x5c
 800774c:	9317      	str	r3, [sp, #92]	; 0x5c
 800774e:	f001 fe11 	bl	8009374 <__match>
 8007752:	b910      	cbnz	r0, 800775a <_strtod_l+0x37a>
 8007754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007756:	3301      	adds	r3, #1
 8007758:	9317      	str	r3, [sp, #92]	; 0x5c
 800775a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800798c <_strtod_l+0x5ac>
 800775e:	f04f 0a00 	mov.w	sl, #0
 8007762:	e681      	b.n	8007468 <_strtod_l+0x88>
 8007764:	4886      	ldr	r0, [pc, #536]	; (8007980 <_strtod_l+0x5a0>)
 8007766:	f002 fd0b 	bl	800a180 <nan>
 800776a:	ec5b ab10 	vmov	sl, fp, d0
 800776e:	e67b      	b.n	8007468 <_strtod_l+0x88>
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	9807      	ldr	r0, [sp, #28]
 8007774:	1af3      	subs	r3, r6, r3
 8007776:	2f00      	cmp	r7, #0
 8007778:	bf08      	it	eq
 800777a:	462f      	moveq	r7, r5
 800777c:	2d10      	cmp	r5, #16
 800777e:	9306      	str	r3, [sp, #24]
 8007780:	46a8      	mov	r8, r5
 8007782:	bfa8      	it	ge
 8007784:	f04f 0810 	movge.w	r8, #16
 8007788:	f7f8 fedc 	bl	8000544 <__aeabi_ui2d>
 800778c:	2d09      	cmp	r5, #9
 800778e:	4682      	mov	sl, r0
 8007790:	468b      	mov	fp, r1
 8007792:	dd13      	ble.n	80077bc <_strtod_l+0x3dc>
 8007794:	4b7b      	ldr	r3, [pc, #492]	; (8007984 <_strtod_l+0x5a4>)
 8007796:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800779a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800779e:	f7f8 ff4b 	bl	8000638 <__aeabi_dmul>
 80077a2:	4682      	mov	sl, r0
 80077a4:	4648      	mov	r0, r9
 80077a6:	468b      	mov	fp, r1
 80077a8:	f7f8 fecc 	bl	8000544 <__aeabi_ui2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	f7f8 fd8a 	bl	80002cc <__adddf3>
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	2d0f      	cmp	r5, #15
 80077be:	dc38      	bgt.n	8007832 <_strtod_l+0x452>
 80077c0:	9b06      	ldr	r3, [sp, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f43f ae50 	beq.w	8007468 <_strtod_l+0x88>
 80077c8:	dd24      	ble.n	8007814 <_strtod_l+0x434>
 80077ca:	2b16      	cmp	r3, #22
 80077cc:	dc0b      	bgt.n	80077e6 <_strtod_l+0x406>
 80077ce:	496d      	ldr	r1, [pc, #436]	; (8007984 <_strtod_l+0x5a4>)
 80077d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d8:	4652      	mov	r2, sl
 80077da:	465b      	mov	r3, fp
 80077dc:	f7f8 ff2c 	bl	8000638 <__aeabi_dmul>
 80077e0:	4682      	mov	sl, r0
 80077e2:	468b      	mov	fp, r1
 80077e4:	e640      	b.n	8007468 <_strtod_l+0x88>
 80077e6:	9a06      	ldr	r2, [sp, #24]
 80077e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80077ec:	4293      	cmp	r3, r2
 80077ee:	db20      	blt.n	8007832 <_strtod_l+0x452>
 80077f0:	4c64      	ldr	r4, [pc, #400]	; (8007984 <_strtod_l+0x5a4>)
 80077f2:	f1c5 050f 	rsb	r5, r5, #15
 80077f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077fa:	4652      	mov	r2, sl
 80077fc:	465b      	mov	r3, fp
 80077fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007802:	f7f8 ff19 	bl	8000638 <__aeabi_dmul>
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	1b5d      	subs	r5, r3, r5
 800780a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800780e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007812:	e7e3      	b.n	80077dc <_strtod_l+0x3fc>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	3316      	adds	r3, #22
 8007818:	db0b      	blt.n	8007832 <_strtod_l+0x452>
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	1b9e      	subs	r6, r3, r6
 800781e:	4b59      	ldr	r3, [pc, #356]	; (8007984 <_strtod_l+0x5a4>)
 8007820:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007824:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	f7f9 f82e 	bl	800088c <__aeabi_ddiv>
 8007830:	e7d6      	b.n	80077e0 <_strtod_l+0x400>
 8007832:	9b06      	ldr	r3, [sp, #24]
 8007834:	eba5 0808 	sub.w	r8, r5, r8
 8007838:	4498      	add	r8, r3
 800783a:	f1b8 0f00 	cmp.w	r8, #0
 800783e:	dd74      	ble.n	800792a <_strtod_l+0x54a>
 8007840:	f018 030f 	ands.w	r3, r8, #15
 8007844:	d00a      	beq.n	800785c <_strtod_l+0x47c>
 8007846:	494f      	ldr	r1, [pc, #316]	; (8007984 <_strtod_l+0x5a4>)
 8007848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800784c:	4652      	mov	r2, sl
 800784e:	465b      	mov	r3, fp
 8007850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007854:	f7f8 fef0 	bl	8000638 <__aeabi_dmul>
 8007858:	4682      	mov	sl, r0
 800785a:	468b      	mov	fp, r1
 800785c:	f038 080f 	bics.w	r8, r8, #15
 8007860:	d04f      	beq.n	8007902 <_strtod_l+0x522>
 8007862:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007866:	dd22      	ble.n	80078ae <_strtod_l+0x4ce>
 8007868:	2500      	movs	r5, #0
 800786a:	462e      	mov	r6, r5
 800786c:	9507      	str	r5, [sp, #28]
 800786e:	9505      	str	r5, [sp, #20]
 8007870:	2322      	movs	r3, #34	; 0x22
 8007872:	f8df b118 	ldr.w	fp, [pc, #280]	; 800798c <_strtod_l+0x5ac>
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f43f adf2 	beq.w	8007468 <_strtod_l+0x88>
 8007884:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007886:	4620      	mov	r0, r4
 8007888:	f001 fe86 	bl	8009598 <_Bfree>
 800788c:	9905      	ldr	r1, [sp, #20]
 800788e:	4620      	mov	r0, r4
 8007890:	f001 fe82 	bl	8009598 <_Bfree>
 8007894:	4631      	mov	r1, r6
 8007896:	4620      	mov	r0, r4
 8007898:	f001 fe7e 	bl	8009598 <_Bfree>
 800789c:	9907      	ldr	r1, [sp, #28]
 800789e:	4620      	mov	r0, r4
 80078a0:	f001 fe7a 	bl	8009598 <_Bfree>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4620      	mov	r0, r4
 80078a8:	f001 fe76 	bl	8009598 <_Bfree>
 80078ac:	e5dc      	b.n	8007468 <_strtod_l+0x88>
 80078ae:	4b36      	ldr	r3, [pc, #216]	; (8007988 <_strtod_l+0x5a8>)
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	2300      	movs	r3, #0
 80078b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80078b8:	4650      	mov	r0, sl
 80078ba:	4659      	mov	r1, fp
 80078bc:	4699      	mov	r9, r3
 80078be:	f1b8 0f01 	cmp.w	r8, #1
 80078c2:	dc21      	bgt.n	8007908 <_strtod_l+0x528>
 80078c4:	b10b      	cbz	r3, 80078ca <_strtod_l+0x4ea>
 80078c6:	4682      	mov	sl, r0
 80078c8:	468b      	mov	fp, r1
 80078ca:	4b2f      	ldr	r3, [pc, #188]	; (8007988 <_strtod_l+0x5a8>)
 80078cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80078d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80078d4:	4652      	mov	r2, sl
 80078d6:	465b      	mov	r3, fp
 80078d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80078dc:	f7f8 feac 	bl	8000638 <__aeabi_dmul>
 80078e0:	4b2a      	ldr	r3, [pc, #168]	; (800798c <_strtod_l+0x5ac>)
 80078e2:	460a      	mov	r2, r1
 80078e4:	400b      	ands	r3, r1
 80078e6:	492a      	ldr	r1, [pc, #168]	; (8007990 <_strtod_l+0x5b0>)
 80078e8:	428b      	cmp	r3, r1
 80078ea:	4682      	mov	sl, r0
 80078ec:	d8bc      	bhi.n	8007868 <_strtod_l+0x488>
 80078ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078f2:	428b      	cmp	r3, r1
 80078f4:	bf86      	itte	hi
 80078f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007994 <_strtod_l+0x5b4>
 80078fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80078fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007902:	2300      	movs	r3, #0
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	e084      	b.n	8007a12 <_strtod_l+0x632>
 8007908:	f018 0f01 	tst.w	r8, #1
 800790c:	d005      	beq.n	800791a <_strtod_l+0x53a>
 800790e:	9b04      	ldr	r3, [sp, #16]
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fe90 	bl	8000638 <__aeabi_dmul>
 8007918:	2301      	movs	r3, #1
 800791a:	9a04      	ldr	r2, [sp, #16]
 800791c:	3208      	adds	r2, #8
 800791e:	f109 0901 	add.w	r9, r9, #1
 8007922:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007926:	9204      	str	r2, [sp, #16]
 8007928:	e7c9      	b.n	80078be <_strtod_l+0x4de>
 800792a:	d0ea      	beq.n	8007902 <_strtod_l+0x522>
 800792c:	f1c8 0800 	rsb	r8, r8, #0
 8007930:	f018 020f 	ands.w	r2, r8, #15
 8007934:	d00a      	beq.n	800794c <_strtod_l+0x56c>
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <_strtod_l+0x5a4>)
 8007938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793c:	4650      	mov	r0, sl
 800793e:	4659      	mov	r1, fp
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f7f8 ffa2 	bl	800088c <__aeabi_ddiv>
 8007948:	4682      	mov	sl, r0
 800794a:	468b      	mov	fp, r1
 800794c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007950:	d0d7      	beq.n	8007902 <_strtod_l+0x522>
 8007952:	f1b8 0f1f 	cmp.w	r8, #31
 8007956:	dd1f      	ble.n	8007998 <_strtod_l+0x5b8>
 8007958:	2500      	movs	r5, #0
 800795a:	462e      	mov	r6, r5
 800795c:	9507      	str	r5, [sp, #28]
 800795e:	9505      	str	r5, [sp, #20]
 8007960:	2322      	movs	r3, #34	; 0x22
 8007962:	f04f 0a00 	mov.w	sl, #0
 8007966:	f04f 0b00 	mov.w	fp, #0
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	e786      	b.n	800787c <_strtod_l+0x49c>
 800796e:	bf00      	nop
 8007970:	0800ade1 	.word	0x0800ade1
 8007974:	0800ae24 	.word	0x0800ae24
 8007978:	0800add9 	.word	0x0800add9
 800797c:	0800af64 	.word	0x0800af64
 8007980:	0800b210 	.word	0x0800b210
 8007984:	0800b0f0 	.word	0x0800b0f0
 8007988:	0800b0c8 	.word	0x0800b0c8
 800798c:	7ff00000 	.word	0x7ff00000
 8007990:	7ca00000 	.word	0x7ca00000
 8007994:	7fefffff 	.word	0x7fefffff
 8007998:	f018 0310 	ands.w	r3, r8, #16
 800799c:	bf18      	it	ne
 800799e:	236a      	movne	r3, #106	; 0x6a
 80079a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007d50 <_strtod_l+0x970>
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	4650      	mov	r0, sl
 80079a8:	4659      	mov	r1, fp
 80079aa:	2300      	movs	r3, #0
 80079ac:	f018 0f01 	tst.w	r8, #1
 80079b0:	d004      	beq.n	80079bc <_strtod_l+0x5dc>
 80079b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80079b6:	f7f8 fe3f 	bl	8000638 <__aeabi_dmul>
 80079ba:	2301      	movs	r3, #1
 80079bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80079c0:	f109 0908 	add.w	r9, r9, #8
 80079c4:	d1f2      	bne.n	80079ac <_strtod_l+0x5cc>
 80079c6:	b10b      	cbz	r3, 80079cc <_strtod_l+0x5ec>
 80079c8:	4682      	mov	sl, r0
 80079ca:	468b      	mov	fp, r1
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	b1c3      	cbz	r3, 8007a02 <_strtod_l+0x622>
 80079d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80079d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079d8:	2b00      	cmp	r3, #0
 80079da:	4659      	mov	r1, fp
 80079dc:	dd11      	ble.n	8007a02 <_strtod_l+0x622>
 80079de:	2b1f      	cmp	r3, #31
 80079e0:	f340 8124 	ble.w	8007c2c <_strtod_l+0x84c>
 80079e4:	2b34      	cmp	r3, #52	; 0x34
 80079e6:	bfde      	ittt	le
 80079e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80079ec:	f04f 33ff 	movle.w	r3, #4294967295
 80079f0:	fa03 f202 	lslle.w	r2, r3, r2
 80079f4:	f04f 0a00 	mov.w	sl, #0
 80079f8:	bfcc      	ite	gt
 80079fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80079fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007a02:	2200      	movs	r2, #0
 8007a04:	2300      	movs	r3, #0
 8007a06:	4650      	mov	r0, sl
 8007a08:	4659      	mov	r1, fp
 8007a0a:	f7f9 f87d 	bl	8000b08 <__aeabi_dcmpeq>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d1a2      	bne.n	8007958 <_strtod_l+0x578>
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	9908      	ldr	r1, [sp, #32]
 8007a18:	462b      	mov	r3, r5
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f001 fe23 	bl	8009668 <__s2b>
 8007a22:	9007      	str	r0, [sp, #28]
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f43f af1f 	beq.w	8007868 <_strtod_l+0x488>
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	1b9e      	subs	r6, r3, r6
 8007a2e:	9b06      	ldr	r3, [sp, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfb4      	ite	lt
 8007a34:	4633      	movlt	r3, r6
 8007a36:	2300      	movge	r3, #0
 8007a38:	930c      	str	r3, [sp, #48]	; 0x30
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	2500      	movs	r5, #0
 8007a3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a42:	9312      	str	r3, [sp, #72]	; 0x48
 8007a44:	462e      	mov	r6, r5
 8007a46:	9b07      	ldr	r3, [sp, #28]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	6859      	ldr	r1, [r3, #4]
 8007a4c:	f001 fd64 	bl	8009518 <_Balloc>
 8007a50:	9005      	str	r0, [sp, #20]
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f43f af0c 	beq.w	8007870 <_strtod_l+0x490>
 8007a58:	9b07      	ldr	r3, [sp, #28]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	3202      	adds	r2, #2
 8007a5e:	f103 010c 	add.w	r1, r3, #12
 8007a62:	0092      	lsls	r2, r2, #2
 8007a64:	300c      	adds	r0, #12
 8007a66:	f7fe fcb5 	bl	80063d4 <memcpy>
 8007a6a:	ec4b ab10 	vmov	d0, sl, fp
 8007a6e:	aa1a      	add	r2, sp, #104	; 0x68
 8007a70:	a919      	add	r1, sp, #100	; 0x64
 8007a72:	4620      	mov	r0, r4
 8007a74:	f002 f93e 	bl	8009cf4 <__d2b>
 8007a78:	ec4b ab18 	vmov	d8, sl, fp
 8007a7c:	9018      	str	r0, [sp, #96]	; 0x60
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f43f aef6 	beq.w	8007870 <_strtod_l+0x490>
 8007a84:	2101      	movs	r1, #1
 8007a86:	4620      	mov	r0, r4
 8007a88:	f001 fe88 	bl	800979c <__i2b>
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f aeee 	beq.w	8007870 <_strtod_l+0x490>
 8007a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a96:	9904      	ldr	r1, [sp, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfab      	itete	ge
 8007a9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007a9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007aa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007aa2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007aa6:	bfac      	ite	ge
 8007aa8:	eb03 0902 	addge.w	r9, r3, r2
 8007aac:	1ad7      	sublt	r7, r2, r3
 8007aae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ab0:	eba3 0801 	sub.w	r8, r3, r1
 8007ab4:	4490      	add	r8, r2
 8007ab6:	4ba1      	ldr	r3, [pc, #644]	; (8007d3c <_strtod_l+0x95c>)
 8007ab8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007abc:	4598      	cmp	r8, r3
 8007abe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ac2:	f280 80c7 	bge.w	8007c54 <_strtod_l+0x874>
 8007ac6:	eba3 0308 	sub.w	r3, r3, r8
 8007aca:	2b1f      	cmp	r3, #31
 8007acc:	eba2 0203 	sub.w	r2, r2, r3
 8007ad0:	f04f 0101 	mov.w	r1, #1
 8007ad4:	f300 80b1 	bgt.w	8007c3a <_strtod_l+0x85a>
 8007ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8007adc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	eb09 0802 	add.w	r8, r9, r2
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	45c1      	cmp	r9, r8
 8007aea:	4417      	add	r7, r2
 8007aec:	441f      	add	r7, r3
 8007aee:	464b      	mov	r3, r9
 8007af0:	bfa8      	it	ge
 8007af2:	4643      	movge	r3, r8
 8007af4:	42bb      	cmp	r3, r7
 8007af6:	bfa8      	it	ge
 8007af8:	463b      	movge	r3, r7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bfc2      	ittt	gt
 8007afe:	eba8 0803 	subgt.w	r8, r8, r3
 8007b02:	1aff      	subgt	r7, r7, r3
 8007b04:	eba9 0903 	subgt.w	r9, r9, r3
 8007b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dd17      	ble.n	8007b3e <_strtod_l+0x75e>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	461a      	mov	r2, r3
 8007b12:	4620      	mov	r0, r4
 8007b14:	f001 ff02 	bl	800991c <__pow5mult>
 8007b18:	4606      	mov	r6, r0
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f43f aea8 	beq.w	8007870 <_strtod_l+0x490>
 8007b20:	4601      	mov	r1, r0
 8007b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 fe4f 	bl	80097c8 <__multiply>
 8007b2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f43f ae9f 	beq.w	8007870 <_strtod_l+0x490>
 8007b32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b34:	4620      	mov	r0, r4
 8007b36:	f001 fd2f 	bl	8009598 <_Bfree>
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	9318      	str	r3, [sp, #96]	; 0x60
 8007b3e:	f1b8 0f00 	cmp.w	r8, #0
 8007b42:	f300 808c 	bgt.w	8007c5e <_strtod_l+0x87e>
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dd08      	ble.n	8007b5e <_strtod_l+0x77e>
 8007b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b4e:	9905      	ldr	r1, [sp, #20]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fee3 	bl	800991c <__pow5mult>
 8007b56:	9005      	str	r0, [sp, #20]
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f43f ae89 	beq.w	8007870 <_strtod_l+0x490>
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	dd08      	ble.n	8007b74 <_strtod_l+0x794>
 8007b62:	9905      	ldr	r1, [sp, #20]
 8007b64:	463a      	mov	r2, r7
 8007b66:	4620      	mov	r0, r4
 8007b68:	f001 ff32 	bl	80099d0 <__lshift>
 8007b6c:	9005      	str	r0, [sp, #20]
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f ae7e 	beq.w	8007870 <_strtod_l+0x490>
 8007b74:	f1b9 0f00 	cmp.w	r9, #0
 8007b78:	dd08      	ble.n	8007b8c <_strtod_l+0x7ac>
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f001 ff26 	bl	80099d0 <__lshift>
 8007b84:	4606      	mov	r6, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f ae72 	beq.w	8007870 <_strtod_l+0x490>
 8007b8c:	9a05      	ldr	r2, [sp, #20]
 8007b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b90:	4620      	mov	r0, r4
 8007b92:	f001 ffa9 	bl	8009ae8 <__mdiff>
 8007b96:	4605      	mov	r5, r0
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f43f ae69 	beq.w	8007870 <_strtod_l+0x490>
 8007b9e:	68c3      	ldr	r3, [r0, #12]
 8007ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60c3      	str	r3, [r0, #12]
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	f001 ff82 	bl	8009ab0 <__mcmp>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	da60      	bge.n	8007c72 <_strtod_l+0x892>
 8007bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb2:	ea53 030a 	orrs.w	r3, r3, sl
 8007bb6:	f040 8082 	bne.w	8007cbe <_strtod_l+0x8de>
 8007bba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d17d      	bne.n	8007cbe <_strtod_l+0x8de>
 8007bc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bc6:	0d1b      	lsrs	r3, r3, #20
 8007bc8:	051b      	lsls	r3, r3, #20
 8007bca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007bce:	d976      	bls.n	8007cbe <_strtod_l+0x8de>
 8007bd0:	696b      	ldr	r3, [r5, #20]
 8007bd2:	b913      	cbnz	r3, 8007bda <_strtod_l+0x7fa>
 8007bd4:	692b      	ldr	r3, [r5, #16]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	dd71      	ble.n	8007cbe <_strtod_l+0x8de>
 8007bda:	4629      	mov	r1, r5
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4620      	mov	r0, r4
 8007be0:	f001 fef6 	bl	80099d0 <__lshift>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4605      	mov	r5, r0
 8007be8:	f001 ff62 	bl	8009ab0 <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	dd66      	ble.n	8007cbe <_strtod_l+0x8de>
 8007bf0:	9904      	ldr	r1, [sp, #16]
 8007bf2:	4a53      	ldr	r2, [pc, #332]	; (8007d40 <_strtod_l+0x960>)
 8007bf4:	465b      	mov	r3, fp
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	f000 8081 	beq.w	8007cfe <_strtod_l+0x91e>
 8007bfc:	ea02 010b 	and.w	r1, r2, fp
 8007c00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c04:	dc7b      	bgt.n	8007cfe <_strtod_l+0x91e>
 8007c06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c0a:	f77f aea9 	ble.w	8007960 <_strtod_l+0x580>
 8007c0e:	4b4d      	ldr	r3, [pc, #308]	; (8007d44 <_strtod_l+0x964>)
 8007c10:	4650      	mov	r0, sl
 8007c12:	4659      	mov	r1, fp
 8007c14:	2200      	movs	r2, #0
 8007c16:	f7f8 fd0f 	bl	8000638 <__aeabi_dmul>
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4303      	orrs	r3, r0
 8007c1e:	bf08      	it	eq
 8007c20:	2322      	moveq	r3, #34	; 0x22
 8007c22:	4682      	mov	sl, r0
 8007c24:	468b      	mov	fp, r1
 8007c26:	bf08      	it	eq
 8007c28:	6023      	streq	r3, [r4, #0]
 8007c2a:	e62b      	b.n	8007884 <_strtod_l+0x4a4>
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	ea03 0a0a 	and.w	sl, r3, sl
 8007c38:	e6e3      	b.n	8007a02 <_strtod_l+0x622>
 8007c3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007c3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007c42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007c46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007c4a:	fa01 f308 	lsl.w	r3, r1, r8
 8007c4e:	9308      	str	r3, [sp, #32]
 8007c50:	910d      	str	r1, [sp, #52]	; 0x34
 8007c52:	e746      	b.n	8007ae2 <_strtod_l+0x702>
 8007c54:	2300      	movs	r3, #0
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	2301      	movs	r3, #1
 8007c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c5c:	e741      	b.n	8007ae2 <_strtod_l+0x702>
 8007c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c60:	4642      	mov	r2, r8
 8007c62:	4620      	mov	r0, r4
 8007c64:	f001 feb4 	bl	80099d0 <__lshift>
 8007c68:	9018      	str	r0, [sp, #96]	; 0x60
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f47f af6b 	bne.w	8007b46 <_strtod_l+0x766>
 8007c70:	e5fe      	b.n	8007870 <_strtod_l+0x490>
 8007c72:	465f      	mov	r7, fp
 8007c74:	d16e      	bne.n	8007d54 <_strtod_l+0x974>
 8007c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7c:	b342      	cbz	r2, 8007cd0 <_strtod_l+0x8f0>
 8007c7e:	4a32      	ldr	r2, [pc, #200]	; (8007d48 <_strtod_l+0x968>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d128      	bne.n	8007cd6 <_strtod_l+0x8f6>
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	4651      	mov	r1, sl
 8007c88:	b1eb      	cbz	r3, 8007cc6 <_strtod_l+0x8e6>
 8007c8a:	4b2d      	ldr	r3, [pc, #180]	; (8007d40 <_strtod_l+0x960>)
 8007c8c:	403b      	ands	r3, r7
 8007c8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	d819      	bhi.n	8007ccc <_strtod_l+0x8ec>
 8007c98:	0d1b      	lsrs	r3, r3, #20
 8007c9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	d117      	bne.n	8007cd6 <_strtod_l+0x8f6>
 8007ca6:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <_strtod_l+0x96c>)
 8007ca8:	429f      	cmp	r7, r3
 8007caa:	d102      	bne.n	8007cb2 <_strtod_l+0x8d2>
 8007cac:	3101      	adds	r1, #1
 8007cae:	f43f addf 	beq.w	8007870 <_strtod_l+0x490>
 8007cb2:	4b23      	ldr	r3, [pc, #140]	; (8007d40 <_strtod_l+0x960>)
 8007cb4:	403b      	ands	r3, r7
 8007cb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007cba:	f04f 0a00 	mov.w	sl, #0
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1a4      	bne.n	8007c0e <_strtod_l+0x82e>
 8007cc4:	e5de      	b.n	8007884 <_strtod_l+0x4a4>
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	e7ea      	b.n	8007ca2 <_strtod_l+0x8c2>
 8007ccc:	4613      	mov	r3, r2
 8007cce:	e7e8      	b.n	8007ca2 <_strtod_l+0x8c2>
 8007cd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007cd4:	d08c      	beq.n	8007bf0 <_strtod_l+0x810>
 8007cd6:	9b08      	ldr	r3, [sp, #32]
 8007cd8:	b1db      	cbz	r3, 8007d12 <_strtod_l+0x932>
 8007cda:	423b      	tst	r3, r7
 8007cdc:	d0ef      	beq.n	8007cbe <_strtod_l+0x8de>
 8007cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	b1c3      	cbz	r3, 8007d1a <_strtod_l+0x93a>
 8007ce8:	f7ff fb5e 	bl	80073a8 <sulp>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	ec51 0b18 	vmov	r0, r1, d8
 8007cf4:	f7f8 faea 	bl	80002cc <__adddf3>
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	468b      	mov	fp, r1
 8007cfc:	e7df      	b.n	8007cbe <_strtod_l+0x8de>
 8007cfe:	4013      	ands	r3, r2
 8007d00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007d10:	e7d5      	b.n	8007cbe <_strtod_l+0x8de>
 8007d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d14:	ea13 0f0a 	tst.w	r3, sl
 8007d18:	e7e0      	b.n	8007cdc <_strtod_l+0x8fc>
 8007d1a:	f7ff fb45 	bl	80073a8 <sulp>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ec51 0b18 	vmov	r0, r1, d8
 8007d26:	f7f8 facf 	bl	80002c8 <__aeabi_dsub>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4682      	mov	sl, r0
 8007d30:	468b      	mov	fp, r1
 8007d32:	f7f8 fee9 	bl	8000b08 <__aeabi_dcmpeq>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d0c1      	beq.n	8007cbe <_strtod_l+0x8de>
 8007d3a:	e611      	b.n	8007960 <_strtod_l+0x580>
 8007d3c:	fffffc02 	.word	0xfffffc02
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	39500000 	.word	0x39500000
 8007d48:	000fffff 	.word	0x000fffff
 8007d4c:	7fefffff 	.word	0x7fefffff
 8007d50:	0800ae38 	.word	0x0800ae38
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	f002 f828 	bl	8009dac <__ratio>
 8007d5c:	ec59 8b10 	vmov	r8, r9, d0
 8007d60:	ee10 0a10 	vmov	r0, s0
 8007d64:	2200      	movs	r2, #0
 8007d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fee0 	bl	8000b30 <__aeabi_dcmple>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d07a      	beq.n	8007e6a <_strtod_l+0xa8a>
 8007d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d04a      	beq.n	8007e10 <_strtod_l+0xa30>
 8007d7a:	4b95      	ldr	r3, [pc, #596]	; (8007fd0 <_strtod_l+0xbf0>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007fd0 <_strtod_l+0xbf0>
 8007d86:	f04f 0800 	mov.w	r8, #0
 8007d8a:	4b92      	ldr	r3, [pc, #584]	; (8007fd4 <_strtod_l+0xbf4>)
 8007d8c:	403b      	ands	r3, r7
 8007d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d92:	4b91      	ldr	r3, [pc, #580]	; (8007fd8 <_strtod_l+0xbf8>)
 8007d94:	429a      	cmp	r2, r3
 8007d96:	f040 80b0 	bne.w	8007efa <_strtod_l+0xb1a>
 8007d9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007da2:	ec4b ab10 	vmov	d0, sl, fp
 8007da6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007daa:	f001 ff27 	bl	8009bfc <__ulp>
 8007dae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007db2:	ec53 2b10 	vmov	r2, r3, d0
 8007db6:	f7f8 fc3f 	bl	8000638 <__aeabi_dmul>
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	f7f8 fa85 	bl	80002cc <__adddf3>
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4983      	ldr	r1, [pc, #524]	; (8007fd4 <_strtod_l+0xbf4>)
 8007dc6:	4a85      	ldr	r2, [pc, #532]	; (8007fdc <_strtod_l+0xbfc>)
 8007dc8:	4019      	ands	r1, r3
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	4682      	mov	sl, r0
 8007dce:	d960      	bls.n	8007e92 <_strtod_l+0xab2>
 8007dd0:	ee18 3a90 	vmov	r3, s17
 8007dd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d104      	bne.n	8007de6 <_strtod_l+0xa06>
 8007ddc:	ee18 3a10 	vmov	r3, s16
 8007de0:	3301      	adds	r3, #1
 8007de2:	f43f ad45 	beq.w	8007870 <_strtod_l+0x490>
 8007de6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007fe8 <_strtod_l+0xc08>
 8007dea:	f04f 3aff 	mov.w	sl, #4294967295
 8007dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007df0:	4620      	mov	r0, r4
 8007df2:	f001 fbd1 	bl	8009598 <_Bfree>
 8007df6:	9905      	ldr	r1, [sp, #20]
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f001 fbcd 	bl	8009598 <_Bfree>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4620      	mov	r0, r4
 8007e02:	f001 fbc9 	bl	8009598 <_Bfree>
 8007e06:	4629      	mov	r1, r5
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 fbc5 	bl	8009598 <_Bfree>
 8007e0e:	e61a      	b.n	8007a46 <_strtod_l+0x666>
 8007e10:	f1ba 0f00 	cmp.w	sl, #0
 8007e14:	d11b      	bne.n	8007e4e <_strtod_l+0xa6e>
 8007e16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e1a:	b9f3      	cbnz	r3, 8007e5a <_strtod_l+0xa7a>
 8007e1c:	4b6c      	ldr	r3, [pc, #432]	; (8007fd0 <_strtod_l+0xbf0>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 fe7a 	bl	8000b1c <__aeabi_dcmplt>
 8007e28:	b9d0      	cbnz	r0, 8007e60 <_strtod_l+0xa80>
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4b6c      	ldr	r3, [pc, #432]	; (8007fe0 <_strtod_l+0xc00>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	f7f8 fc01 	bl	8000638 <__aeabi_dmul>
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007e42:	9315      	str	r3, [sp, #84]	; 0x54
 8007e44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e4c:	e79d      	b.n	8007d8a <_strtod_l+0x9aa>
 8007e4e:	f1ba 0f01 	cmp.w	sl, #1
 8007e52:	d102      	bne.n	8007e5a <_strtod_l+0xa7a>
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	f43f ad83 	beq.w	8007960 <_strtod_l+0x580>
 8007e5a:	4b62      	ldr	r3, [pc, #392]	; (8007fe4 <_strtod_l+0xc04>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	e78e      	b.n	8007d7e <_strtod_l+0x99e>
 8007e60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007fe0 <_strtod_l+0xc00>
 8007e64:	f04f 0800 	mov.w	r8, #0
 8007e68:	e7e7      	b.n	8007e3a <_strtod_l+0xa5a>
 8007e6a:	4b5d      	ldr	r3, [pc, #372]	; (8007fe0 <_strtod_l+0xc00>)
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	4649      	mov	r1, r9
 8007e70:	2200      	movs	r2, #0
 8007e72:	f7f8 fbe1 	bl	8000638 <__aeabi_dmul>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	b933      	cbnz	r3, 8007e8c <_strtod_l+0xaac>
 8007e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e82:	900e      	str	r0, [sp, #56]	; 0x38
 8007e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e8a:	e7dd      	b.n	8007e48 <_strtod_l+0xa68>
 8007e8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007e90:	e7f9      	b.n	8007e86 <_strtod_l+0xaa6>
 8007e92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1a8      	bne.n	8007dee <_strtod_l+0xa0e>
 8007e9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea2:	0d1b      	lsrs	r3, r3, #20
 8007ea4:	051b      	lsls	r3, r3, #20
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d1a1      	bne.n	8007dee <_strtod_l+0xa0e>
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 ff23 	bl	8000cf8 <__aeabi_d2lz>
 8007eb2:	f7f8 fb93 	bl	80005dc <__aeabi_l2d>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fa03 	bl	80002c8 <__aeabi_dsub>
 8007ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ec8:	ea43 030a 	orr.w	r3, r3, sl
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	d055      	beq.n	8007f80 <_strtod_l+0xba0>
 8007ed4:	a336      	add	r3, pc, #216	; (adr r3, 8007fb0 <_strtod_l+0xbd0>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f47f acd0 	bne.w	8007884 <_strtod_l+0x4a4>
 8007ee4:	a334      	add	r3, pc, #208	; (adr r3, 8007fb8 <_strtod_l+0xbd8>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	f7f8 fe33 	bl	8000b58 <__aeabi_dcmpgt>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f af7b 	beq.w	8007dee <_strtod_l+0xa0e>
 8007ef8:	e4c4      	b.n	8007884 <_strtod_l+0x4a4>
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	b333      	cbz	r3, 8007f4c <_strtod_l+0xb6c>
 8007efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f04:	d822      	bhi.n	8007f4c <_strtod_l+0xb6c>
 8007f06:	a32e      	add	r3, pc, #184	; (adr r3, 8007fc0 <_strtod_l+0xbe0>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7f8 fe0e 	bl	8000b30 <__aeabi_dcmple>
 8007f14:	b1a0      	cbz	r0, 8007f40 <_strtod_l+0xb60>
 8007f16:	4649      	mov	r1, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	f7f8 fe65 	bl	8000be8 <__aeabi_d2uiz>
 8007f1e:	2801      	cmp	r0, #1
 8007f20:	bf38      	it	cc
 8007f22:	2001      	movcc	r0, #1
 8007f24:	f7f8 fb0e 	bl	8000544 <__aeabi_ui2d>
 8007f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	4689      	mov	r9, r1
 8007f2e:	bb23      	cbnz	r3, 8007f7a <_strtod_l+0xb9a>
 8007f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f34:	9010      	str	r0, [sp, #64]	; 0x40
 8007f36:	9311      	str	r3, [sp, #68]	; 0x44
 8007f38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f50:	eeb0 0a48 	vmov.f32	s0, s16
 8007f54:	eef0 0a68 	vmov.f32	s1, s17
 8007f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f5c:	f001 fe4e 	bl	8009bfc <__ulp>
 8007f60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f64:	ec53 2b10 	vmov	r2, r3, d0
 8007f68:	f7f8 fb66 	bl	8000638 <__aeabi_dmul>
 8007f6c:	ec53 2b18 	vmov	r2, r3, d8
 8007f70:	f7f8 f9ac 	bl	80002cc <__adddf3>
 8007f74:	4682      	mov	sl, r0
 8007f76:	468b      	mov	fp, r1
 8007f78:	e78d      	b.n	8007e96 <_strtod_l+0xab6>
 8007f7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007f7e:	e7db      	b.n	8007f38 <_strtod_l+0xb58>
 8007f80:	a311      	add	r3, pc, #68	; (adr r3, 8007fc8 <_strtod_l+0xbe8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fdc9 	bl	8000b1c <__aeabi_dcmplt>
 8007f8a:	e7b2      	b.n	8007ef2 <_strtod_l+0xb12>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	f7ff ba6b 	b.w	8007470 <_strtod_l+0x90>
 8007f9a:	2a65      	cmp	r2, #101	; 0x65
 8007f9c:	f43f ab5f 	beq.w	800765e <_strtod_l+0x27e>
 8007fa0:	2a45      	cmp	r2, #69	; 0x45
 8007fa2:	f43f ab5c 	beq.w	800765e <_strtod_l+0x27e>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f7ff bb94 	b.w	80076d4 <_strtod_l+0x2f4>
 8007fac:	f3af 8000 	nop.w
 8007fb0:	94a03595 	.word	0x94a03595
 8007fb4:	3fdfffff 	.word	0x3fdfffff
 8007fb8:	35afe535 	.word	0x35afe535
 8007fbc:	3fe00000 	.word	0x3fe00000
 8007fc0:	ffc00000 	.word	0xffc00000
 8007fc4:	41dfffff 	.word	0x41dfffff
 8007fc8:	94a03595 	.word	0x94a03595
 8007fcc:	3fcfffff 	.word	0x3fcfffff
 8007fd0:	3ff00000 	.word	0x3ff00000
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	7fe00000 	.word	0x7fe00000
 8007fdc:	7c9fffff 	.word	0x7c9fffff
 8007fe0:	3fe00000 	.word	0x3fe00000
 8007fe4:	bff00000 	.word	0xbff00000
 8007fe8:	7fefffff 	.word	0x7fefffff

08007fec <_strtod_r>:
 8007fec:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <_strtod_r+0x8>)
 8007fee:	f7ff b9f7 	b.w	80073e0 <_strtod_l>
 8007ff2:	bf00      	nop
 8007ff4:	20000078 	.word	0x20000078

08007ff8 <_strtol_l.constprop.0>:
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffe:	d001      	beq.n	8008004 <_strtol_l.constprop.0+0xc>
 8008000:	2b24      	cmp	r3, #36	; 0x24
 8008002:	d906      	bls.n	8008012 <_strtol_l.constprop.0+0x1a>
 8008004:	f7fe f9b4 	bl	8006370 <__errno>
 8008008:	2316      	movs	r3, #22
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80080f8 <_strtol_l.constprop.0+0x100>
 8008016:	460d      	mov	r5, r1
 8008018:	462e      	mov	r6, r5
 800801a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800801e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008022:	f017 0708 	ands.w	r7, r7, #8
 8008026:	d1f7      	bne.n	8008018 <_strtol_l.constprop.0+0x20>
 8008028:	2c2d      	cmp	r4, #45	; 0x2d
 800802a:	d132      	bne.n	8008092 <_strtol_l.constprop.0+0x9a>
 800802c:	782c      	ldrb	r4, [r5, #0]
 800802e:	2701      	movs	r7, #1
 8008030:	1cb5      	adds	r5, r6, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d05b      	beq.n	80080ee <_strtol_l.constprop.0+0xf6>
 8008036:	2b10      	cmp	r3, #16
 8008038:	d109      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 800803a:	2c30      	cmp	r4, #48	; 0x30
 800803c:	d107      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 800803e:	782c      	ldrb	r4, [r5, #0]
 8008040:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008044:	2c58      	cmp	r4, #88	; 0x58
 8008046:	d14d      	bne.n	80080e4 <_strtol_l.constprop.0+0xec>
 8008048:	786c      	ldrb	r4, [r5, #1]
 800804a:	2310      	movs	r3, #16
 800804c:	3502      	adds	r5, #2
 800804e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008052:	f108 38ff 	add.w	r8, r8, #4294967295
 8008056:	f04f 0c00 	mov.w	ip, #0
 800805a:	fbb8 f9f3 	udiv	r9, r8, r3
 800805e:	4666      	mov	r6, ip
 8008060:	fb03 8a19 	mls	sl, r3, r9, r8
 8008064:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008068:	f1be 0f09 	cmp.w	lr, #9
 800806c:	d816      	bhi.n	800809c <_strtol_l.constprop.0+0xa4>
 800806e:	4674      	mov	r4, lr
 8008070:	42a3      	cmp	r3, r4
 8008072:	dd24      	ble.n	80080be <_strtol_l.constprop.0+0xc6>
 8008074:	f1bc 0f00 	cmp.w	ip, #0
 8008078:	db1e      	blt.n	80080b8 <_strtol_l.constprop.0+0xc0>
 800807a:	45b1      	cmp	r9, r6
 800807c:	d31c      	bcc.n	80080b8 <_strtol_l.constprop.0+0xc0>
 800807e:	d101      	bne.n	8008084 <_strtol_l.constprop.0+0x8c>
 8008080:	45a2      	cmp	sl, r4
 8008082:	db19      	blt.n	80080b8 <_strtol_l.constprop.0+0xc0>
 8008084:	fb06 4603 	mla	r6, r6, r3, r4
 8008088:	f04f 0c01 	mov.w	ip, #1
 800808c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008090:	e7e8      	b.n	8008064 <_strtol_l.constprop.0+0x6c>
 8008092:	2c2b      	cmp	r4, #43	; 0x2b
 8008094:	bf04      	itt	eq
 8008096:	782c      	ldrbeq	r4, [r5, #0]
 8008098:	1cb5      	addeq	r5, r6, #2
 800809a:	e7ca      	b.n	8008032 <_strtol_l.constprop.0+0x3a>
 800809c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80080a0:	f1be 0f19 	cmp.w	lr, #25
 80080a4:	d801      	bhi.n	80080aa <_strtol_l.constprop.0+0xb2>
 80080a6:	3c37      	subs	r4, #55	; 0x37
 80080a8:	e7e2      	b.n	8008070 <_strtol_l.constprop.0+0x78>
 80080aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80080ae:	f1be 0f19 	cmp.w	lr, #25
 80080b2:	d804      	bhi.n	80080be <_strtol_l.constprop.0+0xc6>
 80080b4:	3c57      	subs	r4, #87	; 0x57
 80080b6:	e7db      	b.n	8008070 <_strtol_l.constprop.0+0x78>
 80080b8:	f04f 3cff 	mov.w	ip, #4294967295
 80080bc:	e7e6      	b.n	800808c <_strtol_l.constprop.0+0x94>
 80080be:	f1bc 0f00 	cmp.w	ip, #0
 80080c2:	da05      	bge.n	80080d0 <_strtol_l.constprop.0+0xd8>
 80080c4:	2322      	movs	r3, #34	; 0x22
 80080c6:	6003      	str	r3, [r0, #0]
 80080c8:	4646      	mov	r6, r8
 80080ca:	b942      	cbnz	r2, 80080de <_strtol_l.constprop.0+0xe6>
 80080cc:	4630      	mov	r0, r6
 80080ce:	e79e      	b.n	800800e <_strtol_l.constprop.0+0x16>
 80080d0:	b107      	cbz	r7, 80080d4 <_strtol_l.constprop.0+0xdc>
 80080d2:	4276      	negs	r6, r6
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	d0f9      	beq.n	80080cc <_strtol_l.constprop.0+0xd4>
 80080d8:	f1bc 0f00 	cmp.w	ip, #0
 80080dc:	d000      	beq.n	80080e0 <_strtol_l.constprop.0+0xe8>
 80080de:	1e69      	subs	r1, r5, #1
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	e7f3      	b.n	80080cc <_strtol_l.constprop.0+0xd4>
 80080e4:	2430      	movs	r4, #48	; 0x30
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1b1      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 80080ea:	2308      	movs	r3, #8
 80080ec:	e7af      	b.n	800804e <_strtol_l.constprop.0+0x56>
 80080ee:	2c30      	cmp	r4, #48	; 0x30
 80080f0:	d0a5      	beq.n	800803e <_strtol_l.constprop.0+0x46>
 80080f2:	230a      	movs	r3, #10
 80080f4:	e7ab      	b.n	800804e <_strtol_l.constprop.0+0x56>
 80080f6:	bf00      	nop
 80080f8:	0800ae61 	.word	0x0800ae61

080080fc <_strtol_r>:
 80080fc:	f7ff bf7c 	b.w	8007ff8 <_strtol_l.constprop.0>

08008100 <quorem>:
 8008100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	6903      	ldr	r3, [r0, #16]
 8008106:	690c      	ldr	r4, [r1, #16]
 8008108:	42a3      	cmp	r3, r4
 800810a:	4607      	mov	r7, r0
 800810c:	f2c0 8081 	blt.w	8008212 <quorem+0x112>
 8008110:	3c01      	subs	r4, #1
 8008112:	f101 0814 	add.w	r8, r1, #20
 8008116:	f100 0514 	add.w	r5, r0, #20
 800811a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008128:	3301      	adds	r3, #1
 800812a:	429a      	cmp	r2, r3
 800812c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008134:	fbb2 f6f3 	udiv	r6, r2, r3
 8008138:	d331      	bcc.n	800819e <quorem+0x9e>
 800813a:	f04f 0e00 	mov.w	lr, #0
 800813e:	4640      	mov	r0, r8
 8008140:	46ac      	mov	ip, r5
 8008142:	46f2      	mov	sl, lr
 8008144:	f850 2b04 	ldr.w	r2, [r0], #4
 8008148:	b293      	uxth	r3, r2
 800814a:	fb06 e303 	mla	r3, r6, r3, lr
 800814e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008152:	b29b      	uxth	r3, r3
 8008154:	ebaa 0303 	sub.w	r3, sl, r3
 8008158:	f8dc a000 	ldr.w	sl, [ip]
 800815c:	0c12      	lsrs	r2, r2, #16
 800815e:	fa13 f38a 	uxtah	r3, r3, sl
 8008162:	fb06 e202 	mla	r2, r6, r2, lr
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800816e:	b292      	uxth	r2, r2
 8008170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008178:	f8bd 3000 	ldrh.w	r3, [sp]
 800817c:	4581      	cmp	r9, r0
 800817e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008182:	f84c 3b04 	str.w	r3, [ip], #4
 8008186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800818a:	d2db      	bcs.n	8008144 <quorem+0x44>
 800818c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008190:	b92b      	cbnz	r3, 800819e <quorem+0x9e>
 8008192:	9b01      	ldr	r3, [sp, #4]
 8008194:	3b04      	subs	r3, #4
 8008196:	429d      	cmp	r5, r3
 8008198:	461a      	mov	r2, r3
 800819a:	d32e      	bcc.n	80081fa <quorem+0xfa>
 800819c:	613c      	str	r4, [r7, #16]
 800819e:	4638      	mov	r0, r7
 80081a0:	f001 fc86 	bl	8009ab0 <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	db24      	blt.n	80081f2 <quorem+0xf2>
 80081a8:	3601      	adds	r6, #1
 80081aa:	4628      	mov	r0, r5
 80081ac:	f04f 0c00 	mov.w	ip, #0
 80081b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081b4:	f8d0 e000 	ldr.w	lr, [r0]
 80081b8:	b293      	uxth	r3, r2
 80081ba:	ebac 0303 	sub.w	r3, ip, r3
 80081be:	0c12      	lsrs	r2, r2, #16
 80081c0:	fa13 f38e 	uxtah	r3, r3, lr
 80081c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d2:	45c1      	cmp	r9, r8
 80081d4:	f840 3b04 	str.w	r3, [r0], #4
 80081d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081dc:	d2e8      	bcs.n	80081b0 <quorem+0xb0>
 80081de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e6:	b922      	cbnz	r2, 80081f2 <quorem+0xf2>
 80081e8:	3b04      	subs	r3, #4
 80081ea:	429d      	cmp	r5, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	d30a      	bcc.n	8008206 <quorem+0x106>
 80081f0:	613c      	str	r4, [r7, #16]
 80081f2:	4630      	mov	r0, r6
 80081f4:	b003      	add	sp, #12
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	3b04      	subs	r3, #4
 80081fe:	2a00      	cmp	r2, #0
 8008200:	d1cc      	bne.n	800819c <quorem+0x9c>
 8008202:	3c01      	subs	r4, #1
 8008204:	e7c7      	b.n	8008196 <quorem+0x96>
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	3b04      	subs	r3, #4
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f0      	bne.n	80081f0 <quorem+0xf0>
 800820e:	3c01      	subs	r4, #1
 8008210:	e7eb      	b.n	80081ea <quorem+0xea>
 8008212:	2000      	movs	r0, #0
 8008214:	e7ee      	b.n	80081f4 <quorem+0xf4>
	...

08008218 <_dtoa_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b04 	vpush	{d8-d9}
 8008220:	ec57 6b10 	vmov	r6, r7, d0
 8008224:	b093      	sub	sp, #76	; 0x4c
 8008226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800822c:	9106      	str	r1, [sp, #24]
 800822e:	ee10 aa10 	vmov	sl, s0
 8008232:	4604      	mov	r4, r0
 8008234:	9209      	str	r2, [sp, #36]	; 0x24
 8008236:	930c      	str	r3, [sp, #48]	; 0x30
 8008238:	46bb      	mov	fp, r7
 800823a:	b975      	cbnz	r5, 800825a <_dtoa_r+0x42>
 800823c:	2010      	movs	r0, #16
 800823e:	f7fe f8c1 	bl	80063c4 <malloc>
 8008242:	4602      	mov	r2, r0
 8008244:	6260      	str	r0, [r4, #36]	; 0x24
 8008246:	b920      	cbnz	r0, 8008252 <_dtoa_r+0x3a>
 8008248:	4ba7      	ldr	r3, [pc, #668]	; (80084e8 <_dtoa_r+0x2d0>)
 800824a:	21ea      	movs	r1, #234	; 0xea
 800824c:	48a7      	ldr	r0, [pc, #668]	; (80084ec <_dtoa_r+0x2d4>)
 800824e:	f001 ffc1 	bl	800a1d4 <__assert_func>
 8008252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008256:	6005      	str	r5, [r0, #0]
 8008258:	60c5      	str	r5, [r0, #12]
 800825a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800825c:	6819      	ldr	r1, [r3, #0]
 800825e:	b151      	cbz	r1, 8008276 <_dtoa_r+0x5e>
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	604a      	str	r2, [r1, #4]
 8008264:	2301      	movs	r3, #1
 8008266:	4093      	lsls	r3, r2
 8008268:	608b      	str	r3, [r1, #8]
 800826a:	4620      	mov	r0, r4
 800826c:	f001 f994 	bl	8009598 <_Bfree>
 8008270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	1e3b      	subs	r3, r7, #0
 8008278:	bfaa      	itet	ge
 800827a:	2300      	movge	r3, #0
 800827c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008280:	f8c8 3000 	strge.w	r3, [r8]
 8008284:	4b9a      	ldr	r3, [pc, #616]	; (80084f0 <_dtoa_r+0x2d8>)
 8008286:	bfbc      	itt	lt
 8008288:	2201      	movlt	r2, #1
 800828a:	f8c8 2000 	strlt.w	r2, [r8]
 800828e:	ea33 030b 	bics.w	r3, r3, fp
 8008292:	d11b      	bne.n	80082cc <_dtoa_r+0xb4>
 8008294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008296:	f242 730f 	movw	r3, #9999	; 0x270f
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082a0:	4333      	orrs	r3, r6
 80082a2:	f000 8592 	beq.w	8008dca <_dtoa_r+0xbb2>
 80082a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a8:	b963      	cbnz	r3, 80082c4 <_dtoa_r+0xac>
 80082aa:	4b92      	ldr	r3, [pc, #584]	; (80084f4 <_dtoa_r+0x2dc>)
 80082ac:	e022      	b.n	80082f4 <_dtoa_r+0xdc>
 80082ae:	4b92      	ldr	r3, [pc, #584]	; (80084f8 <_dtoa_r+0x2e0>)
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	3308      	adds	r3, #8
 80082b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	9801      	ldr	r0, [sp, #4]
 80082ba:	b013      	add	sp, #76	; 0x4c
 80082bc:	ecbd 8b04 	vpop	{d8-d9}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4b8b      	ldr	r3, [pc, #556]	; (80084f4 <_dtoa_r+0x2dc>)
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	3303      	adds	r3, #3
 80082ca:	e7f3      	b.n	80082b4 <_dtoa_r+0x9c>
 80082cc:	2200      	movs	r2, #0
 80082ce:	2300      	movs	r3, #0
 80082d0:	4650      	mov	r0, sl
 80082d2:	4659      	mov	r1, fp
 80082d4:	f7f8 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 80082d8:	ec4b ab19 	vmov	d9, sl, fp
 80082dc:	4680      	mov	r8, r0
 80082de:	b158      	cbz	r0, 80082f8 <_dtoa_r+0xe0>
 80082e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e2:	2301      	movs	r3, #1
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 856b 	beq.w	8008dc4 <_dtoa_r+0xbac>
 80082ee:	4883      	ldr	r0, [pc, #524]	; (80084fc <_dtoa_r+0x2e4>)
 80082f0:	6018      	str	r0, [r3, #0]
 80082f2:	1e43      	subs	r3, r0, #1
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	e7df      	b.n	80082b8 <_dtoa_r+0xa0>
 80082f8:	ec4b ab10 	vmov	d0, sl, fp
 80082fc:	aa10      	add	r2, sp, #64	; 0x40
 80082fe:	a911      	add	r1, sp, #68	; 0x44
 8008300:	4620      	mov	r0, r4
 8008302:	f001 fcf7 	bl	8009cf4 <__d2b>
 8008306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800830a:	ee08 0a10 	vmov	s16, r0
 800830e:	2d00      	cmp	r5, #0
 8008310:	f000 8084 	beq.w	800841c <_dtoa_r+0x204>
 8008314:	ee19 3a90 	vmov	r3, s19
 8008318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800831c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008320:	4656      	mov	r6, sl
 8008322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800832a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800832e:	4b74      	ldr	r3, [pc, #464]	; (8008500 <_dtoa_r+0x2e8>)
 8008330:	2200      	movs	r2, #0
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f7 ffc7 	bl	80002c8 <__aeabi_dsub>
 800833a:	a365      	add	r3, pc, #404	; (adr r3, 80084d0 <_dtoa_r+0x2b8>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f7f8 f97a 	bl	8000638 <__aeabi_dmul>
 8008344:	a364      	add	r3, pc, #400	; (adr r3, 80084d8 <_dtoa_r+0x2c0>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ffbf 	bl	80002cc <__adddf3>
 800834e:	4606      	mov	r6, r0
 8008350:	4628      	mov	r0, r5
 8008352:	460f      	mov	r7, r1
 8008354:	f7f8 f906 	bl	8000564 <__aeabi_i2d>
 8008358:	a361      	add	r3, pc, #388	; (adr r3, 80084e0 <_dtoa_r+0x2c8>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 f96b 	bl	8000638 <__aeabi_dmul>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f7 ffaf 	bl	80002cc <__adddf3>
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	f7f8 fc11 	bl	8000b98 <__aeabi_d2iz>
 8008376:	2200      	movs	r2, #0
 8008378:	9000      	str	r0, [sp, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	4630      	mov	r0, r6
 800837e:	4639      	mov	r1, r7
 8008380:	f7f8 fbcc 	bl	8000b1c <__aeabi_dcmplt>
 8008384:	b150      	cbz	r0, 800839c <_dtoa_r+0x184>
 8008386:	9800      	ldr	r0, [sp, #0]
 8008388:	f7f8 f8ec 	bl	8000564 <__aeabi_i2d>
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	f7f8 fbba 	bl	8000b08 <__aeabi_dcmpeq>
 8008394:	b910      	cbnz	r0, 800839c <_dtoa_r+0x184>
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	3b01      	subs	r3, #1
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	2b16      	cmp	r3, #22
 80083a0:	d85a      	bhi.n	8008458 <_dtoa_r+0x240>
 80083a2:	9a00      	ldr	r2, [sp, #0]
 80083a4:	4b57      	ldr	r3, [pc, #348]	; (8008504 <_dtoa_r+0x2ec>)
 80083a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	ec51 0b19 	vmov	r0, r1, d9
 80083b2:	f7f8 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d050      	beq.n	800845c <_dtoa_r+0x244>
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	3b01      	subs	r3, #1
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083c6:	1b5d      	subs	r5, r3, r5
 80083c8:	1e6b      	subs	r3, r5, #1
 80083ca:	9305      	str	r3, [sp, #20]
 80083cc:	bf45      	ittet	mi
 80083ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80083d2:	9304      	strmi	r3, [sp, #16]
 80083d4:	2300      	movpl	r3, #0
 80083d6:	2300      	movmi	r3, #0
 80083d8:	bf4c      	ite	mi
 80083da:	9305      	strmi	r3, [sp, #20]
 80083dc:	9304      	strpl	r3, [sp, #16]
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	db3d      	blt.n	8008460 <_dtoa_r+0x248>
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	9a00      	ldr	r2, [sp, #0]
 80083e8:	920a      	str	r2, [sp, #40]	; 0x28
 80083ea:	4413      	add	r3, r2
 80083ec:	9305      	str	r3, [sp, #20]
 80083ee:	2300      	movs	r3, #0
 80083f0:	9307      	str	r3, [sp, #28]
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	f200 8089 	bhi.w	800850c <_dtoa_r+0x2f4>
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	bfc4      	itt	gt
 80083fe:	3b04      	subgt	r3, #4
 8008400:	9306      	strgt	r3, [sp, #24]
 8008402:	9b06      	ldr	r3, [sp, #24]
 8008404:	f1a3 0302 	sub.w	r3, r3, #2
 8008408:	bfcc      	ite	gt
 800840a:	2500      	movgt	r5, #0
 800840c:	2501      	movle	r5, #1
 800840e:	2b03      	cmp	r3, #3
 8008410:	f200 8087 	bhi.w	8008522 <_dtoa_r+0x30a>
 8008414:	e8df f003 	tbb	[pc, r3]
 8008418:	59383a2d 	.word	0x59383a2d
 800841c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008420:	441d      	add	r5, r3
 8008422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008426:	2b20      	cmp	r3, #32
 8008428:	bfc1      	itttt	gt
 800842a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800842e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008432:	fa0b f303 	lslgt.w	r3, fp, r3
 8008436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800843a:	bfda      	itte	le
 800843c:	f1c3 0320 	rsble	r3, r3, #32
 8008440:	fa06 f003 	lslle.w	r0, r6, r3
 8008444:	4318      	orrgt	r0, r3
 8008446:	f7f8 f87d 	bl	8000544 <__aeabi_ui2d>
 800844a:	2301      	movs	r3, #1
 800844c:	4606      	mov	r6, r0
 800844e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008452:	3d01      	subs	r5, #1
 8008454:	930e      	str	r3, [sp, #56]	; 0x38
 8008456:	e76a      	b.n	800832e <_dtoa_r+0x116>
 8008458:	2301      	movs	r3, #1
 800845a:	e7b2      	b.n	80083c2 <_dtoa_r+0x1aa>
 800845c:	900b      	str	r0, [sp, #44]	; 0x2c
 800845e:	e7b1      	b.n	80083c4 <_dtoa_r+0x1ac>
 8008460:	9b04      	ldr	r3, [sp, #16]
 8008462:	9a00      	ldr	r2, [sp, #0]
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	9304      	str	r3, [sp, #16]
 8008468:	4253      	negs	r3, r2
 800846a:	9307      	str	r3, [sp, #28]
 800846c:	2300      	movs	r3, #0
 800846e:	930a      	str	r3, [sp, #40]	; 0x28
 8008470:	e7bf      	b.n	80083f2 <_dtoa_r+0x1da>
 8008472:	2300      	movs	r3, #0
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc55      	bgt.n	8008528 <_dtoa_r+0x310>
 800847c:	2301      	movs	r3, #1
 800847e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008482:	461a      	mov	r2, r3
 8008484:	9209      	str	r2, [sp, #36]	; 0x24
 8008486:	e00c      	b.n	80084a2 <_dtoa_r+0x28a>
 8008488:	2301      	movs	r3, #1
 800848a:	e7f3      	b.n	8008474 <_dtoa_r+0x25c>
 800848c:	2300      	movs	r3, #0
 800848e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	4413      	add	r3, r2
 8008496:	9302      	str	r3, [sp, #8]
 8008498:	3301      	adds	r3, #1
 800849a:	2b01      	cmp	r3, #1
 800849c:	9303      	str	r3, [sp, #12]
 800849e:	bfb8      	it	lt
 80084a0:	2301      	movlt	r3, #1
 80084a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084a4:	2200      	movs	r2, #0
 80084a6:	6042      	str	r2, [r0, #4]
 80084a8:	2204      	movs	r2, #4
 80084aa:	f102 0614 	add.w	r6, r2, #20
 80084ae:	429e      	cmp	r6, r3
 80084b0:	6841      	ldr	r1, [r0, #4]
 80084b2:	d93d      	bls.n	8008530 <_dtoa_r+0x318>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f001 f82f 	bl	8009518 <_Balloc>
 80084ba:	9001      	str	r0, [sp, #4]
 80084bc:	2800      	cmp	r0, #0
 80084be:	d13b      	bne.n	8008538 <_dtoa_r+0x320>
 80084c0:	4b11      	ldr	r3, [pc, #68]	; (8008508 <_dtoa_r+0x2f0>)
 80084c2:	4602      	mov	r2, r0
 80084c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084c8:	e6c0      	b.n	800824c <_dtoa_r+0x34>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7df      	b.n	800848e <_dtoa_r+0x276>
 80084ce:	bf00      	nop
 80084d0:	636f4361 	.word	0x636f4361
 80084d4:	3fd287a7 	.word	0x3fd287a7
 80084d8:	8b60c8b3 	.word	0x8b60c8b3
 80084dc:	3fc68a28 	.word	0x3fc68a28
 80084e0:	509f79fb 	.word	0x509f79fb
 80084e4:	3fd34413 	.word	0x3fd34413
 80084e8:	0800af6e 	.word	0x0800af6e
 80084ec:	0800af85 	.word	0x0800af85
 80084f0:	7ff00000 	.word	0x7ff00000
 80084f4:	0800af6a 	.word	0x0800af6a
 80084f8:	0800af61 	.word	0x0800af61
 80084fc:	0800ade5 	.word	0x0800ade5
 8008500:	3ff80000 	.word	0x3ff80000
 8008504:	0800b0f0 	.word	0x0800b0f0
 8008508:	0800afe0 	.word	0x0800afe0
 800850c:	2501      	movs	r5, #1
 800850e:	2300      	movs	r3, #0
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	9508      	str	r5, [sp, #32]
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	2312      	movs	r3, #18
 8008520:	e7b0      	b.n	8008484 <_dtoa_r+0x26c>
 8008522:	2301      	movs	r3, #1
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	e7f5      	b.n	8008514 <_dtoa_r+0x2fc>
 8008528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800852e:	e7b8      	b.n	80084a2 <_dtoa_r+0x28a>
 8008530:	3101      	adds	r1, #1
 8008532:	6041      	str	r1, [r0, #4]
 8008534:	0052      	lsls	r2, r2, #1
 8008536:	e7b8      	b.n	80084aa <_dtoa_r+0x292>
 8008538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b0e      	cmp	r3, #14
 8008542:	f200 809d 	bhi.w	8008680 <_dtoa_r+0x468>
 8008546:	2d00      	cmp	r5, #0
 8008548:	f000 809a 	beq.w	8008680 <_dtoa_r+0x468>
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd32      	ble.n	80085b8 <_dtoa_r+0x3a0>
 8008552:	4ab7      	ldr	r2, [pc, #732]	; (8008830 <_dtoa_r+0x618>)
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800855c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008560:	9b00      	ldr	r3, [sp, #0]
 8008562:	05d8      	lsls	r0, r3, #23
 8008564:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008568:	d516      	bpl.n	8008598 <_dtoa_r+0x380>
 800856a:	4bb2      	ldr	r3, [pc, #712]	; (8008834 <_dtoa_r+0x61c>)
 800856c:	ec51 0b19 	vmov	r0, r1, d9
 8008570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008574:	f7f8 f98a 	bl	800088c <__aeabi_ddiv>
 8008578:	f007 070f 	and.w	r7, r7, #15
 800857c:	4682      	mov	sl, r0
 800857e:	468b      	mov	fp, r1
 8008580:	2503      	movs	r5, #3
 8008582:	4eac      	ldr	r6, [pc, #688]	; (8008834 <_dtoa_r+0x61c>)
 8008584:	b957      	cbnz	r7, 800859c <_dtoa_r+0x384>
 8008586:	4642      	mov	r2, r8
 8008588:	464b      	mov	r3, r9
 800858a:	4650      	mov	r0, sl
 800858c:	4659      	mov	r1, fp
 800858e:	f7f8 f97d 	bl	800088c <__aeabi_ddiv>
 8008592:	4682      	mov	sl, r0
 8008594:	468b      	mov	fp, r1
 8008596:	e028      	b.n	80085ea <_dtoa_r+0x3d2>
 8008598:	2502      	movs	r5, #2
 800859a:	e7f2      	b.n	8008582 <_dtoa_r+0x36a>
 800859c:	07f9      	lsls	r1, r7, #31
 800859e:	d508      	bpl.n	80085b2 <_dtoa_r+0x39a>
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085a8:	f7f8 f846 	bl	8000638 <__aeabi_dmul>
 80085ac:	3501      	adds	r5, #1
 80085ae:	4680      	mov	r8, r0
 80085b0:	4689      	mov	r9, r1
 80085b2:	107f      	asrs	r7, r7, #1
 80085b4:	3608      	adds	r6, #8
 80085b6:	e7e5      	b.n	8008584 <_dtoa_r+0x36c>
 80085b8:	f000 809b 	beq.w	80086f2 <_dtoa_r+0x4da>
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	4f9d      	ldr	r7, [pc, #628]	; (8008834 <_dtoa_r+0x61c>)
 80085c0:	425e      	negs	r6, r3
 80085c2:	4b9b      	ldr	r3, [pc, #620]	; (8008830 <_dtoa_r+0x618>)
 80085c4:	f006 020f 	and.w	r2, r6, #15
 80085c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	ec51 0b19 	vmov	r0, r1, d9
 80085d4:	f7f8 f830 	bl	8000638 <__aeabi_dmul>
 80085d8:	1136      	asrs	r6, r6, #4
 80085da:	4682      	mov	sl, r0
 80085dc:	468b      	mov	fp, r1
 80085de:	2300      	movs	r3, #0
 80085e0:	2502      	movs	r5, #2
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d17a      	bne.n	80086dc <_dtoa_r+0x4c4>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1d3      	bne.n	8008592 <_dtoa_r+0x37a>
 80085ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8082 	beq.w	80086f6 <_dtoa_r+0x4de>
 80085f2:	4b91      	ldr	r3, [pc, #580]	; (8008838 <_dtoa_r+0x620>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	4650      	mov	r0, sl
 80085f8:	4659      	mov	r1, fp
 80085fa:	f7f8 fa8f 	bl	8000b1c <__aeabi_dcmplt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d079      	beq.n	80086f6 <_dtoa_r+0x4de>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d076      	beq.n	80086f6 <_dtoa_r+0x4de>
 8008608:	9b02      	ldr	r3, [sp, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	dd36      	ble.n	800867c <_dtoa_r+0x464>
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	1e5f      	subs	r7, r3, #1
 8008616:	2200      	movs	r2, #0
 8008618:	4b88      	ldr	r3, [pc, #544]	; (800883c <_dtoa_r+0x624>)
 800861a:	f7f8 f80d 	bl	8000638 <__aeabi_dmul>
 800861e:	9e02      	ldr	r6, [sp, #8]
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	3501      	adds	r5, #1
 8008626:	4628      	mov	r0, r5
 8008628:	f7f7 ff9c 	bl	8000564 <__aeabi_i2d>
 800862c:	4652      	mov	r2, sl
 800862e:	465b      	mov	r3, fp
 8008630:	f7f8 f802 	bl	8000638 <__aeabi_dmul>
 8008634:	4b82      	ldr	r3, [pc, #520]	; (8008840 <_dtoa_r+0x628>)
 8008636:	2200      	movs	r2, #0
 8008638:	f7f7 fe48 	bl	80002cc <__adddf3>
 800863c:	46d0      	mov	r8, sl
 800863e:	46d9      	mov	r9, fp
 8008640:	4682      	mov	sl, r0
 8008642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008646:	2e00      	cmp	r6, #0
 8008648:	d158      	bne.n	80086fc <_dtoa_r+0x4e4>
 800864a:	4b7e      	ldr	r3, [pc, #504]	; (8008844 <_dtoa_r+0x62c>)
 800864c:	2200      	movs	r2, #0
 800864e:	4640      	mov	r0, r8
 8008650:	4649      	mov	r1, r9
 8008652:	f7f7 fe39 	bl	80002c8 <__aeabi_dsub>
 8008656:	4652      	mov	r2, sl
 8008658:	465b      	mov	r3, fp
 800865a:	4680      	mov	r8, r0
 800865c:	4689      	mov	r9, r1
 800865e:	f7f8 fa7b 	bl	8000b58 <__aeabi_dcmpgt>
 8008662:	2800      	cmp	r0, #0
 8008664:	f040 8295 	bne.w	8008b92 <_dtoa_r+0x97a>
 8008668:	4652      	mov	r2, sl
 800866a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f8 fa53 	bl	8000b1c <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f040 8289 	bne.w	8008b8e <_dtoa_r+0x976>
 800867c:	ec5b ab19 	vmov	sl, fp, d9
 8008680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008682:	2b00      	cmp	r3, #0
 8008684:	f2c0 8148 	blt.w	8008918 <_dtoa_r+0x700>
 8008688:	9a00      	ldr	r2, [sp, #0]
 800868a:	2a0e      	cmp	r2, #14
 800868c:	f300 8144 	bgt.w	8008918 <_dtoa_r+0x700>
 8008690:	4b67      	ldr	r3, [pc, #412]	; (8008830 <_dtoa_r+0x618>)
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	f280 80d5 	bge.w	800884c <_dtoa_r+0x634>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f300 80d1 	bgt.w	800884c <_dtoa_r+0x634>
 80086aa:	f040 826f 	bne.w	8008b8c <_dtoa_r+0x974>
 80086ae:	4b65      	ldr	r3, [pc, #404]	; (8008844 <_dtoa_r+0x62c>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 ffbf 	bl	8000638 <__aeabi_dmul>
 80086ba:	4652      	mov	r2, sl
 80086bc:	465b      	mov	r3, fp
 80086be:	f7f8 fa41 	bl	8000b44 <__aeabi_dcmpge>
 80086c2:	9e03      	ldr	r6, [sp, #12]
 80086c4:	4637      	mov	r7, r6
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f040 8245 	bne.w	8008b56 <_dtoa_r+0x93e>
 80086cc:	9d01      	ldr	r5, [sp, #4]
 80086ce:	2331      	movs	r3, #49	; 0x31
 80086d0:	f805 3b01 	strb.w	r3, [r5], #1
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	e240      	b.n	8008b5e <_dtoa_r+0x946>
 80086dc:	07f2      	lsls	r2, r6, #31
 80086de:	d505      	bpl.n	80086ec <_dtoa_r+0x4d4>
 80086e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e4:	f7f7 ffa8 	bl	8000638 <__aeabi_dmul>
 80086e8:	3501      	adds	r5, #1
 80086ea:	2301      	movs	r3, #1
 80086ec:	1076      	asrs	r6, r6, #1
 80086ee:	3708      	adds	r7, #8
 80086f0:	e777      	b.n	80085e2 <_dtoa_r+0x3ca>
 80086f2:	2502      	movs	r5, #2
 80086f4:	e779      	b.n	80085ea <_dtoa_r+0x3d2>
 80086f6:	9f00      	ldr	r7, [sp, #0]
 80086f8:	9e03      	ldr	r6, [sp, #12]
 80086fa:	e794      	b.n	8008626 <_dtoa_r+0x40e>
 80086fc:	9901      	ldr	r1, [sp, #4]
 80086fe:	4b4c      	ldr	r3, [pc, #304]	; (8008830 <_dtoa_r+0x618>)
 8008700:	4431      	add	r1, r6
 8008702:	910d      	str	r1, [sp, #52]	; 0x34
 8008704:	9908      	ldr	r1, [sp, #32]
 8008706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800870a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800870e:	2900      	cmp	r1, #0
 8008710:	d043      	beq.n	800879a <_dtoa_r+0x582>
 8008712:	494d      	ldr	r1, [pc, #308]	; (8008848 <_dtoa_r+0x630>)
 8008714:	2000      	movs	r0, #0
 8008716:	f7f8 f8b9 	bl	800088c <__aeabi_ddiv>
 800871a:	4652      	mov	r2, sl
 800871c:	465b      	mov	r3, fp
 800871e:	f7f7 fdd3 	bl	80002c8 <__aeabi_dsub>
 8008722:	9d01      	ldr	r5, [sp, #4]
 8008724:	4682      	mov	sl, r0
 8008726:	468b      	mov	fp, r1
 8008728:	4649      	mov	r1, r9
 800872a:	4640      	mov	r0, r8
 800872c:	f7f8 fa34 	bl	8000b98 <__aeabi_d2iz>
 8008730:	4606      	mov	r6, r0
 8008732:	f7f7 ff17 	bl	8000564 <__aeabi_i2d>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4640      	mov	r0, r8
 800873c:	4649      	mov	r1, r9
 800873e:	f7f7 fdc3 	bl	80002c8 <__aeabi_dsub>
 8008742:	3630      	adds	r6, #48	; 0x30
 8008744:	f805 6b01 	strb.w	r6, [r5], #1
 8008748:	4652      	mov	r2, sl
 800874a:	465b      	mov	r3, fp
 800874c:	4680      	mov	r8, r0
 800874e:	4689      	mov	r9, r1
 8008750:	f7f8 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	d163      	bne.n	8008820 <_dtoa_r+0x608>
 8008758:	4642      	mov	r2, r8
 800875a:	464b      	mov	r3, r9
 800875c:	4936      	ldr	r1, [pc, #216]	; (8008838 <_dtoa_r+0x620>)
 800875e:	2000      	movs	r0, #0
 8008760:	f7f7 fdb2 	bl	80002c8 <__aeabi_dsub>
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	f7f8 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800876c:	2800      	cmp	r0, #0
 800876e:	f040 80b5 	bne.w	80088dc <_dtoa_r+0x6c4>
 8008772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008774:	429d      	cmp	r5, r3
 8008776:	d081      	beq.n	800867c <_dtoa_r+0x464>
 8008778:	4b30      	ldr	r3, [pc, #192]	; (800883c <_dtoa_r+0x624>)
 800877a:	2200      	movs	r2, #0
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7f7 ff5a 	bl	8000638 <__aeabi_dmul>
 8008784:	4b2d      	ldr	r3, [pc, #180]	; (800883c <_dtoa_r+0x624>)
 8008786:	4682      	mov	sl, r0
 8008788:	468b      	mov	fp, r1
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	2200      	movs	r2, #0
 8008790:	f7f7 ff52 	bl	8000638 <__aeabi_dmul>
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	e7c6      	b.n	8008728 <_dtoa_r+0x510>
 800879a:	4650      	mov	r0, sl
 800879c:	4659      	mov	r1, fp
 800879e:	f7f7 ff4b 	bl	8000638 <__aeabi_dmul>
 80087a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a4:	9d01      	ldr	r5, [sp, #4]
 80087a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	4649      	mov	r1, r9
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7f8 f9f2 	bl	8000b98 <__aeabi_d2iz>
 80087b4:	4606      	mov	r6, r0
 80087b6:	f7f7 fed5 	bl	8000564 <__aeabi_i2d>
 80087ba:	3630      	adds	r6, #48	; 0x30
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f7 fd80 	bl	80002c8 <__aeabi_dsub>
 80087c8:	f805 6b01 	strb.w	r6, [r5], #1
 80087cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ce:	429d      	cmp	r5, r3
 80087d0:	4680      	mov	r8, r0
 80087d2:	4689      	mov	r9, r1
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	d124      	bne.n	8008824 <_dtoa_r+0x60c>
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <_dtoa_r+0x630>)
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 fd74 	bl	80002cc <__adddf3>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f8 f9b4 	bl	8000b58 <__aeabi_dcmpgt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d173      	bne.n	80088dc <_dtoa_r+0x6c4>
 80087f4:	4652      	mov	r2, sl
 80087f6:	465b      	mov	r3, fp
 80087f8:	4913      	ldr	r1, [pc, #76]	; (8008848 <_dtoa_r+0x630>)
 80087fa:	2000      	movs	r0, #0
 80087fc:	f7f7 fd64 	bl	80002c8 <__aeabi_dsub>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f8 f988 	bl	8000b1c <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	f43f af35 	beq.w	800867c <_dtoa_r+0x464>
 8008812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008814:	1e6b      	subs	r3, r5, #1
 8008816:	930f      	str	r3, [sp, #60]	; 0x3c
 8008818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800881c:	2b30      	cmp	r3, #48	; 0x30
 800881e:	d0f8      	beq.n	8008812 <_dtoa_r+0x5fa>
 8008820:	9700      	str	r7, [sp, #0]
 8008822:	e049      	b.n	80088b8 <_dtoa_r+0x6a0>
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <_dtoa_r+0x624>)
 8008826:	f7f7 ff07 	bl	8000638 <__aeabi_dmul>
 800882a:	4680      	mov	r8, r0
 800882c:	4689      	mov	r9, r1
 800882e:	e7bd      	b.n	80087ac <_dtoa_r+0x594>
 8008830:	0800b0f0 	.word	0x0800b0f0
 8008834:	0800b0c8 	.word	0x0800b0c8
 8008838:	3ff00000 	.word	0x3ff00000
 800883c:	40240000 	.word	0x40240000
 8008840:	401c0000 	.word	0x401c0000
 8008844:	40140000 	.word	0x40140000
 8008848:	3fe00000 	.word	0x3fe00000
 800884c:	9d01      	ldr	r5, [sp, #4]
 800884e:	4656      	mov	r6, sl
 8008850:	465f      	mov	r7, fp
 8008852:	4642      	mov	r2, r8
 8008854:	464b      	mov	r3, r9
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f8 f817 	bl	800088c <__aeabi_ddiv>
 800885e:	f7f8 f99b 	bl	8000b98 <__aeabi_d2iz>
 8008862:	4682      	mov	sl, r0
 8008864:	f7f7 fe7e 	bl	8000564 <__aeabi_i2d>
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	f7f7 fee4 	bl	8000638 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800887c:	f7f7 fd24 	bl	80002c8 <__aeabi_dsub>
 8008880:	f805 6b01 	strb.w	r6, [r5], #1
 8008884:	9e01      	ldr	r6, [sp, #4]
 8008886:	9f03      	ldr	r7, [sp, #12]
 8008888:	1bae      	subs	r6, r5, r6
 800888a:	42b7      	cmp	r7, r6
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	d135      	bne.n	80088fe <_dtoa_r+0x6e6>
 8008892:	f7f7 fd1b 	bl	80002cc <__adddf3>
 8008896:	4642      	mov	r2, r8
 8008898:	464b      	mov	r3, r9
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	f7f8 f95b 	bl	8000b58 <__aeabi_dcmpgt>
 80088a2:	b9d0      	cbnz	r0, 80088da <_dtoa_r+0x6c2>
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f92c 	bl	8000b08 <__aeabi_dcmpeq>
 80088b0:	b110      	cbz	r0, 80088b8 <_dtoa_r+0x6a0>
 80088b2:	f01a 0f01 	tst.w	sl, #1
 80088b6:	d110      	bne.n	80088da <_dtoa_r+0x6c2>
 80088b8:	4620      	mov	r0, r4
 80088ba:	ee18 1a10 	vmov	r1, s16
 80088be:	f000 fe6b 	bl	8009598 <_Bfree>
 80088c2:	2300      	movs	r3, #0
 80088c4:	9800      	ldr	r0, [sp, #0]
 80088c6:	702b      	strb	r3, [r5, #0]
 80088c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ca:	3001      	adds	r0, #1
 80088cc:	6018      	str	r0, [r3, #0]
 80088ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f43f acf1 	beq.w	80082b8 <_dtoa_r+0xa0>
 80088d6:	601d      	str	r5, [r3, #0]
 80088d8:	e4ee      	b.n	80082b8 <_dtoa_r+0xa0>
 80088da:	9f00      	ldr	r7, [sp, #0]
 80088dc:	462b      	mov	r3, r5
 80088de:	461d      	mov	r5, r3
 80088e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e4:	2a39      	cmp	r2, #57	; 0x39
 80088e6:	d106      	bne.n	80088f6 <_dtoa_r+0x6de>
 80088e8:	9a01      	ldr	r2, [sp, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d1f7      	bne.n	80088de <_dtoa_r+0x6c6>
 80088ee:	9901      	ldr	r1, [sp, #4]
 80088f0:	2230      	movs	r2, #48	; 0x30
 80088f2:	3701      	adds	r7, #1
 80088f4:	700a      	strb	r2, [r1, #0]
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	3201      	adds	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e790      	b.n	8008820 <_dtoa_r+0x608>
 80088fe:	4ba6      	ldr	r3, [pc, #664]	; (8008b98 <_dtoa_r+0x980>)
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fe99 	bl	8000638 <__aeabi_dmul>
 8008906:	2200      	movs	r2, #0
 8008908:	2300      	movs	r3, #0
 800890a:	4606      	mov	r6, r0
 800890c:	460f      	mov	r7, r1
 800890e:	f7f8 f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 8008912:	2800      	cmp	r0, #0
 8008914:	d09d      	beq.n	8008852 <_dtoa_r+0x63a>
 8008916:	e7cf      	b.n	80088b8 <_dtoa_r+0x6a0>
 8008918:	9a08      	ldr	r2, [sp, #32]
 800891a:	2a00      	cmp	r2, #0
 800891c:	f000 80d7 	beq.w	8008ace <_dtoa_r+0x8b6>
 8008920:	9a06      	ldr	r2, [sp, #24]
 8008922:	2a01      	cmp	r2, #1
 8008924:	f300 80ba 	bgt.w	8008a9c <_dtoa_r+0x884>
 8008928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892a:	2a00      	cmp	r2, #0
 800892c:	f000 80b2 	beq.w	8008a94 <_dtoa_r+0x87c>
 8008930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008934:	9e07      	ldr	r6, [sp, #28]
 8008936:	9d04      	ldr	r5, [sp, #16]
 8008938:	9a04      	ldr	r2, [sp, #16]
 800893a:	441a      	add	r2, r3
 800893c:	9204      	str	r2, [sp, #16]
 800893e:	9a05      	ldr	r2, [sp, #20]
 8008940:	2101      	movs	r1, #1
 8008942:	441a      	add	r2, r3
 8008944:	4620      	mov	r0, r4
 8008946:	9205      	str	r2, [sp, #20]
 8008948:	f000 ff28 	bl	800979c <__i2b>
 800894c:	4607      	mov	r7, r0
 800894e:	2d00      	cmp	r5, #0
 8008950:	dd0c      	ble.n	800896c <_dtoa_r+0x754>
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd09      	ble.n	800896c <_dtoa_r+0x754>
 8008958:	42ab      	cmp	r3, r5
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	bfa8      	it	ge
 800895e:	462b      	movge	r3, r5
 8008960:	1ad2      	subs	r2, r2, r3
 8008962:	9204      	str	r2, [sp, #16]
 8008964:	9a05      	ldr	r2, [sp, #20]
 8008966:	1aed      	subs	r5, r5, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	b31b      	cbz	r3, 80089b8 <_dtoa_r+0x7a0>
 8008970:	9b08      	ldr	r3, [sp, #32]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80af 	beq.w	8008ad6 <_dtoa_r+0x8be>
 8008978:	2e00      	cmp	r6, #0
 800897a:	dd13      	ble.n	80089a4 <_dtoa_r+0x78c>
 800897c:	4639      	mov	r1, r7
 800897e:	4632      	mov	r2, r6
 8008980:	4620      	mov	r0, r4
 8008982:	f000 ffcb 	bl	800991c <__pow5mult>
 8008986:	ee18 2a10 	vmov	r2, s16
 800898a:	4601      	mov	r1, r0
 800898c:	4607      	mov	r7, r0
 800898e:	4620      	mov	r0, r4
 8008990:	f000 ff1a 	bl	80097c8 <__multiply>
 8008994:	ee18 1a10 	vmov	r1, s16
 8008998:	4680      	mov	r8, r0
 800899a:	4620      	mov	r0, r4
 800899c:	f000 fdfc 	bl	8009598 <_Bfree>
 80089a0:	ee08 8a10 	vmov	s16, r8
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	1b9a      	subs	r2, r3, r6
 80089a8:	d006      	beq.n	80089b8 <_dtoa_r+0x7a0>
 80089aa:	ee18 1a10 	vmov	r1, s16
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 ffb4 	bl	800991c <__pow5mult>
 80089b4:	ee08 0a10 	vmov	s16, r0
 80089b8:	2101      	movs	r1, #1
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 feee 	bl	800979c <__i2b>
 80089c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	4606      	mov	r6, r0
 80089c6:	f340 8088 	ble.w	8008ada <_dtoa_r+0x8c2>
 80089ca:	461a      	mov	r2, r3
 80089cc:	4601      	mov	r1, r0
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 ffa4 	bl	800991c <__pow5mult>
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	4606      	mov	r6, r0
 80089da:	f340 8081 	ble.w	8008ae0 <_dtoa_r+0x8c8>
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	6933      	ldr	r3, [r6, #16]
 80089e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089e8:	6918      	ldr	r0, [r3, #16]
 80089ea:	f000 fe87 	bl	80096fc <__hi0bits>
 80089ee:	f1c0 0020 	rsb	r0, r0, #32
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	4418      	add	r0, r3
 80089f6:	f010 001f 	ands.w	r0, r0, #31
 80089fa:	f000 8092 	beq.w	8008b22 <_dtoa_r+0x90a>
 80089fe:	f1c0 0320 	rsb	r3, r0, #32
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	f340 808a 	ble.w	8008b1c <_dtoa_r+0x904>
 8008a08:	f1c0 001c 	rsb	r0, r0, #28
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	4403      	add	r3, r0
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	4403      	add	r3, r0
 8008a16:	4405      	add	r5, r0
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd07      	ble.n	8008a30 <_dtoa_r+0x818>
 8008a20:	ee18 1a10 	vmov	r1, s16
 8008a24:	461a      	mov	r2, r3
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 ffd2 	bl	80099d0 <__lshift>
 8008a2c:	ee08 0a10 	vmov	s16, r0
 8008a30:	9b05      	ldr	r3, [sp, #20]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd05      	ble.n	8008a42 <_dtoa_r+0x82a>
 8008a36:	4631      	mov	r1, r6
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 ffc8 	bl	80099d0 <__lshift>
 8008a40:	4606      	mov	r6, r0
 8008a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d06e      	beq.n	8008b26 <_dtoa_r+0x90e>
 8008a48:	ee18 0a10 	vmov	r0, s16
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	f001 f82f 	bl	8009ab0 <__mcmp>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	da67      	bge.n	8008b26 <_dtoa_r+0x90e>
 8008a56:	9b00      	ldr	r3, [sp, #0]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	220a      	movs	r2, #10
 8008a62:	2300      	movs	r3, #0
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fdb9 	bl	80095dc <__multadd>
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	ee08 0a10 	vmov	s16, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 81b1 	beq.w	8008dd8 <_dtoa_r+0xbc0>
 8008a76:	2300      	movs	r3, #0
 8008a78:	4639      	mov	r1, r7
 8008a7a:	220a      	movs	r2, #10
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fdad 	bl	80095dc <__multadd>
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	4607      	mov	r7, r0
 8008a88:	f300 808e 	bgt.w	8008ba8 <_dtoa_r+0x990>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	dc51      	bgt.n	8008b36 <_dtoa_r+0x91e>
 8008a92:	e089      	b.n	8008ba8 <_dtoa_r+0x990>
 8008a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a9a:	e74b      	b.n	8008934 <_dtoa_r+0x71c>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	1e5e      	subs	r6, r3, #1
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	42b3      	cmp	r3, r6
 8008aa4:	bfbf      	itttt	lt
 8008aa6:	9b07      	ldrlt	r3, [sp, #28]
 8008aa8:	9607      	strlt	r6, [sp, #28]
 8008aaa:	1af2      	sublt	r2, r6, r3
 8008aac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008aae:	bfb6      	itet	lt
 8008ab0:	189b      	addlt	r3, r3, r2
 8008ab2:	1b9e      	subge	r6, r3, r6
 8008ab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	bfb8      	it	lt
 8008aba:	2600      	movlt	r6, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	bfb7      	itett	lt
 8008ac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ac8:	1a9d      	sublt	r5, r3, r2
 8008aca:	2300      	movlt	r3, #0
 8008acc:	e734      	b.n	8008938 <_dtoa_r+0x720>
 8008ace:	9e07      	ldr	r6, [sp, #28]
 8008ad0:	9d04      	ldr	r5, [sp, #16]
 8008ad2:	9f08      	ldr	r7, [sp, #32]
 8008ad4:	e73b      	b.n	800894e <_dtoa_r+0x736>
 8008ad6:	9a07      	ldr	r2, [sp, #28]
 8008ad8:	e767      	b.n	80089aa <_dtoa_r+0x792>
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	dc18      	bgt.n	8008b12 <_dtoa_r+0x8fa>
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	d115      	bne.n	8008b12 <_dtoa_r+0x8fa>
 8008ae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008aea:	b993      	cbnz	r3, 8008b12 <_dtoa_r+0x8fa>
 8008aec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008af0:	0d1b      	lsrs	r3, r3, #20
 8008af2:	051b      	lsls	r3, r3, #20
 8008af4:	b183      	cbz	r3, 8008b18 <_dtoa_r+0x900>
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	9b05      	ldr	r3, [sp, #20]
 8008afe:	3301      	adds	r3, #1
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	f04f 0801 	mov.w	r8, #1
 8008b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f af6a 	bne.w	80089e2 <_dtoa_r+0x7ca>
 8008b0e:	2001      	movs	r0, #1
 8008b10:	e76f      	b.n	80089f2 <_dtoa_r+0x7da>
 8008b12:	f04f 0800 	mov.w	r8, #0
 8008b16:	e7f6      	b.n	8008b06 <_dtoa_r+0x8ee>
 8008b18:	4698      	mov	r8, r3
 8008b1a:	e7f4      	b.n	8008b06 <_dtoa_r+0x8ee>
 8008b1c:	f43f af7d 	beq.w	8008a1a <_dtoa_r+0x802>
 8008b20:	4618      	mov	r0, r3
 8008b22:	301c      	adds	r0, #28
 8008b24:	e772      	b.n	8008a0c <_dtoa_r+0x7f4>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc37      	bgt.n	8008b9c <_dtoa_r+0x984>
 8008b2c:	9b06      	ldr	r3, [sp, #24]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	dd34      	ble.n	8008b9c <_dtoa_r+0x984>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	9302      	str	r3, [sp, #8]
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	b96b      	cbnz	r3, 8008b56 <_dtoa_r+0x93e>
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 fd4c 	bl	80095dc <__multadd>
 8008b44:	4601      	mov	r1, r0
 8008b46:	4606      	mov	r6, r0
 8008b48:	ee18 0a10 	vmov	r0, s16
 8008b4c:	f000 ffb0 	bl	8009ab0 <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f73f adbb 	bgt.w	80086cc <_dtoa_r+0x4b4>
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	9d01      	ldr	r5, [sp, #4]
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	4631      	mov	r1, r6
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fd17 	bl	8009598 <_Bfree>
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	f43f aea4 	beq.w	80088b8 <_dtoa_r+0x6a0>
 8008b70:	f1b8 0f00 	cmp.w	r8, #0
 8008b74:	d005      	beq.n	8008b82 <_dtoa_r+0x96a>
 8008b76:	45b8      	cmp	r8, r7
 8008b78:	d003      	beq.n	8008b82 <_dtoa_r+0x96a>
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fd0b 	bl	8009598 <_Bfree>
 8008b82:	4639      	mov	r1, r7
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fd07 	bl	8009598 <_Bfree>
 8008b8a:	e695      	b.n	80088b8 <_dtoa_r+0x6a0>
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	4637      	mov	r7, r6
 8008b90:	e7e1      	b.n	8008b56 <_dtoa_r+0x93e>
 8008b92:	9700      	str	r7, [sp, #0]
 8008b94:	4637      	mov	r7, r6
 8008b96:	e599      	b.n	80086cc <_dtoa_r+0x4b4>
 8008b98:	40240000 	.word	0x40240000
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80ca 	beq.w	8008d38 <_dtoa_r+0xb20>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	9302      	str	r3, [sp, #8]
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	dd05      	ble.n	8008bb8 <_dtoa_r+0x9a0>
 8008bac:	4639      	mov	r1, r7
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 ff0d 	bl	80099d0 <__lshift>
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	d05b      	beq.n	8008c76 <_dtoa_r+0xa5e>
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fca9 	bl	8009518 <_Balloc>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <_dtoa_r+0x9be>
 8008bca:	4b87      	ldr	r3, [pc, #540]	; (8008de8 <_dtoa_r+0xbd0>)
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bd2:	f7ff bb3b 	b.w	800824c <_dtoa_r+0x34>
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	3202      	adds	r2, #2
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	f107 010c 	add.w	r1, r7, #12
 8008be0:	300c      	adds	r0, #12
 8008be2:	f7fd fbf7 	bl	80063d4 <memcpy>
 8008be6:	2201      	movs	r2, #1
 8008be8:	4629      	mov	r1, r5
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 fef0 	bl	80099d0 <__lshift>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	f103 0901 	add.w	r9, r3, #1
 8008bf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	f00a 0301 	and.w	r3, sl, #1
 8008c02:	46b8      	mov	r8, r7
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	4607      	mov	r7, r0
 8008c08:	4631      	mov	r1, r6
 8008c0a:	ee18 0a10 	vmov	r0, s16
 8008c0e:	f7ff fa77 	bl	8008100 <quorem>
 8008c12:	4641      	mov	r1, r8
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c1a:	ee18 0a10 	vmov	r0, s16
 8008c1e:	f000 ff47 	bl	8009ab0 <__mcmp>
 8008c22:	463a      	mov	r2, r7
 8008c24:	9003      	str	r0, [sp, #12]
 8008c26:	4631      	mov	r1, r6
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 ff5d 	bl	8009ae8 <__mdiff>
 8008c2e:	68c2      	ldr	r2, [r0, #12]
 8008c30:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c34:	4605      	mov	r5, r0
 8008c36:	bb02      	cbnz	r2, 8008c7a <_dtoa_r+0xa62>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	ee18 0a10 	vmov	r0, s16
 8008c3e:	f000 ff37 	bl	8009ab0 <__mcmp>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4629      	mov	r1, r5
 8008c46:	4620      	mov	r0, r4
 8008c48:	9207      	str	r2, [sp, #28]
 8008c4a:	f000 fca5 	bl	8009598 <_Bfree>
 8008c4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c52:	ea43 0102 	orr.w	r1, r3, r2
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	464d      	mov	r5, r9
 8008c5c:	d10f      	bne.n	8008c7e <_dtoa_r+0xa66>
 8008c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c62:	d02a      	beq.n	8008cba <_dtoa_r+0xaa2>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dd02      	ble.n	8008c70 <_dtoa_r+0xa58>
 8008c6a:	9b02      	ldr	r3, [sp, #8]
 8008c6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c70:	f88b a000 	strb.w	sl, [fp]
 8008c74:	e775      	b.n	8008b62 <_dtoa_r+0x94a>
 8008c76:	4638      	mov	r0, r7
 8008c78:	e7ba      	b.n	8008bf0 <_dtoa_r+0x9d8>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	e7e2      	b.n	8008c44 <_dtoa_r+0xa2c>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	db04      	blt.n	8008c8e <_dtoa_r+0xa76>
 8008c84:	9906      	ldr	r1, [sp, #24]
 8008c86:	430b      	orrs	r3, r1
 8008c88:	9904      	ldr	r1, [sp, #16]
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	d122      	bne.n	8008cd4 <_dtoa_r+0xabc>
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	ddee      	ble.n	8008c70 <_dtoa_r+0xa58>
 8008c92:	ee18 1a10 	vmov	r1, s16
 8008c96:	2201      	movs	r2, #1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fe99 	bl	80099d0 <__lshift>
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	ee08 0a10 	vmov	s16, r0
 8008ca4:	f000 ff04 	bl	8009ab0 <__mcmp>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	dc03      	bgt.n	8008cb4 <_dtoa_r+0xa9c>
 8008cac:	d1e0      	bne.n	8008c70 <_dtoa_r+0xa58>
 8008cae:	f01a 0f01 	tst.w	sl, #1
 8008cb2:	d0dd      	beq.n	8008c70 <_dtoa_r+0xa58>
 8008cb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cb8:	d1d7      	bne.n	8008c6a <_dtoa_r+0xa52>
 8008cba:	2339      	movs	r3, #57	; 0x39
 8008cbc:	f88b 3000 	strb.w	r3, [fp]
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	461d      	mov	r5, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cca:	2a39      	cmp	r2, #57	; 0x39
 8008ccc:	d071      	beq.n	8008db2 <_dtoa_r+0xb9a>
 8008cce:	3201      	adds	r2, #1
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	e746      	b.n	8008b62 <_dtoa_r+0x94a>
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	dd07      	ble.n	8008ce8 <_dtoa_r+0xad0>
 8008cd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cdc:	d0ed      	beq.n	8008cba <_dtoa_r+0xaa2>
 8008cde:	f10a 0301 	add.w	r3, sl, #1
 8008ce2:	f88b 3000 	strb.w	r3, [fp]
 8008ce6:	e73c      	b.n	8008b62 <_dtoa_r+0x94a>
 8008ce8:	9b05      	ldr	r3, [sp, #20]
 8008cea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008cee:	4599      	cmp	r9, r3
 8008cf0:	d047      	beq.n	8008d82 <_dtoa_r+0xb6a>
 8008cf2:	ee18 1a10 	vmov	r1, s16
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	220a      	movs	r2, #10
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fc6e 	bl	80095dc <__multadd>
 8008d00:	45b8      	cmp	r8, r7
 8008d02:	ee08 0a10 	vmov	s16, r0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	f04f 020a 	mov.w	r2, #10
 8008d0e:	4641      	mov	r1, r8
 8008d10:	4620      	mov	r0, r4
 8008d12:	d106      	bne.n	8008d22 <_dtoa_r+0xb0a>
 8008d14:	f000 fc62 	bl	80095dc <__multadd>
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	f109 0901 	add.w	r9, r9, #1
 8008d20:	e772      	b.n	8008c08 <_dtoa_r+0x9f0>
 8008d22:	f000 fc5b 	bl	80095dc <__multadd>
 8008d26:	4639      	mov	r1, r7
 8008d28:	4680      	mov	r8, r0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 fc54 	bl	80095dc <__multadd>
 8008d34:	4607      	mov	r7, r0
 8008d36:	e7f1      	b.n	8008d1c <_dtoa_r+0xb04>
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	9d01      	ldr	r5, [sp, #4]
 8008d3e:	ee18 0a10 	vmov	r0, s16
 8008d42:	4631      	mov	r1, r6
 8008d44:	f7ff f9dc 	bl	8008100 <quorem>
 8008d48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d4c:	9b01      	ldr	r3, [sp, #4]
 8008d4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008d52:	1aea      	subs	r2, r5, r3
 8008d54:	9b02      	ldr	r3, [sp, #8]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	dd09      	ble.n	8008d6e <_dtoa_r+0xb56>
 8008d5a:	ee18 1a10 	vmov	r1, s16
 8008d5e:	2300      	movs	r3, #0
 8008d60:	220a      	movs	r2, #10
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fc3a 	bl	80095dc <__multadd>
 8008d68:	ee08 0a10 	vmov	s16, r0
 8008d6c:	e7e7      	b.n	8008d3e <_dtoa_r+0xb26>
 8008d6e:	9b02      	ldr	r3, [sp, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfc8      	it	gt
 8008d74:	461d      	movgt	r5, r3
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	bfd8      	it	le
 8008d7a:	2501      	movle	r5, #1
 8008d7c:	441d      	add	r5, r3
 8008d7e:	f04f 0800 	mov.w	r8, #0
 8008d82:	ee18 1a10 	vmov	r1, s16
 8008d86:	2201      	movs	r2, #1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fe21 	bl	80099d0 <__lshift>
 8008d8e:	4631      	mov	r1, r6
 8008d90:	ee08 0a10 	vmov	s16, r0
 8008d94:	f000 fe8c 	bl	8009ab0 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dc91      	bgt.n	8008cc0 <_dtoa_r+0xaa8>
 8008d9c:	d102      	bne.n	8008da4 <_dtoa_r+0xb8c>
 8008d9e:	f01a 0f01 	tst.w	sl, #1
 8008da2:	d18d      	bne.n	8008cc0 <_dtoa_r+0xaa8>
 8008da4:	462b      	mov	r3, r5
 8008da6:	461d      	mov	r5, r3
 8008da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dac:	2a30      	cmp	r2, #48	; 0x30
 8008dae:	d0fa      	beq.n	8008da6 <_dtoa_r+0xb8e>
 8008db0:	e6d7      	b.n	8008b62 <_dtoa_r+0x94a>
 8008db2:	9a01      	ldr	r2, [sp, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d184      	bne.n	8008cc2 <_dtoa_r+0xaaa>
 8008db8:	9b00      	ldr	r3, [sp, #0]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	2331      	movs	r3, #49	; 0x31
 8008dc0:	7013      	strb	r3, [r2, #0]
 8008dc2:	e6ce      	b.n	8008b62 <_dtoa_r+0x94a>
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <_dtoa_r+0xbd4>)
 8008dc6:	f7ff ba95 	b.w	80082f4 <_dtoa_r+0xdc>
 8008dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f47f aa6e 	bne.w	80082ae <_dtoa_r+0x96>
 8008dd2:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <_dtoa_r+0xbd8>)
 8008dd4:	f7ff ba8e 	b.w	80082f4 <_dtoa_r+0xdc>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dcae      	bgt.n	8008d3c <_dtoa_r+0xb24>
 8008dde:	9b06      	ldr	r3, [sp, #24]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	f73f aea8 	bgt.w	8008b36 <_dtoa_r+0x91e>
 8008de6:	e7a9      	b.n	8008d3c <_dtoa_r+0xb24>
 8008de8:	0800afe0 	.word	0x0800afe0
 8008dec:	0800ade4 	.word	0x0800ade4
 8008df0:	0800af61 	.word	0x0800af61

08008df4 <rshift>:
 8008df4:	6903      	ldr	r3, [r0, #16]
 8008df6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e02:	f100 0414 	add.w	r4, r0, #20
 8008e06:	dd45      	ble.n	8008e94 <rshift+0xa0>
 8008e08:	f011 011f 	ands.w	r1, r1, #31
 8008e0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e14:	d10c      	bne.n	8008e30 <rshift+0x3c>
 8008e16:	f100 0710 	add.w	r7, r0, #16
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	42b1      	cmp	r1, r6
 8008e1e:	d334      	bcc.n	8008e8a <rshift+0x96>
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	1eea      	subs	r2, r5, #3
 8008e26:	4296      	cmp	r6, r2
 8008e28:	bf38      	it	cc
 8008e2a:	2300      	movcc	r3, #0
 8008e2c:	4423      	add	r3, r4
 8008e2e:	e015      	b.n	8008e5c <rshift+0x68>
 8008e30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e34:	f1c1 0820 	rsb	r8, r1, #32
 8008e38:	40cf      	lsrs	r7, r1
 8008e3a:	f105 0e04 	add.w	lr, r5, #4
 8008e3e:	46a1      	mov	r9, r4
 8008e40:	4576      	cmp	r6, lr
 8008e42:	46f4      	mov	ip, lr
 8008e44:	d815      	bhi.n	8008e72 <rshift+0x7e>
 8008e46:	1a9a      	subs	r2, r3, r2
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	3a04      	subs	r2, #4
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	42ae      	cmp	r6, r5
 8008e50:	bf38      	it	cc
 8008e52:	2200      	movcc	r2, #0
 8008e54:	18a3      	adds	r3, r4, r2
 8008e56:	50a7      	str	r7, [r4, r2]
 8008e58:	b107      	cbz	r7, 8008e5c <rshift+0x68>
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	1b1a      	subs	r2, r3, r4
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e64:	bf08      	it	eq
 8008e66:	2300      	moveq	r3, #0
 8008e68:	6102      	str	r2, [r0, #16]
 8008e6a:	bf08      	it	eq
 8008e6c:	6143      	streq	r3, [r0, #20]
 8008e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e72:	f8dc c000 	ldr.w	ip, [ip]
 8008e76:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e7a:	ea4c 0707 	orr.w	r7, ip, r7
 8008e7e:	f849 7b04 	str.w	r7, [r9], #4
 8008e82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e86:	40cf      	lsrs	r7, r1
 8008e88:	e7da      	b.n	8008e40 <rshift+0x4c>
 8008e8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e92:	e7c3      	b.n	8008e1c <rshift+0x28>
 8008e94:	4623      	mov	r3, r4
 8008e96:	e7e1      	b.n	8008e5c <rshift+0x68>

08008e98 <__hexdig_fun>:
 8008e98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e9c:	2b09      	cmp	r3, #9
 8008e9e:	d802      	bhi.n	8008ea6 <__hexdig_fun+0xe>
 8008ea0:	3820      	subs	r0, #32
 8008ea2:	b2c0      	uxtb	r0, r0
 8008ea4:	4770      	bx	lr
 8008ea6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d801      	bhi.n	8008eb2 <__hexdig_fun+0x1a>
 8008eae:	3847      	subs	r0, #71	; 0x47
 8008eb0:	e7f7      	b.n	8008ea2 <__hexdig_fun+0xa>
 8008eb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008eb6:	2b05      	cmp	r3, #5
 8008eb8:	d801      	bhi.n	8008ebe <__hexdig_fun+0x26>
 8008eba:	3827      	subs	r0, #39	; 0x27
 8008ebc:	e7f1      	b.n	8008ea2 <__hexdig_fun+0xa>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	4770      	bx	lr
	...

08008ec4 <__gethex>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	ed2d 8b02 	vpush	{d8}
 8008ecc:	b089      	sub	sp, #36	; 0x24
 8008ece:	ee08 0a10 	vmov	s16, r0
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	4bb4      	ldr	r3, [pc, #720]	; (80091a8 <__gethex+0x2e4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	4618      	mov	r0, r3
 8008edc:	468b      	mov	fp, r1
 8008ede:	4690      	mov	r8, r2
 8008ee0:	f7f7 f996 	bl	8000210 <strlen>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	f8db 2000 	ldr.w	r2, [fp]
 8008eea:	4403      	add	r3, r0
 8008eec:	4682      	mov	sl, r0
 8008eee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ef2:	9305      	str	r3, [sp, #20]
 8008ef4:	1c93      	adds	r3, r2, #2
 8008ef6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008efa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008efe:	32fe      	adds	r2, #254	; 0xfe
 8008f00:	18d1      	adds	r1, r2, r3
 8008f02:	461f      	mov	r7, r3
 8008f04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f08:	9100      	str	r1, [sp, #0]
 8008f0a:	2830      	cmp	r0, #48	; 0x30
 8008f0c:	d0f8      	beq.n	8008f00 <__gethex+0x3c>
 8008f0e:	f7ff ffc3 	bl	8008e98 <__hexdig_fun>
 8008f12:	4604      	mov	r4, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d13a      	bne.n	8008f8e <__gethex+0xca>
 8008f18:	9901      	ldr	r1, [sp, #4]
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f001 f937 	bl	800a190 <strncmp>
 8008f22:	4605      	mov	r5, r0
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d168      	bne.n	8008ffa <__gethex+0x136>
 8008f28:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f2c:	eb07 060a 	add.w	r6, r7, sl
 8008f30:	f7ff ffb2 	bl	8008e98 <__hexdig_fun>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d062      	beq.n	8008ffe <__gethex+0x13a>
 8008f38:	4633      	mov	r3, r6
 8008f3a:	7818      	ldrb	r0, [r3, #0]
 8008f3c:	2830      	cmp	r0, #48	; 0x30
 8008f3e:	461f      	mov	r7, r3
 8008f40:	f103 0301 	add.w	r3, r3, #1
 8008f44:	d0f9      	beq.n	8008f3a <__gethex+0x76>
 8008f46:	f7ff ffa7 	bl	8008e98 <__hexdig_fun>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	fab0 f480 	clz	r4, r0
 8008f50:	0964      	lsrs	r4, r4, #5
 8008f52:	4635      	mov	r5, r6
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	463a      	mov	r2, r7
 8008f58:	4616      	mov	r6, r2
 8008f5a:	3201      	adds	r2, #1
 8008f5c:	7830      	ldrb	r0, [r6, #0]
 8008f5e:	f7ff ff9b 	bl	8008e98 <__hexdig_fun>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d1f8      	bne.n	8008f58 <__gethex+0x94>
 8008f66:	9901      	ldr	r1, [sp, #4]
 8008f68:	4652      	mov	r2, sl
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f001 f910 	bl	800a190 <strncmp>
 8008f70:	b980      	cbnz	r0, 8008f94 <__gethex+0xd0>
 8008f72:	b94d      	cbnz	r5, 8008f88 <__gethex+0xc4>
 8008f74:	eb06 050a 	add.w	r5, r6, sl
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4616      	mov	r6, r2
 8008f7c:	3201      	adds	r2, #1
 8008f7e:	7830      	ldrb	r0, [r6, #0]
 8008f80:	f7ff ff8a 	bl	8008e98 <__hexdig_fun>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1f8      	bne.n	8008f7a <__gethex+0xb6>
 8008f88:	1bad      	subs	r5, r5, r6
 8008f8a:	00ad      	lsls	r5, r5, #2
 8008f8c:	e004      	b.n	8008f98 <__gethex+0xd4>
 8008f8e:	2400      	movs	r4, #0
 8008f90:	4625      	mov	r5, r4
 8008f92:	e7e0      	b.n	8008f56 <__gethex+0x92>
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	d1f7      	bne.n	8008f88 <__gethex+0xc4>
 8008f98:	7833      	ldrb	r3, [r6, #0]
 8008f9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f9e:	2b50      	cmp	r3, #80	; 0x50
 8008fa0:	d13b      	bne.n	800901a <__gethex+0x156>
 8008fa2:	7873      	ldrb	r3, [r6, #1]
 8008fa4:	2b2b      	cmp	r3, #43	; 0x2b
 8008fa6:	d02c      	beq.n	8009002 <__gethex+0x13e>
 8008fa8:	2b2d      	cmp	r3, #45	; 0x2d
 8008faa:	d02e      	beq.n	800900a <__gethex+0x146>
 8008fac:	1c71      	adds	r1, r6, #1
 8008fae:	f04f 0900 	mov.w	r9, #0
 8008fb2:	7808      	ldrb	r0, [r1, #0]
 8008fb4:	f7ff ff70 	bl	8008e98 <__hexdig_fun>
 8008fb8:	1e43      	subs	r3, r0, #1
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b18      	cmp	r3, #24
 8008fbe:	d82c      	bhi.n	800901a <__gethex+0x156>
 8008fc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008fc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fc8:	f7ff ff66 	bl	8008e98 <__hexdig_fun>
 8008fcc:	1e43      	subs	r3, r0, #1
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b18      	cmp	r3, #24
 8008fd2:	d91d      	bls.n	8009010 <__gethex+0x14c>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	d000      	beq.n	8008fdc <__gethex+0x118>
 8008fda:	4252      	negs	r2, r2
 8008fdc:	4415      	add	r5, r2
 8008fde:	f8cb 1000 	str.w	r1, [fp]
 8008fe2:	b1e4      	cbz	r4, 800901e <__gethex+0x15a>
 8008fe4:	9b00      	ldr	r3, [sp, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bf14      	ite	ne
 8008fea:	2700      	movne	r7, #0
 8008fec:	2706      	moveq	r7, #6
 8008fee:	4638      	mov	r0, r7
 8008ff0:	b009      	add	sp, #36	; 0x24
 8008ff2:	ecbd 8b02 	vpop	{d8}
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	463e      	mov	r6, r7
 8008ffc:	4625      	mov	r5, r4
 8008ffe:	2401      	movs	r4, #1
 8009000:	e7ca      	b.n	8008f98 <__gethex+0xd4>
 8009002:	f04f 0900 	mov.w	r9, #0
 8009006:	1cb1      	adds	r1, r6, #2
 8009008:	e7d3      	b.n	8008fb2 <__gethex+0xee>
 800900a:	f04f 0901 	mov.w	r9, #1
 800900e:	e7fa      	b.n	8009006 <__gethex+0x142>
 8009010:	230a      	movs	r3, #10
 8009012:	fb03 0202 	mla	r2, r3, r2, r0
 8009016:	3a10      	subs	r2, #16
 8009018:	e7d4      	b.n	8008fc4 <__gethex+0x100>
 800901a:	4631      	mov	r1, r6
 800901c:	e7df      	b.n	8008fde <__gethex+0x11a>
 800901e:	1bf3      	subs	r3, r6, r7
 8009020:	3b01      	subs	r3, #1
 8009022:	4621      	mov	r1, r4
 8009024:	2b07      	cmp	r3, #7
 8009026:	dc0b      	bgt.n	8009040 <__gethex+0x17c>
 8009028:	ee18 0a10 	vmov	r0, s16
 800902c:	f000 fa74 	bl	8009518 <_Balloc>
 8009030:	4604      	mov	r4, r0
 8009032:	b940      	cbnz	r0, 8009046 <__gethex+0x182>
 8009034:	4b5d      	ldr	r3, [pc, #372]	; (80091ac <__gethex+0x2e8>)
 8009036:	4602      	mov	r2, r0
 8009038:	21de      	movs	r1, #222	; 0xde
 800903a:	485d      	ldr	r0, [pc, #372]	; (80091b0 <__gethex+0x2ec>)
 800903c:	f001 f8ca 	bl	800a1d4 <__assert_func>
 8009040:	3101      	adds	r1, #1
 8009042:	105b      	asrs	r3, r3, #1
 8009044:	e7ee      	b.n	8009024 <__gethex+0x160>
 8009046:	f100 0914 	add.w	r9, r0, #20
 800904a:	f04f 0b00 	mov.w	fp, #0
 800904e:	f1ca 0301 	rsb	r3, sl, #1
 8009052:	f8cd 9008 	str.w	r9, [sp, #8]
 8009056:	f8cd b000 	str.w	fp, [sp]
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	42b7      	cmp	r7, r6
 800905e:	d340      	bcc.n	80090e2 <__gethex+0x21e>
 8009060:	9802      	ldr	r0, [sp, #8]
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	f840 3b04 	str.w	r3, [r0], #4
 8009068:	eba0 0009 	sub.w	r0, r0, r9
 800906c:	1080      	asrs	r0, r0, #2
 800906e:	0146      	lsls	r6, r0, #5
 8009070:	6120      	str	r0, [r4, #16]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fb42 	bl	80096fc <__hi0bits>
 8009078:	1a30      	subs	r0, r6, r0
 800907a:	f8d8 6000 	ldr.w	r6, [r8]
 800907e:	42b0      	cmp	r0, r6
 8009080:	dd63      	ble.n	800914a <__gethex+0x286>
 8009082:	1b87      	subs	r7, r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fee6 	bl	8009e58 <__any_on>
 800908c:	4682      	mov	sl, r0
 800908e:	b1a8      	cbz	r0, 80090bc <__gethex+0x1f8>
 8009090:	1e7b      	subs	r3, r7, #1
 8009092:	1159      	asrs	r1, r3, #5
 8009094:	f003 021f 	and.w	r2, r3, #31
 8009098:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800909c:	f04f 0a01 	mov.w	sl, #1
 80090a0:	fa0a f202 	lsl.w	r2, sl, r2
 80090a4:	420a      	tst	r2, r1
 80090a6:	d009      	beq.n	80090bc <__gethex+0x1f8>
 80090a8:	4553      	cmp	r3, sl
 80090aa:	dd05      	ble.n	80090b8 <__gethex+0x1f4>
 80090ac:	1eb9      	subs	r1, r7, #2
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fed2 	bl	8009e58 <__any_on>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d145      	bne.n	8009144 <__gethex+0x280>
 80090b8:	f04f 0a02 	mov.w	sl, #2
 80090bc:	4639      	mov	r1, r7
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff fe98 	bl	8008df4 <rshift>
 80090c4:	443d      	add	r5, r7
 80090c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ca:	42ab      	cmp	r3, r5
 80090cc:	da4c      	bge.n	8009168 <__gethex+0x2a4>
 80090ce:	ee18 0a10 	vmov	r0, s16
 80090d2:	4621      	mov	r1, r4
 80090d4:	f000 fa60 	bl	8009598 <_Bfree>
 80090d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090da:	2300      	movs	r3, #0
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	27a3      	movs	r7, #163	; 0xa3
 80090e0:	e785      	b.n	8008fee <__gethex+0x12a>
 80090e2:	1e73      	subs	r3, r6, #1
 80090e4:	9a05      	ldr	r2, [sp, #20]
 80090e6:	9303      	str	r3, [sp, #12]
 80090e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d019      	beq.n	8009124 <__gethex+0x260>
 80090f0:	f1bb 0f20 	cmp.w	fp, #32
 80090f4:	d107      	bne.n	8009106 <__gethex+0x242>
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	9a00      	ldr	r2, [sp, #0]
 80090fa:	f843 2b04 	str.w	r2, [r3], #4
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	2300      	movs	r3, #0
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	469b      	mov	fp, r3
 8009106:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800910a:	f7ff fec5 	bl	8008e98 <__hexdig_fun>
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	f000 000f 	and.w	r0, r0, #15
 8009114:	fa00 f00b 	lsl.w	r0, r0, fp
 8009118:	4303      	orrs	r3, r0
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	f10b 0b04 	add.w	fp, fp, #4
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	e00d      	b.n	8009140 <__gethex+0x27c>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	9a06      	ldr	r2, [sp, #24]
 8009128:	4413      	add	r3, r2
 800912a:	42bb      	cmp	r3, r7
 800912c:	d3e0      	bcc.n	80090f0 <__gethex+0x22c>
 800912e:	4618      	mov	r0, r3
 8009130:	9901      	ldr	r1, [sp, #4]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	4652      	mov	r2, sl
 8009136:	f001 f82b 	bl	800a190 <strncmp>
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1d7      	bne.n	80090f0 <__gethex+0x22c>
 8009140:	461e      	mov	r6, r3
 8009142:	e78b      	b.n	800905c <__gethex+0x198>
 8009144:	f04f 0a03 	mov.w	sl, #3
 8009148:	e7b8      	b.n	80090bc <__gethex+0x1f8>
 800914a:	da0a      	bge.n	8009162 <__gethex+0x29e>
 800914c:	1a37      	subs	r7, r6, r0
 800914e:	4621      	mov	r1, r4
 8009150:	ee18 0a10 	vmov	r0, s16
 8009154:	463a      	mov	r2, r7
 8009156:	f000 fc3b 	bl	80099d0 <__lshift>
 800915a:	1bed      	subs	r5, r5, r7
 800915c:	4604      	mov	r4, r0
 800915e:	f100 0914 	add.w	r9, r0, #20
 8009162:	f04f 0a00 	mov.w	sl, #0
 8009166:	e7ae      	b.n	80090c6 <__gethex+0x202>
 8009168:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800916c:	42a8      	cmp	r0, r5
 800916e:	dd72      	ble.n	8009256 <__gethex+0x392>
 8009170:	1b45      	subs	r5, r0, r5
 8009172:	42ae      	cmp	r6, r5
 8009174:	dc36      	bgt.n	80091e4 <__gethex+0x320>
 8009176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d02a      	beq.n	80091d4 <__gethex+0x310>
 800917e:	2b03      	cmp	r3, #3
 8009180:	d02c      	beq.n	80091dc <__gethex+0x318>
 8009182:	2b01      	cmp	r3, #1
 8009184:	d11c      	bne.n	80091c0 <__gethex+0x2fc>
 8009186:	42ae      	cmp	r6, r5
 8009188:	d11a      	bne.n	80091c0 <__gethex+0x2fc>
 800918a:	2e01      	cmp	r6, #1
 800918c:	d112      	bne.n	80091b4 <__gethex+0x2f0>
 800918e:	9a04      	ldr	r2, [sp, #16]
 8009190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	2301      	movs	r3, #1
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	f8c9 3000 	str.w	r3, [r9]
 800919e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091a0:	2762      	movs	r7, #98	; 0x62
 80091a2:	601c      	str	r4, [r3, #0]
 80091a4:	e723      	b.n	8008fee <__gethex+0x12a>
 80091a6:	bf00      	nop
 80091a8:	0800b058 	.word	0x0800b058
 80091ac:	0800afe0 	.word	0x0800afe0
 80091b0:	0800aff1 	.word	0x0800aff1
 80091b4:	1e71      	subs	r1, r6, #1
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fe4e 	bl	8009e58 <__any_on>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1e6      	bne.n	800918e <__gethex+0x2ca>
 80091c0:	ee18 0a10 	vmov	r0, s16
 80091c4:	4621      	mov	r1, r4
 80091c6:	f000 f9e7 	bl	8009598 <_Bfree>
 80091ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091cc:	2300      	movs	r3, #0
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	2750      	movs	r7, #80	; 0x50
 80091d2:	e70c      	b.n	8008fee <__gethex+0x12a>
 80091d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f2      	bne.n	80091c0 <__gethex+0x2fc>
 80091da:	e7d8      	b.n	800918e <__gethex+0x2ca>
 80091dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1d5      	bne.n	800918e <__gethex+0x2ca>
 80091e2:	e7ed      	b.n	80091c0 <__gethex+0x2fc>
 80091e4:	1e6f      	subs	r7, r5, #1
 80091e6:	f1ba 0f00 	cmp.w	sl, #0
 80091ea:	d131      	bne.n	8009250 <__gethex+0x38c>
 80091ec:	b127      	cbz	r7, 80091f8 <__gethex+0x334>
 80091ee:	4639      	mov	r1, r7
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fe31 	bl	8009e58 <__any_on>
 80091f6:	4682      	mov	sl, r0
 80091f8:	117b      	asrs	r3, r7, #5
 80091fa:	2101      	movs	r1, #1
 80091fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009200:	f007 071f 	and.w	r7, r7, #31
 8009204:	fa01 f707 	lsl.w	r7, r1, r7
 8009208:	421f      	tst	r7, r3
 800920a:	4629      	mov	r1, r5
 800920c:	4620      	mov	r0, r4
 800920e:	bf18      	it	ne
 8009210:	f04a 0a02 	orrne.w	sl, sl, #2
 8009214:	1b76      	subs	r6, r6, r5
 8009216:	f7ff fded 	bl	8008df4 <rshift>
 800921a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800921e:	2702      	movs	r7, #2
 8009220:	f1ba 0f00 	cmp.w	sl, #0
 8009224:	d048      	beq.n	80092b8 <__gethex+0x3f4>
 8009226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d015      	beq.n	800925a <__gethex+0x396>
 800922e:	2b03      	cmp	r3, #3
 8009230:	d017      	beq.n	8009262 <__gethex+0x39e>
 8009232:	2b01      	cmp	r3, #1
 8009234:	d109      	bne.n	800924a <__gethex+0x386>
 8009236:	f01a 0f02 	tst.w	sl, #2
 800923a:	d006      	beq.n	800924a <__gethex+0x386>
 800923c:	f8d9 0000 	ldr.w	r0, [r9]
 8009240:	ea4a 0a00 	orr.w	sl, sl, r0
 8009244:	f01a 0f01 	tst.w	sl, #1
 8009248:	d10e      	bne.n	8009268 <__gethex+0x3a4>
 800924a:	f047 0710 	orr.w	r7, r7, #16
 800924e:	e033      	b.n	80092b8 <__gethex+0x3f4>
 8009250:	f04f 0a01 	mov.w	sl, #1
 8009254:	e7d0      	b.n	80091f8 <__gethex+0x334>
 8009256:	2701      	movs	r7, #1
 8009258:	e7e2      	b.n	8009220 <__gethex+0x35c>
 800925a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925c:	f1c3 0301 	rsb	r3, r3, #1
 8009260:	9315      	str	r3, [sp, #84]	; 0x54
 8009262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0f0      	beq.n	800924a <__gethex+0x386>
 8009268:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800926c:	f104 0314 	add.w	r3, r4, #20
 8009270:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009274:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009278:	f04f 0c00 	mov.w	ip, #0
 800927c:	4618      	mov	r0, r3
 800927e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009282:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009286:	d01c      	beq.n	80092c2 <__gethex+0x3fe>
 8009288:	3201      	adds	r2, #1
 800928a:	6002      	str	r2, [r0, #0]
 800928c:	2f02      	cmp	r7, #2
 800928e:	f104 0314 	add.w	r3, r4, #20
 8009292:	d13f      	bne.n	8009314 <__gethex+0x450>
 8009294:	f8d8 2000 	ldr.w	r2, [r8]
 8009298:	3a01      	subs	r2, #1
 800929a:	42b2      	cmp	r2, r6
 800929c:	d10a      	bne.n	80092b4 <__gethex+0x3f0>
 800929e:	1171      	asrs	r1, r6, #5
 80092a0:	2201      	movs	r2, #1
 80092a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092a6:	f006 061f 	and.w	r6, r6, #31
 80092aa:	fa02 f606 	lsl.w	r6, r2, r6
 80092ae:	421e      	tst	r6, r3
 80092b0:	bf18      	it	ne
 80092b2:	4617      	movne	r7, r2
 80092b4:	f047 0720 	orr.w	r7, r7, #32
 80092b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ba:	601c      	str	r4, [r3, #0]
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	601d      	str	r5, [r3, #0]
 80092c0:	e695      	b.n	8008fee <__gethex+0x12a>
 80092c2:	4299      	cmp	r1, r3
 80092c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80092c8:	d8d8      	bhi.n	800927c <__gethex+0x3b8>
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	459b      	cmp	fp, r3
 80092ce:	db19      	blt.n	8009304 <__gethex+0x440>
 80092d0:	6861      	ldr	r1, [r4, #4]
 80092d2:	ee18 0a10 	vmov	r0, s16
 80092d6:	3101      	adds	r1, #1
 80092d8:	f000 f91e 	bl	8009518 <_Balloc>
 80092dc:	4681      	mov	r9, r0
 80092de:	b918      	cbnz	r0, 80092e8 <__gethex+0x424>
 80092e0:	4b1a      	ldr	r3, [pc, #104]	; (800934c <__gethex+0x488>)
 80092e2:	4602      	mov	r2, r0
 80092e4:	2184      	movs	r1, #132	; 0x84
 80092e6:	e6a8      	b.n	800903a <__gethex+0x176>
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	3202      	adds	r2, #2
 80092ec:	f104 010c 	add.w	r1, r4, #12
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	300c      	adds	r0, #12
 80092f4:	f7fd f86e 	bl	80063d4 <memcpy>
 80092f8:	4621      	mov	r1, r4
 80092fa:	ee18 0a10 	vmov	r0, s16
 80092fe:	f000 f94b 	bl	8009598 <_Bfree>
 8009302:	464c      	mov	r4, r9
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800930c:	6122      	str	r2, [r4, #16]
 800930e:	2201      	movs	r2, #1
 8009310:	615a      	str	r2, [r3, #20]
 8009312:	e7bb      	b.n	800928c <__gethex+0x3c8>
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	455a      	cmp	r2, fp
 8009318:	dd0b      	ble.n	8009332 <__gethex+0x46e>
 800931a:	2101      	movs	r1, #1
 800931c:	4620      	mov	r0, r4
 800931e:	f7ff fd69 	bl	8008df4 <rshift>
 8009322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009326:	3501      	adds	r5, #1
 8009328:	42ab      	cmp	r3, r5
 800932a:	f6ff aed0 	blt.w	80090ce <__gethex+0x20a>
 800932e:	2701      	movs	r7, #1
 8009330:	e7c0      	b.n	80092b4 <__gethex+0x3f0>
 8009332:	f016 061f 	ands.w	r6, r6, #31
 8009336:	d0fa      	beq.n	800932e <__gethex+0x46a>
 8009338:	4453      	add	r3, sl
 800933a:	f1c6 0620 	rsb	r6, r6, #32
 800933e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009342:	f000 f9db 	bl	80096fc <__hi0bits>
 8009346:	42b0      	cmp	r0, r6
 8009348:	dbe7      	blt.n	800931a <__gethex+0x456>
 800934a:	e7f0      	b.n	800932e <__gethex+0x46a>
 800934c:	0800afe0 	.word	0x0800afe0

08009350 <L_shift>:
 8009350:	f1c2 0208 	rsb	r2, r2, #8
 8009354:	0092      	lsls	r2, r2, #2
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	f1c2 0620 	rsb	r6, r2, #32
 800935c:	6843      	ldr	r3, [r0, #4]
 800935e:	6804      	ldr	r4, [r0, #0]
 8009360:	fa03 f506 	lsl.w	r5, r3, r6
 8009364:	432c      	orrs	r4, r5
 8009366:	40d3      	lsrs	r3, r2
 8009368:	6004      	str	r4, [r0, #0]
 800936a:	f840 3f04 	str.w	r3, [r0, #4]!
 800936e:	4288      	cmp	r0, r1
 8009370:	d3f4      	bcc.n	800935c <L_shift+0xc>
 8009372:	bd70      	pop	{r4, r5, r6, pc}

08009374 <__match>:
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	6803      	ldr	r3, [r0, #0]
 8009378:	3301      	adds	r3, #1
 800937a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937e:	b914      	cbnz	r4, 8009386 <__match+0x12>
 8009380:	6003      	str	r3, [r0, #0]
 8009382:	2001      	movs	r0, #1
 8009384:	bd30      	pop	{r4, r5, pc}
 8009386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800938a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800938e:	2d19      	cmp	r5, #25
 8009390:	bf98      	it	ls
 8009392:	3220      	addls	r2, #32
 8009394:	42a2      	cmp	r2, r4
 8009396:	d0f0      	beq.n	800937a <__match+0x6>
 8009398:	2000      	movs	r0, #0
 800939a:	e7f3      	b.n	8009384 <__match+0x10>

0800939c <__hexnan>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	680b      	ldr	r3, [r1, #0]
 80093a2:	115e      	asrs	r6, r3, #5
 80093a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093a8:	f013 031f 	ands.w	r3, r3, #31
 80093ac:	b087      	sub	sp, #28
 80093ae:	bf18      	it	ne
 80093b0:	3604      	addne	r6, #4
 80093b2:	2500      	movs	r5, #0
 80093b4:	1f37      	subs	r7, r6, #4
 80093b6:	4690      	mov	r8, r2
 80093b8:	6802      	ldr	r2, [r0, #0]
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	4682      	mov	sl, r0
 80093be:	f846 5c04 	str.w	r5, [r6, #-4]
 80093c2:	46b9      	mov	r9, r7
 80093c4:	463c      	mov	r4, r7
 80093c6:	9502      	str	r5, [sp, #8]
 80093c8:	46ab      	mov	fp, r5
 80093ca:	7851      	ldrb	r1, [r2, #1]
 80093cc:	1c53      	adds	r3, r2, #1
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	b341      	cbz	r1, 8009424 <__hexnan+0x88>
 80093d2:	4608      	mov	r0, r1
 80093d4:	9205      	str	r2, [sp, #20]
 80093d6:	9104      	str	r1, [sp, #16]
 80093d8:	f7ff fd5e 	bl	8008e98 <__hexdig_fun>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d14f      	bne.n	8009480 <__hexnan+0xe4>
 80093e0:	9904      	ldr	r1, [sp, #16]
 80093e2:	9a05      	ldr	r2, [sp, #20]
 80093e4:	2920      	cmp	r1, #32
 80093e6:	d818      	bhi.n	800941a <__hexnan+0x7e>
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	459b      	cmp	fp, r3
 80093ec:	dd13      	ble.n	8009416 <__hexnan+0x7a>
 80093ee:	454c      	cmp	r4, r9
 80093f0:	d206      	bcs.n	8009400 <__hexnan+0x64>
 80093f2:	2d07      	cmp	r5, #7
 80093f4:	dc04      	bgt.n	8009400 <__hexnan+0x64>
 80093f6:	462a      	mov	r2, r5
 80093f8:	4649      	mov	r1, r9
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff ffa8 	bl	8009350 <L_shift>
 8009400:	4544      	cmp	r4, r8
 8009402:	d950      	bls.n	80094a6 <__hexnan+0x10a>
 8009404:	2300      	movs	r3, #0
 8009406:	f1a4 0904 	sub.w	r9, r4, #4
 800940a:	f844 3c04 	str.w	r3, [r4, #-4]
 800940e:	f8cd b008 	str.w	fp, [sp, #8]
 8009412:	464c      	mov	r4, r9
 8009414:	461d      	mov	r5, r3
 8009416:	9a03      	ldr	r2, [sp, #12]
 8009418:	e7d7      	b.n	80093ca <__hexnan+0x2e>
 800941a:	2929      	cmp	r1, #41	; 0x29
 800941c:	d156      	bne.n	80094cc <__hexnan+0x130>
 800941e:	3202      	adds	r2, #2
 8009420:	f8ca 2000 	str.w	r2, [sl]
 8009424:	f1bb 0f00 	cmp.w	fp, #0
 8009428:	d050      	beq.n	80094cc <__hexnan+0x130>
 800942a:	454c      	cmp	r4, r9
 800942c:	d206      	bcs.n	800943c <__hexnan+0xa0>
 800942e:	2d07      	cmp	r5, #7
 8009430:	dc04      	bgt.n	800943c <__hexnan+0xa0>
 8009432:	462a      	mov	r2, r5
 8009434:	4649      	mov	r1, r9
 8009436:	4620      	mov	r0, r4
 8009438:	f7ff ff8a 	bl	8009350 <L_shift>
 800943c:	4544      	cmp	r4, r8
 800943e:	d934      	bls.n	80094aa <__hexnan+0x10e>
 8009440:	f1a8 0204 	sub.w	r2, r8, #4
 8009444:	4623      	mov	r3, r4
 8009446:	f853 1b04 	ldr.w	r1, [r3], #4
 800944a:	f842 1f04 	str.w	r1, [r2, #4]!
 800944e:	429f      	cmp	r7, r3
 8009450:	d2f9      	bcs.n	8009446 <__hexnan+0xaa>
 8009452:	1b3b      	subs	r3, r7, r4
 8009454:	f023 0303 	bic.w	r3, r3, #3
 8009458:	3304      	adds	r3, #4
 800945a:	3401      	adds	r4, #1
 800945c:	3e03      	subs	r6, #3
 800945e:	42b4      	cmp	r4, r6
 8009460:	bf88      	it	hi
 8009462:	2304      	movhi	r3, #4
 8009464:	4443      	add	r3, r8
 8009466:	2200      	movs	r2, #0
 8009468:	f843 2b04 	str.w	r2, [r3], #4
 800946c:	429f      	cmp	r7, r3
 800946e:	d2fb      	bcs.n	8009468 <__hexnan+0xcc>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	b91b      	cbnz	r3, 800947c <__hexnan+0xe0>
 8009474:	4547      	cmp	r7, r8
 8009476:	d127      	bne.n	80094c8 <__hexnan+0x12c>
 8009478:	2301      	movs	r3, #1
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	2005      	movs	r0, #5
 800947e:	e026      	b.n	80094ce <__hexnan+0x132>
 8009480:	3501      	adds	r5, #1
 8009482:	2d08      	cmp	r5, #8
 8009484:	f10b 0b01 	add.w	fp, fp, #1
 8009488:	dd06      	ble.n	8009498 <__hexnan+0xfc>
 800948a:	4544      	cmp	r4, r8
 800948c:	d9c3      	bls.n	8009416 <__hexnan+0x7a>
 800948e:	2300      	movs	r3, #0
 8009490:	f844 3c04 	str.w	r3, [r4, #-4]
 8009494:	2501      	movs	r5, #1
 8009496:	3c04      	subs	r4, #4
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	f000 000f 	and.w	r0, r0, #15
 800949e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	e7b7      	b.n	8009416 <__hexnan+0x7a>
 80094a6:	2508      	movs	r5, #8
 80094a8:	e7b5      	b.n	8009416 <__hexnan+0x7a>
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0df      	beq.n	8009470 <__hexnan+0xd4>
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	f1c3 0320 	rsb	r3, r3, #32
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
 80094bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094c0:	401a      	ands	r2, r3
 80094c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80094c6:	e7d3      	b.n	8009470 <__hexnan+0xd4>
 80094c8:	3f04      	subs	r7, #4
 80094ca:	e7d1      	b.n	8009470 <__hexnan+0xd4>
 80094cc:	2004      	movs	r0, #4
 80094ce:	b007      	add	sp, #28
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094d4 <_localeconv_r>:
 80094d4:	4800      	ldr	r0, [pc, #0]	; (80094d8 <_localeconv_r+0x4>)
 80094d6:	4770      	bx	lr
 80094d8:	20000168 	.word	0x20000168

080094dc <__ascii_mbtowc>:
 80094dc:	b082      	sub	sp, #8
 80094de:	b901      	cbnz	r1, 80094e2 <__ascii_mbtowc+0x6>
 80094e0:	a901      	add	r1, sp, #4
 80094e2:	b142      	cbz	r2, 80094f6 <__ascii_mbtowc+0x1a>
 80094e4:	b14b      	cbz	r3, 80094fa <__ascii_mbtowc+0x1e>
 80094e6:	7813      	ldrb	r3, [r2, #0]
 80094e8:	600b      	str	r3, [r1, #0]
 80094ea:	7812      	ldrb	r2, [r2, #0]
 80094ec:	1e10      	subs	r0, r2, #0
 80094ee:	bf18      	it	ne
 80094f0:	2001      	movne	r0, #1
 80094f2:	b002      	add	sp, #8
 80094f4:	4770      	bx	lr
 80094f6:	4610      	mov	r0, r2
 80094f8:	e7fb      	b.n	80094f2 <__ascii_mbtowc+0x16>
 80094fa:	f06f 0001 	mvn.w	r0, #1
 80094fe:	e7f8      	b.n	80094f2 <__ascii_mbtowc+0x16>

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__malloc_lock+0x8>)
 8009502:	f000 be98 	b.w	800a236 <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	200002ac 	.word	0x200002ac

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_unlock+0x8>)
 800950e:	f000 be93 	b.w	800a238 <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	200002ac 	.word	0x200002ac

08009518 <_Balloc>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800951c:	4604      	mov	r4, r0
 800951e:	460d      	mov	r5, r1
 8009520:	b976      	cbnz	r6, 8009540 <_Balloc+0x28>
 8009522:	2010      	movs	r0, #16
 8009524:	f7fc ff4e 	bl	80063c4 <malloc>
 8009528:	4602      	mov	r2, r0
 800952a:	6260      	str	r0, [r4, #36]	; 0x24
 800952c:	b920      	cbnz	r0, 8009538 <_Balloc+0x20>
 800952e:	4b18      	ldr	r3, [pc, #96]	; (8009590 <_Balloc+0x78>)
 8009530:	4818      	ldr	r0, [pc, #96]	; (8009594 <_Balloc+0x7c>)
 8009532:	2166      	movs	r1, #102	; 0x66
 8009534:	f000 fe4e 	bl	800a1d4 <__assert_func>
 8009538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800953c:	6006      	str	r6, [r0, #0]
 800953e:	60c6      	str	r6, [r0, #12]
 8009540:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009542:	68f3      	ldr	r3, [r6, #12]
 8009544:	b183      	cbz	r3, 8009568 <_Balloc+0x50>
 8009546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800954e:	b9b8      	cbnz	r0, 8009580 <_Balloc+0x68>
 8009550:	2101      	movs	r1, #1
 8009552:	fa01 f605 	lsl.w	r6, r1, r5
 8009556:	1d72      	adds	r2, r6, #5
 8009558:	0092      	lsls	r2, r2, #2
 800955a:	4620      	mov	r0, r4
 800955c:	f000 fc9d 	bl	8009e9a <_calloc_r>
 8009560:	b160      	cbz	r0, 800957c <_Balloc+0x64>
 8009562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009566:	e00e      	b.n	8009586 <_Balloc+0x6e>
 8009568:	2221      	movs	r2, #33	; 0x21
 800956a:	2104      	movs	r1, #4
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fc94 	bl	8009e9a <_calloc_r>
 8009572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009574:	60f0      	str	r0, [r6, #12]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e4      	bne.n	8009546 <_Balloc+0x2e>
 800957c:	2000      	movs	r0, #0
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	6802      	ldr	r2, [r0, #0]
 8009582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009586:	2300      	movs	r3, #0
 8009588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800958c:	e7f7      	b.n	800957e <_Balloc+0x66>
 800958e:	bf00      	nop
 8009590:	0800af6e 	.word	0x0800af6e
 8009594:	0800b06c 	.word	0x0800b06c

08009598 <_Bfree>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800959c:	4605      	mov	r5, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	b976      	cbnz	r6, 80095c0 <_Bfree+0x28>
 80095a2:	2010      	movs	r0, #16
 80095a4:	f7fc ff0e 	bl	80063c4 <malloc>
 80095a8:	4602      	mov	r2, r0
 80095aa:	6268      	str	r0, [r5, #36]	; 0x24
 80095ac:	b920      	cbnz	r0, 80095b8 <_Bfree+0x20>
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <_Bfree+0x3c>)
 80095b0:	4809      	ldr	r0, [pc, #36]	; (80095d8 <_Bfree+0x40>)
 80095b2:	218a      	movs	r1, #138	; 0x8a
 80095b4:	f000 fe0e 	bl	800a1d4 <__assert_func>
 80095b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095bc:	6006      	str	r6, [r0, #0]
 80095be:	60c6      	str	r6, [r0, #12]
 80095c0:	b13c      	cbz	r4, 80095d2 <_Bfree+0x3a>
 80095c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095c4:	6862      	ldr	r2, [r4, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095cc:	6021      	str	r1, [r4, #0]
 80095ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	0800af6e 	.word	0x0800af6e
 80095d8:	0800b06c 	.word	0x0800b06c

080095dc <__multadd>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	690d      	ldr	r5, [r1, #16]
 80095e2:	4607      	mov	r7, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	461e      	mov	r6, r3
 80095e8:	f101 0c14 	add.w	ip, r1, #20
 80095ec:	2000      	movs	r0, #0
 80095ee:	f8dc 3000 	ldr.w	r3, [ip]
 80095f2:	b299      	uxth	r1, r3
 80095f4:	fb02 6101 	mla	r1, r2, r1, r6
 80095f8:	0c1e      	lsrs	r6, r3, #16
 80095fa:	0c0b      	lsrs	r3, r1, #16
 80095fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009600:	b289      	uxth	r1, r1
 8009602:	3001      	adds	r0, #1
 8009604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009608:	4285      	cmp	r5, r0
 800960a:	f84c 1b04 	str.w	r1, [ip], #4
 800960e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009612:	dcec      	bgt.n	80095ee <__multadd+0x12>
 8009614:	b30e      	cbz	r6, 800965a <__multadd+0x7e>
 8009616:	68a3      	ldr	r3, [r4, #8]
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc19      	bgt.n	8009650 <__multadd+0x74>
 800961c:	6861      	ldr	r1, [r4, #4]
 800961e:	4638      	mov	r0, r7
 8009620:	3101      	adds	r1, #1
 8009622:	f7ff ff79 	bl	8009518 <_Balloc>
 8009626:	4680      	mov	r8, r0
 8009628:	b928      	cbnz	r0, 8009636 <__multadd+0x5a>
 800962a:	4602      	mov	r2, r0
 800962c:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <__multadd+0x84>)
 800962e:	480d      	ldr	r0, [pc, #52]	; (8009664 <__multadd+0x88>)
 8009630:	21b5      	movs	r1, #181	; 0xb5
 8009632:	f000 fdcf 	bl	800a1d4 <__assert_func>
 8009636:	6922      	ldr	r2, [r4, #16]
 8009638:	3202      	adds	r2, #2
 800963a:	f104 010c 	add.w	r1, r4, #12
 800963e:	0092      	lsls	r2, r2, #2
 8009640:	300c      	adds	r0, #12
 8009642:	f7fc fec7 	bl	80063d4 <memcpy>
 8009646:	4621      	mov	r1, r4
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff ffa5 	bl	8009598 <_Bfree>
 800964e:	4644      	mov	r4, r8
 8009650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009654:	3501      	adds	r5, #1
 8009656:	615e      	str	r6, [r3, #20]
 8009658:	6125      	str	r5, [r4, #16]
 800965a:	4620      	mov	r0, r4
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	0800afe0 	.word	0x0800afe0
 8009664:	0800b06c 	.word	0x0800b06c

08009668 <__s2b>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	4615      	mov	r5, r2
 8009670:	461f      	mov	r7, r3
 8009672:	2209      	movs	r2, #9
 8009674:	3308      	adds	r3, #8
 8009676:	4606      	mov	r6, r0
 8009678:	fb93 f3f2 	sdiv	r3, r3, r2
 800967c:	2100      	movs	r1, #0
 800967e:	2201      	movs	r2, #1
 8009680:	429a      	cmp	r2, r3
 8009682:	db09      	blt.n	8009698 <__s2b+0x30>
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff ff47 	bl	8009518 <_Balloc>
 800968a:	b940      	cbnz	r0, 800969e <__s2b+0x36>
 800968c:	4602      	mov	r2, r0
 800968e:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <__s2b+0x8c>)
 8009690:	4819      	ldr	r0, [pc, #100]	; (80096f8 <__s2b+0x90>)
 8009692:	21ce      	movs	r1, #206	; 0xce
 8009694:	f000 fd9e 	bl	800a1d4 <__assert_func>
 8009698:	0052      	lsls	r2, r2, #1
 800969a:	3101      	adds	r1, #1
 800969c:	e7f0      	b.n	8009680 <__s2b+0x18>
 800969e:	9b08      	ldr	r3, [sp, #32]
 80096a0:	6143      	str	r3, [r0, #20]
 80096a2:	2d09      	cmp	r5, #9
 80096a4:	f04f 0301 	mov.w	r3, #1
 80096a8:	6103      	str	r3, [r0, #16]
 80096aa:	dd16      	ble.n	80096da <__s2b+0x72>
 80096ac:	f104 0909 	add.w	r9, r4, #9
 80096b0:	46c8      	mov	r8, r9
 80096b2:	442c      	add	r4, r5
 80096b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096b8:	4601      	mov	r1, r0
 80096ba:	3b30      	subs	r3, #48	; 0x30
 80096bc:	220a      	movs	r2, #10
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ff8c 	bl	80095dc <__multadd>
 80096c4:	45a0      	cmp	r8, r4
 80096c6:	d1f5      	bne.n	80096b4 <__s2b+0x4c>
 80096c8:	f1a5 0408 	sub.w	r4, r5, #8
 80096cc:	444c      	add	r4, r9
 80096ce:	1b2d      	subs	r5, r5, r4
 80096d0:	1963      	adds	r3, r4, r5
 80096d2:	42bb      	cmp	r3, r7
 80096d4:	db04      	blt.n	80096e0 <__s2b+0x78>
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096da:	340a      	adds	r4, #10
 80096dc:	2509      	movs	r5, #9
 80096de:	e7f6      	b.n	80096ce <__s2b+0x66>
 80096e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e4:	4601      	mov	r1, r0
 80096e6:	3b30      	subs	r3, #48	; 0x30
 80096e8:	220a      	movs	r2, #10
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7ff ff76 	bl	80095dc <__multadd>
 80096f0:	e7ee      	b.n	80096d0 <__s2b+0x68>
 80096f2:	bf00      	nop
 80096f4:	0800afe0 	.word	0x0800afe0
 80096f8:	0800b06c 	.word	0x0800b06c

080096fc <__hi0bits>:
 80096fc:	0c03      	lsrs	r3, r0, #16
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	b9d3      	cbnz	r3, 8009738 <__hi0bits+0x3c>
 8009702:	0400      	lsls	r0, r0, #16
 8009704:	2310      	movs	r3, #16
 8009706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800970a:	bf04      	itt	eq
 800970c:	0200      	lsleq	r0, r0, #8
 800970e:	3308      	addeq	r3, #8
 8009710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009714:	bf04      	itt	eq
 8009716:	0100      	lsleq	r0, r0, #4
 8009718:	3304      	addeq	r3, #4
 800971a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800971e:	bf04      	itt	eq
 8009720:	0080      	lsleq	r0, r0, #2
 8009722:	3302      	addeq	r3, #2
 8009724:	2800      	cmp	r0, #0
 8009726:	db05      	blt.n	8009734 <__hi0bits+0x38>
 8009728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800972c:	f103 0301 	add.w	r3, r3, #1
 8009730:	bf08      	it	eq
 8009732:	2320      	moveq	r3, #32
 8009734:	4618      	mov	r0, r3
 8009736:	4770      	bx	lr
 8009738:	2300      	movs	r3, #0
 800973a:	e7e4      	b.n	8009706 <__hi0bits+0xa>

0800973c <__lo0bits>:
 800973c:	6803      	ldr	r3, [r0, #0]
 800973e:	f013 0207 	ands.w	r2, r3, #7
 8009742:	4601      	mov	r1, r0
 8009744:	d00b      	beq.n	800975e <__lo0bits+0x22>
 8009746:	07da      	lsls	r2, r3, #31
 8009748:	d423      	bmi.n	8009792 <__lo0bits+0x56>
 800974a:	0798      	lsls	r0, r3, #30
 800974c:	bf49      	itett	mi
 800974e:	085b      	lsrmi	r3, r3, #1
 8009750:	089b      	lsrpl	r3, r3, #2
 8009752:	2001      	movmi	r0, #1
 8009754:	600b      	strmi	r3, [r1, #0]
 8009756:	bf5c      	itt	pl
 8009758:	600b      	strpl	r3, [r1, #0]
 800975a:	2002      	movpl	r0, #2
 800975c:	4770      	bx	lr
 800975e:	b298      	uxth	r0, r3
 8009760:	b9a8      	cbnz	r0, 800978e <__lo0bits+0x52>
 8009762:	0c1b      	lsrs	r3, r3, #16
 8009764:	2010      	movs	r0, #16
 8009766:	b2da      	uxtb	r2, r3
 8009768:	b90a      	cbnz	r2, 800976e <__lo0bits+0x32>
 800976a:	3008      	adds	r0, #8
 800976c:	0a1b      	lsrs	r3, r3, #8
 800976e:	071a      	lsls	r2, r3, #28
 8009770:	bf04      	itt	eq
 8009772:	091b      	lsreq	r3, r3, #4
 8009774:	3004      	addeq	r0, #4
 8009776:	079a      	lsls	r2, r3, #30
 8009778:	bf04      	itt	eq
 800977a:	089b      	lsreq	r3, r3, #2
 800977c:	3002      	addeq	r0, #2
 800977e:	07da      	lsls	r2, r3, #31
 8009780:	d403      	bmi.n	800978a <__lo0bits+0x4e>
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	f100 0001 	add.w	r0, r0, #1
 8009788:	d005      	beq.n	8009796 <__lo0bits+0x5a>
 800978a:	600b      	str	r3, [r1, #0]
 800978c:	4770      	bx	lr
 800978e:	4610      	mov	r0, r2
 8009790:	e7e9      	b.n	8009766 <__lo0bits+0x2a>
 8009792:	2000      	movs	r0, #0
 8009794:	4770      	bx	lr
 8009796:	2020      	movs	r0, #32
 8009798:	4770      	bx	lr
	...

0800979c <__i2b>:
 800979c:	b510      	push	{r4, lr}
 800979e:	460c      	mov	r4, r1
 80097a0:	2101      	movs	r1, #1
 80097a2:	f7ff feb9 	bl	8009518 <_Balloc>
 80097a6:	4602      	mov	r2, r0
 80097a8:	b928      	cbnz	r0, 80097b6 <__i2b+0x1a>
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <__i2b+0x24>)
 80097ac:	4805      	ldr	r0, [pc, #20]	; (80097c4 <__i2b+0x28>)
 80097ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097b2:	f000 fd0f 	bl	800a1d4 <__assert_func>
 80097b6:	2301      	movs	r3, #1
 80097b8:	6144      	str	r4, [r0, #20]
 80097ba:	6103      	str	r3, [r0, #16]
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	bf00      	nop
 80097c0:	0800afe0 	.word	0x0800afe0
 80097c4:	0800b06c 	.word	0x0800b06c

080097c8 <__multiply>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	4691      	mov	r9, r2
 80097ce:	690a      	ldr	r2, [r1, #16]
 80097d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	bfb8      	it	lt
 80097d8:	460b      	movlt	r3, r1
 80097da:	460c      	mov	r4, r1
 80097dc:	bfbc      	itt	lt
 80097de:	464c      	movlt	r4, r9
 80097e0:	4699      	movlt	r9, r3
 80097e2:	6927      	ldr	r7, [r4, #16]
 80097e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097e8:	68a3      	ldr	r3, [r4, #8]
 80097ea:	6861      	ldr	r1, [r4, #4]
 80097ec:	eb07 060a 	add.w	r6, r7, sl
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	b085      	sub	sp, #20
 80097f4:	bfb8      	it	lt
 80097f6:	3101      	addlt	r1, #1
 80097f8:	f7ff fe8e 	bl	8009518 <_Balloc>
 80097fc:	b930      	cbnz	r0, 800980c <__multiply+0x44>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b44      	ldr	r3, [pc, #272]	; (8009914 <__multiply+0x14c>)
 8009802:	4845      	ldr	r0, [pc, #276]	; (8009918 <__multiply+0x150>)
 8009804:	f240 115d 	movw	r1, #349	; 0x15d
 8009808:	f000 fce4 	bl	800a1d4 <__assert_func>
 800980c:	f100 0514 	add.w	r5, r0, #20
 8009810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009814:	462b      	mov	r3, r5
 8009816:	2200      	movs	r2, #0
 8009818:	4543      	cmp	r3, r8
 800981a:	d321      	bcc.n	8009860 <__multiply+0x98>
 800981c:	f104 0314 	add.w	r3, r4, #20
 8009820:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009824:	f109 0314 	add.w	r3, r9, #20
 8009828:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800982c:	9202      	str	r2, [sp, #8]
 800982e:	1b3a      	subs	r2, r7, r4
 8009830:	3a15      	subs	r2, #21
 8009832:	f022 0203 	bic.w	r2, r2, #3
 8009836:	3204      	adds	r2, #4
 8009838:	f104 0115 	add.w	r1, r4, #21
 800983c:	428f      	cmp	r7, r1
 800983e:	bf38      	it	cc
 8009840:	2204      	movcc	r2, #4
 8009842:	9201      	str	r2, [sp, #4]
 8009844:	9a02      	ldr	r2, [sp, #8]
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	429a      	cmp	r2, r3
 800984a:	d80c      	bhi.n	8009866 <__multiply+0x9e>
 800984c:	2e00      	cmp	r6, #0
 800984e:	dd03      	ble.n	8009858 <__multiply+0x90>
 8009850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009854:	2b00      	cmp	r3, #0
 8009856:	d05a      	beq.n	800990e <__multiply+0x146>
 8009858:	6106      	str	r6, [r0, #16]
 800985a:	b005      	add	sp, #20
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	f843 2b04 	str.w	r2, [r3], #4
 8009864:	e7d8      	b.n	8009818 <__multiply+0x50>
 8009866:	f8b3 a000 	ldrh.w	sl, [r3]
 800986a:	f1ba 0f00 	cmp.w	sl, #0
 800986e:	d024      	beq.n	80098ba <__multiply+0xf2>
 8009870:	f104 0e14 	add.w	lr, r4, #20
 8009874:	46a9      	mov	r9, r5
 8009876:	f04f 0c00 	mov.w	ip, #0
 800987a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800987e:	f8d9 1000 	ldr.w	r1, [r9]
 8009882:	fa1f fb82 	uxth.w	fp, r2
 8009886:	b289      	uxth	r1, r1
 8009888:	fb0a 110b 	mla	r1, sl, fp, r1
 800988c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009890:	f8d9 2000 	ldr.w	r2, [r9]
 8009894:	4461      	add	r1, ip
 8009896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800989a:	fb0a c20b 	mla	r2, sl, fp, ip
 800989e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098a2:	b289      	uxth	r1, r1
 80098a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098a8:	4577      	cmp	r7, lr
 80098aa:	f849 1b04 	str.w	r1, [r9], #4
 80098ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098b2:	d8e2      	bhi.n	800987a <__multiply+0xb2>
 80098b4:	9a01      	ldr	r2, [sp, #4]
 80098b6:	f845 c002 	str.w	ip, [r5, r2]
 80098ba:	9a03      	ldr	r2, [sp, #12]
 80098bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098c0:	3304      	adds	r3, #4
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	d020      	beq.n	800990a <__multiply+0x142>
 80098c8:	6829      	ldr	r1, [r5, #0]
 80098ca:	f104 0c14 	add.w	ip, r4, #20
 80098ce:	46ae      	mov	lr, r5
 80098d0:	f04f 0a00 	mov.w	sl, #0
 80098d4:	f8bc b000 	ldrh.w	fp, [ip]
 80098d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098dc:	fb09 220b 	mla	r2, r9, fp, r2
 80098e0:	4492      	add	sl, r2
 80098e2:	b289      	uxth	r1, r1
 80098e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098e8:	f84e 1b04 	str.w	r1, [lr], #4
 80098ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098f0:	f8be 1000 	ldrh.w	r1, [lr]
 80098f4:	0c12      	lsrs	r2, r2, #16
 80098f6:	fb09 1102 	mla	r1, r9, r2, r1
 80098fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80098fe:	4567      	cmp	r7, ip
 8009900:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009904:	d8e6      	bhi.n	80098d4 <__multiply+0x10c>
 8009906:	9a01      	ldr	r2, [sp, #4]
 8009908:	50a9      	str	r1, [r5, r2]
 800990a:	3504      	adds	r5, #4
 800990c:	e79a      	b.n	8009844 <__multiply+0x7c>
 800990e:	3e01      	subs	r6, #1
 8009910:	e79c      	b.n	800984c <__multiply+0x84>
 8009912:	bf00      	nop
 8009914:	0800afe0 	.word	0x0800afe0
 8009918:	0800b06c 	.word	0x0800b06c

0800991c <__pow5mult>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	4615      	mov	r5, r2
 8009922:	f012 0203 	ands.w	r2, r2, #3
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	d007      	beq.n	800993c <__pow5mult+0x20>
 800992c:	4c25      	ldr	r4, [pc, #148]	; (80099c4 <__pow5mult+0xa8>)
 800992e:	3a01      	subs	r2, #1
 8009930:	2300      	movs	r3, #0
 8009932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009936:	f7ff fe51 	bl	80095dc <__multadd>
 800993a:	4607      	mov	r7, r0
 800993c:	10ad      	asrs	r5, r5, #2
 800993e:	d03d      	beq.n	80099bc <__pow5mult+0xa0>
 8009940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009942:	b97c      	cbnz	r4, 8009964 <__pow5mult+0x48>
 8009944:	2010      	movs	r0, #16
 8009946:	f7fc fd3d 	bl	80063c4 <malloc>
 800994a:	4602      	mov	r2, r0
 800994c:	6270      	str	r0, [r6, #36]	; 0x24
 800994e:	b928      	cbnz	r0, 800995c <__pow5mult+0x40>
 8009950:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <__pow5mult+0xac>)
 8009952:	481e      	ldr	r0, [pc, #120]	; (80099cc <__pow5mult+0xb0>)
 8009954:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009958:	f000 fc3c 	bl	800a1d4 <__assert_func>
 800995c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009960:	6004      	str	r4, [r0, #0]
 8009962:	60c4      	str	r4, [r0, #12]
 8009964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800996c:	b94c      	cbnz	r4, 8009982 <__pow5mult+0x66>
 800996e:	f240 2171 	movw	r1, #625	; 0x271
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ff12 	bl	800979c <__i2b>
 8009978:	2300      	movs	r3, #0
 800997a:	f8c8 0008 	str.w	r0, [r8, #8]
 800997e:	4604      	mov	r4, r0
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 0900 	mov.w	r9, #0
 8009986:	07eb      	lsls	r3, r5, #31
 8009988:	d50a      	bpl.n	80099a0 <__pow5mult+0x84>
 800998a:	4639      	mov	r1, r7
 800998c:	4622      	mov	r2, r4
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff1a 	bl	80097c8 <__multiply>
 8009994:	4639      	mov	r1, r7
 8009996:	4680      	mov	r8, r0
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff fdfd 	bl	8009598 <_Bfree>
 800999e:	4647      	mov	r7, r8
 80099a0:	106d      	asrs	r5, r5, #1
 80099a2:	d00b      	beq.n	80099bc <__pow5mult+0xa0>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	b938      	cbnz	r0, 80099b8 <__pow5mult+0x9c>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4621      	mov	r1, r4
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff ff0b 	bl	80097c8 <__multiply>
 80099b2:	6020      	str	r0, [r4, #0]
 80099b4:	f8c0 9000 	str.w	r9, [r0]
 80099b8:	4604      	mov	r4, r0
 80099ba:	e7e4      	b.n	8009986 <__pow5mult+0x6a>
 80099bc:	4638      	mov	r0, r7
 80099be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c2:	bf00      	nop
 80099c4:	0800b1b8 	.word	0x0800b1b8
 80099c8:	0800af6e 	.word	0x0800af6e
 80099cc:	0800b06c 	.word	0x0800b06c

080099d0 <__lshift>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	6849      	ldr	r1, [r1, #4]
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	4607      	mov	r7, r0
 80099e2:	4691      	mov	r9, r2
 80099e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099e8:	f108 0601 	add.w	r6, r8, #1
 80099ec:	42b3      	cmp	r3, r6
 80099ee:	db0b      	blt.n	8009a08 <__lshift+0x38>
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff fd91 	bl	8009518 <_Balloc>
 80099f6:	4605      	mov	r5, r0
 80099f8:	b948      	cbnz	r0, 8009a0e <__lshift+0x3e>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b2a      	ldr	r3, [pc, #168]	; (8009aa8 <__lshift+0xd8>)
 80099fe:	482b      	ldr	r0, [pc, #172]	; (8009aac <__lshift+0xdc>)
 8009a00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a04:	f000 fbe6 	bl	800a1d4 <__assert_func>
 8009a08:	3101      	adds	r1, #1
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	e7ee      	b.n	80099ec <__lshift+0x1c>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f100 0114 	add.w	r1, r0, #20
 8009a14:	f100 0210 	add.w	r2, r0, #16
 8009a18:	4618      	mov	r0, r3
 8009a1a:	4553      	cmp	r3, sl
 8009a1c:	db37      	blt.n	8009a8e <__lshift+0xbe>
 8009a1e:	6920      	ldr	r0, [r4, #16]
 8009a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a24:	f104 0314 	add.w	r3, r4, #20
 8009a28:	f019 091f 	ands.w	r9, r9, #31
 8009a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a34:	d02f      	beq.n	8009a96 <__lshift+0xc6>
 8009a36:	f1c9 0e20 	rsb	lr, r9, #32
 8009a3a:	468a      	mov	sl, r1
 8009a3c:	f04f 0c00 	mov.w	ip, #0
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	fa02 f209 	lsl.w	r2, r2, r9
 8009a46:	ea42 020c 	orr.w	r2, r2, ip
 8009a4a:	f84a 2b04 	str.w	r2, [sl], #4
 8009a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a52:	4298      	cmp	r0, r3
 8009a54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a58:	d8f2      	bhi.n	8009a40 <__lshift+0x70>
 8009a5a:	1b03      	subs	r3, r0, r4
 8009a5c:	3b15      	subs	r3, #21
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	3304      	adds	r3, #4
 8009a64:	f104 0215 	add.w	r2, r4, #21
 8009a68:	4290      	cmp	r0, r2
 8009a6a:	bf38      	it	cc
 8009a6c:	2304      	movcc	r3, #4
 8009a6e:	f841 c003 	str.w	ip, [r1, r3]
 8009a72:	f1bc 0f00 	cmp.w	ip, #0
 8009a76:	d001      	beq.n	8009a7c <__lshift+0xac>
 8009a78:	f108 0602 	add.w	r6, r8, #2
 8009a7c:	3e01      	subs	r6, #1
 8009a7e:	4638      	mov	r0, r7
 8009a80:	612e      	str	r6, [r5, #16]
 8009a82:	4621      	mov	r1, r4
 8009a84:	f7ff fd88 	bl	8009598 <_Bfree>
 8009a88:	4628      	mov	r0, r5
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a92:	3301      	adds	r3, #1
 8009a94:	e7c1      	b.n	8009a1a <__lshift+0x4a>
 8009a96:	3904      	subs	r1, #4
 8009a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aa0:	4298      	cmp	r0, r3
 8009aa2:	d8f9      	bhi.n	8009a98 <__lshift+0xc8>
 8009aa4:	e7ea      	b.n	8009a7c <__lshift+0xac>
 8009aa6:	bf00      	nop
 8009aa8:	0800afe0 	.word	0x0800afe0
 8009aac:	0800b06c 	.word	0x0800b06c

08009ab0 <__mcmp>:
 8009ab0:	b530      	push	{r4, r5, lr}
 8009ab2:	6902      	ldr	r2, [r0, #16]
 8009ab4:	690c      	ldr	r4, [r1, #16]
 8009ab6:	1b12      	subs	r2, r2, r4
 8009ab8:	d10e      	bne.n	8009ad8 <__mcmp+0x28>
 8009aba:	f100 0314 	add.w	r3, r0, #20
 8009abe:	3114      	adds	r1, #20
 8009ac0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ac4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ac8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009acc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ad0:	42a5      	cmp	r5, r4
 8009ad2:	d003      	beq.n	8009adc <__mcmp+0x2c>
 8009ad4:	d305      	bcc.n	8009ae2 <__mcmp+0x32>
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4610      	mov	r0, r2
 8009ada:	bd30      	pop	{r4, r5, pc}
 8009adc:	4283      	cmp	r3, r0
 8009ade:	d3f3      	bcc.n	8009ac8 <__mcmp+0x18>
 8009ae0:	e7fa      	b.n	8009ad8 <__mcmp+0x28>
 8009ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae6:	e7f7      	b.n	8009ad8 <__mcmp+0x28>

08009ae8 <__mdiff>:
 8009ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	460c      	mov	r4, r1
 8009aee:	4606      	mov	r6, r0
 8009af0:	4611      	mov	r1, r2
 8009af2:	4620      	mov	r0, r4
 8009af4:	4690      	mov	r8, r2
 8009af6:	f7ff ffdb 	bl	8009ab0 <__mcmp>
 8009afa:	1e05      	subs	r5, r0, #0
 8009afc:	d110      	bne.n	8009b20 <__mdiff+0x38>
 8009afe:	4629      	mov	r1, r5
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7ff fd09 	bl	8009518 <_Balloc>
 8009b06:	b930      	cbnz	r0, 8009b16 <__mdiff+0x2e>
 8009b08:	4b3a      	ldr	r3, [pc, #232]	; (8009bf4 <__mdiff+0x10c>)
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	f240 2132 	movw	r1, #562	; 0x232
 8009b10:	4839      	ldr	r0, [pc, #228]	; (8009bf8 <__mdiff+0x110>)
 8009b12:	f000 fb5f 	bl	800a1d4 <__assert_func>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b20:	bfa4      	itt	ge
 8009b22:	4643      	movge	r3, r8
 8009b24:	46a0      	movge	r8, r4
 8009b26:	4630      	mov	r0, r6
 8009b28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b2c:	bfa6      	itte	ge
 8009b2e:	461c      	movge	r4, r3
 8009b30:	2500      	movge	r5, #0
 8009b32:	2501      	movlt	r5, #1
 8009b34:	f7ff fcf0 	bl	8009518 <_Balloc>
 8009b38:	b920      	cbnz	r0, 8009b44 <__mdiff+0x5c>
 8009b3a:	4b2e      	ldr	r3, [pc, #184]	; (8009bf4 <__mdiff+0x10c>)
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b42:	e7e5      	b.n	8009b10 <__mdiff+0x28>
 8009b44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b48:	6926      	ldr	r6, [r4, #16]
 8009b4a:	60c5      	str	r5, [r0, #12]
 8009b4c:	f104 0914 	add.w	r9, r4, #20
 8009b50:	f108 0514 	add.w	r5, r8, #20
 8009b54:	f100 0e14 	add.w	lr, r0, #20
 8009b58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b60:	f108 0210 	add.w	r2, r8, #16
 8009b64:	46f2      	mov	sl, lr
 8009b66:	2100      	movs	r1, #0
 8009b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b70:	fa1f f883 	uxth.w	r8, r3
 8009b74:	fa11 f18b 	uxtah	r1, r1, fp
 8009b78:	0c1b      	lsrs	r3, r3, #16
 8009b7a:	eba1 0808 	sub.w	r8, r1, r8
 8009b7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b86:	fa1f f888 	uxth.w	r8, r8
 8009b8a:	1419      	asrs	r1, r3, #16
 8009b8c:	454e      	cmp	r6, r9
 8009b8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b92:	f84a 3b04 	str.w	r3, [sl], #4
 8009b96:	d8e7      	bhi.n	8009b68 <__mdiff+0x80>
 8009b98:	1b33      	subs	r3, r6, r4
 8009b9a:	3b15      	subs	r3, #21
 8009b9c:	f023 0303 	bic.w	r3, r3, #3
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	3415      	adds	r4, #21
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	bf38      	it	cc
 8009ba8:	2304      	movcc	r3, #4
 8009baa:	441d      	add	r5, r3
 8009bac:	4473      	add	r3, lr
 8009bae:	469e      	mov	lr, r3
 8009bb0:	462e      	mov	r6, r5
 8009bb2:	4566      	cmp	r6, ip
 8009bb4:	d30e      	bcc.n	8009bd4 <__mdiff+0xec>
 8009bb6:	f10c 0203 	add.w	r2, ip, #3
 8009bba:	1b52      	subs	r2, r2, r5
 8009bbc:	f022 0203 	bic.w	r2, r2, #3
 8009bc0:	3d03      	subs	r5, #3
 8009bc2:	45ac      	cmp	ip, r5
 8009bc4:	bf38      	it	cc
 8009bc6:	2200      	movcc	r2, #0
 8009bc8:	441a      	add	r2, r3
 8009bca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009bce:	b17b      	cbz	r3, 8009bf0 <__mdiff+0x108>
 8009bd0:	6107      	str	r7, [r0, #16]
 8009bd2:	e7a3      	b.n	8009b1c <__mdiff+0x34>
 8009bd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009bd8:	fa11 f288 	uxtah	r2, r1, r8
 8009bdc:	1414      	asrs	r4, r2, #16
 8009bde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009be2:	b292      	uxth	r2, r2
 8009be4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009be8:	f84e 2b04 	str.w	r2, [lr], #4
 8009bec:	1421      	asrs	r1, r4, #16
 8009bee:	e7e0      	b.n	8009bb2 <__mdiff+0xca>
 8009bf0:	3f01      	subs	r7, #1
 8009bf2:	e7ea      	b.n	8009bca <__mdiff+0xe2>
 8009bf4:	0800afe0 	.word	0x0800afe0
 8009bf8:	0800b06c 	.word	0x0800b06c

08009bfc <__ulp>:
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	ed8d 0b00 	vstr	d0, [sp]
 8009c02:	9b01      	ldr	r3, [sp, #4]
 8009c04:	4912      	ldr	r1, [pc, #72]	; (8009c50 <__ulp+0x54>)
 8009c06:	4019      	ands	r1, r3
 8009c08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	dd05      	ble.n	8009c1c <__ulp+0x20>
 8009c10:	2200      	movs	r2, #0
 8009c12:	460b      	mov	r3, r1
 8009c14:	ec43 2b10 	vmov	d0, r2, r3
 8009c18:	b002      	add	sp, #8
 8009c1a:	4770      	bx	lr
 8009c1c:	4249      	negs	r1, r1
 8009c1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009c22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009c26:	f04f 0200 	mov.w	r2, #0
 8009c2a:	f04f 0300 	mov.w	r3, #0
 8009c2e:	da04      	bge.n	8009c3a <__ulp+0x3e>
 8009c30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009c34:	fa41 f300 	asr.w	r3, r1, r0
 8009c38:	e7ec      	b.n	8009c14 <__ulp+0x18>
 8009c3a:	f1a0 0114 	sub.w	r1, r0, #20
 8009c3e:	291e      	cmp	r1, #30
 8009c40:	bfda      	itte	le
 8009c42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009c46:	fa20 f101 	lsrle.w	r1, r0, r1
 8009c4a:	2101      	movgt	r1, #1
 8009c4c:	460a      	mov	r2, r1
 8009c4e:	e7e1      	b.n	8009c14 <__ulp+0x18>
 8009c50:	7ff00000 	.word	0x7ff00000

08009c54 <__b2d>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	6905      	ldr	r5, [r0, #16]
 8009c58:	f100 0714 	add.w	r7, r0, #20
 8009c5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009c60:	1f2e      	subs	r6, r5, #4
 8009c62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff fd48 	bl	80096fc <__hi0bits>
 8009c6c:	f1c0 0320 	rsb	r3, r0, #32
 8009c70:	280a      	cmp	r0, #10
 8009c72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009cf0 <__b2d+0x9c>
 8009c76:	600b      	str	r3, [r1, #0]
 8009c78:	dc14      	bgt.n	8009ca4 <__b2d+0x50>
 8009c7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009c82:	42b7      	cmp	r7, r6
 8009c84:	ea41 030c 	orr.w	r3, r1, ip
 8009c88:	bf34      	ite	cc
 8009c8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c8e:	2100      	movcs	r1, #0
 8009c90:	3015      	adds	r0, #21
 8009c92:	fa04 f000 	lsl.w	r0, r4, r0
 8009c96:	fa21 f10e 	lsr.w	r1, r1, lr
 8009c9a:	ea40 0201 	orr.w	r2, r0, r1
 8009c9e:	ec43 2b10 	vmov	d0, r2, r3
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca4:	42b7      	cmp	r7, r6
 8009ca6:	bf3a      	itte	cc
 8009ca8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009cac:	f1a5 0608 	subcc.w	r6, r5, #8
 8009cb0:	2100      	movcs	r1, #0
 8009cb2:	380b      	subs	r0, #11
 8009cb4:	d017      	beq.n	8009ce6 <__b2d+0x92>
 8009cb6:	f1c0 0c20 	rsb	ip, r0, #32
 8009cba:	fa04 f500 	lsl.w	r5, r4, r0
 8009cbe:	42be      	cmp	r6, r7
 8009cc0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009cc4:	ea45 0504 	orr.w	r5, r5, r4
 8009cc8:	bf8c      	ite	hi
 8009cca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009cce:	2400      	movls	r4, #0
 8009cd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009cd4:	fa01 f000 	lsl.w	r0, r1, r0
 8009cd8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009cdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ce0:	ea40 0204 	orr.w	r2, r0, r4
 8009ce4:	e7db      	b.n	8009c9e <__b2d+0x4a>
 8009ce6:	ea44 030c 	orr.w	r3, r4, ip
 8009cea:	460a      	mov	r2, r1
 8009cec:	e7d7      	b.n	8009c9e <__b2d+0x4a>
 8009cee:	bf00      	nop
 8009cf0:	3ff00000 	.word	0x3ff00000

08009cf4 <__d2b>:
 8009cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	4689      	mov	r9, r1
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	ec57 6b10 	vmov	r6, r7, d0
 8009d00:	4690      	mov	r8, r2
 8009d02:	f7ff fc09 	bl	8009518 <_Balloc>
 8009d06:	4604      	mov	r4, r0
 8009d08:	b930      	cbnz	r0, 8009d18 <__d2b+0x24>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <__d2b+0xb0>)
 8009d0e:	4826      	ldr	r0, [pc, #152]	; (8009da8 <__d2b+0xb4>)
 8009d10:	f240 310a 	movw	r1, #778	; 0x30a
 8009d14:	f000 fa5e 	bl	800a1d4 <__assert_func>
 8009d18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d20:	bb35      	cbnz	r5, 8009d70 <__d2b+0x7c>
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	d028      	beq.n	8009d7a <__d2b+0x86>
 8009d28:	4668      	mov	r0, sp
 8009d2a:	9600      	str	r6, [sp, #0]
 8009d2c:	f7ff fd06 	bl	800973c <__lo0bits>
 8009d30:	9900      	ldr	r1, [sp, #0]
 8009d32:	b300      	cbz	r0, 8009d76 <__d2b+0x82>
 8009d34:	9a01      	ldr	r2, [sp, #4]
 8009d36:	f1c0 0320 	rsb	r3, r0, #32
 8009d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3e:	430b      	orrs	r3, r1
 8009d40:	40c2      	lsrs	r2, r0
 8009d42:	6163      	str	r3, [r4, #20]
 8009d44:	9201      	str	r2, [sp, #4]
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	61a3      	str	r3, [r4, #24]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bf14      	ite	ne
 8009d4e:	2202      	movne	r2, #2
 8009d50:	2201      	moveq	r2, #1
 8009d52:	6122      	str	r2, [r4, #16]
 8009d54:	b1d5      	cbz	r5, 8009d8c <__d2b+0x98>
 8009d56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d5a:	4405      	add	r5, r0
 8009d5c:	f8c9 5000 	str.w	r5, [r9]
 8009d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d64:	f8c8 0000 	str.w	r0, [r8]
 8009d68:	4620      	mov	r0, r4
 8009d6a:	b003      	add	sp, #12
 8009d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d74:	e7d5      	b.n	8009d22 <__d2b+0x2e>
 8009d76:	6161      	str	r1, [r4, #20]
 8009d78:	e7e5      	b.n	8009d46 <__d2b+0x52>
 8009d7a:	a801      	add	r0, sp, #4
 8009d7c:	f7ff fcde 	bl	800973c <__lo0bits>
 8009d80:	9b01      	ldr	r3, [sp, #4]
 8009d82:	6163      	str	r3, [r4, #20]
 8009d84:	2201      	movs	r2, #1
 8009d86:	6122      	str	r2, [r4, #16]
 8009d88:	3020      	adds	r0, #32
 8009d8a:	e7e3      	b.n	8009d54 <__d2b+0x60>
 8009d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d94:	f8c9 0000 	str.w	r0, [r9]
 8009d98:	6918      	ldr	r0, [r3, #16]
 8009d9a:	f7ff fcaf 	bl	80096fc <__hi0bits>
 8009d9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009da2:	e7df      	b.n	8009d64 <__d2b+0x70>
 8009da4:	0800afe0 	.word	0x0800afe0
 8009da8:	0800b06c 	.word	0x0800b06c

08009dac <__ratio>:
 8009dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	4688      	mov	r8, r1
 8009db2:	4669      	mov	r1, sp
 8009db4:	4681      	mov	r9, r0
 8009db6:	f7ff ff4d 	bl	8009c54 <__b2d>
 8009dba:	a901      	add	r1, sp, #4
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	ec55 4b10 	vmov	r4, r5, d0
 8009dc2:	f7ff ff47 	bl	8009c54 <__b2d>
 8009dc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009dce:	eba3 0c02 	sub.w	ip, r3, r2
 8009dd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ddc:	ec51 0b10 	vmov	r0, r1, d0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfd6      	itet	le
 8009de4:	460a      	movle	r2, r1
 8009de6:	462a      	movgt	r2, r5
 8009de8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dec:	468b      	mov	fp, r1
 8009dee:	462f      	mov	r7, r5
 8009df0:	bfd4      	ite	le
 8009df2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009df6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	ee10 2a10 	vmov	r2, s0
 8009e00:	465b      	mov	r3, fp
 8009e02:	4639      	mov	r1, r7
 8009e04:	f7f6 fd42 	bl	800088c <__aeabi_ddiv>
 8009e08:	ec41 0b10 	vmov	d0, r0, r1
 8009e0c:	b003      	add	sp, #12
 8009e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e12 <__copybits>:
 8009e12:	3901      	subs	r1, #1
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	1149      	asrs	r1, r1, #5
 8009e18:	6914      	ldr	r4, [r2, #16]
 8009e1a:	3101      	adds	r1, #1
 8009e1c:	f102 0314 	add.w	r3, r2, #20
 8009e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e28:	1f05      	subs	r5, r0, #4
 8009e2a:	42a3      	cmp	r3, r4
 8009e2c:	d30c      	bcc.n	8009e48 <__copybits+0x36>
 8009e2e:	1aa3      	subs	r3, r4, r2
 8009e30:	3b11      	subs	r3, #17
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	3211      	adds	r2, #17
 8009e38:	42a2      	cmp	r2, r4
 8009e3a:	bf88      	it	hi
 8009e3c:	2300      	movhi	r3, #0
 8009e3e:	4418      	add	r0, r3
 8009e40:	2300      	movs	r3, #0
 8009e42:	4288      	cmp	r0, r1
 8009e44:	d305      	bcc.n	8009e52 <__copybits+0x40>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e50:	e7eb      	b.n	8009e2a <__copybits+0x18>
 8009e52:	f840 3b04 	str.w	r3, [r0], #4
 8009e56:	e7f4      	b.n	8009e42 <__copybits+0x30>

08009e58 <__any_on>:
 8009e58:	f100 0214 	add.w	r2, r0, #20
 8009e5c:	6900      	ldr	r0, [r0, #16]
 8009e5e:	114b      	asrs	r3, r1, #5
 8009e60:	4298      	cmp	r0, r3
 8009e62:	b510      	push	{r4, lr}
 8009e64:	db11      	blt.n	8009e8a <__any_on+0x32>
 8009e66:	dd0a      	ble.n	8009e7e <__any_on+0x26>
 8009e68:	f011 011f 	ands.w	r1, r1, #31
 8009e6c:	d007      	beq.n	8009e7e <__any_on+0x26>
 8009e6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e72:	fa24 f001 	lsr.w	r0, r4, r1
 8009e76:	fa00 f101 	lsl.w	r1, r0, r1
 8009e7a:	428c      	cmp	r4, r1
 8009e7c:	d10b      	bne.n	8009e96 <__any_on+0x3e>
 8009e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d803      	bhi.n	8009e8e <__any_on+0x36>
 8009e86:	2000      	movs	r0, #0
 8009e88:	bd10      	pop	{r4, pc}
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	e7f7      	b.n	8009e7e <__any_on+0x26>
 8009e8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e92:	2900      	cmp	r1, #0
 8009e94:	d0f5      	beq.n	8009e82 <__any_on+0x2a>
 8009e96:	2001      	movs	r0, #1
 8009e98:	e7f6      	b.n	8009e88 <__any_on+0x30>

08009e9a <_calloc_r>:
 8009e9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e9c:	fba1 2402 	umull	r2, r4, r1, r2
 8009ea0:	b94c      	cbnz	r4, 8009eb6 <_calloc_r+0x1c>
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	9201      	str	r2, [sp, #4]
 8009ea6:	f7fc fb17 	bl	80064d8 <_malloc_r>
 8009eaa:	9a01      	ldr	r2, [sp, #4]
 8009eac:	4605      	mov	r5, r0
 8009eae:	b930      	cbnz	r0, 8009ebe <_calloc_r+0x24>
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	b003      	add	sp, #12
 8009eb4:	bd30      	pop	{r4, r5, pc}
 8009eb6:	220c      	movs	r2, #12
 8009eb8:	6002      	str	r2, [r0, #0]
 8009eba:	2500      	movs	r5, #0
 8009ebc:	e7f8      	b.n	8009eb0 <_calloc_r+0x16>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	f7fc fa96 	bl	80063f0 <memset>
 8009ec4:	e7f4      	b.n	8009eb0 <_calloc_r+0x16>

08009ec6 <__ssputs_r>:
 8009ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eca:	688e      	ldr	r6, [r1, #8]
 8009ecc:	429e      	cmp	r6, r3
 8009ece:	4682      	mov	sl, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	4690      	mov	r8, r2
 8009ed4:	461f      	mov	r7, r3
 8009ed6:	d838      	bhi.n	8009f4a <__ssputs_r+0x84>
 8009ed8:	898a      	ldrh	r2, [r1, #12]
 8009eda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ede:	d032      	beq.n	8009f46 <__ssputs_r+0x80>
 8009ee0:	6825      	ldr	r5, [r4, #0]
 8009ee2:	6909      	ldr	r1, [r1, #16]
 8009ee4:	eba5 0901 	sub.w	r9, r5, r1
 8009ee8:	6965      	ldr	r5, [r4, #20]
 8009eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	444b      	add	r3, r9
 8009ef6:	106d      	asrs	r5, r5, #1
 8009ef8:	429d      	cmp	r5, r3
 8009efa:	bf38      	it	cc
 8009efc:	461d      	movcc	r5, r3
 8009efe:	0553      	lsls	r3, r2, #21
 8009f00:	d531      	bpl.n	8009f66 <__ssputs_r+0xa0>
 8009f02:	4629      	mov	r1, r5
 8009f04:	f7fc fae8 	bl	80064d8 <_malloc_r>
 8009f08:	4606      	mov	r6, r0
 8009f0a:	b950      	cbnz	r0, 8009f22 <__ssputs_r+0x5c>
 8009f0c:	230c      	movs	r3, #12
 8009f0e:	f8ca 3000 	str.w	r3, [sl]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	6921      	ldr	r1, [r4, #16]
 8009f24:	464a      	mov	r2, r9
 8009f26:	f7fc fa55 	bl	80063d4 <memcpy>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	6126      	str	r6, [r4, #16]
 8009f38:	6165      	str	r5, [r4, #20]
 8009f3a:	444e      	add	r6, r9
 8009f3c:	eba5 0509 	sub.w	r5, r5, r9
 8009f40:	6026      	str	r6, [r4, #0]
 8009f42:	60a5      	str	r5, [r4, #8]
 8009f44:	463e      	mov	r6, r7
 8009f46:	42be      	cmp	r6, r7
 8009f48:	d900      	bls.n	8009f4c <__ssputs_r+0x86>
 8009f4a:	463e      	mov	r6, r7
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	4632      	mov	r2, r6
 8009f50:	4641      	mov	r1, r8
 8009f52:	f000 f972 	bl	800a23a <memmove>
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	1b9b      	subs	r3, r3, r6
 8009f5a:	60a3      	str	r3, [r4, #8]
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	4433      	add	r3, r6
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	2000      	movs	r0, #0
 8009f64:	e7db      	b.n	8009f1e <__ssputs_r+0x58>
 8009f66:	462a      	mov	r2, r5
 8009f68:	f000 f981 	bl	800a26e <_realloc_r>
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d1e1      	bne.n	8009f36 <__ssputs_r+0x70>
 8009f72:	6921      	ldr	r1, [r4, #16]
 8009f74:	4650      	mov	r0, sl
 8009f76:	f7fc fa43 	bl	8006400 <_free_r>
 8009f7a:	e7c7      	b.n	8009f0c <__ssputs_r+0x46>

08009f7c <_svfiprintf_r>:
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	4698      	mov	r8, r3
 8009f82:	898b      	ldrh	r3, [r1, #12]
 8009f84:	061b      	lsls	r3, r3, #24
 8009f86:	b09d      	sub	sp, #116	; 0x74
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	d50e      	bpl.n	8009fae <_svfiprintf_r+0x32>
 8009f90:	690b      	ldr	r3, [r1, #16]
 8009f92:	b963      	cbnz	r3, 8009fae <_svfiprintf_r+0x32>
 8009f94:	2140      	movs	r1, #64	; 0x40
 8009f96:	f7fc fa9f 	bl	80064d8 <_malloc_r>
 8009f9a:	6028      	str	r0, [r5, #0]
 8009f9c:	6128      	str	r0, [r5, #16]
 8009f9e:	b920      	cbnz	r0, 8009faa <_svfiprintf_r+0x2e>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	e0d1      	b.n	800a14e <_svfiprintf_r+0x1d2>
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	616b      	str	r3, [r5, #20]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb2:	2320      	movs	r3, #32
 8009fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fbc:	2330      	movs	r3, #48	; 0x30
 8009fbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a168 <_svfiprintf_r+0x1ec>
 8009fc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc6:	f04f 0901 	mov.w	r9, #1
 8009fca:	4623      	mov	r3, r4
 8009fcc:	469a      	mov	sl, r3
 8009fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd2:	b10a      	cbz	r2, 8009fd8 <_svfiprintf_r+0x5c>
 8009fd4:	2a25      	cmp	r2, #37	; 0x25
 8009fd6:	d1f9      	bne.n	8009fcc <_svfiprintf_r+0x50>
 8009fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fdc:	d00b      	beq.n	8009ff6 <_svfiprintf_r+0x7a>
 8009fde:	465b      	mov	r3, fp
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff ff6e 	bl	8009ec6 <__ssputs_r>
 8009fea:	3001      	adds	r0, #1
 8009fec:	f000 80aa 	beq.w	800a144 <_svfiprintf_r+0x1c8>
 8009ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff2:	445a      	add	r2, fp
 8009ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 80a2 	beq.w	800a144 <_svfiprintf_r+0x1c8>
 800a000:	2300      	movs	r3, #0
 800a002:	f04f 32ff 	mov.w	r2, #4294967295
 800a006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a00a:	f10a 0a01 	add.w	sl, sl, #1
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	9307      	str	r3, [sp, #28]
 800a012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a016:	931a      	str	r3, [sp, #104]	; 0x68
 800a018:	4654      	mov	r4, sl
 800a01a:	2205      	movs	r2, #5
 800a01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a020:	4851      	ldr	r0, [pc, #324]	; (800a168 <_svfiprintf_r+0x1ec>)
 800a022:	f7f6 f8fd 	bl	8000220 <memchr>
 800a026:	9a04      	ldr	r2, [sp, #16]
 800a028:	b9d8      	cbnz	r0, 800a062 <_svfiprintf_r+0xe6>
 800a02a:	06d0      	lsls	r0, r2, #27
 800a02c:	bf44      	itt	mi
 800a02e:	2320      	movmi	r3, #32
 800a030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a034:	0711      	lsls	r1, r2, #28
 800a036:	bf44      	itt	mi
 800a038:	232b      	movmi	r3, #43	; 0x2b
 800a03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03e:	f89a 3000 	ldrb.w	r3, [sl]
 800a042:	2b2a      	cmp	r3, #42	; 0x2a
 800a044:	d015      	beq.n	800a072 <_svfiprintf_r+0xf6>
 800a046:	9a07      	ldr	r2, [sp, #28]
 800a048:	4654      	mov	r4, sl
 800a04a:	2000      	movs	r0, #0
 800a04c:	f04f 0c0a 	mov.w	ip, #10
 800a050:	4621      	mov	r1, r4
 800a052:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a056:	3b30      	subs	r3, #48	; 0x30
 800a058:	2b09      	cmp	r3, #9
 800a05a:	d94e      	bls.n	800a0fa <_svfiprintf_r+0x17e>
 800a05c:	b1b0      	cbz	r0, 800a08c <_svfiprintf_r+0x110>
 800a05e:	9207      	str	r2, [sp, #28]
 800a060:	e014      	b.n	800a08c <_svfiprintf_r+0x110>
 800a062:	eba0 0308 	sub.w	r3, r0, r8
 800a066:	fa09 f303 	lsl.w	r3, r9, r3
 800a06a:	4313      	orrs	r3, r2
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	46a2      	mov	sl, r4
 800a070:	e7d2      	b.n	800a018 <_svfiprintf_r+0x9c>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	1d19      	adds	r1, r3, #4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	9103      	str	r1, [sp, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bfbb      	ittet	lt
 800a07e:	425b      	neglt	r3, r3
 800a080:	f042 0202 	orrlt.w	r2, r2, #2
 800a084:	9307      	strge	r3, [sp, #28]
 800a086:	9307      	strlt	r3, [sp, #28]
 800a088:	bfb8      	it	lt
 800a08a:	9204      	strlt	r2, [sp, #16]
 800a08c:	7823      	ldrb	r3, [r4, #0]
 800a08e:	2b2e      	cmp	r3, #46	; 0x2e
 800a090:	d10c      	bne.n	800a0ac <_svfiprintf_r+0x130>
 800a092:	7863      	ldrb	r3, [r4, #1]
 800a094:	2b2a      	cmp	r3, #42	; 0x2a
 800a096:	d135      	bne.n	800a104 <_svfiprintf_r+0x188>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	9203      	str	r2, [sp, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	bfb8      	it	lt
 800a0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a8:	3402      	adds	r4, #2
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a178 <_svfiprintf_r+0x1fc>
 800a0b0:	7821      	ldrb	r1, [r4, #0]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	f7f6 f8b3 	bl	8000220 <memchr>
 800a0ba:	b140      	cbz	r0, 800a0ce <_svfiprintf_r+0x152>
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	eba0 000a 	sub.w	r0, r0, sl
 800a0c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	4303      	orrs	r3, r0
 800a0ca:	3401      	adds	r4, #1
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4826      	ldr	r0, [pc, #152]	; (800a16c <_svfiprintf_r+0x1f0>)
 800a0d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d8:	2206      	movs	r2, #6
 800a0da:	f7f6 f8a1 	bl	8000220 <memchr>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d038      	beq.n	800a154 <_svfiprintf_r+0x1d8>
 800a0e2:	4b23      	ldr	r3, [pc, #140]	; (800a170 <_svfiprintf_r+0x1f4>)
 800a0e4:	bb1b      	cbnz	r3, 800a12e <_svfiprintf_r+0x1b2>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	3307      	adds	r3, #7
 800a0ea:	f023 0307 	bic.w	r3, r3, #7
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f4:	4433      	add	r3, r6
 800a0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f8:	e767      	b.n	8009fca <_svfiprintf_r+0x4e>
 800a0fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fe:	460c      	mov	r4, r1
 800a100:	2001      	movs	r0, #1
 800a102:	e7a5      	b.n	800a050 <_svfiprintf_r+0xd4>
 800a104:	2300      	movs	r3, #0
 800a106:	3401      	adds	r4, #1
 800a108:	9305      	str	r3, [sp, #20]
 800a10a:	4619      	mov	r1, r3
 800a10c:	f04f 0c0a 	mov.w	ip, #10
 800a110:	4620      	mov	r0, r4
 800a112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a116:	3a30      	subs	r2, #48	; 0x30
 800a118:	2a09      	cmp	r2, #9
 800a11a:	d903      	bls.n	800a124 <_svfiprintf_r+0x1a8>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0c5      	beq.n	800a0ac <_svfiprintf_r+0x130>
 800a120:	9105      	str	r1, [sp, #20]
 800a122:	e7c3      	b.n	800a0ac <_svfiprintf_r+0x130>
 800a124:	fb0c 2101 	mla	r1, ip, r1, r2
 800a128:	4604      	mov	r4, r0
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7f0      	b.n	800a110 <_svfiprintf_r+0x194>
 800a12e:	ab03      	add	r3, sp, #12
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	462a      	mov	r2, r5
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <_svfiprintf_r+0x1f8>)
 800a136:	a904      	add	r1, sp, #16
 800a138:	4638      	mov	r0, r7
 800a13a:	f7fc fae1 	bl	8006700 <_printf_float>
 800a13e:	1c42      	adds	r2, r0, #1
 800a140:	4606      	mov	r6, r0
 800a142:	d1d6      	bne.n	800a0f2 <_svfiprintf_r+0x176>
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	065b      	lsls	r3, r3, #25
 800a148:	f53f af2c 	bmi.w	8009fa4 <_svfiprintf_r+0x28>
 800a14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14e:	b01d      	add	sp, #116	; 0x74
 800a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	462a      	mov	r2, r5
 800a15a:	4b06      	ldr	r3, [pc, #24]	; (800a174 <_svfiprintf_r+0x1f8>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4638      	mov	r0, r7
 800a160:	f7fc fd72 	bl	8006c48 <_printf_i>
 800a164:	e7eb      	b.n	800a13e <_svfiprintf_r+0x1c2>
 800a166:	bf00      	nop
 800a168:	0800b1c4 	.word	0x0800b1c4
 800a16c:	0800b1ce 	.word	0x0800b1ce
 800a170:	08006701 	.word	0x08006701
 800a174:	08009ec7 	.word	0x08009ec7
 800a178:	0800b1ca 	.word	0x0800b1ca
 800a17c:	00000000 	.word	0x00000000

0800a180 <nan>:
 800a180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a188 <nan+0x8>
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	00000000 	.word	0x00000000
 800a18c:	7ff80000 	.word	0x7ff80000

0800a190 <strncmp>:
 800a190:	b510      	push	{r4, lr}
 800a192:	b17a      	cbz	r2, 800a1b4 <strncmp+0x24>
 800a194:	4603      	mov	r3, r0
 800a196:	3901      	subs	r1, #1
 800a198:	1884      	adds	r4, r0, r2
 800a19a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a19e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1a2:	4290      	cmp	r0, r2
 800a1a4:	d101      	bne.n	800a1aa <strncmp+0x1a>
 800a1a6:	42a3      	cmp	r3, r4
 800a1a8:	d101      	bne.n	800a1ae <strncmp+0x1e>
 800a1aa:	1a80      	subs	r0, r0, r2
 800a1ac:	bd10      	pop	{r4, pc}
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d1f3      	bne.n	800a19a <strncmp+0xa>
 800a1b2:	e7fa      	b.n	800a1aa <strncmp+0x1a>
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	e7f9      	b.n	800a1ac <strncmp+0x1c>

0800a1b8 <__ascii_wctomb>:
 800a1b8:	b149      	cbz	r1, 800a1ce <__ascii_wctomb+0x16>
 800a1ba:	2aff      	cmp	r2, #255	; 0xff
 800a1bc:	bf85      	ittet	hi
 800a1be:	238a      	movhi	r3, #138	; 0x8a
 800a1c0:	6003      	strhi	r3, [r0, #0]
 800a1c2:	700a      	strbls	r2, [r1, #0]
 800a1c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1c8:	bf98      	it	ls
 800a1ca:	2001      	movls	r0, #1
 800a1cc:	4770      	bx	lr
 800a1ce:	4608      	mov	r0, r1
 800a1d0:	4770      	bx	lr
	...

0800a1d4 <__assert_func>:
 800a1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1d6:	4614      	mov	r4, r2
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b09      	ldr	r3, [pc, #36]	; (800a200 <__assert_func+0x2c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	68d8      	ldr	r0, [r3, #12]
 800a1e2:	b14c      	cbz	r4, 800a1f8 <__assert_func+0x24>
 800a1e4:	4b07      	ldr	r3, [pc, #28]	; (800a204 <__assert_func+0x30>)
 800a1e6:	9100      	str	r1, [sp, #0]
 800a1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1ec:	4906      	ldr	r1, [pc, #24]	; (800a208 <__assert_func+0x34>)
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	f000 f80e 	bl	800a210 <fiprintf>
 800a1f4:	f7fc f8b5 	bl	8006362 <abort>
 800a1f8:	4b04      	ldr	r3, [pc, #16]	; (800a20c <__assert_func+0x38>)
 800a1fa:	461c      	mov	r4, r3
 800a1fc:	e7f3      	b.n	800a1e6 <__assert_func+0x12>
 800a1fe:	bf00      	nop
 800a200:	20000010 	.word	0x20000010
 800a204:	0800b1d5 	.word	0x0800b1d5
 800a208:	0800b1e2 	.word	0x0800b1e2
 800a20c:	0800b210 	.word	0x0800b210

0800a210 <fiprintf>:
 800a210:	b40e      	push	{r1, r2, r3}
 800a212:	b503      	push	{r0, r1, lr}
 800a214:	4601      	mov	r1, r0
 800a216:	ab03      	add	r3, sp, #12
 800a218:	4805      	ldr	r0, [pc, #20]	; (800a230 <fiprintf+0x20>)
 800a21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a21e:	6800      	ldr	r0, [r0, #0]
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	f000 f87d 	bl	800a320 <_vfiprintf_r>
 800a226:	b002      	add	sp, #8
 800a228:	f85d eb04 	ldr.w	lr, [sp], #4
 800a22c:	b003      	add	sp, #12
 800a22e:	4770      	bx	lr
 800a230:	20000010 	.word	0x20000010

0800a234 <__retarget_lock_init_recursive>:
 800a234:	4770      	bx	lr

0800a236 <__retarget_lock_acquire_recursive>:
 800a236:	4770      	bx	lr

0800a238 <__retarget_lock_release_recursive>:
 800a238:	4770      	bx	lr

0800a23a <memmove>:
 800a23a:	4288      	cmp	r0, r1
 800a23c:	b510      	push	{r4, lr}
 800a23e:	eb01 0402 	add.w	r4, r1, r2
 800a242:	d902      	bls.n	800a24a <memmove+0x10>
 800a244:	4284      	cmp	r4, r0
 800a246:	4623      	mov	r3, r4
 800a248:	d807      	bhi.n	800a25a <memmove+0x20>
 800a24a:	1e43      	subs	r3, r0, #1
 800a24c:	42a1      	cmp	r1, r4
 800a24e:	d008      	beq.n	800a262 <memmove+0x28>
 800a250:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a254:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a258:	e7f8      	b.n	800a24c <memmove+0x12>
 800a25a:	4402      	add	r2, r0
 800a25c:	4601      	mov	r1, r0
 800a25e:	428a      	cmp	r2, r1
 800a260:	d100      	bne.n	800a264 <memmove+0x2a>
 800a262:	bd10      	pop	{r4, pc}
 800a264:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a268:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a26c:	e7f7      	b.n	800a25e <memmove+0x24>

0800a26e <_realloc_r>:
 800a26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	4680      	mov	r8, r0
 800a274:	4614      	mov	r4, r2
 800a276:	460e      	mov	r6, r1
 800a278:	b921      	cbnz	r1, 800a284 <_realloc_r+0x16>
 800a27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27e:	4611      	mov	r1, r2
 800a280:	f7fc b92a 	b.w	80064d8 <_malloc_r>
 800a284:	b92a      	cbnz	r2, 800a292 <_realloc_r+0x24>
 800a286:	f7fc f8bb 	bl	8006400 <_free_r>
 800a28a:	4625      	mov	r5, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a292:	f000 fc51 	bl	800ab38 <_malloc_usable_size_r>
 800a296:	4284      	cmp	r4, r0
 800a298:	4607      	mov	r7, r0
 800a29a:	d802      	bhi.n	800a2a2 <_realloc_r+0x34>
 800a29c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a0:	d812      	bhi.n	800a2c8 <_realloc_r+0x5a>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	f7fc f917 	bl	80064d8 <_malloc_r>
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0ed      	beq.n	800a28c <_realloc_r+0x1e>
 800a2b0:	42bc      	cmp	r4, r7
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	bf28      	it	cs
 800a2b8:	463a      	movcs	r2, r7
 800a2ba:	f7fc f88b 	bl	80063d4 <memcpy>
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	f7fc f89d 	bl	8006400 <_free_r>
 800a2c6:	e7e1      	b.n	800a28c <_realloc_r+0x1e>
 800a2c8:	4635      	mov	r5, r6
 800a2ca:	e7df      	b.n	800a28c <_realloc_r+0x1e>

0800a2cc <__sfputc_r>:
 800a2cc:	6893      	ldr	r3, [r2, #8]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	b410      	push	{r4}
 800a2d4:	6093      	str	r3, [r2, #8]
 800a2d6:	da08      	bge.n	800a2ea <__sfputc_r+0x1e>
 800a2d8:	6994      	ldr	r4, [r2, #24]
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	db01      	blt.n	800a2e2 <__sfputc_r+0x16>
 800a2de:	290a      	cmp	r1, #10
 800a2e0:	d103      	bne.n	800a2ea <__sfputc_r+0x1e>
 800a2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e6:	f000 b94b 	b.w	800a580 <__swbuf_r>
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	1c58      	adds	r0, r3, #1
 800a2ee:	6010      	str	r0, [r2, #0]
 800a2f0:	7019      	strb	r1, [r3, #0]
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <__sfputs_r>:
 800a2fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	4614      	mov	r4, r2
 800a302:	18d5      	adds	r5, r2, r3
 800a304:	42ac      	cmp	r4, r5
 800a306:	d101      	bne.n	800a30c <__sfputs_r+0x12>
 800a308:	2000      	movs	r0, #0
 800a30a:	e007      	b.n	800a31c <__sfputs_r+0x22>
 800a30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a310:	463a      	mov	r2, r7
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff ffda 	bl	800a2cc <__sfputc_r>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d1f3      	bne.n	800a304 <__sfputs_r+0xa>
 800a31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a320 <_vfiprintf_r>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	460d      	mov	r5, r1
 800a326:	b09d      	sub	sp, #116	; 0x74
 800a328:	4614      	mov	r4, r2
 800a32a:	4698      	mov	r8, r3
 800a32c:	4606      	mov	r6, r0
 800a32e:	b118      	cbz	r0, 800a338 <_vfiprintf_r+0x18>
 800a330:	6983      	ldr	r3, [r0, #24]
 800a332:	b90b      	cbnz	r3, 800a338 <_vfiprintf_r+0x18>
 800a334:	f000 fafe 	bl	800a934 <__sinit>
 800a338:	4b89      	ldr	r3, [pc, #548]	; (800a560 <_vfiprintf_r+0x240>)
 800a33a:	429d      	cmp	r5, r3
 800a33c:	d11b      	bne.n	800a376 <_vfiprintf_r+0x56>
 800a33e:	6875      	ldr	r5, [r6, #4]
 800a340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a342:	07d9      	lsls	r1, r3, #31
 800a344:	d405      	bmi.n	800a352 <_vfiprintf_r+0x32>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	059a      	lsls	r2, r3, #22
 800a34a:	d402      	bmi.n	800a352 <_vfiprintf_r+0x32>
 800a34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34e:	f7ff ff72 	bl	800a236 <__retarget_lock_acquire_recursive>
 800a352:	89ab      	ldrh	r3, [r5, #12]
 800a354:	071b      	lsls	r3, r3, #28
 800a356:	d501      	bpl.n	800a35c <_vfiprintf_r+0x3c>
 800a358:	692b      	ldr	r3, [r5, #16]
 800a35a:	b9eb      	cbnz	r3, 800a398 <_vfiprintf_r+0x78>
 800a35c:	4629      	mov	r1, r5
 800a35e:	4630      	mov	r0, r6
 800a360:	f000 f960 	bl	800a624 <__swsetup_r>
 800a364:	b1c0      	cbz	r0, 800a398 <_vfiprintf_r+0x78>
 800a366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a368:	07dc      	lsls	r4, r3, #31
 800a36a:	d50e      	bpl.n	800a38a <_vfiprintf_r+0x6a>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	b01d      	add	sp, #116	; 0x74
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	4b7b      	ldr	r3, [pc, #492]	; (800a564 <_vfiprintf_r+0x244>)
 800a378:	429d      	cmp	r5, r3
 800a37a:	d101      	bne.n	800a380 <_vfiprintf_r+0x60>
 800a37c:	68b5      	ldr	r5, [r6, #8]
 800a37e:	e7df      	b.n	800a340 <_vfiprintf_r+0x20>
 800a380:	4b79      	ldr	r3, [pc, #484]	; (800a568 <_vfiprintf_r+0x248>)
 800a382:	429d      	cmp	r5, r3
 800a384:	bf08      	it	eq
 800a386:	68f5      	ldreq	r5, [r6, #12]
 800a388:	e7da      	b.n	800a340 <_vfiprintf_r+0x20>
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	0598      	lsls	r0, r3, #22
 800a38e:	d4ed      	bmi.n	800a36c <_vfiprintf_r+0x4c>
 800a390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a392:	f7ff ff51 	bl	800a238 <__retarget_lock_release_recursive>
 800a396:	e7e9      	b.n	800a36c <_vfiprintf_r+0x4c>
 800a398:	2300      	movs	r3, #0
 800a39a:	9309      	str	r3, [sp, #36]	; 0x24
 800a39c:	2320      	movs	r3, #32
 800a39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3a6:	2330      	movs	r3, #48	; 0x30
 800a3a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a56c <_vfiprintf_r+0x24c>
 800a3ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b0:	f04f 0901 	mov.w	r9, #1
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	469a      	mov	sl, r3
 800a3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3bc:	b10a      	cbz	r2, 800a3c2 <_vfiprintf_r+0xa2>
 800a3be:	2a25      	cmp	r2, #37	; 0x25
 800a3c0:	d1f9      	bne.n	800a3b6 <_vfiprintf_r+0x96>
 800a3c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3c6:	d00b      	beq.n	800a3e0 <_vfiprintf_r+0xc0>
 800a3c8:	465b      	mov	r3, fp
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ff93 	bl	800a2fa <__sfputs_r>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f000 80aa 	beq.w	800a52e <_vfiprintf_r+0x20e>
 800a3da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3dc:	445a      	add	r2, fp
 800a3de:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 80a2 	beq.w	800a52e <_vfiprintf_r+0x20e>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f4:	f10a 0a01 	add.w	sl, sl, #1
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a400:	931a      	str	r3, [sp, #104]	; 0x68
 800a402:	4654      	mov	r4, sl
 800a404:	2205      	movs	r2, #5
 800a406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40a:	4858      	ldr	r0, [pc, #352]	; (800a56c <_vfiprintf_r+0x24c>)
 800a40c:	f7f5 ff08 	bl	8000220 <memchr>
 800a410:	9a04      	ldr	r2, [sp, #16]
 800a412:	b9d8      	cbnz	r0, 800a44c <_vfiprintf_r+0x12c>
 800a414:	06d1      	lsls	r1, r2, #27
 800a416:	bf44      	itt	mi
 800a418:	2320      	movmi	r3, #32
 800a41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41e:	0713      	lsls	r3, r2, #28
 800a420:	bf44      	itt	mi
 800a422:	232b      	movmi	r3, #43	; 0x2b
 800a424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a428:	f89a 3000 	ldrb.w	r3, [sl]
 800a42c:	2b2a      	cmp	r3, #42	; 0x2a
 800a42e:	d015      	beq.n	800a45c <_vfiprintf_r+0x13c>
 800a430:	9a07      	ldr	r2, [sp, #28]
 800a432:	4654      	mov	r4, sl
 800a434:	2000      	movs	r0, #0
 800a436:	f04f 0c0a 	mov.w	ip, #10
 800a43a:	4621      	mov	r1, r4
 800a43c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a440:	3b30      	subs	r3, #48	; 0x30
 800a442:	2b09      	cmp	r3, #9
 800a444:	d94e      	bls.n	800a4e4 <_vfiprintf_r+0x1c4>
 800a446:	b1b0      	cbz	r0, 800a476 <_vfiprintf_r+0x156>
 800a448:	9207      	str	r2, [sp, #28]
 800a44a:	e014      	b.n	800a476 <_vfiprintf_r+0x156>
 800a44c:	eba0 0308 	sub.w	r3, r0, r8
 800a450:	fa09 f303 	lsl.w	r3, r9, r3
 800a454:	4313      	orrs	r3, r2
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	46a2      	mov	sl, r4
 800a45a:	e7d2      	b.n	800a402 <_vfiprintf_r+0xe2>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	1d19      	adds	r1, r3, #4
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	9103      	str	r1, [sp, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	bfbb      	ittet	lt
 800a468:	425b      	neglt	r3, r3
 800a46a:	f042 0202 	orrlt.w	r2, r2, #2
 800a46e:	9307      	strge	r3, [sp, #28]
 800a470:	9307      	strlt	r3, [sp, #28]
 800a472:	bfb8      	it	lt
 800a474:	9204      	strlt	r2, [sp, #16]
 800a476:	7823      	ldrb	r3, [r4, #0]
 800a478:	2b2e      	cmp	r3, #46	; 0x2e
 800a47a:	d10c      	bne.n	800a496 <_vfiprintf_r+0x176>
 800a47c:	7863      	ldrb	r3, [r4, #1]
 800a47e:	2b2a      	cmp	r3, #42	; 0x2a
 800a480:	d135      	bne.n	800a4ee <_vfiprintf_r+0x1ce>
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	1d1a      	adds	r2, r3, #4
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	9203      	str	r2, [sp, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfb8      	it	lt
 800a48e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a492:	3402      	adds	r4, #2
 800a494:	9305      	str	r3, [sp, #20]
 800a496:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a57c <_vfiprintf_r+0x25c>
 800a49a:	7821      	ldrb	r1, [r4, #0]
 800a49c:	2203      	movs	r2, #3
 800a49e:	4650      	mov	r0, sl
 800a4a0:	f7f5 febe 	bl	8000220 <memchr>
 800a4a4:	b140      	cbz	r0, 800a4b8 <_vfiprintf_r+0x198>
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	eba0 000a 	sub.w	r0, r0, sl
 800a4ac:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b0:	9b04      	ldr	r3, [sp, #16]
 800a4b2:	4303      	orrs	r3, r0
 800a4b4:	3401      	adds	r4, #1
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4bc:	482c      	ldr	r0, [pc, #176]	; (800a570 <_vfiprintf_r+0x250>)
 800a4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c2:	2206      	movs	r2, #6
 800a4c4:	f7f5 feac 	bl	8000220 <memchr>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d03f      	beq.n	800a54c <_vfiprintf_r+0x22c>
 800a4cc:	4b29      	ldr	r3, [pc, #164]	; (800a574 <_vfiprintf_r+0x254>)
 800a4ce:	bb1b      	cbnz	r3, 800a518 <_vfiprintf_r+0x1f8>
 800a4d0:	9b03      	ldr	r3, [sp, #12]
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	f023 0307 	bic.w	r3, r3, #7
 800a4d8:	3308      	adds	r3, #8
 800a4da:	9303      	str	r3, [sp, #12]
 800a4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4de:	443b      	add	r3, r7
 800a4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e2:	e767      	b.n	800a3b4 <_vfiprintf_r+0x94>
 800a4e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e7a5      	b.n	800a43a <_vfiprintf_r+0x11a>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	3401      	adds	r4, #1
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f04f 0c0a 	mov.w	ip, #10
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a500:	3a30      	subs	r2, #48	; 0x30
 800a502:	2a09      	cmp	r2, #9
 800a504:	d903      	bls.n	800a50e <_vfiprintf_r+0x1ee>
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0c5      	beq.n	800a496 <_vfiprintf_r+0x176>
 800a50a:	9105      	str	r1, [sp, #20]
 800a50c:	e7c3      	b.n	800a496 <_vfiprintf_r+0x176>
 800a50e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a512:	4604      	mov	r4, r0
 800a514:	2301      	movs	r3, #1
 800a516:	e7f0      	b.n	800a4fa <_vfiprintf_r+0x1da>
 800a518:	ab03      	add	r3, sp, #12
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	462a      	mov	r2, r5
 800a51e:	4b16      	ldr	r3, [pc, #88]	; (800a578 <_vfiprintf_r+0x258>)
 800a520:	a904      	add	r1, sp, #16
 800a522:	4630      	mov	r0, r6
 800a524:	f7fc f8ec 	bl	8006700 <_printf_float>
 800a528:	4607      	mov	r7, r0
 800a52a:	1c78      	adds	r0, r7, #1
 800a52c:	d1d6      	bne.n	800a4dc <_vfiprintf_r+0x1bc>
 800a52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a530:	07d9      	lsls	r1, r3, #31
 800a532:	d405      	bmi.n	800a540 <_vfiprintf_r+0x220>
 800a534:	89ab      	ldrh	r3, [r5, #12]
 800a536:	059a      	lsls	r2, r3, #22
 800a538:	d402      	bmi.n	800a540 <_vfiprintf_r+0x220>
 800a53a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a53c:	f7ff fe7c 	bl	800a238 <__retarget_lock_release_recursive>
 800a540:	89ab      	ldrh	r3, [r5, #12]
 800a542:	065b      	lsls	r3, r3, #25
 800a544:	f53f af12 	bmi.w	800a36c <_vfiprintf_r+0x4c>
 800a548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a54a:	e711      	b.n	800a370 <_vfiprintf_r+0x50>
 800a54c:	ab03      	add	r3, sp, #12
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	462a      	mov	r2, r5
 800a552:	4b09      	ldr	r3, [pc, #36]	; (800a578 <_vfiprintf_r+0x258>)
 800a554:	a904      	add	r1, sp, #16
 800a556:	4630      	mov	r0, r6
 800a558:	f7fc fb76 	bl	8006c48 <_printf_i>
 800a55c:	e7e4      	b.n	800a528 <_vfiprintf_r+0x208>
 800a55e:	bf00      	nop
 800a560:	0800b234 	.word	0x0800b234
 800a564:	0800b254 	.word	0x0800b254
 800a568:	0800b214 	.word	0x0800b214
 800a56c:	0800b1c4 	.word	0x0800b1c4
 800a570:	0800b1ce 	.word	0x0800b1ce
 800a574:	08006701 	.word	0x08006701
 800a578:	0800a2fb 	.word	0x0800a2fb
 800a57c:	0800b1ca 	.word	0x0800b1ca

0800a580 <__swbuf_r>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	460e      	mov	r6, r1
 800a584:	4614      	mov	r4, r2
 800a586:	4605      	mov	r5, r0
 800a588:	b118      	cbz	r0, 800a592 <__swbuf_r+0x12>
 800a58a:	6983      	ldr	r3, [r0, #24]
 800a58c:	b90b      	cbnz	r3, 800a592 <__swbuf_r+0x12>
 800a58e:	f000 f9d1 	bl	800a934 <__sinit>
 800a592:	4b21      	ldr	r3, [pc, #132]	; (800a618 <__swbuf_r+0x98>)
 800a594:	429c      	cmp	r4, r3
 800a596:	d12b      	bne.n	800a5f0 <__swbuf_r+0x70>
 800a598:	686c      	ldr	r4, [r5, #4]
 800a59a:	69a3      	ldr	r3, [r4, #24]
 800a59c:	60a3      	str	r3, [r4, #8]
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	071a      	lsls	r2, r3, #28
 800a5a2:	d52f      	bpl.n	800a604 <__swbuf_r+0x84>
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	b36b      	cbz	r3, 800a604 <__swbuf_r+0x84>
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	6820      	ldr	r0, [r4, #0]
 800a5ac:	1ac0      	subs	r0, r0, r3
 800a5ae:	6963      	ldr	r3, [r4, #20]
 800a5b0:	b2f6      	uxtb	r6, r6
 800a5b2:	4283      	cmp	r3, r0
 800a5b4:	4637      	mov	r7, r6
 800a5b6:	dc04      	bgt.n	800a5c2 <__swbuf_r+0x42>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 f926 	bl	800a80c <_fflush_r>
 800a5c0:	bb30      	cbnz	r0, 800a610 <__swbuf_r+0x90>
 800a5c2:	68a3      	ldr	r3, [r4, #8]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	701e      	strb	r6, [r3, #0]
 800a5d0:	6963      	ldr	r3, [r4, #20]
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	4283      	cmp	r3, r0
 800a5d6:	d004      	beq.n	800a5e2 <__swbuf_r+0x62>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	07db      	lsls	r3, r3, #31
 800a5dc:	d506      	bpl.n	800a5ec <__swbuf_r+0x6c>
 800a5de:	2e0a      	cmp	r6, #10
 800a5e0:	d104      	bne.n	800a5ec <__swbuf_r+0x6c>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f000 f911 	bl	800a80c <_fflush_r>
 800a5ea:	b988      	cbnz	r0, 800a610 <__swbuf_r+0x90>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <__swbuf_r+0x9c>)
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d101      	bne.n	800a5fa <__swbuf_r+0x7a>
 800a5f6:	68ac      	ldr	r4, [r5, #8]
 800a5f8:	e7cf      	b.n	800a59a <__swbuf_r+0x1a>
 800a5fa:	4b09      	ldr	r3, [pc, #36]	; (800a620 <__swbuf_r+0xa0>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	bf08      	it	eq
 800a600:	68ec      	ldreq	r4, [r5, #12]
 800a602:	e7ca      	b.n	800a59a <__swbuf_r+0x1a>
 800a604:	4621      	mov	r1, r4
 800a606:	4628      	mov	r0, r5
 800a608:	f000 f80c 	bl	800a624 <__swsetup_r>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0cb      	beq.n	800a5a8 <__swbuf_r+0x28>
 800a610:	f04f 37ff 	mov.w	r7, #4294967295
 800a614:	e7ea      	b.n	800a5ec <__swbuf_r+0x6c>
 800a616:	bf00      	nop
 800a618:	0800b234 	.word	0x0800b234
 800a61c:	0800b254 	.word	0x0800b254
 800a620:	0800b214 	.word	0x0800b214

0800a624 <__swsetup_r>:
 800a624:	4b32      	ldr	r3, [pc, #200]	; (800a6f0 <__swsetup_r+0xcc>)
 800a626:	b570      	push	{r4, r5, r6, lr}
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	4606      	mov	r6, r0
 800a62c:	460c      	mov	r4, r1
 800a62e:	b125      	cbz	r5, 800a63a <__swsetup_r+0x16>
 800a630:	69ab      	ldr	r3, [r5, #24]
 800a632:	b913      	cbnz	r3, 800a63a <__swsetup_r+0x16>
 800a634:	4628      	mov	r0, r5
 800a636:	f000 f97d 	bl	800a934 <__sinit>
 800a63a:	4b2e      	ldr	r3, [pc, #184]	; (800a6f4 <__swsetup_r+0xd0>)
 800a63c:	429c      	cmp	r4, r3
 800a63e:	d10f      	bne.n	800a660 <__swsetup_r+0x3c>
 800a640:	686c      	ldr	r4, [r5, #4]
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a648:	0719      	lsls	r1, r3, #28
 800a64a:	d42c      	bmi.n	800a6a6 <__swsetup_r+0x82>
 800a64c:	06dd      	lsls	r5, r3, #27
 800a64e:	d411      	bmi.n	800a674 <__swsetup_r+0x50>
 800a650:	2309      	movs	r3, #9
 800a652:	6033      	str	r3, [r6, #0]
 800a654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	f04f 30ff 	mov.w	r0, #4294967295
 800a65e:	e03e      	b.n	800a6de <__swsetup_r+0xba>
 800a660:	4b25      	ldr	r3, [pc, #148]	; (800a6f8 <__swsetup_r+0xd4>)
 800a662:	429c      	cmp	r4, r3
 800a664:	d101      	bne.n	800a66a <__swsetup_r+0x46>
 800a666:	68ac      	ldr	r4, [r5, #8]
 800a668:	e7eb      	b.n	800a642 <__swsetup_r+0x1e>
 800a66a:	4b24      	ldr	r3, [pc, #144]	; (800a6fc <__swsetup_r+0xd8>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	bf08      	it	eq
 800a670:	68ec      	ldreq	r4, [r5, #12]
 800a672:	e7e6      	b.n	800a642 <__swsetup_r+0x1e>
 800a674:	0758      	lsls	r0, r3, #29
 800a676:	d512      	bpl.n	800a69e <__swsetup_r+0x7a>
 800a678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a67a:	b141      	cbz	r1, 800a68e <__swsetup_r+0x6a>
 800a67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a680:	4299      	cmp	r1, r3
 800a682:	d002      	beq.n	800a68a <__swsetup_r+0x66>
 800a684:	4630      	mov	r0, r6
 800a686:	f7fb febb 	bl	8006400 <_free_r>
 800a68a:	2300      	movs	r3, #0
 800a68c:	6363      	str	r3, [r4, #52]	; 0x34
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	2300      	movs	r3, #0
 800a698:	6063      	str	r3, [r4, #4]
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f043 0308 	orr.w	r3, r3, #8
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	6923      	ldr	r3, [r4, #16]
 800a6a8:	b94b      	cbnz	r3, 800a6be <__swsetup_r+0x9a>
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b4:	d003      	beq.n	800a6be <__swsetup_r+0x9a>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f000 f9fd 	bl	800aab8 <__smakebuf_r>
 800a6be:	89a0      	ldrh	r0, [r4, #12]
 800a6c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c4:	f010 0301 	ands.w	r3, r0, #1
 800a6c8:	d00a      	beq.n	800a6e0 <__swsetup_r+0xbc>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60a3      	str	r3, [r4, #8]
 800a6ce:	6963      	ldr	r3, [r4, #20]
 800a6d0:	425b      	negs	r3, r3
 800a6d2:	61a3      	str	r3, [r4, #24]
 800a6d4:	6923      	ldr	r3, [r4, #16]
 800a6d6:	b943      	cbnz	r3, 800a6ea <__swsetup_r+0xc6>
 800a6d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6dc:	d1ba      	bne.n	800a654 <__swsetup_r+0x30>
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	0781      	lsls	r1, r0, #30
 800a6e2:	bf58      	it	pl
 800a6e4:	6963      	ldrpl	r3, [r4, #20]
 800a6e6:	60a3      	str	r3, [r4, #8]
 800a6e8:	e7f4      	b.n	800a6d4 <__swsetup_r+0xb0>
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	e7f7      	b.n	800a6de <__swsetup_r+0xba>
 800a6ee:	bf00      	nop
 800a6f0:	20000010 	.word	0x20000010
 800a6f4:	0800b234 	.word	0x0800b234
 800a6f8:	0800b254 	.word	0x0800b254
 800a6fc:	0800b214 	.word	0x0800b214

0800a700 <__sflush_r>:
 800a700:	898a      	ldrh	r2, [r1, #12]
 800a702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a706:	4605      	mov	r5, r0
 800a708:	0710      	lsls	r0, r2, #28
 800a70a:	460c      	mov	r4, r1
 800a70c:	d458      	bmi.n	800a7c0 <__sflush_r+0xc0>
 800a70e:	684b      	ldr	r3, [r1, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	dc05      	bgt.n	800a720 <__sflush_r+0x20>
 800a714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a716:	2b00      	cmp	r3, #0
 800a718:	dc02      	bgt.n	800a720 <__sflush_r+0x20>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a722:	2e00      	cmp	r6, #0
 800a724:	d0f9      	beq.n	800a71a <__sflush_r+0x1a>
 800a726:	2300      	movs	r3, #0
 800a728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a72c:	682f      	ldr	r7, [r5, #0]
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	d032      	beq.n	800a798 <__sflush_r+0x98>
 800a732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	075a      	lsls	r2, r3, #29
 800a738:	d505      	bpl.n	800a746 <__sflush_r+0x46>
 800a73a:	6863      	ldr	r3, [r4, #4]
 800a73c:	1ac0      	subs	r0, r0, r3
 800a73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a740:	b10b      	cbz	r3, 800a746 <__sflush_r+0x46>
 800a742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a744:	1ac0      	subs	r0, r0, r3
 800a746:	2300      	movs	r3, #0
 800a748:	4602      	mov	r2, r0
 800a74a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a74c:	6a21      	ldr	r1, [r4, #32]
 800a74e:	4628      	mov	r0, r5
 800a750:	47b0      	blx	r6
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	d106      	bne.n	800a766 <__sflush_r+0x66>
 800a758:	6829      	ldr	r1, [r5, #0]
 800a75a:	291d      	cmp	r1, #29
 800a75c:	d82c      	bhi.n	800a7b8 <__sflush_r+0xb8>
 800a75e:	4a2a      	ldr	r2, [pc, #168]	; (800a808 <__sflush_r+0x108>)
 800a760:	40ca      	lsrs	r2, r1
 800a762:	07d6      	lsls	r6, r2, #31
 800a764:	d528      	bpl.n	800a7b8 <__sflush_r+0xb8>
 800a766:	2200      	movs	r2, #0
 800a768:	6062      	str	r2, [r4, #4]
 800a76a:	04d9      	lsls	r1, r3, #19
 800a76c:	6922      	ldr	r2, [r4, #16]
 800a76e:	6022      	str	r2, [r4, #0]
 800a770:	d504      	bpl.n	800a77c <__sflush_r+0x7c>
 800a772:	1c42      	adds	r2, r0, #1
 800a774:	d101      	bne.n	800a77a <__sflush_r+0x7a>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	b903      	cbnz	r3, 800a77c <__sflush_r+0x7c>
 800a77a:	6560      	str	r0, [r4, #84]	; 0x54
 800a77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a77e:	602f      	str	r7, [r5, #0]
 800a780:	2900      	cmp	r1, #0
 800a782:	d0ca      	beq.n	800a71a <__sflush_r+0x1a>
 800a784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a788:	4299      	cmp	r1, r3
 800a78a:	d002      	beq.n	800a792 <__sflush_r+0x92>
 800a78c:	4628      	mov	r0, r5
 800a78e:	f7fb fe37 	bl	8006400 <_free_r>
 800a792:	2000      	movs	r0, #0
 800a794:	6360      	str	r0, [r4, #52]	; 0x34
 800a796:	e7c1      	b.n	800a71c <__sflush_r+0x1c>
 800a798:	6a21      	ldr	r1, [r4, #32]
 800a79a:	2301      	movs	r3, #1
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b0      	blx	r6
 800a7a0:	1c41      	adds	r1, r0, #1
 800a7a2:	d1c7      	bne.n	800a734 <__sflush_r+0x34>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0c4      	beq.n	800a734 <__sflush_r+0x34>
 800a7aa:	2b1d      	cmp	r3, #29
 800a7ac:	d001      	beq.n	800a7b2 <__sflush_r+0xb2>
 800a7ae:	2b16      	cmp	r3, #22
 800a7b0:	d101      	bne.n	800a7b6 <__sflush_r+0xb6>
 800a7b2:	602f      	str	r7, [r5, #0]
 800a7b4:	e7b1      	b.n	800a71a <__sflush_r+0x1a>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	e7ad      	b.n	800a71c <__sflush_r+0x1c>
 800a7c0:	690f      	ldr	r7, [r1, #16]
 800a7c2:	2f00      	cmp	r7, #0
 800a7c4:	d0a9      	beq.n	800a71a <__sflush_r+0x1a>
 800a7c6:	0793      	lsls	r3, r2, #30
 800a7c8:	680e      	ldr	r6, [r1, #0]
 800a7ca:	bf08      	it	eq
 800a7cc:	694b      	ldreq	r3, [r1, #20]
 800a7ce:	600f      	str	r7, [r1, #0]
 800a7d0:	bf18      	it	ne
 800a7d2:	2300      	movne	r3, #0
 800a7d4:	eba6 0807 	sub.w	r8, r6, r7
 800a7d8:	608b      	str	r3, [r1, #8]
 800a7da:	f1b8 0f00 	cmp.w	r8, #0
 800a7de:	dd9c      	ble.n	800a71a <__sflush_r+0x1a>
 800a7e0:	6a21      	ldr	r1, [r4, #32]
 800a7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7e4:	4643      	mov	r3, r8
 800a7e6:	463a      	mov	r2, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b0      	blx	r6
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	dc06      	bgt.n	800a7fe <__sflush_r+0xfe>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	e78e      	b.n	800a71c <__sflush_r+0x1c>
 800a7fe:	4407      	add	r7, r0
 800a800:	eba8 0800 	sub.w	r8, r8, r0
 800a804:	e7e9      	b.n	800a7da <__sflush_r+0xda>
 800a806:	bf00      	nop
 800a808:	20400001 	.word	0x20400001

0800a80c <_fflush_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	690b      	ldr	r3, [r1, #16]
 800a810:	4605      	mov	r5, r0
 800a812:	460c      	mov	r4, r1
 800a814:	b913      	cbnz	r3, 800a81c <_fflush_r+0x10>
 800a816:	2500      	movs	r5, #0
 800a818:	4628      	mov	r0, r5
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	b118      	cbz	r0, 800a826 <_fflush_r+0x1a>
 800a81e:	6983      	ldr	r3, [r0, #24]
 800a820:	b90b      	cbnz	r3, 800a826 <_fflush_r+0x1a>
 800a822:	f000 f887 	bl	800a934 <__sinit>
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <_fflush_r+0x6c>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	d11b      	bne.n	800a864 <_fflush_r+0x58>
 800a82c:	686c      	ldr	r4, [r5, #4]
 800a82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0ef      	beq.n	800a816 <_fflush_r+0xa>
 800a836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a838:	07d0      	lsls	r0, r2, #31
 800a83a:	d404      	bmi.n	800a846 <_fflush_r+0x3a>
 800a83c:	0599      	lsls	r1, r3, #22
 800a83e:	d402      	bmi.n	800a846 <_fflush_r+0x3a>
 800a840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a842:	f7ff fcf8 	bl	800a236 <__retarget_lock_acquire_recursive>
 800a846:	4628      	mov	r0, r5
 800a848:	4621      	mov	r1, r4
 800a84a:	f7ff ff59 	bl	800a700 <__sflush_r>
 800a84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a850:	07da      	lsls	r2, r3, #31
 800a852:	4605      	mov	r5, r0
 800a854:	d4e0      	bmi.n	800a818 <_fflush_r+0xc>
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	059b      	lsls	r3, r3, #22
 800a85a:	d4dd      	bmi.n	800a818 <_fflush_r+0xc>
 800a85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a85e:	f7ff fceb 	bl	800a238 <__retarget_lock_release_recursive>
 800a862:	e7d9      	b.n	800a818 <_fflush_r+0xc>
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <_fflush_r+0x70>)
 800a866:	429c      	cmp	r4, r3
 800a868:	d101      	bne.n	800a86e <_fflush_r+0x62>
 800a86a:	68ac      	ldr	r4, [r5, #8]
 800a86c:	e7df      	b.n	800a82e <_fflush_r+0x22>
 800a86e:	4b04      	ldr	r3, [pc, #16]	; (800a880 <_fflush_r+0x74>)
 800a870:	429c      	cmp	r4, r3
 800a872:	bf08      	it	eq
 800a874:	68ec      	ldreq	r4, [r5, #12]
 800a876:	e7da      	b.n	800a82e <_fflush_r+0x22>
 800a878:	0800b234 	.word	0x0800b234
 800a87c:	0800b254 	.word	0x0800b254
 800a880:	0800b214 	.word	0x0800b214

0800a884 <std>:
 800a884:	2300      	movs	r3, #0
 800a886:	b510      	push	{r4, lr}
 800a888:	4604      	mov	r4, r0
 800a88a:	e9c0 3300 	strd	r3, r3, [r0]
 800a88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a892:	6083      	str	r3, [r0, #8]
 800a894:	8181      	strh	r1, [r0, #12]
 800a896:	6643      	str	r3, [r0, #100]	; 0x64
 800a898:	81c2      	strh	r2, [r0, #14]
 800a89a:	6183      	str	r3, [r0, #24]
 800a89c:	4619      	mov	r1, r3
 800a89e:	2208      	movs	r2, #8
 800a8a0:	305c      	adds	r0, #92	; 0x5c
 800a8a2:	f7fb fda5 	bl	80063f0 <memset>
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <std+0x38>)
 800a8a8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8aa:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <std+0x3c>)
 800a8ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ae:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <std+0x40>)
 800a8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8b2:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <std+0x44>)
 800a8b4:	6224      	str	r4, [r4, #32]
 800a8b6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	bf00      	nop
 800a8bc:	0800ab49 	.word	0x0800ab49
 800a8c0:	0800ab6b 	.word	0x0800ab6b
 800a8c4:	0800aba3 	.word	0x0800aba3
 800a8c8:	0800abc7 	.word	0x0800abc7

0800a8cc <_cleanup_r>:
 800a8cc:	4901      	ldr	r1, [pc, #4]	; (800a8d4 <_cleanup_r+0x8>)
 800a8ce:	f000 b8af 	b.w	800aa30 <_fwalk_reent>
 800a8d2:	bf00      	nop
 800a8d4:	0800a80d 	.word	0x0800a80d

0800a8d8 <__sfmoreglue>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	2268      	movs	r2, #104	; 0x68
 800a8dc:	1e4d      	subs	r5, r1, #1
 800a8de:	4355      	muls	r5, r2
 800a8e0:	460e      	mov	r6, r1
 800a8e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8e6:	f7fb fdf7 	bl	80064d8 <_malloc_r>
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	b140      	cbz	r0, 800a900 <__sfmoreglue+0x28>
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	e9c0 1600 	strd	r1, r6, [r0]
 800a8f4:	300c      	adds	r0, #12
 800a8f6:	60a0      	str	r0, [r4, #8]
 800a8f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8fc:	f7fb fd78 	bl	80063f0 <memset>
 800a900:	4620      	mov	r0, r4
 800a902:	bd70      	pop	{r4, r5, r6, pc}

0800a904 <__sfp_lock_acquire>:
 800a904:	4801      	ldr	r0, [pc, #4]	; (800a90c <__sfp_lock_acquire+0x8>)
 800a906:	f7ff bc96 	b.w	800a236 <__retarget_lock_acquire_recursive>
 800a90a:	bf00      	nop
 800a90c:	200002ad 	.word	0x200002ad

0800a910 <__sfp_lock_release>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__sfp_lock_release+0x8>)
 800a912:	f7ff bc91 	b.w	800a238 <__retarget_lock_release_recursive>
 800a916:	bf00      	nop
 800a918:	200002ad 	.word	0x200002ad

0800a91c <__sinit_lock_acquire>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__sinit_lock_acquire+0x8>)
 800a91e:	f7ff bc8a 	b.w	800a236 <__retarget_lock_acquire_recursive>
 800a922:	bf00      	nop
 800a924:	200002ae 	.word	0x200002ae

0800a928 <__sinit_lock_release>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__sinit_lock_release+0x8>)
 800a92a:	f7ff bc85 	b.w	800a238 <__retarget_lock_release_recursive>
 800a92e:	bf00      	nop
 800a930:	200002ae 	.word	0x200002ae

0800a934 <__sinit>:
 800a934:	b510      	push	{r4, lr}
 800a936:	4604      	mov	r4, r0
 800a938:	f7ff fff0 	bl	800a91c <__sinit_lock_acquire>
 800a93c:	69a3      	ldr	r3, [r4, #24]
 800a93e:	b11b      	cbz	r3, 800a948 <__sinit+0x14>
 800a940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a944:	f7ff bff0 	b.w	800a928 <__sinit_lock_release>
 800a948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a94c:	6523      	str	r3, [r4, #80]	; 0x50
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <__sinit+0x68>)
 800a950:	4a13      	ldr	r2, [pc, #76]	; (800a9a0 <__sinit+0x6c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	62a2      	str	r2, [r4, #40]	; 0x28
 800a956:	42a3      	cmp	r3, r4
 800a958:	bf04      	itt	eq
 800a95a:	2301      	moveq	r3, #1
 800a95c:	61a3      	streq	r3, [r4, #24]
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 f820 	bl	800a9a4 <__sfp>
 800a964:	6060      	str	r0, [r4, #4]
 800a966:	4620      	mov	r0, r4
 800a968:	f000 f81c 	bl	800a9a4 <__sfp>
 800a96c:	60a0      	str	r0, [r4, #8]
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 f818 	bl	800a9a4 <__sfp>
 800a974:	2200      	movs	r2, #0
 800a976:	60e0      	str	r0, [r4, #12]
 800a978:	2104      	movs	r1, #4
 800a97a:	6860      	ldr	r0, [r4, #4]
 800a97c:	f7ff ff82 	bl	800a884 <std>
 800a980:	68a0      	ldr	r0, [r4, #8]
 800a982:	2201      	movs	r2, #1
 800a984:	2109      	movs	r1, #9
 800a986:	f7ff ff7d 	bl	800a884 <std>
 800a98a:	68e0      	ldr	r0, [r4, #12]
 800a98c:	2202      	movs	r2, #2
 800a98e:	2112      	movs	r1, #18
 800a990:	f7ff ff78 	bl	800a884 <std>
 800a994:	2301      	movs	r3, #1
 800a996:	61a3      	str	r3, [r4, #24]
 800a998:	e7d2      	b.n	800a940 <__sinit+0xc>
 800a99a:	bf00      	nop
 800a99c:	0800add0 	.word	0x0800add0
 800a9a0:	0800a8cd 	.word	0x0800a8cd

0800a9a4 <__sfp>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	f7ff ffac 	bl	800a904 <__sfp_lock_acquire>
 800a9ac:	4b1e      	ldr	r3, [pc, #120]	; (800aa28 <__sfp+0x84>)
 800a9ae:	681e      	ldr	r6, [r3, #0]
 800a9b0:	69b3      	ldr	r3, [r6, #24]
 800a9b2:	b913      	cbnz	r3, 800a9ba <__sfp+0x16>
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff ffbd 	bl	800a934 <__sinit>
 800a9ba:	3648      	adds	r6, #72	; 0x48
 800a9bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	d503      	bpl.n	800a9cc <__sfp+0x28>
 800a9c4:	6833      	ldr	r3, [r6, #0]
 800a9c6:	b30b      	cbz	r3, 800aa0c <__sfp+0x68>
 800a9c8:	6836      	ldr	r6, [r6, #0]
 800a9ca:	e7f7      	b.n	800a9bc <__sfp+0x18>
 800a9cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9d0:	b9d5      	cbnz	r5, 800aa08 <__sfp+0x64>
 800a9d2:	4b16      	ldr	r3, [pc, #88]	; (800aa2c <__sfp+0x88>)
 800a9d4:	60e3      	str	r3, [r4, #12]
 800a9d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9da:	6665      	str	r5, [r4, #100]	; 0x64
 800a9dc:	f7ff fc2a 	bl	800a234 <__retarget_lock_init_recursive>
 800a9e0:	f7ff ff96 	bl	800a910 <__sfp_lock_release>
 800a9e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9ec:	6025      	str	r5, [r4, #0]
 800a9ee:	61a5      	str	r5, [r4, #24]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9f8:	f7fb fcfa 	bl	80063f0 <memset>
 800a9fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa04:	4620      	mov	r0, r4
 800aa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa08:	3468      	adds	r4, #104	; 0x68
 800aa0a:	e7d9      	b.n	800a9c0 <__sfp+0x1c>
 800aa0c:	2104      	movs	r1, #4
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f7ff ff62 	bl	800a8d8 <__sfmoreglue>
 800aa14:	4604      	mov	r4, r0
 800aa16:	6030      	str	r0, [r6, #0]
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1d5      	bne.n	800a9c8 <__sfp+0x24>
 800aa1c:	f7ff ff78 	bl	800a910 <__sfp_lock_release>
 800aa20:	230c      	movs	r3, #12
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	e7ee      	b.n	800aa04 <__sfp+0x60>
 800aa26:	bf00      	nop
 800aa28:	0800add0 	.word	0x0800add0
 800aa2c:	ffff0001 	.word	0xffff0001

0800aa30 <_fwalk_reent>:
 800aa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa34:	4606      	mov	r6, r0
 800aa36:	4688      	mov	r8, r1
 800aa38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa3c:	2700      	movs	r7, #0
 800aa3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa42:	f1b9 0901 	subs.w	r9, r9, #1
 800aa46:	d505      	bpl.n	800aa54 <_fwalk_reent+0x24>
 800aa48:	6824      	ldr	r4, [r4, #0]
 800aa4a:	2c00      	cmp	r4, #0
 800aa4c:	d1f7      	bne.n	800aa3e <_fwalk_reent+0xe>
 800aa4e:	4638      	mov	r0, r7
 800aa50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa54:	89ab      	ldrh	r3, [r5, #12]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d907      	bls.n	800aa6a <_fwalk_reent+0x3a>
 800aa5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	d003      	beq.n	800aa6a <_fwalk_reent+0x3a>
 800aa62:	4629      	mov	r1, r5
 800aa64:	4630      	mov	r0, r6
 800aa66:	47c0      	blx	r8
 800aa68:	4307      	orrs	r7, r0
 800aa6a:	3568      	adds	r5, #104	; 0x68
 800aa6c:	e7e9      	b.n	800aa42 <_fwalk_reent+0x12>

0800aa6e <__swhatbuf_r>:
 800aa6e:	b570      	push	{r4, r5, r6, lr}
 800aa70:	460e      	mov	r6, r1
 800aa72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa76:	2900      	cmp	r1, #0
 800aa78:	b096      	sub	sp, #88	; 0x58
 800aa7a:	4614      	mov	r4, r2
 800aa7c:	461d      	mov	r5, r3
 800aa7e:	da08      	bge.n	800aa92 <__swhatbuf_r+0x24>
 800aa80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	602a      	str	r2, [r5, #0]
 800aa88:	061a      	lsls	r2, r3, #24
 800aa8a:	d410      	bmi.n	800aaae <__swhatbuf_r+0x40>
 800aa8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa90:	e00e      	b.n	800aab0 <__swhatbuf_r+0x42>
 800aa92:	466a      	mov	r2, sp
 800aa94:	f000 f8be 	bl	800ac14 <_fstat_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	dbf1      	blt.n	800aa80 <__swhatbuf_r+0x12>
 800aa9c:	9a01      	ldr	r2, [sp, #4]
 800aa9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aaa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aaa6:	425a      	negs	r2, r3
 800aaa8:	415a      	adcs	r2, r3
 800aaaa:	602a      	str	r2, [r5, #0]
 800aaac:	e7ee      	b.n	800aa8c <__swhatbuf_r+0x1e>
 800aaae:	2340      	movs	r3, #64	; 0x40
 800aab0:	2000      	movs	r0, #0
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	b016      	add	sp, #88	; 0x58
 800aab6:	bd70      	pop	{r4, r5, r6, pc}

0800aab8 <__smakebuf_r>:
 800aab8:	898b      	ldrh	r3, [r1, #12]
 800aaba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aabc:	079d      	lsls	r5, r3, #30
 800aabe:	4606      	mov	r6, r0
 800aac0:	460c      	mov	r4, r1
 800aac2:	d507      	bpl.n	800aad4 <__smakebuf_r+0x1c>
 800aac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	6123      	str	r3, [r4, #16]
 800aacc:	2301      	movs	r3, #1
 800aace:	6163      	str	r3, [r4, #20]
 800aad0:	b002      	add	sp, #8
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	ab01      	add	r3, sp, #4
 800aad6:	466a      	mov	r2, sp
 800aad8:	f7ff ffc9 	bl	800aa6e <__swhatbuf_r>
 800aadc:	9900      	ldr	r1, [sp, #0]
 800aade:	4605      	mov	r5, r0
 800aae0:	4630      	mov	r0, r6
 800aae2:	f7fb fcf9 	bl	80064d8 <_malloc_r>
 800aae6:	b948      	cbnz	r0, 800aafc <__smakebuf_r+0x44>
 800aae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaec:	059a      	lsls	r2, r3, #22
 800aaee:	d4ef      	bmi.n	800aad0 <__smakebuf_r+0x18>
 800aaf0:	f023 0303 	bic.w	r3, r3, #3
 800aaf4:	f043 0302 	orr.w	r3, r3, #2
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	e7e3      	b.n	800aac4 <__smakebuf_r+0xc>
 800aafc:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <__smakebuf_r+0x7c>)
 800aafe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	6020      	str	r0, [r4, #0]
 800ab04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	9b00      	ldr	r3, [sp, #0]
 800ab0c:	6163      	str	r3, [r4, #20]
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	6120      	str	r0, [r4, #16]
 800ab12:	b15b      	cbz	r3, 800ab2c <__smakebuf_r+0x74>
 800ab14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f000 f88d 	bl	800ac38 <_isatty_r>
 800ab1e:	b128      	cbz	r0, 800ab2c <__smakebuf_r+0x74>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	89a0      	ldrh	r0, [r4, #12]
 800ab2e:	4305      	orrs	r5, r0
 800ab30:	81a5      	strh	r5, [r4, #12]
 800ab32:	e7cd      	b.n	800aad0 <__smakebuf_r+0x18>
 800ab34:	0800a8cd 	.word	0x0800a8cd

0800ab38 <_malloc_usable_size_r>:
 800ab38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab3c:	1f18      	subs	r0, r3, #4
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	bfbc      	itt	lt
 800ab42:	580b      	ldrlt	r3, [r1, r0]
 800ab44:	18c0      	addlt	r0, r0, r3
 800ab46:	4770      	bx	lr

0800ab48 <__sread>:
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab50:	f000 f894 	bl	800ac7c <_read_r>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	bfab      	itete	ge
 800ab58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab5c:	181b      	addge	r3, r3, r0
 800ab5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab62:	bfac      	ite	ge
 800ab64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab66:	81a3      	strhlt	r3, [r4, #12]
 800ab68:	bd10      	pop	{r4, pc}

0800ab6a <__swrite>:
 800ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	461f      	mov	r7, r3
 800ab70:	898b      	ldrh	r3, [r1, #12]
 800ab72:	05db      	lsls	r3, r3, #23
 800ab74:	4605      	mov	r5, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	4616      	mov	r6, r2
 800ab7a:	d505      	bpl.n	800ab88 <__swrite+0x1e>
 800ab7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab80:	2302      	movs	r3, #2
 800ab82:	2200      	movs	r2, #0
 800ab84:	f000 f868 	bl	800ac58 <_lseek_r>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	4632      	mov	r2, r6
 800ab96:	463b      	mov	r3, r7
 800ab98:	4628      	mov	r0, r5
 800ab9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9e:	f000 b817 	b.w	800abd0 <_write_r>

0800aba2 <__sseek>:
 800aba2:	b510      	push	{r4, lr}
 800aba4:	460c      	mov	r4, r1
 800aba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abaa:	f000 f855 	bl	800ac58 <_lseek_r>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	bf15      	itete	ne
 800abb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abbe:	81a3      	strheq	r3, [r4, #12]
 800abc0:	bf18      	it	ne
 800abc2:	81a3      	strhne	r3, [r4, #12]
 800abc4:	bd10      	pop	{r4, pc}

0800abc6 <__sclose>:
 800abc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abca:	f000 b813 	b.w	800abf4 <_close_r>
	...

0800abd0 <_write_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d07      	ldr	r5, [pc, #28]	; (800abf0 <_write_r+0x20>)
 800abd4:	4604      	mov	r4, r0
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	602a      	str	r2, [r5, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f7f6 fea3 	bl	800192a <_write>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_write_r+0x1e>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_write_r+0x1e>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	200002a8 	.word	0x200002a8

0800abf4 <_close_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d06      	ldr	r5, [pc, #24]	; (800ac10 <_close_r+0x1c>)
 800abf8:	2300      	movs	r3, #0
 800abfa:	4604      	mov	r4, r0
 800abfc:	4608      	mov	r0, r1
 800abfe:	602b      	str	r3, [r5, #0]
 800ac00:	f7f6 feaf 	bl	8001962 <_close>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_close_r+0x1a>
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_close_r+0x1a>
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	200002a8 	.word	0x200002a8

0800ac14 <_fstat_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d07      	ldr	r5, [pc, #28]	; (800ac34 <_fstat_r+0x20>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	4611      	mov	r1, r2
 800ac20:	602b      	str	r3, [r5, #0]
 800ac22:	f7f6 feaa 	bl	800197a <_fstat>
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	d102      	bne.n	800ac30 <_fstat_r+0x1c>
 800ac2a:	682b      	ldr	r3, [r5, #0]
 800ac2c:	b103      	cbz	r3, 800ac30 <_fstat_r+0x1c>
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	bd38      	pop	{r3, r4, r5, pc}
 800ac32:	bf00      	nop
 800ac34:	200002a8 	.word	0x200002a8

0800ac38 <_isatty_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d06      	ldr	r5, [pc, #24]	; (800ac54 <_isatty_r+0x1c>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	f7f6 fea9 	bl	800199a <_isatty>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_isatty_r+0x1a>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_isatty_r+0x1a>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	200002a8 	.word	0x200002a8

0800ac58 <_lseek_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	; (800ac78 <_lseek_r+0x20>)
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4608      	mov	r0, r1
 800ac60:	4611      	mov	r1, r2
 800ac62:	2200      	movs	r2, #0
 800ac64:	602a      	str	r2, [r5, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f7f6 fea2 	bl	80019b0 <_lseek>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_lseek_r+0x1e>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_lseek_r+0x1e>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	200002a8 	.word	0x200002a8

0800ac7c <_read_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d07      	ldr	r5, [pc, #28]	; (800ac9c <_read_r+0x20>)
 800ac80:	4604      	mov	r4, r0
 800ac82:	4608      	mov	r0, r1
 800ac84:	4611      	mov	r1, r2
 800ac86:	2200      	movs	r2, #0
 800ac88:	602a      	str	r2, [r5, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f7f6 fe30 	bl	80018f0 <_read>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_read_r+0x1e>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_read_r+0x1e>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	200002a8 	.word	0x200002a8

0800aca0 <_init>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	bf00      	nop
 800aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca6:	bc08      	pop	{r3}
 800aca8:	469e      	mov	lr, r3
 800acaa:	4770      	bx	lr

0800acac <_fini>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr
