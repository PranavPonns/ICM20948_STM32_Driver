
GyroI2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800ac68  0800ac68  0001ac68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1ec  0800b1ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1ec  0800b1ec  0001b1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1f4  0800b1f4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f4  0800b1f4  0001b1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1f8  0800b1f8  0001b1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b1fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001e4  0800b3e0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800b3e0  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112dc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bd  00000000  00000000  000314f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000337b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b1f  00000000  00000000  00034eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcef  00000000  00000000  0005a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfff2  00000000  00000000  0006a6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a6b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d8  00000000  00000000  0013a700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ac50 	.word	0x0800ac50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800ac50 	.word	0x0800ac50

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001042:	edc7 0a00 	vstr	s1, [r7]
 8001046:	edd7 0a00 	vldr	s1, [r7]
 800104a:	ed97 0a01 	vldr	s0, [r7, #4]
 800104e:	f004 ffe1 	bl	8006014 <atan2f>
 8001052:	eef0 7a40 	vmov.f32	s15, s0
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZN9ICM_20948C1E17I2C_HandleTypeDefh>:
 *      Author: Pranav Ponnusamy
 */

#include "ICM_20948.h"

ICM_20948::ICM_20948(I2C_HandleTypeDef handle, uint8_t addr) {
 8001060:	b084      	sub	sp, #16
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	f107 0014 	add.w	r0, r7, #20
 800106e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	address = addr;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001078:	701a      	strb	r2, [r3, #0]
	i2c = handle;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	f107 0114 	add.w	r1, r7, #20
 8001082:	2254      	movs	r2, #84	; 0x54
 8001084:	4618      	mov	r0, r3
 8001086:	f005 f96d 	bl	8006364 <memcpy>
}
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001096:	b004      	add	sp, #16
 8001098:	4770      	bx	lr

0800109a <_ZN9ICM_209489updateIMUEv>:
void ICM_20948::initMag(){

}


void ICM_20948::updateIMU(){
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	updateGyro();
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f80a 	bl	80010bc <_ZN9ICM_2094810updateGyroEv>
	updateAccel();
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f861 	bl	8001170 <_ZN9ICM_2094811updateAccelEv>
	updateMag();
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f8dc 	bl	800126c <_ZN9ICM_209489updateMagEv>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZN9ICM_2094810updateGyroEv>:

HAL_StatusTypeDef ICM_20948::updateGyro() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	uint8_t temp[6];
	HAL_StatusTypeDef ret;

	ret = readICMReg(GYRO_XOUT_H, temp, 6);
 80010c4:	f107 0208 	add.w	r2, r7, #8
 80010c8:	2306      	movs	r3, #6
 80010ca:	2133      	movs	r1, #51	; 0x33
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f937 	bl	8001340 <_ZN9ICM_2094810readICMRegEiPhi>
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]

	if (ret == HAL_OK) {
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d139      	bne.n	8001150 <_ZN9ICM_2094810updateGyroEv+0x94>
		gyroReading.x = twoComplementToDec(
 80010dc:	7a7b      	ldrb	r3, [r7, #9]
 80010de:	7a3a      	ldrb	r2, [r7, #8]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f94c 	bl	8001380 <_ZN9ICM_209489addBinaryEhh>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f95d 	bl	80013ac <_ZN9ICM_2094818twoComplementToDecEt>
 80010f2:	4603      	mov	r3, r0
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				addBinary(temp[1], temp[0])) / GYRO_SENSITIVITY;
		gyroReading.y = twoComplementToDec(
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	7aba      	ldrb	r2, [r7, #10]
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f939 	bl	8001380 <_ZN9ICM_209489addBinaryEhh>
 800110e:	4603      	mov	r3, r0
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f94a 	bl	80013ac <_ZN9ICM_2094818twoComplementToDecEt>
 8001118:	4603      	mov	r3, r0
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				addBinary(temp[3], temp[2])) / GYRO_SENSITIVITY;
		gyroReading.z = twoComplementToDec(
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	7b3a      	ldrb	r2, [r7, #12]
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f926 	bl	8001380 <_ZN9ICM_209489addBinaryEhh>
 8001134:	4603      	mov	r3, r0
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f937 	bl	80013ac <_ZN9ICM_2094818twoComplementToDecEt>
 800113e:	4603      	mov	r3, r0
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 800114e:	e008      	b.n	8001162 <_ZN9ICM_2094810updateGyroEv+0xa6>
				addBinary(temp[5], temp[4])) / GYRO_SENSITIVITY;
	} else {
		gyroReading.x = -999;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <_ZN9ICM_2094810updateGyroEv+0xb0>)
 8001154:	659a      	str	r2, [r3, #88]	; 0x58
		gyroReading.y = -999;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <_ZN9ICM_2094810updateGyroEv+0xb0>)
 800115a:	65da      	str	r2, [r3, #92]	; 0x5c
		gyroReading.z = -999;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a03      	ldr	r2, [pc, #12]	; (800116c <_ZN9ICM_2094810updateGyroEv+0xb0>)
 8001160:	661a      	str	r2, [r3, #96]	; 0x60
	}

	return ret;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	c479c000 	.word	0xc479c000

08001170 <_ZN9ICM_2094811updateAccelEv>:

HAL_StatusTypeDef ICM_20948::updateAccel() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t temp[6];
	HAL_StatusTypeDef ret;

	ret = readICMReg(ACCEL_XOUT_H, temp, 6);
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2306      	movs	r3, #6
 800117e:	212d      	movs	r1, #45	; 0x2d
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f8dd 	bl	8001340 <_ZN9ICM_2094810readICMRegEiPhi>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]

	if (ret == HAL_OK) {
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d157      	bne.n	8001240 <_ZN9ICM_2094811updateAccelEv+0xd0>
		accelReading.x = twoComplementToDec(
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	7a3a      	ldrb	r2, [r7, #8]
 8001194:	4619      	mov	r1, r3
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f8f2 	bl	8001380 <_ZN9ICM_209489addBinaryEhh>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f903 	bl	80013ac <_ZN9ICM_2094818twoComplementToDecEt>
 80011a6:	4603      	mov	r3, r0
				addBinary(temp[1], temp[0])) / ACCEL_SENSITIVITY;
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9db 	bl	8000564 <__aeabi_i2d>
 80011ae:	a32d      	add	r3, pc, #180	; (adr r3, 8001264 <_ZN9ICM_2094811updateAccelEv+0xf4>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fb6a 	bl	800088c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fd32 	bl	8000c28 <__aeabi_d2f>
 80011c4:	4602      	mov	r2, r0
		accelReading.x = twoComplementToDec(
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	665a      	str	r2, [r3, #100]	; 0x64
		accelReading.y = twoComplementToDec(
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	7aba      	ldrb	r2, [r7, #10]
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f8d5 	bl	8001380 <_ZN9ICM_209489addBinaryEhh>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f8e6 	bl	80013ac <_ZN9ICM_2094818twoComplementToDecEt>
 80011e0:	4603      	mov	r3, r0
				addBinary(temp[3], temp[2])) / ACCEL_SENSITIVITY;
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9be 	bl	8000564 <__aeabi_i2d>
 80011e8:	a31e      	add	r3, pc, #120	; (adr r3, 8001264 <_ZN9ICM_2094811updateAccelEv+0xf4>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fb4d 	bl	800088c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fd15 	bl	8000c28 <__aeabi_d2f>
 80011fe:	4602      	mov	r2, r0
		accelReading.y = twoComplementToDec(
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	669a      	str	r2, [r3, #104]	; 0x68
		accelReading.z = twoComplementToDec(
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	7b3a      	ldrb	r2, [r7, #12]
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f8b8 	bl	8001380 <_ZN9ICM_209489addBinaryEhh>
 8001210:	4603      	mov	r3, r0
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f8c9 	bl	80013ac <_ZN9ICM_2094818twoComplementToDecEt>
 800121a:	4603      	mov	r3, r0
				addBinary(temp[5], temp[4])) / ACCEL_SENSITIVITY;
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f9a1 	bl	8000564 <__aeabi_i2d>
 8001222:	a310      	add	r3, pc, #64	; (adr r3, 8001264 <_ZN9ICM_2094811updateAccelEv+0xf4>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fb30 	bl	800088c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcf8 	bl	8000c28 <__aeabi_d2f>
 8001238:	4602      	mov	r2, r0
		accelReading.z = twoComplementToDec(
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	66da      	str	r2, [r3, #108]	; 0x6c
 800123e:	e008      	b.n	8001252 <_ZN9ICM_2094811updateAccelEv+0xe2>
	} else {
		accelReading.x = -999;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <_ZN9ICM_2094811updateAccelEv+0xf0>)
 8001244:	665a      	str	r2, [r3, #100]	; 0x64
		accelReading.y = -999;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_ZN9ICM_2094811updateAccelEv+0xf0>)
 800124a:	669a      	str	r2, [r3, #104]	; 0x68
		accelReading.z = -999;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <_ZN9ICM_2094811updateAccelEv+0xf0>)
 8001250:	66da      	str	r2, [r3, #108]	; 0x6c
	}

	return ret;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	f3af 8000 	nop.w
 8001260:	c479c000 	.word	0xc479c000
 8001264:	147ae148 	.word	0x147ae148
 8001268:	409a4eae 	.word	0x409a4eae

0800126c <_ZN9ICM_209489updateMagEv>:

HAL_StatusTypeDef ICM_20948::updateMag(){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	0000      	movs	r0, r0
 8001284:	0000      	movs	r0, r0
	...

08001288 <_ZN9ICM_209488getPitchEv>:
	} else {
		temperature = -999;
	}
}

float ICM_20948::getPitch() {
 8001288:	b580      	push	{r7, lr}
 800128a:	ed2d 8b02 	vpush	{d8}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	return atan2(getAccelX(), getAccelZ()) * 360 / (2 * M_PI);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f835 	bl	8001304 <_ZN9ICM_209489getAccelXEv>
 800129a:	eeb0 8a40 	vmov.f32	s16, s0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f83f 	bl	8001322 <_ZN9ICM_209489getAccelZEv>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	eef0 0a67 	vmov.f32	s1, s15
 80012ac:	eeb0 0a48 	vmov.f32	s0, s16
 80012b0:	f7ff fec2 	bl	8001038 <_ZSt5atan2ff>
 80012b4:	eef0 7a40 	vmov.f32	s15, s0
 80012b8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001300 <_ZN9ICM_209488getPitchEv+0x78>
 80012bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c0:	ee17 0a90 	vmov	r0, s15
 80012c4:	f7ff f960 	bl	8000588 <__aeabi_f2d>
 80012c8:	a30b      	add	r3, pc, #44	; (adr r3, 80012f8 <_ZN9ICM_209488getPitchEv+0x70>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fadd 	bl	800088c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fca5 	bl	8000c28 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	ee07 3a90 	vmov	s15, r3
}
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	ecbd 8b02 	vpop	{d8}
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	54442d18 	.word	0x54442d18
 80012fc:	401921fb 	.word	0x401921fb
 8001300:	43b40000 	.word	0x43b40000

08001304 <_ZN9ICM_209489getAccelXEv>:
int16_t ICM_20948::getGyroZ() {
	return gyroReading.z;
}

//Acceleration in each axis
float ICM_20948::getAccelX() {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	return accelReading.x;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_ZN9ICM_209489getAccelZEv>:

float ICM_20948::getAccelY() {
	return accelReading.y;
}

float ICM_20948::getAccelZ() {
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
	return accelReading.z;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800132e:	ee07 3a90 	vmov	s15, r3
}
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN9ICM_2094810readICMRegEiPhi>:
	HAL_MAX_DELAY);
	return ret;
}

HAL_StatusTypeDef ICM_20948::readICMReg(int regAddress, uint8_t *buf,
		int dataAmount) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08b      	sub	sp, #44	; 0x2c
 8001344:	af04      	add	r7, sp, #16
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(&i2c, address, regAddress, 1, buf, dataAmount,
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1d18      	adds	r0, r3, #4
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b299      	uxth	r1, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	b29a      	uxth	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	f04f 34ff 	mov.w	r4, #4294967295
 8001364:	9402      	str	r4, [sp, #8]
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	f001 fa33 	bl	80027d8 <HAL_I2C_Mem_Read>
 8001372:	4603      	mov	r3, r0
 8001374:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);
	return ret;
 8001376:	7dfb      	ldrb	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}

08001380 <_ZN9ICM_209489addBinaryEhh>:
	HAL_StatusTypeDef ret;
	ret = writeICMReg(REG_BANK_SEL, userbank << 4, 1, 1);
	return ret;
}

uint16_t ICM_20948::addBinary(uint8_t lowByte, uint8_t highByte) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	70bb      	strb	r3, [r7, #2]
	return ((highByte << 8) | lowByte);
 8001390:	78bb      	ldrb	r3, [r7, #2]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21b      	sxth	r3, r3
 800139e:	b29b      	uxth	r3, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_ZN9ICM_2094818twoComplementToDecEt>:

int16_t ICM_20948::twoComplementToDec(uint16_t val) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
	if ((val & 0x8000) == 0) {
 80013b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db02      	blt.n	80013c6 <_ZN9ICM_2094818twoComplementToDecEt+0x1a>
		return val;
 80013c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013c4:	e006      	b.n	80013d4 <_ZN9ICM_2094818twoComplementToDecEt+0x28>
	} else {
		val = ~(val) + 1;
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	425b      	negs	r3, r3
 80013ca:	807b      	strh	r3, [r7, #2]
		return -val;
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	425b      	negs	r3, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b21b      	sxth	r3, r3
	}
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_Z6UprintPc>:
//	}
//
//	sendToUsb((uint8_t*) "Scan done.\n");
//}

void Uprint(char message[]){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b09c      	sub	sp, #112	; 0x70
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	char uart_buf[100];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fe4e 	bl	8007090 <siprintf>
 80013f4:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80013f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f107 0108 	add.w	r1, r7, #8
 80013fe:	2364      	movs	r3, #100	; 0x64
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <_Z6UprintPc+0x30>)
 8001402:	f004 fa92 	bl	800592a <HAL_UART_Transmit>
}
 8001406:	bf00      	nop
 8001408:	3770      	adds	r7, #112	; 0x70
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000254 	.word	0x20000254

08001414 <_Z9configRegiii>:
//		ans = 0;
//	}
//	return ans;
}

HAL_StatusTypeDef configReg(int regAddress, int regSize, int data){
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b08b      	sub	sp, #44	; 0x2c
 8001418:	af04      	add	r7, sp, #16
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t temp = data;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	75bb      	strb	r3, [r7, #22]
	ret = HAL_I2C_Mem_Write(&hi2c1, addr, regAddress, regSize, &temp, regSize, HAL_MAX_DELAY);
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <_Z9configRegiii+0x48>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b299      	uxth	r1, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	b29a      	uxth	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	b298      	uxth	r0, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f04f 34ff 	mov.w	r4, #4294967295
 800143c:	9402      	str	r4, [sp, #8]
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	f107 0316 	add.w	r3, r7, #22
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4603      	mov	r3, r0
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <_Z9configRegiii+0x4c>)
 800144a:	f001 f8cb 	bl	80025e4 <HAL_I2C_Mem_Write>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]

	return ret;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
}
 8001454:	4618      	mov	r0, r3
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000200 	.word	0x20000200

08001464 <_Z9configIMUv>:

void configIMU(){
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;


//	Clock and sleep settings
	ret = configReg(0x06, 1, 0b00000001);
 800146a:	2201      	movs	r2, #1
 800146c:	2101      	movs	r1, #1
 800146e:	2006      	movs	r0, #6
 8001470:	f7ff ffd0 	bl	8001414 <_Z9configRegiii>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
//	Ensure that accelerometer and gyroscope are both enabled
	ret = configReg(0x07, 1, 0b00000000);
 8001478:	2200      	movs	r2, #0
 800147a:	2101      	movs	r1, #1
 800147c:	2007      	movs	r0, #7
 800147e:	f7ff ffc9 	bl	8001414 <_Z9configRegiii>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]

//	Mag Config
//	ret = configReg(0x31, 1, 0b00000010);


	if (ret == HAL_OK) {
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <_Z9configIMUv+0x30>
		Uprint("write worked\r\n");
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <_Z9configIMUv+0x8c>)
 800148e:	f7ff ffa7 	bl	80013e0 <_Z6UprintPc>
 8001492:	e002      	b.n	800149a <_Z9configIMUv+0x36>
	} else {
		Uprint("write failed\r\n");
 8001494:	4817      	ldr	r0, [pc, #92]	; (80014f4 <_Z9configIMUv+0x90>)
 8001496:	f7ff ffa3 	bl	80013e0 <_Z6UprintPc>
	}

	uint8_t buf[1];
	char str[10];

	ret = HAL_I2C_Mem_Read(&hi2c1, addr, 0x01, 1, buf, 1, HAL_MAX_DELAY);
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <_Z9configIMUv+0x94>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b299      	uxth	r1, r3
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2201      	movs	r2, #1
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <_Z9configIMUv+0x98>)
 80014b6:	f001 f98f 	bl	80027d8 <HAL_I2C_Mem_Read>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK) {
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10e      	bne.n	80014e2 <_Z9configIMUv+0x7e>
			Uprint("read worked\r\n");
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <_Z9configIMUv+0x9c>)
 80014c6:	f7ff ff8b 	bl	80013e0 <_Z6UprintPc>
			sprintf(str, "%d\r\n", buf[0]);
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	461a      	mov	r2, r3
 80014ce:	463b      	mov	r3, r7
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <_Z9configIMUv+0xa0>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fddc 	bl	8007090 <siprintf>
			Uprint(str);
 80014d8:	463b      	mov	r3, r7
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff80 	bl	80013e0 <_Z6UprintPc>
		} else {
			Uprint("read failed\r\n");
		}

}
 80014e0:	e002      	b.n	80014e8 <_Z9configIMUv+0x84>
			Uprint("read failed\r\n");
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <_Z9configIMUv+0xa4>)
 80014e4:	f7ff ff7c 	bl	80013e0 <_Z6UprintPc>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	0800ac68 	.word	0x0800ac68
 80014f4:	0800ac78 	.word	0x0800ac78
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000200 	.word	0x20000200
 8001500:	0800ac88 	.word	0x0800ac88
 8001504:	0800ac98 	.word	0x0800ac98
 8001508:	0800aca0 	.word	0x0800aca0

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b0ce      	sub	sp, #312	; 0x138
 8001510:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f000 fb9d 	bl	8001c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f859 	bl	80015cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f000 f92f 	bl	800177c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800151e:	f000 f8ff 	bl	8001720 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001522:	f000 f8c9 	bl	80016b8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 100);
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <main+0xac>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b299      	uxth	r1, r3
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	2201      	movs	r2, #1
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <main+0xb0>)
 8001532:	f001 fb77 	bl	8002c24 <HAL_I2C_IsDeviceReady>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  if(ret == HAL_OK){
 800153c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <main+0x40>
	  Uprint("The device is ready\r\n");
 8001544:	481e      	ldr	r0, [pc, #120]	; (80015c0 <main+0xb4>)
 8001546:	f7ff ff4b 	bl	80013e0 <_Z6UprintPc>
 800154a:	e002      	b.n	8001552 <main+0x46>
  }
  else {
	  Uprint("The device is not ready. Check cables\r\n");
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <main+0xb8>)
 800154e:	f7ff ff47 	bl	80013e0 <_Z6UprintPc>
  }

  configIMU();
 8001552:	f7ff ff87 	bl	8001464 <_Z9configIMUv>
//	HAL_StatusTypeDef ret;
//	uint8_t buf[12];
//	int16_t val;
//	float temp_c;

  	ICM_20948 IMU(hi2c1, addr);
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <main+0xac>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4c18      	ldr	r4, [pc, #96]	; (80015bc <main+0xb0>)
 800155c:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8001560:	9312      	str	r3, [sp, #72]	; 0x48
 8001562:	4668      	mov	r0, sp
 8001564:	f104 030c 	add.w	r3, r4, #12
 8001568:	2248      	movs	r2, #72	; 0x48
 800156a:	4619      	mov	r1, r3
 800156c:	f004 fefa 	bl	8006364 <memcpy>
 8001570:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001574:	4628      	mov	r0, r5
 8001576:	f7ff fd73 	bl	8001060 <_ZN9ICM_20948C1E17I2C_HandleTypeDefh>
//		sprintf(str, "ACCEL X:%f Y:%f Z:%f\r\n", IMU.getAccelX(), IMU.getAccelY(), IMU.getAccelZ());
//		Uprint(str);
//		sprintf(str, "GYRO X:%d Y:%d Z:%d\r\n", IMU.getGyroX(), IMU.getGyroY(), IMU.getGyroZ());
//		Uprint(str);

		IMU.updateIMU();
 800157a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd8b 	bl	800109a <_ZN9ICM_209489updateIMUEv>
		sprintf(str, "%f\r\n", IMU.getPitch());
 8001584:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe7d 	bl	8001288 <_ZN9ICM_209488getPitchEv>
 800158e:	ee10 3a10 	vmov	r3, s0
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fff8 	bl	8000588 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4638      	mov	r0, r7
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <main+0xbc>)
 80015a0:	f005 fd76 	bl	8007090 <siprintf>
		Uprint(str);
 80015a4:	463b      	mov	r3, r7
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff1a 	bl	80013e0 <_Z6UprintPc>
		HAL_Delay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b0:	f000 fbc0 	bl	8001d34 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	}
 80015b4:	e7e1      	b.n	800157a <main+0x6e>
 80015b6:	bf00      	nop
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000200 	.word	0x20000200
 80015c0:	0800acb0 	.word	0x0800acb0
 80015c4:	0800acc8 	.word	0x0800acc8
 80015c8:	0800acf0 	.word	0x0800acf0

080015cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b094      	sub	sp, #80	; 0x50
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	2234      	movs	r2, #52	; 0x34
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fed0 	bl	8006380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <_Z18SystemClock_Configv+0xe4>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <_Z18SystemClock_Configv+0xe4>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <_Z18SystemClock_Configv+0xe4>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <_Z18SystemClock_Configv+0xe8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <_Z18SystemClock_Configv+0xe8>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <_Z18SystemClock_Configv+0xe8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001640:	2304      	movs	r3, #4
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001644:	2348      	movs	r3, #72	; 0x48
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001648:	2302      	movs	r3, #2
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800164c:	2303      	movs	r3, #3
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4618      	mov	r0, r3
 800165a:	f003 fe7b 	bl	8005354 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800166e:	f000 f8f3 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001672:	230f      	movs	r3, #15
 8001674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2302      	movs	r3, #2
 8001678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2102      	movs	r1, #2
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fb16 	bl	8004cc0 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 80016a4:	f000 f8d8 	bl	8001858 <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <_ZL12MX_I2C1_Initv+0x60>)
 80016c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016c4:	4a15      	ldr	r2, [pc, #84]	; (800171c <_ZL12MX_I2C1_Initv+0x64>)
 80016c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <_ZL12MX_I2C1_Initv+0x5c>)
 80016f6:	f000 fe31 	bl	800235c <HAL_I2C_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800170a:	f000 f8a5 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000200 	.word	0x20000200
 8001718:	40005400 	.word	0x40005400
 800171c:	000186a0 	.word	0x000186a0

08001720 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001758:	f004 f89a 	bl	8005890 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800176c:	f000 f874 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000254 	.word	0x20000254
 8001778:	40004400 	.word	0x40004400

0800177c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a2c      	ldr	r2, [pc, #176]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_ZL12MX_GPIO_Initv+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2120      	movs	r1, #32
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <_ZL12MX_GPIO_Initv+0xd4>)
 8001808:	f000 fd8e 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001812:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <_ZL12MX_GPIO_Initv+0xd8>)
 8001824:	f000 fbec 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001828:	2320      	movs	r3, #32
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <_ZL12MX_GPIO_Initv+0xd4>)
 8001840:	f000 fbde 	bl	8002000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020800 	.word	0x40020800

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1) {
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a2:	2007      	movs	r0, #7
 80018a4:	f000 fb3a 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_I2C_MspInit+0x94>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d134      	bne.n	8001940 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_I2C_MspInit+0x98>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_I2C_MspInit+0x98>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_I2C_MspInit+0x98>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f8:	2312      	movs	r3, #18
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001904:	2304      	movs	r3, #4
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4810      	ldr	r0, [pc, #64]	; (8001950 <HAL_I2C_MspInit+0x9c>)
 8001910:	f000 fb76 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_I2C_MspInit+0x98>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_I2C_MspInit+0x98>)
 800191e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_I2C_MspInit+0x98>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	201f      	movs	r0, #31
 8001936:	f000 fafc 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800193a:	201f      	movs	r0, #31
 800193c:	f000 fb15 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40005400 	.word	0x40005400
 800194c:	40023800 	.word	0x40023800
 8001950:	40020400 	.word	0x40020400

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_UART_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x88>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ae:	230c      	movs	r3, #12
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x8c>)
 80019ca:	f000 fb19 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f960 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <I2C1_EV_IRQHandler+0x10>)
 8001a3e:	f001 fa1f 	bl	8002e80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000200 	.word	0x20000200

08001a4c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_kill>:

int _kill(int pid, int sig) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001a66:	f004 fc53 	bl	8006310 <__errno>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2216      	movs	r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_exit>:

void _exit(int status) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe7 	bl	8001a5c <_kill>
	while (1) {
 8001a8e:	e7fe      	b.n	8001a8e <_exit+0x12>

08001a90 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
		*ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
	}

	return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e009      	b.n	8001af0 <_write+0x26>
		__io_putchar(*ptr++);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf1      	blt.n	8001adc <_write+0x12>
	}
	return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_close>:

int _close(int file) {
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_fstat>:

int _fstat(int file, struct stat *st) {
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_isatty>:

int _isatty(int file) {
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f004 fbb8 	bl	8006310 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20020000 	.word	0x20020000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	20000298 	.word	0x20000298
 8001bd4:	200002b0 	.word	0x200002b0

08001bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <SystemInit+0x20>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <SystemInit+0x20>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c02:	490e      	ldr	r1, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c18:	4c0b      	ldr	r4, [pc, #44]	; (8001c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c26:	f7ff ffd7 	bl	8001bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f004 fb77 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2e:	f7ff fc6d 	bl	800150c <main>
  bx  lr    
 8001c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c40:	0800b1fc 	.word	0x0800b1fc
  ldr r2, =_sbss
 8001c44:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c48:	200002b0 	.word	0x200002b0

08001c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC_IRQHandler>
	...

08001c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_Init+0x40>)
 8001c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_Init+0x40>)
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_Init+0x40>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f94f 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 f808 	bl	8001c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c84:	f7ff fdee 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x54>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x58>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f967 	bl	8001f86 <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00e      	b.n	8001ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d80a      	bhi.n	8001cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f000 f92f 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_InitTick+0x5c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	2000029c 	.word	0x2000029c

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000029c 	.word	0x2000029c

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000000c 	.word	0x2000000c

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e00c      	b.n	8001fd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e165      	b.n	80022e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8154 	bne.w	80022e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80ae 	beq.w	80022e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_GPIO_Init+0x300>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a5c      	ldr	r2, [pc, #368]	; (8002300 <HAL_GPIO_Init+0x300>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_GPIO_Init+0x300>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_GPIO_Init+0x304>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4f      	ldr	r2, [pc, #316]	; (8002308 <HAL_GPIO_Init+0x308>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x21a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	; (800230c <HAL_GPIO_Init+0x30c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x216>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_GPIO_Init+0x310>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x212>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	; (8002314 <HAL_GPIO_Init+0x314>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4b      	ldr	r2, [pc, #300]	; (8002318 <HAL_GPIO_Init+0x318>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x20a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_GPIO_Init+0x31c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x206>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a49      	ldr	r2, [pc, #292]	; (8002320 <HAL_GPIO_Init+0x320>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x202>
 80021fe:	2306      	movs	r3, #6
 8002200:	e00c      	b.n	800221c <HAL_GPIO_Init+0x21c>
 8002202:	2307      	movs	r3, #7
 8002204:	e00a      	b.n	800221c <HAL_GPIO_Init+0x21c>
 8002206:	2305      	movs	r3, #5
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x21c>
 800220a:	2304      	movs	r3, #4
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x21c>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x21c>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x21c>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x21c>
 800221a:	2300      	movs	r3, #0
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x304>)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_GPIO_Init+0x324>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a31      	ldr	r2, [pc, #196]	; (8002324 <HAL_GPIO_Init+0x324>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <HAL_GPIO_Init+0x324>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_GPIO_Init+0x324>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_GPIO_Init+0x324>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_GPIO_Init+0x324>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_GPIO_Init+0x324>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_GPIO_Init+0x324>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	f67f ae96 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40021000 	.word	0x40021000
 800231c:	40021400 	.word	0x40021400
 8002320:	40021800 	.word	0x40021800
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e12b      	b.n	80025c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fa96 	bl	80018b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c0:	f002 fd70 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 80023c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4a81      	ldr	r2, [pc, #516]	; (80025d0 <HAL_I2C_Init+0x274>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d807      	bhi.n	80023e0 <HAL_I2C_Init+0x84>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <HAL_I2C_Init+0x278>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	bf94      	ite	ls
 80023d8:	2301      	movls	r3, #1
 80023da:	2300      	movhi	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e006      	b.n	80023ee <HAL_I2C_Init+0x92>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a7d      	ldr	r2, [pc, #500]	; (80025d8 <HAL_I2C_Init+0x27c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0e7      	b.n	80025c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a78      	ldr	r2, [pc, #480]	; (80025dc <HAL_I2C_Init+0x280>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9b      	lsrs	r3, r3, #18
 8002400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a6a      	ldr	r2, [pc, #424]	; (80025d0 <HAL_I2C_Init+0x274>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d802      	bhi.n	8002430 <HAL_I2C_Init+0xd4>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3301      	adds	r3, #1
 800242e:	e009      	b.n	8002444 <HAL_I2C_Init+0xe8>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_I2C_Init+0x284>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	3301      	adds	r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002456:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	495c      	ldr	r1, [pc, #368]	; (80025d0 <HAL_I2C_Init+0x274>)
 8002460:	428b      	cmp	r3, r1
 8002462:	d819      	bhi.n	8002498 <HAL_I2C_Init+0x13c>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e59      	subs	r1, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002472:	1c59      	adds	r1, r3, #1
 8002474:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002478:	400b      	ands	r3, r1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_I2C_Init+0x138>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e59      	subs	r1, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fbb1 f3f3 	udiv	r3, r1, r3
 800248c:	3301      	adds	r3, #1
 800248e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002492:	e051      	b.n	8002538 <HAL_I2C_Init+0x1dc>
 8002494:	2304      	movs	r3, #4
 8002496:	e04f      	b.n	8002538 <HAL_I2C_Init+0x1dc>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <HAL_I2C_Init+0x168>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e012      	b.n	80024ea <HAL_I2C_Init+0x18e>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x196>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e022      	b.n	8002538 <HAL_I2C_Init+0x1dc>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <HAL_I2C_Init+0x1bc>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e58      	subs	r0, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	440b      	add	r3, r1
 8002508:	fbb0 f3f3 	udiv	r3, r0, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002516:	e00f      	b.n	8002538 <HAL_I2C_Init+0x1dc>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	6809      	ldr	r1, [r1, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6911      	ldr	r1, [r2, #16]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	000186a0 	.word	0x000186a0
 80025d4:	001e847f 	.word	0x001e847f
 80025d8:	003d08ff 	.word	0x003d08ff
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	10624dd3 	.word	0x10624dd3

080025e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fe:	f7ff fb8d 	bl	8001d1c <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 80d9 	bne.w	80027c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2319      	movs	r3, #25
 8002618:	2201      	movs	r2, #1
 800261a:	496d      	ldr	r1, [pc, #436]	; (80027d0 <HAL_I2C_Mem_Write+0x1ec>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f002 f925 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	e0cc      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2C_Mem_Write+0x56>
 8002636:	2302      	movs	r3, #2
 8002638:	e0c5      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d007      	beq.n	8002660 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	; 0x21
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_I2C_Mem_Write+0x1f0>)
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a2:	88f8      	ldrh	r0, [r7, #6]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4603      	mov	r3, r0
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f001 feb4 	bl	8004420 <I2C_RequestMemoryWrite>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d052      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e081      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f002 f9a6 	bl	8004a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_I2C_Mem_Write+0x180>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d017      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1aa      	bne.n	80026c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f002 f992 	bl	8004a9a <I2C_WaitOnBTFFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e016      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000

080027d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f2:	f7ff fa93 	bl	8001d1c <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b20      	cmp	r3, #32
 8002802:	f040 8208 	bne.w	8002c16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2319      	movs	r3, #25
 800280c:	2201      	movs	r2, #1
 800280e:	497b      	ldr	r1, [pc, #492]	; (80029fc <HAL_I2C_Mem_Read+0x224>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f002 f82b 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	e1fb      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Read+0x56>
 800282a:	2302      	movs	r3, #2
 800282c:	e1f4      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d007      	beq.n	8002854 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2222      	movs	r2, #34	; 0x22
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_I2C_Mem_Read+0x228>)
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002896:	88f8      	ldrh	r0, [r7, #6]
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4603      	mov	r3, r0
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f001 fe50 	bl	800454c <I2C_RequestMemoryRead>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1b0      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e184      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d11b      	bne.n	8002926 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e164      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11b      	bne.n	8002966 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	e144      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800297c:	e138      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b03      	cmp	r3, #3
 8002984:	f200 80f1 	bhi.w	8002b6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b01      	cmp	r3, #1
 800298e:	d123      	bne.n	80029d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f002 f8f3 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e139      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d6:	e10b      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d14e      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	2200      	movs	r2, #0
 80029e8:	4906      	ldr	r1, [pc, #24]	; (8002a04 <HAL_I2C_Mem_Read+0x22c>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f001 ff3e 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e10e      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
 80029fa:	bf00      	nop
 80029fc:	00100002 	.word	0x00100002
 8002a00:	ffff0000 	.word	0xffff0000
 8002a04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a7c:	e0b8      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	2200      	movs	r2, #0
 8002a86:	4966      	ldr	r1, [pc, #408]	; (8002c20 <HAL_I2C_Mem_Read+0x448>)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f001 feef 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0bf      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	494f      	ldr	r1, [pc, #316]	; (8002c20 <HAL_I2C_Mem_Read+0x448>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f001 fec1 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e091      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b68:	e042      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f002 f806 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04c      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d118      	bne.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f aec2 	bne.w	800297e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00010004 	.word	0x00010004

08002c24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff f872 	bl	8001d1c <HAL_GetTick>
 8002c38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 8111 	bne.w	8002e6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2319      	movs	r3, #25
 8002c52:	2201      	movs	r2, #1
 8002c54:	4988      	ldr	r1, [pc, #544]	; (8002e78 <HAL_I2C_IsDeviceReady+0x254>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f001 fe08 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e104      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_IsDeviceReady+0x50>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0fd      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d007      	beq.n	8002c9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2224      	movs	r2, #36	; 0x24
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a70      	ldr	r2, [pc, #448]	; (8002e7c <HAL_I2C_IsDeviceReady+0x258>)
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f001 fdc6 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf4:	d103      	bne.n	8002cfe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0b6      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d12:	f7ff f803 	bl	8001d1c <HAL_GetTick>
 8002d16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d46:	e025      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d48:	f7fe ffe8 	bl	8001d1c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <HAL_I2C_IsDeviceReady+0x13a>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22a0      	movs	r2, #160	; 0xa0
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2ba0      	cmp	r3, #160	; 0xa0
 8002d9e:	d005      	beq.n	8002dac <HAL_I2C_IsDeviceReady+0x188>
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_I2C_IsDeviceReady+0x188>
 8002da6:	7dbb      	ldrb	r3, [r7, #22]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0cd      	beq.n	8002d48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d129      	bne.n	8002e16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2319      	movs	r3, #25
 8002dee:	2201      	movs	r2, #1
 8002df0:	4921      	ldr	r1, [pc, #132]	; (8002e78 <HAL_I2C_IsDeviceReady+0x254>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f001 fd3a 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e036      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e02c      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2319      	movs	r3, #25
 8002e36:	2201      	movs	r2, #1
 8002e38:	490f      	ldr	r1, [pc, #60]	; (8002e78 <HAL_I2C_IsDeviceReady+0x254>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f001 fd16 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e012      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f4ff af32 	bcc.w	8002cbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	00100002 	.word	0x00100002
 8002e7c:	ffff0000 	.word	0xffff0000

08002e80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d003      	beq.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x38>
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	f040 80c1 	bne.w	800303a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <HAL_I2C_EV_IRQHandler+0x6e>
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ed8:	d003      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x62>
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	f000 8132 	beq.w	8003152 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00c      	beq.n	8002f12 <HAL_I2C_EV_IRQHandler+0x92>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	0a5b      	lsrs	r3, r3, #9
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f001 fec0 	bl	8004c8a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fcdc 	bl	80038c8 <I2C_Master_SB>
 8002f10:	e092      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_I2C_EV_IRQHandler+0xb2>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	0a5b      	lsrs	r3, r3, #9
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fd52 	bl	80039d4 <I2C_Master_ADD10>
 8002f30:	e082      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_I2C_EV_IRQHandler+0xd2>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	0a5b      	lsrs	r3, r3, #9
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fd6c 	bl	8003a28 <I2C_Master_ADDR>
 8002f50:	e072      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d03b      	beq.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6c:	f000 80f3 	beq.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	09db      	lsrs	r3, r3, #7
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00f      	beq.n	8002f9c <HAL_I2C_EV_IRQHandler+0x11c>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <HAL_I2C_EV_IRQHandler+0x11c>
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f94c 	bl	8003232 <I2C_MasterTransmit_TXE>
 8002f9a:	e04d      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80d6 	beq.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	0a5b      	lsrs	r3, r3, #9
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80cf 	beq.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	2b21      	cmp	r3, #33	; 0x21
 8002fbc:	d103      	bne.n	8002fc6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9d3 	bl	800336a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fc4:	e0c7      	b.n	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	f040 80c4 	bne.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa41 	bl	8003456 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd4:	e0bf      	b.n	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe4:	f000 80b7 	beq.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x194>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x194>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fab6 	bl	800357e <I2C_MasterReceive_RXNE>
 8003012:	e011      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 809a 	beq.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	0a5b      	lsrs	r3, r3, #9
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8093 	beq.w	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fb5f 	bl	80036f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003036:	e08e      	b.n	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003038:	e08d      	b.n	8003156 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e007      	b.n	800305c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <HAL_I2C_EV_IRQHandler+0x20e>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	0a5b      	lsrs	r3, r3, #9
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003084:	69b9      	ldr	r1, [r7, #24]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 ff1d 	bl	8003ec6 <I2C_Slave_ADDR>
 800308c:	e066      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_I2C_EV_IRQHandler+0x22e>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	0a5b      	lsrs	r3, r3, #9
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 ff58 	bl	8003f5c <I2C_Slave_STOPF>
 80030ac:	e056      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ae:	7bbb      	ldrb	r3, [r7, #14]
 80030b0:	2b21      	cmp	r3, #33	; 0x21
 80030b2:	d002      	beq.n	80030ba <HAL_I2C_EV_IRQHandler+0x23a>
 80030b4:	7bbb      	ldrb	r3, [r7, #14]
 80030b6:	2b29      	cmp	r3, #41	; 0x29
 80030b8:	d125      	bne.n	8003106 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	09db      	lsrs	r3, r3, #7
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00f      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x266>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	0a9b      	lsrs	r3, r3, #10
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x266>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fe33 	bl	8003d4a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030e4:	e039      	b.n	800315a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d033      	beq.n	800315a <HAL_I2C_EV_IRQHandler+0x2da>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0a5b      	lsrs	r3, r3, #9
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02d      	beq.n	800315a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fe60 	bl	8003dc4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003104:	e029      	b.n	800315a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00f      	beq.n	8003132 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	0a9b      	lsrs	r3, r3, #10
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_I2C_EV_IRQHandler+0x2b2>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fe6b 	bl	8003e06 <I2C_SlaveReceive_RXNE>
 8003130:	e014      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00e      	beq.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	0a5b      	lsrs	r3, r3, #9
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fe99 	bl	8003e82 <I2C_SlaveReceive_BTF>
 8003150:	e004      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800315a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
 80031be:	4613      	mov	r3, r2
 80031c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003248:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d150      	bne.n	80032fa <I2C_MasterTransmit_TXE+0xc8>
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b21      	cmp	r3, #33	; 0x21
 800325c:	d14d      	bne.n	80032fa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d01d      	beq.n	80032a0 <I2C_MasterTransmit_TXE+0x6e>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b20      	cmp	r3, #32
 8003268:	d01a      	beq.n	80032a0 <I2C_MasterTransmit_TXE+0x6e>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003270:	d016      	beq.n	80032a0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003280:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2211      	movs	r2, #17
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff62 	bl	8003162 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800329e:	e060      	b.n	8003362 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032be:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d107      	bne.n	80032ea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff7d 	bl	80031e2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032e8:	e03b      	b.n	8003362 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff35 	bl	8003162 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032f8:	e033      	b.n	8003362 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b21      	cmp	r3, #33	; 0x21
 80032fe:	d005      	beq.n	800330c <I2C_MasterTransmit_TXE+0xda>
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d12d      	bne.n	8003362 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b22      	cmp	r3, #34	; 0x22
 800330a:	d12a      	bne.n	8003362 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003324:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003326:	e01c      	b.n	8003362 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d103      	bne.n	800333c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f88e 	bl	8003456 <I2C_MemoryTransmit_TXE_BTF>
}
 800333a:	e012      	b.n	8003362 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003360:	e7ff      	b.n	8003362 <I2C_MasterTransmit_TXE+0x130>
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	d164      	bne.n	800344e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033b2:	e04c      	b.n	800344e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d01d      	beq.n	80033f6 <I2C_MasterTransmit_BTF+0x8c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d01a      	beq.n	80033f6 <I2C_MasterTransmit_BTF+0x8c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c6:	d016      	beq.n	80033f6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033d6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2211      	movs	r2, #17
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff feb7 	bl	8003162 <HAL_I2C_MasterTxCpltCallback>
}
 80033f4:	e02b      	b.n	800344e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003404:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d107      	bne.n	8003440 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fed2 	bl	80031e2 <HAL_I2C_MemTxCpltCallback>
}
 800343e:	e006      	b.n	800344e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fe8a 	bl	8003162 <HAL_I2C_MasterTxCpltCallback>
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11d      	bne.n	80034aa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d10b      	bne.n	800348e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	1c9a      	adds	r2, r3, #2
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800348c:	e073      	b.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	b29b      	uxth	r3, r3
 8003494:	121b      	asrs	r3, r3, #8
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034a8:	e065      	b.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10b      	bne.n	80034ca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034c8:	e055      	b.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d151      	bne.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b22      	cmp	r3, #34	; 0x22
 80034d6:	d10d      	bne.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034f2:	e040      	b.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b21      	cmp	r3, #33	; 0x21
 8003502:	d112      	bne.n	800352a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003528:	e025      	b.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d120      	bne.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b21      	cmp	r3, #33	; 0x21
 8003538:	d11d      	bne.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003548:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003558:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fe36 	bl	80031e2 <HAL_I2C_MemTxCpltCallback>
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b22      	cmp	r3, #34	; 0x22
 8003590:	f040 80ac 	bne.w	80036ec <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d921      	bls.n	80035e6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	f040 808c 	bne.w	80036ec <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80035e4:	e082      	b.n	80036ec <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d075      	beq.n	80036da <I2C_MasterReceive_RXNE+0x15c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <I2C_MasterReceive_RXNE+0x7c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d16f      	bne.n	80036da <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f001 fa8e 	bl	8004b1c <I2C_WaitOnSTOPRequestThroughIT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d142      	bne.n	800368c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003624:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d10a      	bne.n	8003676 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fdc1 	bl	80031f6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003674:	e03a      	b.n	80036ec <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2212      	movs	r2, #18
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fd76 	bl	8003176 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800368a:	e02f      	b.n	80036ec <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800369a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fd99 	bl	800320a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036d8:	e008      	b.n	80036ec <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	605a      	str	r2, [r3, #4]
}
 80036ea:	e7ff      	b.n	80036ec <I2C_MasterReceive_RXNE+0x16e>
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003742:	e0bd      	b.n	80038c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b03      	cmp	r3, #3
 800374c:	d129      	bne.n	80037a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d00a      	beq.n	800377a <I2C_MasterReceive_BTF+0x86>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d007      	beq.n	800377a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037a0:	e08e      	b.n	80038c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d176      	bne.n	800389a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d002      	beq.n	80037b8 <I2C_MasterReceive_BTF+0xc4>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d108      	bne.n	80037ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e019      	b.n	80037fe <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d002      	beq.n	80037d6 <I2C_MasterReceive_BTF+0xe2>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d108      	bne.n	80037e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00a      	b.n	80037fe <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d007      	beq.n	80037fe <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003858:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d10a      	bne.n	8003884 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fcba 	bl	80031f6 <HAL_I2C_MemRxCpltCallback>
}
 8003882:	e01d      	b.n	80038c0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2212      	movs	r2, #18
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fc6f 	bl	8003176 <HAL_I2C_MasterRxCpltCallback>
}
 8003898:	e012      	b.n	80038c0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d117      	bne.n	800390c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038f6:	e067      	b.n	80039c8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]
}
 800390a:	e05d      	b.n	80039c8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003914:	d133      	bne.n	800397e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b21      	cmp	r3, #33	; 0x21
 8003920:	d109      	bne.n	8003936 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003932:	611a      	str	r2, [r3, #16]
 8003934:	e008      	b.n	8003948 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <I2C_Master_SB+0x92>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	2b00      	cmp	r3, #0
 8003960:	d032      	beq.n	80039c8 <I2C_Master_SB+0x100>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02d      	beq.n	80039c8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397a:	605a      	str	r2, [r3, #4]
}
 800397c:	e024      	b.n	80039c8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	b29b      	uxth	r3, r3
 800398c:	11db      	asrs	r3, r3, #7
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 0306 	and.w	r3, r3, #6
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f063 030f 	orn	r3, r3, #15
 800399a:	b2da      	uxtb	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	e011      	b.n	80039c8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10d      	bne.n	80039c8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	11db      	asrs	r3, r3, #7
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0306 	and.w	r3, r3, #6
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f063 030e 	orn	r3, r3, #14
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <I2C_Master_ADD10+0x26>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <I2C_Master_ADD10+0x48>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1a:	605a      	str	r2, [r3, #4]
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b091      	sub	sp, #68	; 0x44
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b22      	cmp	r3, #34	; 0x22
 8003a50:	f040 8169 	bne.w	8003d26 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10f      	bne.n	8003a7c <I2C_Master_ADDR+0x54>
 8003a5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d10b      	bne.n	8003a7c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a64:	2300      	movs	r3, #0
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	e160      	b.n	8003d3e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <I2C_Master_ADDR+0x98>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a8c:	d118      	bne.n	8003ac0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	651a      	str	r2, [r3, #80]	; 0x50
 8003abe:	e13e      	b.n	8003d3e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d113      	bne.n	8003af2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e115      	b.n	8003d1e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 808a 	bne.w	8003c12 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b04:	d137      	bne.n	8003b76 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b24:	d113      	bne.n	8003b4e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	e0e7      	b.n	8003d1e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	623b      	str	r3, [r7, #32]
 8003b62:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e0d3      	b.n	8003d1e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d02e      	beq.n	8003bda <I2C_Master_ADDR+0x1b2>
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d02b      	beq.n	8003bda <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	2b12      	cmp	r3, #18
 8003b86:	d102      	bne.n	8003b8e <I2C_Master_ADDR+0x166>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d125      	bne.n	8003bda <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d00e      	beq.n	8003bb2 <I2C_Master_ADDR+0x18a>
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d00b      	beq.n	8003bb2 <I2C_Master_ADDR+0x18a>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d008      	beq.n	8003bb2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e007      	b.n	8003bc2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	e0a1      	b.n	8003d1e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e085      	b.n	8003d1e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d14d      	bne.n	8003cb8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d016      	beq.n	8003c50 <I2C_Master_ADDR+0x228>
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d013      	beq.n	8003c50 <I2C_Master_ADDR+0x228>
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d010      	beq.n	8003c50 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e007      	b.n	8003c60 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c5e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d117      	bne.n	8003ca0 <I2C_Master_ADDR+0x278>
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c76:	d00b      	beq.n	8003c90 <I2C_Master_ADDR+0x268>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d008      	beq.n	8003c90 <I2C_Master_ADDR+0x268>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d005      	beq.n	8003c90 <I2C_Master_ADDR+0x268>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d002      	beq.n	8003c90 <I2C_Master_ADDR+0x268>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d107      	bne.n	8003ca0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e032      	b.n	8003d1e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d117      	bne.n	8003d08 <I2C_Master_ADDR+0x2e0>
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cde:	d00b      	beq.n	8003cf8 <I2C_Master_ADDR+0x2d0>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d008      	beq.n	8003cf8 <I2C_Master_ADDR+0x2d0>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d005      	beq.n	8003cf8 <I2C_Master_ADDR+0x2d0>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d002      	beq.n	8003cf8 <I2C_Master_ADDR+0x2d0>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d107      	bne.n	8003d08 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d06:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d24:	e00b      	b.n	8003d3e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	e7ff      	b.n	8003d3e <I2C_Master_ADDR+0x316>
 8003d3e:	bf00      	nop
 8003d40:	3744      	adds	r7, #68	; 0x44
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d02b      	beq.n	8003dbc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d114      	bne.n	8003dbc <I2C_SlaveTransmit_TXE+0x72>
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b29      	cmp	r3, #41	; 0x29
 8003d96:	d111      	bne.n	8003dbc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2221      	movs	r2, #33	; 0x21
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2228      	movs	r2, #40	; 0x28
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff f9e7 	bl	800318a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d011      	beq.n	8003dfa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02c      	beq.n	8003e7a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d114      	bne.n	8003e7a <I2C_SlaveReceive_RXNE+0x74>
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b2a      	cmp	r3, #42	; 0x2a
 8003e54:	d111      	bne.n	8003e7a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2222      	movs	r2, #34	; 0x22
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2228      	movs	r2, #40	; 0x28
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff f992 	bl	800319e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d012      	beq.n	8003eba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ee0:	2b28      	cmp	r3, #40	; 0x28
 8003ee2:	d127      	bne.n	8003f34 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	09db      	lsrs	r3, r3, #7
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	81bb      	strh	r3, [r7, #12]
 8003f16:	e002      	b.n	8003f1e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f26:	89ba      	ldrh	r2, [r7, #12]
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff f940 	bl	80031b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f32:	e00e      	b.n	8003f52 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb8:	d172      	bne.n	80040a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b22      	cmp	r3, #34	; 0x22
 8003fbe:	d002      	beq.n	8003fc6 <I2C_Slave_STOPF+0x6a>
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc4:	d135      	bne.n	8004032 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd ffef 	bl	8001fe2 <HAL_DMA_GetState>
 8004004:	4603      	mov	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d049      	beq.n	800409e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	4a69      	ldr	r2, [pc, #420]	; (80041b4 <I2C_Slave_STOPF+0x258>)
 8004010:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd ffc1 	bl	8001f9e <HAL_DMA_Abort_IT>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d03d      	beq.n	800409e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800402c:	4610      	mov	r0, r2
 800402e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004030:	e035      	b.n	800409e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004064:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd ffb9 	bl	8001fe2 <HAL_DMA_GetState>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d014      	beq.n	80040a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	4a4e      	ldr	r2, [pc, #312]	; (80041b4 <I2C_Slave_STOPF+0x258>)
 800407c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd ff8b 	bl	8001f9e <HAL_DMA_Abort_IT>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004098:	4610      	mov	r0, r2
 800409a:	4798      	blx	r3
 800409c:	e000      	b.n	80040a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800409e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03e      	beq.n	8004128 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d112      	bne.n	80040de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d112      	bne.n	8004112 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f043 0204 	orr.w	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f843 	bl	80041bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004136:	e039      	b.n	80041ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b2a      	cmp	r3, #42	; 0x2a
 800413c:	d109      	bne.n	8004152 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2228      	movs	r2, #40	; 0x28
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff f826 	bl	800319e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b28      	cmp	r3, #40	; 0x28
 800415c:	d111      	bne.n	8004182 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <I2C_Slave_STOPF+0x25c>)
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff f827 	bl	80031ce <HAL_I2C_ListenCpltCallback>
}
 8004180:	e014      	b.n	80041ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	2b22      	cmp	r3, #34	; 0x22
 8004188:	d002      	beq.n	8004190 <I2C_Slave_STOPF+0x234>
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b22      	cmp	r3, #34	; 0x22
 800418e:	d10d      	bne.n	80041ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe fff9 	bl	800319e <HAL_I2C_SlaveRxCpltCallback>
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	0800471d 	.word	0x0800471d
 80041b8:	ffff0000 	.word	0xffff0000

080041bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d002      	beq.n	80041e0 <I2C_ITError+0x24>
 80041da:	7bbb      	ldrb	r3, [r7, #14]
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d10a      	bne.n	80041f6 <I2C_ITError+0x3a>
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b22      	cmp	r3, #34	; 0x22
 80041e4:	d107      	bne.n	80041f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041fc:	2b28      	cmp	r3, #40	; 0x28
 80041fe:	d107      	bne.n	8004210 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2228      	movs	r2, #40	; 0x28
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800420e:	e015      	b.n	800423c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d00a      	beq.n	8004236 <I2C_ITError+0x7a>
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b60      	cmp	r3, #96	; 0x60
 8004224:	d007      	beq.n	8004236 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424a:	d162      	bne.n	8004312 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d020      	beq.n	80042ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	4a6a      	ldr	r2, [pc, #424]	; (8004418 <I2C_ITError+0x25c>)
 8004270:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fe91 	bl	8001f9e <HAL_DMA_Abort_IT>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8089 	beq.w	8004396 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a6:	4610      	mov	r0, r2
 80042a8:	4798      	blx	r3
 80042aa:	e074      	b.n	8004396 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	4a59      	ldr	r2, [pc, #356]	; (8004418 <I2C_ITError+0x25c>)
 80042b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd fe70 	bl	8001f9e <HAL_DMA_Abort_IT>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d068      	beq.n	8004396 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	d10b      	bne.n	80042ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800430c:	4610      	mov	r0, r2
 800430e:	4798      	blx	r3
 8004310:	e041      	b.n	8004396 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b60      	cmp	r3, #96	; 0x60
 800431c:	d125      	bne.n	800436a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d10b      	bne.n	8004352 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe ff5b 	bl	800321e <HAL_I2C_AbortCpltCallback>
 8004368:	e015      	b.n	8004396 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d10b      	bne.n	8004390 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fe ff3a 	bl	800320a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10e      	bne.n	80043c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d113      	bne.n	8004410 <I2C_ITError+0x254>
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b28      	cmp	r3, #40	; 0x28
 80043ec:	d110      	bne.n	8004410 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <I2C_ITError+0x260>)
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fe fedf 	bl	80031ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	0800471d 	.word	0x0800471d
 800441c:	ffff0000 	.word	0xffff0000

08004420 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	2200      	movs	r2, #0
 8004452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa08 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004470:	d103      	bne.n	800447a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e05f      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800447e:	897b      	ldrh	r3, [r7, #10]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800448c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	492d      	ldr	r1, [pc, #180]	; (8004548 <I2C_RequestMemoryWrite+0x128>)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fa40 	bl	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04c      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 faaa 	bl	8004a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d107      	bne.n	80044e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02b      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	611a      	str	r2, [r3, #16]
 80044f6:	e021      	b.n	800453c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa84 	bl	8004a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b04      	cmp	r3, #4
 800451c:	d107      	bne.n	800452e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e005      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004532:	893b      	ldrh	r3, [r7, #8]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	00010002 	.word	0x00010002

0800454c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004574:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2200      	movs	r2, #0
 800458e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f96a 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ac:	d103      	bne.n	80045b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0aa      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ba:	897b      	ldrh	r3, [r7, #10]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	4952      	ldr	r1, [pc, #328]	; (8004718 <I2C_RequestMemoryRead+0x1cc>)
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f9a2 	bl	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e097      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f8:	6a39      	ldr	r1, [r7, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fa0c 	bl	8004a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b04      	cmp	r3, #4
 800460c:	d107      	bne.n	800461e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e076      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004628:	893b      	ldrh	r3, [r7, #8]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e021      	b.n	8004678 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004634:	893b      	ldrh	r3, [r7, #8]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	b29b      	uxth	r3, r3
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004644:	6a39      	ldr	r1, [r7, #32]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f9e6 	bl	8004a18 <I2C_WaitOnTXEFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b04      	cmp	r3, #4
 8004658:	d107      	bne.n	800466a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e050      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800466e:	893b      	ldrh	r3, [r7, #8]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	6a39      	ldr	r1, [r7, #32]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f9cb 	bl	8004a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e035      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f8d3 	bl	800486c <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	d103      	bne.n	80046e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e013      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046e8:	897b      	ldrh	r3, [r7, #10]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	4906      	ldr	r1, [pc, #24]	; (8004718 <I2C_RequestMemoryRead+0x1cc>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f90b 	bl	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	00010002 	.word	0x00010002

0800471c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004736:	4b4b      	ldr	r3, [pc, #300]	; (8004864 <I2C_DMAAbort+0x148>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	08db      	lsrs	r3, r3, #3
 800473c:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <I2C_DMAAbort+0x14c>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0a1a      	lsrs	r2, r3, #8
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	00da      	lsls	r2, r3, #3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004762:	e00a      	b.n	800477a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3b01      	subs	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d0ea      	beq.n	8004750 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	2200      	movs	r2, #0
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	2200      	movs	r2, #0
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	2200      	movs	r2, #0
 80047be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	2200      	movs	r2, #0
 80047ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d10e      	bne.n	800480a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7fe fd0b 	bl	800321e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004808:	e027      	b.n	800485a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004810:	2b28      	cmp	r3, #40	; 0x28
 8004812:	d117      	bne.n	8004844 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004832:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2228      	movs	r2, #40	; 0x28
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004842:	e007      	b.n	8004854 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004854:	6978      	ldr	r0, [r7, #20]
 8004856:	f7fe fcd8 	bl	800320a <HAL_I2C_ErrorCallback>
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000004 	.word	0x20000004
 8004868:	14f8b589 	.word	0x14f8b589

0800486c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487c:	e025      	b.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d021      	beq.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fd fa49 	bl	8001d1c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d116      	bne.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e023      	b.n	8004912 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10d      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	43da      	mvns	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	e00c      	b.n	800490a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	43da      	mvns	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4013      	ands	r3, r2
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	429a      	cmp	r2, r3
 800490e:	d0b6      	beq.n	800487e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004928:	e051      	b.n	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d123      	bne.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004952:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e046      	b.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d021      	beq.n	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fd f9c7 	bl	8001d1c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e020      	b.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10c      	bne.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	43da      	mvns	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e00b      	b.n	8004a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	43da      	mvns	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4013      	ands	r3, r2
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d18d      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a24:	e02d      	b.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f900 	bl	8004c2c <I2C_IsAcknowledgeFailed>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e02d      	b.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d021      	beq.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3e:	f7fd f96d 	bl	8001d1c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d116      	bne.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e007      	b.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d1ca      	bne.n	8004a26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa6:	e02d      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f8bf 	bl	8004c2c <I2C_IsAcknowledgeFailed>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e02d      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d021      	beq.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fd f92c 	bl	8001d1c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e007      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d1ca      	bne.n	8004aa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	0a1a      	lsrs	r2, r3, #8
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e008      	b.n	8004b6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b68:	d0e9      	beq.n	8004b3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	20000004 	.word	0x20000004
 8004b7c:	14f8b589 	.word	0x14f8b589

08004b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b8c:	e042      	b.n	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d119      	bne.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e029      	b.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fd f8a4 	bl	8001d1c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e007      	b.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d1b5      	bne.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c42:	d11b      	bne.n	8004c7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f043 0204 	orr.w	r2, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c9a:	d103      	bne.n	8004ca4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ca2:	e007      	b.n	8004cb4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cac:	d102      	bne.n	8004cb4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0cc      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d90c      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0b8      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d020      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d14:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a58      	ldr	r2, [pc, #352]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d38:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	494d      	ldr	r1, [pc, #308]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d044      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d119      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e07f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d003      	beq.n	8004d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e06f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8e:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e067      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f023 0203 	bic.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4934      	ldr	r1, [pc, #208]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db0:	f7fc ffb4 	bl	8001d1c <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db8:	f7fc ffb0 	bl	8001d1c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e04f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 020c 	and.w	r2, r3, #12
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1eb      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d20c      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e032      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e14:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4916      	ldr	r1, [pc, #88]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	490e      	ldr	r1, [pc, #56]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e46:	f000 f855 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	490a      	ldr	r1, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004e58:	5ccb      	ldrb	r3, [r1, r3]
 8004e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fc ff14 	bl	8001c94 <HAL_InitTick>

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023c00 	.word	0x40023c00
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0800acf8 	.word	0x0800acf8
 8004e84:	20000004 	.word	0x20000004
 8004e88:	20000008 	.word	0x20000008

08004e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000004 	.word	0x20000004

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ea8:	f7ff fff0 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0a9b      	lsrs	r3, r3, #10
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4903      	ldr	r1, [pc, #12]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	0800ad08 	.word	0x0800ad08

08004ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ed0:	f7ff ffdc 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0b5b      	lsrs	r3, r3, #13
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800ad08 	.word	0x0800ad08

08004ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef8:	b0ae      	sub	sp, #184	; 0xb8
 8004efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f1a:	4bcb      	ldr	r3, [pc, #812]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	f200 8206 	bhi.w	8005334 <HAL_RCC_GetSysClockFreq+0x440>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08005335 	.word	0x08005335
 8004f38:	08005335 	.word	0x08005335
 8004f3c:	08005335 	.word	0x08005335
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08005335 	.word	0x08005335
 8004f48:	08005335 	.word	0x08005335
 8004f4c:	08005335 	.word	0x08005335
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08005335 	.word	0x08005335
 8004f58:	08005335 	.word	0x08005335
 8004f5c:	08005335 	.word	0x08005335
 8004f60:	08005165 	.word	0x08005165
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f64:	4bb9      	ldr	r3, [pc, #740]	; (800524c <HAL_RCC_GetSysClockFreq+0x358>)
 8004f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004f6a:	e1e7      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f6c:	4bb8      	ldr	r3, [pc, #736]	; (8005250 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f72:	e1e3      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f74:	4bb4      	ldr	r3, [pc, #720]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f80:	4bb1      	ldr	r3, [pc, #708]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d071      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8c:	4bae      	ldr	r3, [pc, #696]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	f04f 0000 	mov.w	r0, #0
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	0159      	lsls	r1, r3, #5
 8004fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc4:	0150      	lsls	r0, r2, #5
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4621      	mov	r1, r4
 8004fcc:	1a51      	subs	r1, r2, r1
 8004fce:	6439      	str	r1, [r7, #64]	; 0x40
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	018b      	lsls	r3, r1, #6
 8004fe8:	4641      	mov	r1, r8
 8004fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fee:	4641      	mov	r1, r8
 8004ff0:	018a      	lsls	r2, r1, #6
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	1a51      	subs	r1, r2, r1
 8004ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800500c:	4649      	mov	r1, r9
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4641      	mov	r1, r8
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4641      	mov	r1, r8
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4622      	mov	r2, r4
 8005022:	189b      	adds	r3, r3, r2
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
 8005026:	462b      	mov	r3, r5
 8005028:	460a      	mov	r2, r1
 800502a:	eb42 0303 	adc.w	r3, r2, r3
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800503c:	4629      	mov	r1, r5
 800503e:	024b      	lsls	r3, r1, #9
 8005040:	4621      	mov	r1, r4
 8005042:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005046:	4621      	mov	r1, r4
 8005048:	024a      	lsls	r2, r1, #9
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800505c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005060:	f7fb fe32 	bl	8000cc8 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4613      	mov	r3, r2
 800506a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800506e:	e067      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005070:	4b75      	ldr	r3, [pc, #468]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	099b      	lsrs	r3, r3, #6
 8005076:	2200      	movs	r2, #0
 8005078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800507c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005088:	67bb      	str	r3, [r7, #120]	; 0x78
 800508a:	2300      	movs	r3, #0
 800508c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800508e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005092:	4622      	mov	r2, r4
 8005094:	462b      	mov	r3, r5
 8005096:	f04f 0000 	mov.w	r0, #0
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	0159      	lsls	r1, r3, #5
 80050a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a4:	0150      	lsls	r0, r2, #5
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4621      	mov	r1, r4
 80050ac:	1a51      	subs	r1, r2, r1
 80050ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80050b0:	4629      	mov	r1, r5
 80050b2:	eb63 0301 	sbc.w	r3, r3, r1
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80050c4:	4649      	mov	r1, r9
 80050c6:	018b      	lsls	r3, r1, #6
 80050c8:	4641      	mov	r1, r8
 80050ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ce:	4641      	mov	r1, r8
 80050d0:	018a      	lsls	r2, r1, #6
 80050d2:	4641      	mov	r1, r8
 80050d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80050d8:	4649      	mov	r1, r9
 80050da:	eb63 0b01 	sbc.w	fp, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f2:	4692      	mov	sl, r2
 80050f4:	469b      	mov	fp, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb1a 0303 	adds.w	r3, sl, r3
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	462b      	mov	r3, r5
 8005100:	eb4b 0303 	adc.w	r3, fp, r3
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005112:	4629      	mov	r1, r5
 8005114:	028b      	lsls	r3, r1, #10
 8005116:	4621      	mov	r1, r4
 8005118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800511c:	4621      	mov	r1, r4
 800511e:	028a      	lsls	r2, r1, #10
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005128:	2200      	movs	r2, #0
 800512a:	673b      	str	r3, [r7, #112]	; 0x70
 800512c:	677a      	str	r2, [r7, #116]	; 0x74
 800512e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005132:	f7fb fdc9 	bl	8000cc8 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4613      	mov	r3, r2
 800513c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005140:	4b41      	ldr	r3, [pc, #260]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	3301      	adds	r3, #1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005162:	e0eb      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005164:	4b38      	ldr	r3, [pc, #224]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800516c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005170:	4b35      	ldr	r3, [pc, #212]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d06b      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <HAL_RCC_GetSysClockFreq+0x354>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	2200      	movs	r2, #0
 8005184:	66bb      	str	r3, [r7, #104]	; 0x68
 8005186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	663b      	str	r3, [r7, #96]	; 0x60
 8005190:	2300      	movs	r3, #0
 8005192:	667b      	str	r3, [r7, #100]	; 0x64
 8005194:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	f04f 0000 	mov.w	r0, #0
 80051a0:	f04f 0100 	mov.w	r1, #0
 80051a4:	0159      	lsls	r1, r3, #5
 80051a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051aa:	0150      	lsls	r0, r2, #5
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4621      	mov	r1, r4
 80051b2:	1a51      	subs	r1, r2, r1
 80051b4:	61b9      	str	r1, [r7, #24]
 80051b6:	4629      	mov	r1, r5
 80051b8:	eb63 0301 	sbc.w	r3, r3, r1
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80051ca:	4659      	mov	r1, fp
 80051cc:	018b      	lsls	r3, r1, #6
 80051ce:	4651      	mov	r1, sl
 80051d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051d4:	4651      	mov	r1, sl
 80051d6:	018a      	lsls	r2, r1, #6
 80051d8:	4651      	mov	r1, sl
 80051da:	ebb2 0801 	subs.w	r8, r2, r1
 80051de:	4659      	mov	r1, fp
 80051e0:	eb63 0901 	sbc.w	r9, r3, r1
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051f8:	4690      	mov	r8, r2
 80051fa:	4699      	mov	r9, r3
 80051fc:	4623      	mov	r3, r4
 80051fe:	eb18 0303 	adds.w	r3, r8, r3
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	462b      	mov	r3, r5
 8005206:	eb49 0303 	adc.w	r3, r9, r3
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005218:	4629      	mov	r1, r5
 800521a:	024b      	lsls	r3, r1, #9
 800521c:	4621      	mov	r1, r4
 800521e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005222:	4621      	mov	r1, r4
 8005224:	024a      	lsls	r2, r1, #9
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800522e:	2200      	movs	r2, #0
 8005230:	65bb      	str	r3, [r7, #88]	; 0x58
 8005232:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005234:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005238:	f7fb fd46 	bl	8000cc8 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005246:	e065      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x420>
 8005248:	40023800 	.word	0x40023800
 800524c:	00f42400 	.word	0x00f42400
 8005250:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005254:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_RCC_GetSysClockFreq+0x458>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	099b      	lsrs	r3, r3, #6
 800525a:	2200      	movs	r2, #0
 800525c:	4618      	mov	r0, r3
 800525e:	4611      	mov	r1, r2
 8005260:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005264:	653b      	str	r3, [r7, #80]	; 0x50
 8005266:	2300      	movs	r3, #0
 8005268:	657b      	str	r3, [r7, #84]	; 0x54
 800526a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800526e:	4642      	mov	r2, r8
 8005270:	464b      	mov	r3, r9
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	0159      	lsls	r1, r3, #5
 800527c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005280:	0150      	lsls	r0, r2, #5
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4641      	mov	r1, r8
 8005288:	1a51      	subs	r1, r2, r1
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	4649      	mov	r1, r9
 800528e:	eb63 0301 	sbc.w	r3, r3, r1
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80052a0:	4659      	mov	r1, fp
 80052a2:	018b      	lsls	r3, r1, #6
 80052a4:	4651      	mov	r1, sl
 80052a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052aa:	4651      	mov	r1, sl
 80052ac:	018a      	lsls	r2, r1, #6
 80052ae:	4651      	mov	r1, sl
 80052b0:	1a54      	subs	r4, r2, r1
 80052b2:	4659      	mov	r1, fp
 80052b4:	eb63 0501 	sbc.w	r5, r3, r1
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	00eb      	lsls	r3, r5, #3
 80052c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c6:	00e2      	lsls	r2, r4, #3
 80052c8:	4614      	mov	r4, r2
 80052ca:	461d      	mov	r5, r3
 80052cc:	4643      	mov	r3, r8
 80052ce:	18e3      	adds	r3, r4, r3
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	464b      	mov	r3, r9
 80052d4:	eb45 0303 	adc.w	r3, r5, r3
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e6:	4629      	mov	r1, r5
 80052e8:	028b      	lsls	r3, r1, #10
 80052ea:	4621      	mov	r1, r4
 80052ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f0:	4621      	mov	r1, r4
 80052f2:	028a      	lsls	r2, r1, #10
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052fc:	2200      	movs	r2, #0
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005300:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005302:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005306:	f7fb fcdf 	bl	8000cc8 <__aeabi_uldivmod>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4613      	mov	r3, r2
 8005310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005314:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_RCC_GetSysClockFreq+0x458>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0f1b      	lsrs	r3, r3, #28
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005332:	e003      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800533a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800533c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005340:	4618      	mov	r0, r3
 8005342:	37b8      	adds	r7, #184	; 0xb8
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800
 8005350:	00f42400 	.word	0x00f42400

08005354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e28d      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8083 	beq.w	800547a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005374:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b04      	cmp	r3, #4
 800537e:	d019      	beq.n	80053b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005380:	4b91      	ldr	r3, [pc, #580]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005388:	2b08      	cmp	r3, #8
 800538a:	d106      	bne.n	800539a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800538c:	4b8e      	ldr	r3, [pc, #568]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005398:	d00c      	beq.n	80053b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d112      	bne.n	80053cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053a6:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b84      	ldr	r3, [pc, #528]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <HAL_RCC_OscConfig+0x124>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d157      	bne.n	8005478 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e25a      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x90>
 80053d6:	4b7c      	ldr	r3, [pc, #496]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7b      	ldr	r2, [pc, #492]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e01d      	b.n	8005420 <HAL_RCC_OscConfig+0xcc>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0xb4>
 80053ee:	4b76      	ldr	r3, [pc, #472]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a75      	ldr	r2, [pc, #468]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b73      	ldr	r3, [pc, #460]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a72      	ldr	r2, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xcc>
 8005408:	4b6f      	ldr	r3, [pc, #444]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6b      	ldr	r2, [pc, #428]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fc fc78 	bl	8001d1c <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005430:	f7fc fc74 	bl	8001d1c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e21f      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	4b61      	ldr	r3, [pc, #388]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xdc>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fc fc64 	bl	8001d1c <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fc fc60 	bl	8001d1c <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e20b      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	4b57      	ldr	r3, [pc, #348]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x104>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d06f      	beq.n	8005566 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005486:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b00      	cmp	r3, #0
 8005490:	d017      	beq.n	80054c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005492:	4b4d      	ldr	r3, [pc, #308]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800549a:	2b08      	cmp	r3, #8
 800549c:	d105      	bne.n	80054aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800549e:	4b4a      	ldr	r3, [pc, #296]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054b2:	2b0c      	cmp	r3, #12
 80054b4:	d11c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b6:	4b44      	ldr	r3, [pc, #272]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d116      	bne.n	80054f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c2:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_RCC_OscConfig+0x186>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d001      	beq.n	80054da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e1d3      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4937      	ldr	r1, [pc, #220]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ee:	e03a      	b.n	8005566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f8:	4b34      	ldr	r3, [pc, #208]	; (80055cc <HAL_RCC_OscConfig+0x278>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fc fc0d 	bl	8001d1c <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005506:	f7fc fc09 	bl	8001d1c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e1b4      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f0      	beq.n	8005506 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005524:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4925      	ldr	r1, [pc, #148]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]
 8005538:	e015      	b.n	8005566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <HAL_RCC_OscConfig+0x278>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc fbec 	bl	8001d1c <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005548:	f7fc fbe8 	bl	8001d1c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e193      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d036      	beq.n	80055e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d016      	beq.n	80055a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <HAL_RCC_OscConfig+0x27c>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fc fbcc 	bl	8001d1c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005588:	f7fc fbc8 	bl	8001d1c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e173      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x234>
 80055a6:	e01b      	b.n	80055e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ae:	f7fc fbb5 	bl	8001d1c <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b4:	e00e      	b.n	80055d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b6:	f7fc fbb1 	bl	8001d1c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d907      	bls.n	80055d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e15c      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	42470000 	.word	0x42470000
 80055d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	4b8a      	ldr	r3, [pc, #552]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80055d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ea      	bne.n	80055b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8097 	beq.w	800571c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f2:	4b83      	ldr	r3, [pc, #524]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	4b7f      	ldr	r3, [pc, #508]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	4a7e      	ldr	r2, [pc, #504]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560c:	6413      	str	r3, [r2, #64]	; 0x40
 800560e:	4b7c      	ldr	r3, [pc, #496]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b79      	ldr	r3, [pc, #484]	; (8005804 <HAL_RCC_OscConfig+0x4b0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d118      	bne.n	800565c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562a:	4b76      	ldr	r3, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x4b0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a75      	ldr	r2, [pc, #468]	; (8005804 <HAL_RCC_OscConfig+0x4b0>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005636:	f7fc fb71 	bl	8001d1c <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fc fb6d 	bl	8001d1c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e118      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <HAL_RCC_OscConfig+0x4b0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x31e>
 8005664:	4b66      	ldr	r3, [pc, #408]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a65      	ldr	r2, [pc, #404]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
 8005670:	e01c      	b.n	80056ac <HAL_RCC_OscConfig+0x358>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d10c      	bne.n	8005694 <HAL_RCC_OscConfig+0x340>
 800567a:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a60      	ldr	r2, [pc, #384]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005680:	f043 0304 	orr.w	r3, r3, #4
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	4b5e      	ldr	r3, [pc, #376]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a5d      	ldr	r2, [pc, #372]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
 8005692:	e00b      	b.n	80056ac <HAL_RCC_OscConfig+0x358>
 8005694:	4b5a      	ldr	r3, [pc, #360]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a59      	ldr	r2, [pc, #356]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
 80056a0:	4b57      	ldr	r3, [pc, #348]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	4a56      	ldr	r2, [pc, #344]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80056a6:	f023 0304 	bic.w	r3, r3, #4
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fc fb32 	bl	8001d1c <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fc fb2e 	bl	8001d1c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0d7      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ee      	beq.n	80056bc <HAL_RCC_OscConfig+0x368>
 80056de:	e014      	b.n	800570a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fc fb1c 	bl	8001d1c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fc fb18 	bl	8001d1c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e0c1      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fe:	4b40      	ldr	r3, [pc, #256]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ee      	bne.n	80056e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d105      	bne.n	800571c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005710:	4b3b      	ldr	r3, [pc, #236]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80ad 	beq.w	8005880 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005726:	4b36      	ldr	r3, [pc, #216]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b08      	cmp	r3, #8
 8005730:	d060      	beq.n	80057f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d145      	bne.n	80057c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573a:	4b33      	ldr	r3, [pc, #204]	; (8005808 <HAL_RCC_OscConfig+0x4b4>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fc faec 	bl	8001d1c <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005748:	f7fc fae8 	bl	8001d1c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e093      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	4b29      	ldr	r3, [pc, #164]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	019b      	lsls	r3, r3, #6
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	3b01      	subs	r3, #1
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	071b      	lsls	r3, r3, #28
 8005792:	491b      	ldr	r1, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x4b4>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc fabd 	bl	8001d1c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fc fab9 	bl	8001d1c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e064      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b8:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x452>
 80057c4:	e05c      	b.n	8005880 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <HAL_RCC_OscConfig+0x4b4>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fc faa6 	bl	8001d1c <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fc faa2 	bl	8001d1c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e04d      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_RCC_OscConfig+0x4ac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x480>
 80057f2:	e045      	b.n	8005880 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e040      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
 8005800:	40023800 	.word	0x40023800
 8005804:	40007000 	.word	0x40007000
 8005808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800580c:	4b1f      	ldr	r3, [pc, #124]	; (800588c <HAL_RCC_OscConfig+0x538>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d030      	beq.n	800587c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d129      	bne.n	800587c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d122      	bne.n	800587c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005844:	4293      	cmp	r3, r2
 8005846:	d119      	bne.n	800587c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	3b01      	subs	r3, #1
 8005856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d10f      	bne.n	800587c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d107      	bne.n	800587c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800

08005890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e03f      	b.n	8005922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc f84c 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2224      	movs	r2, #36	; 0x24
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f929 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b08a      	sub	sp, #40	; 0x28
 800592e:	af02      	add	r7, sp, #8
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b20      	cmp	r3, #32
 8005948:	d17c      	bne.n	8005a44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_UART_Transmit+0x2c>
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e075      	b.n	8005a46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_UART_Transmit+0x3e>
 8005964:	2302      	movs	r3, #2
 8005966:	e06e      	b.n	8005a46 <HAL_UART_Transmit+0x11c>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2221      	movs	r2, #33	; 0x21
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800597e:	f7fc f9cd 	bl	8001d1c <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005998:	d108      	bne.n	80059ac <HAL_UART_Transmit+0x82>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	e003      	b.n	80059b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059bc:	e02a      	b.n	8005a14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2200      	movs	r2, #0
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f840 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e036      	b.n	8005a46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	3302      	adds	r3, #2
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e007      	b.n	8005a06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1cf      	bne.n	80059be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2140      	movs	r1, #64	; 0x40
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f810 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e006      	b.n	8005a46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b090      	sub	sp, #64	; 0x40
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5e:	e050      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d04c      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6e:	f7fc f955 	bl	8001d1c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d241      	bcs.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a9e:	637a      	str	r2, [r7, #52]	; 0x34
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3314      	adds	r3, #20
 8005ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad2:	623a      	str	r2, [r7, #32]
 8005ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	69f9      	ldr	r1, [r7, #28]
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d09f      	beq.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3740      	adds	r7, #64	; 0x40
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b30:	b0c0      	sub	sp, #256	; 0x100
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b48:	68d9      	ldr	r1, [r3, #12]
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	ea40 0301 	orr.w	r3, r0, r1
 8005b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b84:	f021 010c 	bic.w	r1, r1, #12
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b92:	430b      	orrs	r3, r1
 8005b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	6999      	ldr	r1, [r3, #24]
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	ea40 0301 	orr.w	r3, r0, r1
 8005bb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b8f      	ldr	r3, [pc, #572]	; (8005df8 <UART_SetConfig+0x2cc>)
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d005      	beq.n	8005bcc <UART_SetConfig+0xa0>
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b8d      	ldr	r3, [pc, #564]	; (8005dfc <UART_SetConfig+0x2d0>)
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d104      	bne.n	8005bd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bcc:	f7ff f97e 	bl	8004ecc <HAL_RCC_GetPCLK2Freq>
 8005bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bd4:	e003      	b.n	8005bde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bd6:	f7ff f965 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8005bda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be8:	f040 810c 	bne.w	8005e04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	1891      	adds	r1, r2, r2
 8005c04:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c06:	415b      	adcs	r3, r3
 8005c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c0e:	4621      	mov	r1, r4
 8005c10:	eb12 0801 	adds.w	r8, r2, r1
 8005c14:	4629      	mov	r1, r5
 8005c16:	eb43 0901 	adc.w	r9, r3, r1
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c2e:	4690      	mov	r8, r2
 8005c30:	4699      	mov	r9, r3
 8005c32:	4623      	mov	r3, r4
 8005c34:	eb18 0303 	adds.w	r3, r8, r3
 8005c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	eb49 0303 	adc.w	r3, r9, r3
 8005c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	18db      	adds	r3, r3, r3
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c60:	4613      	mov	r3, r2
 8005c62:	eb42 0303 	adc.w	r3, r2, r3
 8005c66:	657b      	str	r3, [r7, #84]	; 0x54
 8005c68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c70:	f7fb f82a 	bl	8000cc8 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4b61      	ldr	r3, [pc, #388]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	011c      	lsls	r4, r3, #4
 8005c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	1891      	adds	r1, r2, r2
 8005c9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c9c:	415b      	adcs	r3, r3
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	eb12 0a01 	adds.w	sl, r2, r1
 8005caa:	4649      	mov	r1, r9
 8005cac:	eb43 0b01 	adc.w	fp, r3, r1
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cc4:	4692      	mov	sl, r2
 8005cc6:	469b      	mov	fp, r3
 8005cc8:	4643      	mov	r3, r8
 8005cca:	eb1a 0303 	adds.w	r3, sl, r3
 8005cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8005cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ce8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	18db      	adds	r3, r3, r3
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	eb42 0303 	adc.w	r3, r2, r3
 8005cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d06:	f7fa ffdf 	bl	8000cc8 <__aeabi_uldivmod>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4b3b      	ldr	r3, [pc, #236]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005d12:	fba3 2301 	umull	r2, r3, r3, r1
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2264      	movs	r2, #100	; 0x64
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	1acb      	subs	r3, r1, r3
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d26:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005d28:	fba3 2302 	umull	r2, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d34:	441c      	add	r4, r3
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d48:	4642      	mov	r2, r8
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	1891      	adds	r1, r2, r2
 8005d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d50:	415b      	adcs	r3, r3
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d58:	4641      	mov	r1, r8
 8005d5a:	1851      	adds	r1, r2, r1
 8005d5c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d5e:	4649      	mov	r1, r9
 8005d60:	414b      	adcs	r3, r1
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d70:	4659      	mov	r1, fp
 8005d72:	00cb      	lsls	r3, r1, #3
 8005d74:	4651      	mov	r1, sl
 8005d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	00ca      	lsls	r2, r1, #3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	4642      	mov	r2, r8
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	460a      	mov	r2, r1
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005da4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dac:	460b      	mov	r3, r1
 8005dae:	18db      	adds	r3, r3, r3
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db2:	4613      	mov	r3, r2
 8005db4:	eb42 0303 	adc.w	r3, r2, r3
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dc2:	f7fa ff81 	bl	8000cc8 <__aeabi_uldivmod>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	2164      	movs	r1, #100	; 0x64
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	3332      	adds	r3, #50	; 0x32
 8005dde:	4a08      	ldr	r2, [pc, #32]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	f003 0207 	and.w	r2, r3, #7
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4422      	add	r2, r4
 8005df2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005df4:	e105      	b.n	8006002 <UART_SetConfig+0x4d6>
 8005df6:	bf00      	nop
 8005df8:	40011000 	.word	0x40011000
 8005dfc:	40011400 	.word	0x40011400
 8005e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e16:	4642      	mov	r2, r8
 8005e18:	464b      	mov	r3, r9
 8005e1a:	1891      	adds	r1, r2, r2
 8005e1c:	6239      	str	r1, [r7, #32]
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
 8005e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e26:	4641      	mov	r1, r8
 8005e28:	1854      	adds	r4, r2, r1
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	eb43 0501 	adc.w	r5, r3, r1
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	00eb      	lsls	r3, r5, #3
 8005e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e3e:	00e2      	lsls	r2, r4, #3
 8005e40:	4614      	mov	r4, r2
 8005e42:	461d      	mov	r5, r3
 8005e44:	4643      	mov	r3, r8
 8005e46:	18e3      	adds	r3, r4, r3
 8005e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	eb45 0303 	adc.w	r3, r5, r3
 8005e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e72:	4629      	mov	r1, r5
 8005e74:	008b      	lsls	r3, r1, #2
 8005e76:	4621      	mov	r1, r4
 8005e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	008a      	lsls	r2, r1, #2
 8005e80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e84:	f7fa ff20 	bl	8000cc8 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4b60      	ldr	r3, [pc, #384]	; (8006010 <UART_SetConfig+0x4e4>)
 8005e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	011c      	lsls	r4, r3, #4
 8005e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ea0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ea4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	1891      	adds	r1, r2, r2
 8005eae:	61b9      	str	r1, [r7, #24]
 8005eb0:	415b      	adcs	r3, r3
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb8:	4641      	mov	r1, r8
 8005eba:	1851      	adds	r1, r2, r1
 8005ebc:	6139      	str	r1, [r7, #16]
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	414b      	adcs	r3, r1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	00cb      	lsls	r3, r1, #3
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eda:	4651      	mov	r1, sl
 8005edc:	00ca      	lsls	r2, r1, #3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eec:	464b      	mov	r3, r9
 8005eee:	460a      	mov	r2, r1
 8005ef0:	eb42 0303 	adc.w	r3, r2, r3
 8005ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f10:	4649      	mov	r1, r9
 8005f12:	008b      	lsls	r3, r1, #2
 8005f14:	4641      	mov	r1, r8
 8005f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f1a:	4641      	mov	r1, r8
 8005f1c:	008a      	lsls	r2, r1, #2
 8005f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f22:	f7fa fed1 	bl	8000cc8 <__aeabi_uldivmod>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4b39      	ldr	r3, [pc, #228]	; (8006010 <UART_SetConfig+0x4e4>)
 8005f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	2164      	movs	r1, #100	; 0x64
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	3332      	adds	r3, #50	; 0x32
 8005f3e:	4a34      	ldr	r2, [pc, #208]	; (8006010 <UART_SetConfig+0x4e4>)
 8005f40:	fba2 2303 	umull	r2, r3, r2, r3
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4a:	441c      	add	r4, r3
 8005f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f50:	2200      	movs	r2, #0
 8005f52:	673b      	str	r3, [r7, #112]	; 0x70
 8005f54:	677a      	str	r2, [r7, #116]	; 0x74
 8005f56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f5a:	4642      	mov	r2, r8
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	415b      	adcs	r3, r3
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	1851      	adds	r1, r2, r1
 8005f6e:	6039      	str	r1, [r7, #0]
 8005f70:	4649      	mov	r1, r9
 8005f72:	414b      	adcs	r3, r1
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f82:	4659      	mov	r1, fp
 8005f84:	00cb      	lsls	r3, r1, #3
 8005f86:	4651      	mov	r1, sl
 8005f88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	00ca      	lsls	r2, r1, #3
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	4603      	mov	r3, r0
 8005f96:	4642      	mov	r2, r8
 8005f98:	189b      	adds	r3, r3, r2
 8005f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	663b      	str	r3, [r7, #96]	; 0x60
 8005fb0:	667a      	str	r2, [r7, #100]	; 0x64
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	008b      	lsls	r3, r1, #2
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fc8:	4641      	mov	r1, r8
 8005fca:	008a      	lsls	r2, r1, #2
 8005fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fd0:	f7fa fe7a 	bl	8000cc8 <__aeabi_uldivmod>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <UART_SetConfig+0x4e4>)
 8005fda:	fba3 1302 	umull	r1, r3, r3, r2
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2164      	movs	r1, #100	; 0x64
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	3332      	adds	r3, #50	; 0x32
 8005fec:	4a08      	ldr	r2, [pc, #32]	; (8006010 <UART_SetConfig+0x4e4>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4422      	add	r2, r4
 8006000:	609a      	str	r2, [r3, #8]
}
 8006002:	bf00      	nop
 8006004:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600e:	bf00      	nop
 8006010:	51eb851f 	.word	0x51eb851f

08006014 <atan2f>:
 8006014:	f000 b800 	b.w	8006018 <__ieee754_atan2f>

08006018 <__ieee754_atan2f>:
 8006018:	ee10 2a90 	vmov	r2, s1
 800601c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006020:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006024:	b510      	push	{r4, lr}
 8006026:	eef0 7a40 	vmov.f32	s15, s0
 800602a:	dc06      	bgt.n	800603a <__ieee754_atan2f+0x22>
 800602c:	ee10 0a10 	vmov	r0, s0
 8006030:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006034:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006038:	dd04      	ble.n	8006044 <__ieee754_atan2f+0x2c>
 800603a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800603e:	eeb0 0a67 	vmov.f32	s0, s15
 8006042:	bd10      	pop	{r4, pc}
 8006044:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006048:	d103      	bne.n	8006052 <__ieee754_atan2f+0x3a>
 800604a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604e:	f000 b883 	b.w	8006158 <atanf>
 8006052:	1794      	asrs	r4, r2, #30
 8006054:	f004 0402 	and.w	r4, r4, #2
 8006058:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800605c:	b943      	cbnz	r3, 8006070 <__ieee754_atan2f+0x58>
 800605e:	2c02      	cmp	r4, #2
 8006060:	d05e      	beq.n	8006120 <__ieee754_atan2f+0x108>
 8006062:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006134 <__ieee754_atan2f+0x11c>
 8006066:	2c03      	cmp	r4, #3
 8006068:	bf08      	it	eq
 800606a:	eef0 7a47 	vmoveq.f32	s15, s14
 800606e:	e7e6      	b.n	800603e <__ieee754_atan2f+0x26>
 8006070:	b941      	cbnz	r1, 8006084 <__ieee754_atan2f+0x6c>
 8006072:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006138 <__ieee754_atan2f+0x120>
 8006076:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800613c <__ieee754_atan2f+0x124>
 800607a:	2800      	cmp	r0, #0
 800607c:	bfb8      	it	lt
 800607e:	eef0 7a40 	vmovlt.f32	s15, s0
 8006082:	e7dc      	b.n	800603e <__ieee754_atan2f+0x26>
 8006084:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006088:	d110      	bne.n	80060ac <__ieee754_atan2f+0x94>
 800608a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800608e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006092:	d107      	bne.n	80060a4 <__ieee754_atan2f+0x8c>
 8006094:	2c02      	cmp	r4, #2
 8006096:	d846      	bhi.n	8006126 <__ieee754_atan2f+0x10e>
 8006098:	4b29      	ldr	r3, [pc, #164]	; (8006140 <__ieee754_atan2f+0x128>)
 800609a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800609e:	edd4 7a00 	vldr	s15, [r4]
 80060a2:	e7cc      	b.n	800603e <__ieee754_atan2f+0x26>
 80060a4:	2c02      	cmp	r4, #2
 80060a6:	d841      	bhi.n	800612c <__ieee754_atan2f+0x114>
 80060a8:	4b26      	ldr	r3, [pc, #152]	; (8006144 <__ieee754_atan2f+0x12c>)
 80060aa:	e7f6      	b.n	800609a <__ieee754_atan2f+0x82>
 80060ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80060b0:	d0df      	beq.n	8006072 <__ieee754_atan2f+0x5a>
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80060b8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80060bc:	da1a      	bge.n	80060f4 <__ieee754_atan2f+0xdc>
 80060be:	2a00      	cmp	r2, #0
 80060c0:	da01      	bge.n	80060c6 <__ieee754_atan2f+0xae>
 80060c2:	313c      	adds	r1, #60	; 0x3c
 80060c4:	db19      	blt.n	80060fa <__ieee754_atan2f+0xe2>
 80060c6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80060ca:	f000 f919 	bl	8006300 <fabsf>
 80060ce:	f000 f843 	bl	8006158 <atanf>
 80060d2:	eef0 7a40 	vmov.f32	s15, s0
 80060d6:	2c01      	cmp	r4, #1
 80060d8:	d012      	beq.n	8006100 <__ieee754_atan2f+0xe8>
 80060da:	2c02      	cmp	r4, #2
 80060dc:	d017      	beq.n	800610e <__ieee754_atan2f+0xf6>
 80060de:	2c00      	cmp	r4, #0
 80060e0:	d0ad      	beq.n	800603e <__ieee754_atan2f+0x26>
 80060e2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8006148 <__ieee754_atan2f+0x130>
 80060e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80060ea:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800614c <__ieee754_atan2f+0x134>
 80060ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80060f2:	e7a4      	b.n	800603e <__ieee754_atan2f+0x26>
 80060f4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006138 <__ieee754_atan2f+0x120>
 80060f8:	e7ed      	b.n	80060d6 <__ieee754_atan2f+0xbe>
 80060fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006150 <__ieee754_atan2f+0x138>
 80060fe:	e7ea      	b.n	80060d6 <__ieee754_atan2f+0xbe>
 8006100:	ee17 3a90 	vmov	r3, s15
 8006104:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	e797      	b.n	800603e <__ieee754_atan2f+0x26>
 800610e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006148 <__ieee754_atan2f+0x130>
 8006112:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006116:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800614c <__ieee754_atan2f+0x134>
 800611a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800611e:	e78e      	b.n	800603e <__ieee754_atan2f+0x26>
 8006120:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800614c <__ieee754_atan2f+0x134>
 8006124:	e78b      	b.n	800603e <__ieee754_atan2f+0x26>
 8006126:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006154 <__ieee754_atan2f+0x13c>
 800612a:	e788      	b.n	800603e <__ieee754_atan2f+0x26>
 800612c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006150 <__ieee754_atan2f+0x138>
 8006130:	e785      	b.n	800603e <__ieee754_atan2f+0x26>
 8006132:	bf00      	nop
 8006134:	c0490fdb 	.word	0xc0490fdb
 8006138:	3fc90fdb 	.word	0x3fc90fdb
 800613c:	bfc90fdb 	.word	0xbfc90fdb
 8006140:	0800ad10 	.word	0x0800ad10
 8006144:	0800ad1c 	.word	0x0800ad1c
 8006148:	33bbbd2e 	.word	0x33bbbd2e
 800614c:	40490fdb 	.word	0x40490fdb
 8006150:	00000000 	.word	0x00000000
 8006154:	3f490fdb 	.word	0x3f490fdb

08006158 <atanf>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	ee10 5a10 	vmov	r5, s0
 800615e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006162:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006166:	eef0 7a40 	vmov.f32	s15, s0
 800616a:	db10      	blt.n	800618e <atanf+0x36>
 800616c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006170:	dd04      	ble.n	800617c <atanf+0x24>
 8006172:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006176:	eeb0 0a67 	vmov.f32	s0, s15
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80062b4 <atanf+0x15c>
 8006180:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80062b8 <atanf+0x160>
 8006184:	2d00      	cmp	r5, #0
 8006186:	bfd8      	it	le
 8006188:	eef0 7a40 	vmovle.f32	s15, s0
 800618c:	e7f3      	b.n	8006176 <atanf+0x1e>
 800618e:	4b4b      	ldr	r3, [pc, #300]	; (80062bc <atanf+0x164>)
 8006190:	429c      	cmp	r4, r3
 8006192:	dc10      	bgt.n	80061b6 <atanf+0x5e>
 8006194:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006198:	da0a      	bge.n	80061b0 <atanf+0x58>
 800619a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80062c0 <atanf+0x168>
 800619e:	ee30 7a07 	vadd.f32	s14, s0, s14
 80061a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80061aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ae:	dce2      	bgt.n	8006176 <atanf+0x1e>
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	e013      	b.n	80061de <atanf+0x86>
 80061b6:	f000 f8a3 	bl	8006300 <fabsf>
 80061ba:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <atanf+0x16c>)
 80061bc:	429c      	cmp	r4, r3
 80061be:	dc4f      	bgt.n	8006260 <atanf+0x108>
 80061c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80061c4:	429c      	cmp	r4, r3
 80061c6:	dc41      	bgt.n	800624c <atanf+0xf4>
 80061c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80061cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80061d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80061d4:	2300      	movs	r3, #0
 80061d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80061e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80062c8 <atanf+0x170>
 80061e8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80062cc <atanf+0x174>
 80061ec:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80062d0 <atanf+0x178>
 80061f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80061f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80061f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80062d4 <atanf+0x17c>
 80061fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006200:	eddf 5a35 	vldr	s11, [pc, #212]	; 80062d8 <atanf+0x180>
 8006204:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006208:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80062dc <atanf+0x184>
 800620c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006210:	eddf 5a33 	vldr	s11, [pc, #204]	; 80062e0 <atanf+0x188>
 8006214:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006218:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80062e4 <atanf+0x18c>
 800621c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006220:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80062e8 <atanf+0x190>
 8006224:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006228:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80062ec <atanf+0x194>
 800622c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006230:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80062f0 <atanf+0x198>
 8006234:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006238:	ee27 7a26 	vmul.f32	s14, s14, s13
 800623c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006244:	d121      	bne.n	800628a <atanf+0x132>
 8006246:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800624a:	e794      	b.n	8006176 <atanf+0x1e>
 800624c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006250:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006254:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006258:	2301      	movs	r3, #1
 800625a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800625e:	e7be      	b.n	80061de <atanf+0x86>
 8006260:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <atanf+0x19c>)
 8006262:	429c      	cmp	r4, r3
 8006264:	dc0b      	bgt.n	800627e <atanf+0x126>
 8006266:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800626a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800626e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006272:	2302      	movs	r3, #2
 8006274:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627c:	e7af      	b.n	80061de <atanf+0x86>
 800627e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006282:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006286:	2303      	movs	r3, #3
 8006288:	e7a9      	b.n	80061de <atanf+0x86>
 800628a:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <atanf+0x1a0>)
 800628c:	491b      	ldr	r1, [pc, #108]	; (80062fc <atanf+0x1a4>)
 800628e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006292:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006296:	ed93 0a00 	vldr	s0, [r3]
 800629a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800629e:	ed92 0a00 	vldr	s0, [r2]
 80062a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80062ac:	bfb8      	it	lt
 80062ae:	eef1 7a67 	vneglt.f32	s15, s15
 80062b2:	e760      	b.n	8006176 <atanf+0x1e>
 80062b4:	3fc90fdb 	.word	0x3fc90fdb
 80062b8:	bfc90fdb 	.word	0xbfc90fdb
 80062bc:	3edfffff 	.word	0x3edfffff
 80062c0:	7149f2ca 	.word	0x7149f2ca
 80062c4:	3f97ffff 	.word	0x3f97ffff
 80062c8:	3c8569d7 	.word	0x3c8569d7
 80062cc:	3d4bda59 	.word	0x3d4bda59
 80062d0:	bd6ef16b 	.word	0xbd6ef16b
 80062d4:	3d886b35 	.word	0x3d886b35
 80062d8:	3dba2e6e 	.word	0x3dba2e6e
 80062dc:	3e124925 	.word	0x3e124925
 80062e0:	3eaaaaab 	.word	0x3eaaaaab
 80062e4:	bd15a221 	.word	0xbd15a221
 80062e8:	bd9d8795 	.word	0xbd9d8795
 80062ec:	bde38e38 	.word	0xbde38e38
 80062f0:	be4ccccd 	.word	0xbe4ccccd
 80062f4:	401bffff 	.word	0x401bffff
 80062f8:	0800ad28 	.word	0x0800ad28
 80062fc:	0800ad38 	.word	0x0800ad38

08006300 <fabsf>:
 8006300:	ee10 3a10 	vmov	r3, s0
 8006304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006308:	ee00 3a10 	vmov	s0, r3
 800630c:	4770      	bx	lr
	...

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	; (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20000010 	.word	0x20000010

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	; (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	; (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	; (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	; (8006360 <__libc_init_array+0x44>)
 8006330:	f004 fc8e 	bl	800ac50 <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	0800b1f4 	.word	0x0800b1f4
 8006358:	0800b1f4 	.word	0x0800b1f4
 800635c:	0800b1f4 	.word	0x0800b1f4
 8006360:	0800b1f8 	.word	0x0800b1f8

08006364 <memcpy>:
 8006364:	440a      	add	r2, r1
 8006366:	4291      	cmp	r1, r2
 8006368:	f100 33ff 	add.w	r3, r0, #4294967295
 800636c:	d100      	bne.n	8006370 <memcpy+0xc>
 800636e:	4770      	bx	lr
 8006370:	b510      	push	{r4, lr}
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637a:	4291      	cmp	r1, r2
 800637c:	d1f9      	bne.n	8006372 <memcpy+0xe>
 800637e:	bd10      	pop	{r4, pc}

08006380 <memset>:
 8006380:	4402      	add	r2, r0
 8006382:	4603      	mov	r3, r0
 8006384:	4293      	cmp	r3, r2
 8006386:	d100      	bne.n	800638a <memset+0xa>
 8006388:	4770      	bx	lr
 800638a:	f803 1b01 	strb.w	r1, [r3], #1
 800638e:	e7f9      	b.n	8006384 <memset+0x4>

08006390 <__cvt>:
 8006390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	ec55 4b10 	vmov	r4, r5, d0
 8006398:	2d00      	cmp	r5, #0
 800639a:	460e      	mov	r6, r1
 800639c:	4619      	mov	r1, r3
 800639e:	462b      	mov	r3, r5
 80063a0:	bfbb      	ittet	lt
 80063a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063a6:	461d      	movlt	r5, r3
 80063a8:	2300      	movge	r3, #0
 80063aa:	232d      	movlt	r3, #45	; 0x2d
 80063ac:	700b      	strb	r3, [r1, #0]
 80063ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063b4:	4691      	mov	r9, r2
 80063b6:	f023 0820 	bic.w	r8, r3, #32
 80063ba:	bfbc      	itt	lt
 80063bc:	4622      	movlt	r2, r4
 80063be:	4614      	movlt	r4, r2
 80063c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063c4:	d005      	beq.n	80063d2 <__cvt+0x42>
 80063c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063ca:	d100      	bne.n	80063ce <__cvt+0x3e>
 80063cc:	3601      	adds	r6, #1
 80063ce:	2102      	movs	r1, #2
 80063d0:	e000      	b.n	80063d4 <__cvt+0x44>
 80063d2:	2103      	movs	r1, #3
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	ab02      	add	r3, sp, #8
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	ec45 4b10 	vmov	d0, r4, r5
 80063e0:	4653      	mov	r3, sl
 80063e2:	4632      	mov	r2, r6
 80063e4:	f001 fdac 	bl	8007f40 <_dtoa_r>
 80063e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063ec:	4607      	mov	r7, r0
 80063ee:	d102      	bne.n	80063f6 <__cvt+0x66>
 80063f0:	f019 0f01 	tst.w	r9, #1
 80063f4:	d022      	beq.n	800643c <__cvt+0xac>
 80063f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063fa:	eb07 0906 	add.w	r9, r7, r6
 80063fe:	d110      	bne.n	8006422 <__cvt+0x92>
 8006400:	783b      	ldrb	r3, [r7, #0]
 8006402:	2b30      	cmp	r3, #48	; 0x30
 8006404:	d10a      	bne.n	800641c <__cvt+0x8c>
 8006406:	2200      	movs	r2, #0
 8006408:	2300      	movs	r3, #0
 800640a:	4620      	mov	r0, r4
 800640c:	4629      	mov	r1, r5
 800640e:	f7fa fb7b 	bl	8000b08 <__aeabi_dcmpeq>
 8006412:	b918      	cbnz	r0, 800641c <__cvt+0x8c>
 8006414:	f1c6 0601 	rsb	r6, r6, #1
 8006418:	f8ca 6000 	str.w	r6, [sl]
 800641c:	f8da 3000 	ldr.w	r3, [sl]
 8006420:	4499      	add	r9, r3
 8006422:	2200      	movs	r2, #0
 8006424:	2300      	movs	r3, #0
 8006426:	4620      	mov	r0, r4
 8006428:	4629      	mov	r1, r5
 800642a:	f7fa fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 800642e:	b108      	cbz	r0, 8006434 <__cvt+0xa4>
 8006430:	f8cd 900c 	str.w	r9, [sp, #12]
 8006434:	2230      	movs	r2, #48	; 0x30
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	454b      	cmp	r3, r9
 800643a:	d307      	bcc.n	800644c <__cvt+0xbc>
 800643c:	9b03      	ldr	r3, [sp, #12]
 800643e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006440:	1bdb      	subs	r3, r3, r7
 8006442:	4638      	mov	r0, r7
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	b004      	add	sp, #16
 8006448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	9103      	str	r1, [sp, #12]
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e7f0      	b.n	8006436 <__cvt+0xa6>

08006454 <__exponent>:
 8006454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006456:	4603      	mov	r3, r0
 8006458:	2900      	cmp	r1, #0
 800645a:	bfb8      	it	lt
 800645c:	4249      	neglt	r1, r1
 800645e:	f803 2b02 	strb.w	r2, [r3], #2
 8006462:	bfb4      	ite	lt
 8006464:	222d      	movlt	r2, #45	; 0x2d
 8006466:	222b      	movge	r2, #43	; 0x2b
 8006468:	2909      	cmp	r1, #9
 800646a:	7042      	strb	r2, [r0, #1]
 800646c:	dd2a      	ble.n	80064c4 <__exponent+0x70>
 800646e:	f10d 0407 	add.w	r4, sp, #7
 8006472:	46a4      	mov	ip, r4
 8006474:	270a      	movs	r7, #10
 8006476:	46a6      	mov	lr, r4
 8006478:	460a      	mov	r2, r1
 800647a:	fb91 f6f7 	sdiv	r6, r1, r7
 800647e:	fb07 1516 	mls	r5, r7, r6, r1
 8006482:	3530      	adds	r5, #48	; 0x30
 8006484:	2a63      	cmp	r2, #99	; 0x63
 8006486:	f104 34ff 	add.w	r4, r4, #4294967295
 800648a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800648e:	4631      	mov	r1, r6
 8006490:	dcf1      	bgt.n	8006476 <__exponent+0x22>
 8006492:	3130      	adds	r1, #48	; 0x30
 8006494:	f1ae 0502 	sub.w	r5, lr, #2
 8006498:	f804 1c01 	strb.w	r1, [r4, #-1]
 800649c:	1c44      	adds	r4, r0, #1
 800649e:	4629      	mov	r1, r5
 80064a0:	4561      	cmp	r1, ip
 80064a2:	d30a      	bcc.n	80064ba <__exponent+0x66>
 80064a4:	f10d 0209 	add.w	r2, sp, #9
 80064a8:	eba2 020e 	sub.w	r2, r2, lr
 80064ac:	4565      	cmp	r5, ip
 80064ae:	bf88      	it	hi
 80064b0:	2200      	movhi	r2, #0
 80064b2:	4413      	add	r3, r2
 80064b4:	1a18      	subs	r0, r3, r0
 80064b6:	b003      	add	sp, #12
 80064b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064c2:	e7ed      	b.n	80064a0 <__exponent+0x4c>
 80064c4:	2330      	movs	r3, #48	; 0x30
 80064c6:	3130      	adds	r1, #48	; 0x30
 80064c8:	7083      	strb	r3, [r0, #2]
 80064ca:	70c1      	strb	r1, [r0, #3]
 80064cc:	1d03      	adds	r3, r0, #4
 80064ce:	e7f1      	b.n	80064b4 <__exponent+0x60>

080064d0 <_printf_float>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	ed2d 8b02 	vpush	{d8}
 80064d8:	b08d      	sub	sp, #52	; 0x34
 80064da:	460c      	mov	r4, r1
 80064dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064e0:	4616      	mov	r6, r2
 80064e2:	461f      	mov	r7, r3
 80064e4:	4605      	mov	r5, r0
 80064e6:	f002 fe89 	bl	80091fc <_localeconv_r>
 80064ea:	f8d0 a000 	ldr.w	sl, [r0]
 80064ee:	4650      	mov	r0, sl
 80064f0:	f7f9 fe8e 	bl	8000210 <strlen>
 80064f4:	2300      	movs	r3, #0
 80064f6:	930a      	str	r3, [sp, #40]	; 0x28
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006500:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006504:	3307      	adds	r3, #7
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	f103 0208 	add.w	r2, r3, #8
 800650e:	f8c8 2000 	str.w	r2, [r8]
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800651a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800651e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006522:	9307      	str	r3, [sp, #28]
 8006524:	f8cd 8018 	str.w	r8, [sp, #24]
 8006528:	ee08 0a10 	vmov	s16, r0
 800652c:	4b9f      	ldr	r3, [pc, #636]	; (80067ac <_printf_float+0x2dc>)
 800652e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	f7fa fb19 	bl	8000b6c <__aeabi_dcmpun>
 800653a:	bb88      	cbnz	r0, 80065a0 <_printf_float+0xd0>
 800653c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006540:	4b9a      	ldr	r3, [pc, #616]	; (80067ac <_printf_float+0x2dc>)
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	f7fa faf3 	bl	8000b30 <__aeabi_dcmple>
 800654a:	bb48      	cbnz	r0, 80065a0 <_printf_float+0xd0>
 800654c:	2200      	movs	r2, #0
 800654e:	2300      	movs	r3, #0
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7fa fae2 	bl	8000b1c <__aeabi_dcmplt>
 8006558:	b110      	cbz	r0, 8006560 <_printf_float+0x90>
 800655a:	232d      	movs	r3, #45	; 0x2d
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006560:	4b93      	ldr	r3, [pc, #588]	; (80067b0 <_printf_float+0x2e0>)
 8006562:	4894      	ldr	r0, [pc, #592]	; (80067b4 <_printf_float+0x2e4>)
 8006564:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006568:	bf94      	ite	ls
 800656a:	4698      	movls	r8, r3
 800656c:	4680      	movhi	r8, r0
 800656e:	2303      	movs	r3, #3
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	9b05      	ldr	r3, [sp, #20]
 8006574:	f023 0204 	bic.w	r2, r3, #4
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	f04f 0900 	mov.w	r9, #0
 800657e:	9700      	str	r7, [sp, #0]
 8006580:	4633      	mov	r3, r6
 8006582:	aa0b      	add	r2, sp, #44	; 0x2c
 8006584:	4621      	mov	r1, r4
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f9d8 	bl	800693c <_printf_common>
 800658c:	3001      	adds	r0, #1
 800658e:	f040 8090 	bne.w	80066b2 <_printf_float+0x1e2>
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	b00d      	add	sp, #52	; 0x34
 8006598:	ecbd 8b02 	vpop	{d8}
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	4649      	mov	r1, r9
 80065a8:	f7fa fae0 	bl	8000b6c <__aeabi_dcmpun>
 80065ac:	b140      	cbz	r0, 80065c0 <_printf_float+0xf0>
 80065ae:	464b      	mov	r3, r9
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bfbc      	itt	lt
 80065b4:	232d      	movlt	r3, #45	; 0x2d
 80065b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065ba:	487f      	ldr	r0, [pc, #508]	; (80067b8 <_printf_float+0x2e8>)
 80065bc:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <_printf_float+0x2ec>)
 80065be:	e7d1      	b.n	8006564 <_printf_float+0x94>
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065c6:	9206      	str	r2, [sp, #24]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	d13f      	bne.n	800664c <_printf_float+0x17c>
 80065cc:	2306      	movs	r3, #6
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	9b05      	ldr	r3, [sp, #20]
 80065d2:	6861      	ldr	r1, [r4, #4]
 80065d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065d8:	2300      	movs	r3, #0
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	ab0a      	add	r3, sp, #40	; 0x28
 80065de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065e2:	ab09      	add	r3, sp, #36	; 0x24
 80065e4:	ec49 8b10 	vmov	d0, r8, r9
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065f0:	4628      	mov	r0, r5
 80065f2:	f7ff fecd 	bl	8006390 <__cvt>
 80065f6:	9b06      	ldr	r3, [sp, #24]
 80065f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065fa:	2b47      	cmp	r3, #71	; 0x47
 80065fc:	4680      	mov	r8, r0
 80065fe:	d108      	bne.n	8006612 <_printf_float+0x142>
 8006600:	1cc8      	adds	r0, r1, #3
 8006602:	db02      	blt.n	800660a <_printf_float+0x13a>
 8006604:	6863      	ldr	r3, [r4, #4]
 8006606:	4299      	cmp	r1, r3
 8006608:	dd41      	ble.n	800668e <_printf_float+0x1be>
 800660a:	f1ab 0b02 	sub.w	fp, fp, #2
 800660e:	fa5f fb8b 	uxtb.w	fp, fp
 8006612:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006616:	d820      	bhi.n	800665a <_printf_float+0x18a>
 8006618:	3901      	subs	r1, #1
 800661a:	465a      	mov	r2, fp
 800661c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006620:	9109      	str	r1, [sp, #36]	; 0x24
 8006622:	f7ff ff17 	bl	8006454 <__exponent>
 8006626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006628:	1813      	adds	r3, r2, r0
 800662a:	2a01      	cmp	r2, #1
 800662c:	4681      	mov	r9, r0
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	dc02      	bgt.n	8006638 <_printf_float+0x168>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	07d2      	lsls	r2, r2, #31
 8006636:	d501      	bpl.n	800663c <_printf_float+0x16c>
 8006638:	3301      	adds	r3, #1
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006640:	2b00      	cmp	r3, #0
 8006642:	d09c      	beq.n	800657e <_printf_float+0xae>
 8006644:	232d      	movs	r3, #45	; 0x2d
 8006646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664a:	e798      	b.n	800657e <_printf_float+0xae>
 800664c:	9a06      	ldr	r2, [sp, #24]
 800664e:	2a47      	cmp	r2, #71	; 0x47
 8006650:	d1be      	bne.n	80065d0 <_printf_float+0x100>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1bc      	bne.n	80065d0 <_printf_float+0x100>
 8006656:	2301      	movs	r3, #1
 8006658:	e7b9      	b.n	80065ce <_printf_float+0xfe>
 800665a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800665e:	d118      	bne.n	8006692 <_printf_float+0x1c2>
 8006660:	2900      	cmp	r1, #0
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	dd0b      	ble.n	800667e <_printf_float+0x1ae>
 8006666:	6121      	str	r1, [r4, #16]
 8006668:	b913      	cbnz	r3, 8006670 <_printf_float+0x1a0>
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	07d0      	lsls	r0, r2, #31
 800666e:	d502      	bpl.n	8006676 <_printf_float+0x1a6>
 8006670:	3301      	adds	r3, #1
 8006672:	440b      	add	r3, r1
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	65a1      	str	r1, [r4, #88]	; 0x58
 8006678:	f04f 0900 	mov.w	r9, #0
 800667c:	e7de      	b.n	800663c <_printf_float+0x16c>
 800667e:	b913      	cbnz	r3, 8006686 <_printf_float+0x1b6>
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	07d2      	lsls	r2, r2, #31
 8006684:	d501      	bpl.n	800668a <_printf_float+0x1ba>
 8006686:	3302      	adds	r3, #2
 8006688:	e7f4      	b.n	8006674 <_printf_float+0x1a4>
 800668a:	2301      	movs	r3, #1
 800668c:	e7f2      	b.n	8006674 <_printf_float+0x1a4>
 800668e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006694:	4299      	cmp	r1, r3
 8006696:	db05      	blt.n	80066a4 <_printf_float+0x1d4>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	6121      	str	r1, [r4, #16]
 800669c:	07d8      	lsls	r0, r3, #31
 800669e:	d5ea      	bpl.n	8006676 <_printf_float+0x1a6>
 80066a0:	1c4b      	adds	r3, r1, #1
 80066a2:	e7e7      	b.n	8006674 <_printf_float+0x1a4>
 80066a4:	2900      	cmp	r1, #0
 80066a6:	bfd4      	ite	le
 80066a8:	f1c1 0202 	rsble	r2, r1, #2
 80066ac:	2201      	movgt	r2, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	e7e0      	b.n	8006674 <_printf_float+0x1a4>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	055a      	lsls	r2, r3, #21
 80066b6:	d407      	bmi.n	80066c8 <_printf_float+0x1f8>
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	4642      	mov	r2, r8
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	d12c      	bne.n	8006720 <_printf_float+0x250>
 80066c6:	e764      	b.n	8006592 <_printf_float+0xc2>
 80066c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066cc:	f240 80e0 	bls.w	8006890 <_printf_float+0x3c0>
 80066d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066d4:	2200      	movs	r2, #0
 80066d6:	2300      	movs	r3, #0
 80066d8:	f7fa fa16 	bl	8000b08 <__aeabi_dcmpeq>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d034      	beq.n	800674a <_printf_float+0x27a>
 80066e0:	4a37      	ldr	r2, [pc, #220]	; (80067c0 <_printf_float+0x2f0>)
 80066e2:	2301      	movs	r3, #1
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f af51 	beq.w	8006592 <_printf_float+0xc2>
 80066f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066f4:	429a      	cmp	r2, r3
 80066f6:	db02      	blt.n	80066fe <_printf_float+0x22e>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	07d8      	lsls	r0, r3, #31
 80066fc:	d510      	bpl.n	8006720 <_printf_float+0x250>
 80066fe:	ee18 3a10 	vmov	r3, s16
 8006702:	4652      	mov	r2, sl
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	f43f af41 	beq.w	8006592 <_printf_float+0xc2>
 8006710:	f04f 0800 	mov.w	r8, #0
 8006714:	f104 091a 	add.w	r9, r4, #26
 8006718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671a:	3b01      	subs	r3, #1
 800671c:	4543      	cmp	r3, r8
 800671e:	dc09      	bgt.n	8006734 <_printf_float+0x264>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	f100 8105 	bmi.w	8006932 <_printf_float+0x462>
 8006728:	68e0      	ldr	r0, [r4, #12]
 800672a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800672c:	4298      	cmp	r0, r3
 800672e:	bfb8      	it	lt
 8006730:	4618      	movlt	r0, r3
 8006732:	e730      	b.n	8006596 <_printf_float+0xc6>
 8006734:	2301      	movs	r3, #1
 8006736:	464a      	mov	r2, r9
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af27 	beq.w	8006592 <_printf_float+0xc2>
 8006744:	f108 0801 	add.w	r8, r8, #1
 8006748:	e7e6      	b.n	8006718 <_printf_float+0x248>
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc39      	bgt.n	80067c4 <_printf_float+0x2f4>
 8006750:	4a1b      	ldr	r2, [pc, #108]	; (80067c0 <_printf_float+0x2f0>)
 8006752:	2301      	movs	r3, #1
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f af19 	beq.w	8006592 <_printf_float+0xc2>
 8006760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006764:	4313      	orrs	r3, r2
 8006766:	d102      	bne.n	800676e <_printf_float+0x29e>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	07d9      	lsls	r1, r3, #31
 800676c:	d5d8      	bpl.n	8006720 <_printf_float+0x250>
 800676e:	ee18 3a10 	vmov	r3, s16
 8006772:	4652      	mov	r2, sl
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af09 	beq.w	8006592 <_printf_float+0xc2>
 8006780:	f04f 0900 	mov.w	r9, #0
 8006784:	f104 0a1a 	add.w	sl, r4, #26
 8006788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678a:	425b      	negs	r3, r3
 800678c:	454b      	cmp	r3, r9
 800678e:	dc01      	bgt.n	8006794 <_printf_float+0x2c4>
 8006790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006792:	e792      	b.n	80066ba <_printf_float+0x1ea>
 8006794:	2301      	movs	r3, #1
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f aef7 	beq.w	8006592 <_printf_float+0xc2>
 80067a4:	f109 0901 	add.w	r9, r9, #1
 80067a8:	e7ee      	b.n	8006788 <_printf_float+0x2b8>
 80067aa:	bf00      	nop
 80067ac:	7fefffff 	.word	0x7fefffff
 80067b0:	0800ad4c 	.word	0x0800ad4c
 80067b4:	0800ad50 	.word	0x0800ad50
 80067b8:	0800ad58 	.word	0x0800ad58
 80067bc:	0800ad54 	.word	0x0800ad54
 80067c0:	0800ad5c 	.word	0x0800ad5c
 80067c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067c8:	429a      	cmp	r2, r3
 80067ca:	bfa8      	it	ge
 80067cc:	461a      	movge	r2, r3
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	4691      	mov	r9, r2
 80067d2:	dc37      	bgt.n	8006844 <_printf_float+0x374>
 80067d4:	f04f 0b00 	mov.w	fp, #0
 80067d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067dc:	f104 021a 	add.w	r2, r4, #26
 80067e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	eba3 0309 	sub.w	r3, r3, r9
 80067e8:	455b      	cmp	r3, fp
 80067ea:	dc33      	bgt.n	8006854 <_printf_float+0x384>
 80067ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f0:	429a      	cmp	r2, r3
 80067f2:	db3b      	blt.n	800686c <_printf_float+0x39c>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	07da      	lsls	r2, r3, #31
 80067f8:	d438      	bmi.n	800686c <_printf_float+0x39c>
 80067fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fc:	9a05      	ldr	r2, [sp, #20]
 80067fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006800:	1a9a      	subs	r2, r3, r2
 8006802:	eba3 0901 	sub.w	r9, r3, r1
 8006806:	4591      	cmp	r9, r2
 8006808:	bfa8      	it	ge
 800680a:	4691      	movge	r9, r2
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	dc35      	bgt.n	800687e <_printf_float+0x3ae>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681a:	f104 0a1a 	add.w	sl, r4, #26
 800681e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	eba3 0309 	sub.w	r3, r3, r9
 8006828:	4543      	cmp	r3, r8
 800682a:	f77f af79 	ble.w	8006720 <_printf_float+0x250>
 800682e:	2301      	movs	r3, #1
 8006830:	4652      	mov	r2, sl
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f aeaa 	beq.w	8006592 <_printf_float+0xc2>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	e7ec      	b.n	800681e <_printf_float+0x34e>
 8006844:	4613      	mov	r3, r2
 8006846:	4631      	mov	r1, r6
 8006848:	4642      	mov	r2, r8
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d1c0      	bne.n	80067d4 <_printf_float+0x304>
 8006852:	e69e      	b.n	8006592 <_printf_float+0xc2>
 8006854:	2301      	movs	r3, #1
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	9205      	str	r2, [sp, #20]
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f ae97 	beq.w	8006592 <_printf_float+0xc2>
 8006864:	9a05      	ldr	r2, [sp, #20]
 8006866:	f10b 0b01 	add.w	fp, fp, #1
 800686a:	e7b9      	b.n	80067e0 <_printf_float+0x310>
 800686c:	ee18 3a10 	vmov	r3, s16
 8006870:	4652      	mov	r2, sl
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	d1be      	bne.n	80067fa <_printf_float+0x32a>
 800687c:	e689      	b.n	8006592 <_printf_float+0xc2>
 800687e:	9a05      	ldr	r2, [sp, #20]
 8006880:	464b      	mov	r3, r9
 8006882:	4442      	add	r2, r8
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	d1c1      	bne.n	8006812 <_printf_float+0x342>
 800688e:	e680      	b.n	8006592 <_printf_float+0xc2>
 8006890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006892:	2a01      	cmp	r2, #1
 8006894:	dc01      	bgt.n	800689a <_printf_float+0x3ca>
 8006896:	07db      	lsls	r3, r3, #31
 8006898:	d538      	bpl.n	800690c <_printf_float+0x43c>
 800689a:	2301      	movs	r3, #1
 800689c:	4642      	mov	r2, r8
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	f43f ae74 	beq.w	8006592 <_printf_float+0xc2>
 80068aa:	ee18 3a10 	vmov	r3, s16
 80068ae:	4652      	mov	r2, sl
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f ae6b 	beq.w	8006592 <_printf_float+0xc2>
 80068bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068c0:	2200      	movs	r2, #0
 80068c2:	2300      	movs	r3, #0
 80068c4:	f7fa f920 	bl	8000b08 <__aeabi_dcmpeq>
 80068c8:	b9d8      	cbnz	r0, 8006902 <_printf_float+0x432>
 80068ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068cc:	f108 0201 	add.w	r2, r8, #1
 80068d0:	3b01      	subs	r3, #1
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	d10e      	bne.n	80068fa <_printf_float+0x42a>
 80068dc:	e659      	b.n	8006592 <_printf_float+0xc2>
 80068de:	2301      	movs	r3, #1
 80068e0:	4652      	mov	r2, sl
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	f43f ae52 	beq.w	8006592 <_printf_float+0xc2>
 80068ee:	f108 0801 	add.w	r8, r8, #1
 80068f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f4:	3b01      	subs	r3, #1
 80068f6:	4543      	cmp	r3, r8
 80068f8:	dcf1      	bgt.n	80068de <_printf_float+0x40e>
 80068fa:	464b      	mov	r3, r9
 80068fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006900:	e6dc      	b.n	80066bc <_printf_float+0x1ec>
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	f104 0a1a 	add.w	sl, r4, #26
 800690a:	e7f2      	b.n	80068f2 <_printf_float+0x422>
 800690c:	2301      	movs	r3, #1
 800690e:	4642      	mov	r2, r8
 8006910:	e7df      	b.n	80068d2 <_printf_float+0x402>
 8006912:	2301      	movs	r3, #1
 8006914:	464a      	mov	r2, r9
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f ae38 	beq.w	8006592 <_printf_float+0xc2>
 8006922:	f108 0801 	add.w	r8, r8, #1
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800692a:	1a5b      	subs	r3, r3, r1
 800692c:	4543      	cmp	r3, r8
 800692e:	dcf0      	bgt.n	8006912 <_printf_float+0x442>
 8006930:	e6fa      	b.n	8006728 <_printf_float+0x258>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	f104 0919 	add.w	r9, r4, #25
 800693a:	e7f4      	b.n	8006926 <_printf_float+0x456>

0800693c <_printf_common>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	4616      	mov	r6, r2
 8006942:	4699      	mov	r9, r3
 8006944:	688a      	ldr	r2, [r1, #8]
 8006946:	690b      	ldr	r3, [r1, #16]
 8006948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800694c:	4293      	cmp	r3, r2
 800694e:	bfb8      	it	lt
 8006950:	4613      	movlt	r3, r2
 8006952:	6033      	str	r3, [r6, #0]
 8006954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006958:	4607      	mov	r7, r0
 800695a:	460c      	mov	r4, r1
 800695c:	b10a      	cbz	r2, 8006962 <_printf_common+0x26>
 800695e:	3301      	adds	r3, #1
 8006960:	6033      	str	r3, [r6, #0]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	0699      	lsls	r1, r3, #26
 8006966:	bf42      	ittt	mi
 8006968:	6833      	ldrmi	r3, [r6, #0]
 800696a:	3302      	addmi	r3, #2
 800696c:	6033      	strmi	r3, [r6, #0]
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	f015 0506 	ands.w	r5, r5, #6
 8006974:	d106      	bne.n	8006984 <_printf_common+0x48>
 8006976:	f104 0a19 	add.w	sl, r4, #25
 800697a:	68e3      	ldr	r3, [r4, #12]
 800697c:	6832      	ldr	r2, [r6, #0]
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	42ab      	cmp	r3, r5
 8006982:	dc26      	bgt.n	80069d2 <_printf_common+0x96>
 8006984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006988:	1e13      	subs	r3, r2, #0
 800698a:	6822      	ldr	r2, [r4, #0]
 800698c:	bf18      	it	ne
 800698e:	2301      	movne	r3, #1
 8006990:	0692      	lsls	r2, r2, #26
 8006992:	d42b      	bmi.n	80069ec <_printf_common+0xb0>
 8006994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006998:	4649      	mov	r1, r9
 800699a:	4638      	mov	r0, r7
 800699c:	47c0      	blx	r8
 800699e:	3001      	adds	r0, #1
 80069a0:	d01e      	beq.n	80069e0 <_printf_common+0xa4>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	68e5      	ldr	r5, [r4, #12]
 80069a6:	6832      	ldr	r2, [r6, #0]
 80069a8:	f003 0306 	and.w	r3, r3, #6
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	bf08      	it	eq
 80069b0:	1aad      	subeq	r5, r5, r2
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	6922      	ldr	r2, [r4, #16]
 80069b6:	bf0c      	ite	eq
 80069b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069bc:	2500      	movne	r5, #0
 80069be:	4293      	cmp	r3, r2
 80069c0:	bfc4      	itt	gt
 80069c2:	1a9b      	subgt	r3, r3, r2
 80069c4:	18ed      	addgt	r5, r5, r3
 80069c6:	2600      	movs	r6, #0
 80069c8:	341a      	adds	r4, #26
 80069ca:	42b5      	cmp	r5, r6
 80069cc:	d11a      	bne.n	8006a04 <_printf_common+0xc8>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e008      	b.n	80069e4 <_printf_common+0xa8>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4649      	mov	r1, r9
 80069d8:	4638      	mov	r0, r7
 80069da:	47c0      	blx	r8
 80069dc:	3001      	adds	r0, #1
 80069de:	d103      	bne.n	80069e8 <_printf_common+0xac>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	3501      	adds	r5, #1
 80069ea:	e7c6      	b.n	800697a <_printf_common+0x3e>
 80069ec:	18e1      	adds	r1, r4, r3
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	2030      	movs	r0, #48	; 0x30
 80069f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069f6:	4422      	add	r2, r4
 80069f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a00:	3302      	adds	r3, #2
 8006a02:	e7c7      	b.n	8006994 <_printf_common+0x58>
 8006a04:	2301      	movs	r3, #1
 8006a06:	4622      	mov	r2, r4
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c0      	blx	r8
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d0e6      	beq.n	80069e0 <_printf_common+0xa4>
 8006a12:	3601      	adds	r6, #1
 8006a14:	e7d9      	b.n	80069ca <_printf_common+0x8e>
	...

08006a18 <_printf_i>:
 8006a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	7e0f      	ldrb	r7, [r1, #24]
 8006a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a20:	2f78      	cmp	r7, #120	; 0x78
 8006a22:	4691      	mov	r9, r2
 8006a24:	4680      	mov	r8, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	469a      	mov	sl, r3
 8006a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a2e:	d807      	bhi.n	8006a40 <_printf_i+0x28>
 8006a30:	2f62      	cmp	r7, #98	; 0x62
 8006a32:	d80a      	bhi.n	8006a4a <_printf_i+0x32>
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f000 80d8 	beq.w	8006bea <_printf_i+0x1d2>
 8006a3a:	2f58      	cmp	r7, #88	; 0x58
 8006a3c:	f000 80a3 	beq.w	8006b86 <_printf_i+0x16e>
 8006a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a48:	e03a      	b.n	8006ac0 <_printf_i+0xa8>
 8006a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a4e:	2b15      	cmp	r3, #21
 8006a50:	d8f6      	bhi.n	8006a40 <_printf_i+0x28>
 8006a52:	a101      	add	r1, pc, #4	; (adr r1, 8006a58 <_printf_i+0x40>)
 8006a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006ac5 	.word	0x08006ac5
 8006a60:	08006a41 	.word	0x08006a41
 8006a64:	08006a41 	.word	0x08006a41
 8006a68:	08006a41 	.word	0x08006a41
 8006a6c:	08006a41 	.word	0x08006a41
 8006a70:	08006ac5 	.word	0x08006ac5
 8006a74:	08006a41 	.word	0x08006a41
 8006a78:	08006a41 	.word	0x08006a41
 8006a7c:	08006a41 	.word	0x08006a41
 8006a80:	08006a41 	.word	0x08006a41
 8006a84:	08006bd1 	.word	0x08006bd1
 8006a88:	08006af5 	.word	0x08006af5
 8006a8c:	08006bb3 	.word	0x08006bb3
 8006a90:	08006a41 	.word	0x08006a41
 8006a94:	08006a41 	.word	0x08006a41
 8006a98:	08006bf3 	.word	0x08006bf3
 8006a9c:	08006a41 	.word	0x08006a41
 8006aa0:	08006af5 	.word	0x08006af5
 8006aa4:	08006a41 	.word	0x08006a41
 8006aa8:	08006a41 	.word	0x08006a41
 8006aac:	08006bbb 	.word	0x08006bbb
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	602a      	str	r2, [r5, #0]
 8006ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0a3      	b.n	8006c0c <_printf_i+0x1f4>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	6829      	ldr	r1, [r5, #0]
 8006ac8:	0606      	lsls	r6, r0, #24
 8006aca:	f101 0304 	add.w	r3, r1, #4
 8006ace:	d50a      	bpl.n	8006ae6 <_printf_i+0xce>
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	da03      	bge.n	8006ae0 <_printf_i+0xc8>
 8006ad8:	232d      	movs	r3, #45	; 0x2d
 8006ada:	4276      	negs	r6, r6
 8006adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae0:	485e      	ldr	r0, [pc, #376]	; (8006c5c <_printf_i+0x244>)
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	e019      	b.n	8006b1a <_printf_i+0x102>
 8006ae6:	680e      	ldr	r6, [r1, #0]
 8006ae8:	602b      	str	r3, [r5, #0]
 8006aea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006aee:	bf18      	it	ne
 8006af0:	b236      	sxthne	r6, r6
 8006af2:	e7ef      	b.n	8006ad4 <_printf_i+0xbc>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	1d19      	adds	r1, r3, #4
 8006afa:	6029      	str	r1, [r5, #0]
 8006afc:	0601      	lsls	r1, r0, #24
 8006afe:	d501      	bpl.n	8006b04 <_printf_i+0xec>
 8006b00:	681e      	ldr	r6, [r3, #0]
 8006b02:	e002      	b.n	8006b0a <_printf_i+0xf2>
 8006b04:	0646      	lsls	r6, r0, #25
 8006b06:	d5fb      	bpl.n	8006b00 <_printf_i+0xe8>
 8006b08:	881e      	ldrh	r6, [r3, #0]
 8006b0a:	4854      	ldr	r0, [pc, #336]	; (8006c5c <_printf_i+0x244>)
 8006b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b0e:	bf0c      	ite	eq
 8006b10:	2308      	moveq	r3, #8
 8006b12:	230a      	movne	r3, #10
 8006b14:	2100      	movs	r1, #0
 8006b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b1a:	6865      	ldr	r5, [r4, #4]
 8006b1c:	60a5      	str	r5, [r4, #8]
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	bfa2      	ittt	ge
 8006b22:	6821      	ldrge	r1, [r4, #0]
 8006b24:	f021 0104 	bicge.w	r1, r1, #4
 8006b28:	6021      	strge	r1, [r4, #0]
 8006b2a:	b90e      	cbnz	r6, 8006b30 <_printf_i+0x118>
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	d04d      	beq.n	8006bcc <_printf_i+0x1b4>
 8006b30:	4615      	mov	r5, r2
 8006b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b36:	fb03 6711 	mls	r7, r3, r1, r6
 8006b3a:	5dc7      	ldrb	r7, [r0, r7]
 8006b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b40:	4637      	mov	r7, r6
 8006b42:	42bb      	cmp	r3, r7
 8006b44:	460e      	mov	r6, r1
 8006b46:	d9f4      	bls.n	8006b32 <_printf_i+0x11a>
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d10b      	bne.n	8006b64 <_printf_i+0x14c>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	07de      	lsls	r6, r3, #31
 8006b50:	d508      	bpl.n	8006b64 <_printf_i+0x14c>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	6861      	ldr	r1, [r4, #4]
 8006b56:	4299      	cmp	r1, r3
 8006b58:	bfde      	ittt	le
 8006b5a:	2330      	movle	r3, #48	; 0x30
 8006b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b64:	1b52      	subs	r2, r2, r5
 8006b66:	6122      	str	r2, [r4, #16]
 8006b68:	f8cd a000 	str.w	sl, [sp]
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	aa03      	add	r2, sp, #12
 8006b70:	4621      	mov	r1, r4
 8006b72:	4640      	mov	r0, r8
 8006b74:	f7ff fee2 	bl	800693c <_printf_common>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d14c      	bne.n	8006c16 <_printf_i+0x1fe>
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	b004      	add	sp, #16
 8006b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b86:	4835      	ldr	r0, [pc, #212]	; (8006c5c <_printf_i+0x244>)
 8006b88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b8c:	6829      	ldr	r1, [r5, #0]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b94:	6029      	str	r1, [r5, #0]
 8006b96:	061d      	lsls	r5, r3, #24
 8006b98:	d514      	bpl.n	8006bc4 <_printf_i+0x1ac>
 8006b9a:	07df      	lsls	r7, r3, #31
 8006b9c:	bf44      	itt	mi
 8006b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba2:	6023      	strmi	r3, [r4, #0]
 8006ba4:	b91e      	cbnz	r6, 8006bae <_printf_i+0x196>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	f023 0320 	bic.w	r3, r3, #32
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	2310      	movs	r3, #16
 8006bb0:	e7b0      	b.n	8006b14 <_printf_i+0xfc>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	f043 0320 	orr.w	r3, r3, #32
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	2378      	movs	r3, #120	; 0x78
 8006bbc:	4828      	ldr	r0, [pc, #160]	; (8006c60 <_printf_i+0x248>)
 8006bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bc2:	e7e3      	b.n	8006b8c <_printf_i+0x174>
 8006bc4:	0659      	lsls	r1, r3, #25
 8006bc6:	bf48      	it	mi
 8006bc8:	b2b6      	uxthmi	r6, r6
 8006bca:	e7e6      	b.n	8006b9a <_printf_i+0x182>
 8006bcc:	4615      	mov	r5, r2
 8006bce:	e7bb      	b.n	8006b48 <_printf_i+0x130>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	6826      	ldr	r6, [r4, #0]
 8006bd4:	6961      	ldr	r1, [r4, #20]
 8006bd6:	1d18      	adds	r0, r3, #4
 8006bd8:	6028      	str	r0, [r5, #0]
 8006bda:	0635      	lsls	r5, r6, #24
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	d501      	bpl.n	8006be4 <_printf_i+0x1cc>
 8006be0:	6019      	str	r1, [r3, #0]
 8006be2:	e002      	b.n	8006bea <_printf_i+0x1d2>
 8006be4:	0670      	lsls	r0, r6, #25
 8006be6:	d5fb      	bpl.n	8006be0 <_printf_i+0x1c8>
 8006be8:	8019      	strh	r1, [r3, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	4615      	mov	r5, r2
 8006bf0:	e7ba      	b.n	8006b68 <_printf_i+0x150>
 8006bf2:	682b      	ldr	r3, [r5, #0]
 8006bf4:	1d1a      	adds	r2, r3, #4
 8006bf6:	602a      	str	r2, [r5, #0]
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	6862      	ldr	r2, [r4, #4]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7f9 fb0e 	bl	8000220 <memchr>
 8006c04:	b108      	cbz	r0, 8006c0a <_printf_i+0x1f2>
 8006c06:	1b40      	subs	r0, r0, r5
 8006c08:	6060      	str	r0, [r4, #4]
 8006c0a:	6863      	ldr	r3, [r4, #4]
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c14:	e7a8      	b.n	8006b68 <_printf_i+0x150>
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	47d0      	blx	sl
 8006c20:	3001      	adds	r0, #1
 8006c22:	d0ab      	beq.n	8006b7c <_printf_i+0x164>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	079b      	lsls	r3, r3, #30
 8006c28:	d413      	bmi.n	8006c52 <_printf_i+0x23a>
 8006c2a:	68e0      	ldr	r0, [r4, #12]
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	4298      	cmp	r0, r3
 8006c30:	bfb8      	it	lt
 8006c32:	4618      	movlt	r0, r3
 8006c34:	e7a4      	b.n	8006b80 <_printf_i+0x168>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	47d0      	blx	sl
 8006c40:	3001      	adds	r0, #1
 8006c42:	d09b      	beq.n	8006b7c <_printf_i+0x164>
 8006c44:	3501      	adds	r5, #1
 8006c46:	68e3      	ldr	r3, [r4, #12]
 8006c48:	9903      	ldr	r1, [sp, #12]
 8006c4a:	1a5b      	subs	r3, r3, r1
 8006c4c:	42ab      	cmp	r3, r5
 8006c4e:	dcf2      	bgt.n	8006c36 <_printf_i+0x21e>
 8006c50:	e7eb      	b.n	8006c2a <_printf_i+0x212>
 8006c52:	2500      	movs	r5, #0
 8006c54:	f104 0619 	add.w	r6, r4, #25
 8006c58:	e7f5      	b.n	8006c46 <_printf_i+0x22e>
 8006c5a:	bf00      	nop
 8006c5c:	0800ad5e 	.word	0x0800ad5e
 8006c60:	0800ad6f 	.word	0x0800ad6f

08006c64 <_scanf_float>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	b087      	sub	sp, #28
 8006c6a:	4617      	mov	r7, r2
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	688b      	ldr	r3, [r1, #8]
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c76:	bf83      	ittte	hi
 8006c78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c7c:	195b      	addhi	r3, r3, r5
 8006c7e:	9302      	strhi	r3, [sp, #8]
 8006c80:	2300      	movls	r3, #0
 8006c82:	bf86      	itte	hi
 8006c84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c88:	608b      	strhi	r3, [r1, #8]
 8006c8a:	9302      	strls	r3, [sp, #8]
 8006c8c:	680b      	ldr	r3, [r1, #0]
 8006c8e:	468b      	mov	fp, r1
 8006c90:	2500      	movs	r5, #0
 8006c92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c96:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	465e      	mov	r6, fp
 8006ca4:	46aa      	mov	sl, r5
 8006ca6:	46a9      	mov	r9, r5
 8006ca8:	9501      	str	r5, [sp, #4]
 8006caa:	68a2      	ldr	r2, [r4, #8]
 8006cac:	b152      	cbz	r2, 8006cc4 <_scanf_float+0x60>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b4e      	cmp	r3, #78	; 0x4e
 8006cb4:	d864      	bhi.n	8006d80 <_scanf_float+0x11c>
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d83c      	bhi.n	8006d34 <_scanf_float+0xd0>
 8006cba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006cbe:	b2c8      	uxtb	r0, r1
 8006cc0:	280e      	cmp	r0, #14
 8006cc2:	d93a      	bls.n	8006d3a <_scanf_float+0xd6>
 8006cc4:	f1b9 0f00 	cmp.w	r9, #0
 8006cc8:	d003      	beq.n	8006cd2 <_scanf_float+0x6e>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	f1ba 0f01 	cmp.w	sl, #1
 8006cda:	f200 8113 	bhi.w	8006f04 <_scanf_float+0x2a0>
 8006cde:	455e      	cmp	r6, fp
 8006ce0:	f200 8105 	bhi.w	8006eee <_scanf_float+0x28a>
 8006ce4:	2501      	movs	r5, #1
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	b007      	add	sp, #28
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006cf2:	2a0d      	cmp	r2, #13
 8006cf4:	d8e6      	bhi.n	8006cc4 <_scanf_float+0x60>
 8006cf6:	a101      	add	r1, pc, #4	; (adr r1, 8006cfc <_scanf_float+0x98>)
 8006cf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cfc:	08006e3b 	.word	0x08006e3b
 8006d00:	08006cc5 	.word	0x08006cc5
 8006d04:	08006cc5 	.word	0x08006cc5
 8006d08:	08006cc5 	.word	0x08006cc5
 8006d0c:	08006e9b 	.word	0x08006e9b
 8006d10:	08006e73 	.word	0x08006e73
 8006d14:	08006cc5 	.word	0x08006cc5
 8006d18:	08006cc5 	.word	0x08006cc5
 8006d1c:	08006e49 	.word	0x08006e49
 8006d20:	08006cc5 	.word	0x08006cc5
 8006d24:	08006cc5 	.word	0x08006cc5
 8006d28:	08006cc5 	.word	0x08006cc5
 8006d2c:	08006cc5 	.word	0x08006cc5
 8006d30:	08006e01 	.word	0x08006e01
 8006d34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d38:	e7db      	b.n	8006cf2 <_scanf_float+0x8e>
 8006d3a:	290e      	cmp	r1, #14
 8006d3c:	d8c2      	bhi.n	8006cc4 <_scanf_float+0x60>
 8006d3e:	a001      	add	r0, pc, #4	; (adr r0, 8006d44 <_scanf_float+0xe0>)
 8006d40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d44:	08006df3 	.word	0x08006df3
 8006d48:	08006cc5 	.word	0x08006cc5
 8006d4c:	08006df3 	.word	0x08006df3
 8006d50:	08006e87 	.word	0x08006e87
 8006d54:	08006cc5 	.word	0x08006cc5
 8006d58:	08006da1 	.word	0x08006da1
 8006d5c:	08006ddd 	.word	0x08006ddd
 8006d60:	08006ddd 	.word	0x08006ddd
 8006d64:	08006ddd 	.word	0x08006ddd
 8006d68:	08006ddd 	.word	0x08006ddd
 8006d6c:	08006ddd 	.word	0x08006ddd
 8006d70:	08006ddd 	.word	0x08006ddd
 8006d74:	08006ddd 	.word	0x08006ddd
 8006d78:	08006ddd 	.word	0x08006ddd
 8006d7c:	08006ddd 	.word	0x08006ddd
 8006d80:	2b6e      	cmp	r3, #110	; 0x6e
 8006d82:	d809      	bhi.n	8006d98 <_scanf_float+0x134>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d8b2      	bhi.n	8006cee <_scanf_float+0x8a>
 8006d88:	2b54      	cmp	r3, #84	; 0x54
 8006d8a:	d077      	beq.n	8006e7c <_scanf_float+0x218>
 8006d8c:	2b59      	cmp	r3, #89	; 0x59
 8006d8e:	d199      	bne.n	8006cc4 <_scanf_float+0x60>
 8006d90:	2d07      	cmp	r5, #7
 8006d92:	d197      	bne.n	8006cc4 <_scanf_float+0x60>
 8006d94:	2508      	movs	r5, #8
 8006d96:	e029      	b.n	8006dec <_scanf_float+0x188>
 8006d98:	2b74      	cmp	r3, #116	; 0x74
 8006d9a:	d06f      	beq.n	8006e7c <_scanf_float+0x218>
 8006d9c:	2b79      	cmp	r3, #121	; 0x79
 8006d9e:	e7f6      	b.n	8006d8e <_scanf_float+0x12a>
 8006da0:	6821      	ldr	r1, [r4, #0]
 8006da2:	05c8      	lsls	r0, r1, #23
 8006da4:	d51a      	bpl.n	8006ddc <_scanf_float+0x178>
 8006da6:	9b02      	ldr	r3, [sp, #8]
 8006da8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006dac:	6021      	str	r1, [r4, #0]
 8006dae:	f109 0901 	add.w	r9, r9, #1
 8006db2:	b11b      	cbz	r3, 8006dbc <_scanf_float+0x158>
 8006db4:	3b01      	subs	r3, #1
 8006db6:	3201      	adds	r2, #1
 8006db8:	9302      	str	r3, [sp, #8]
 8006dba:	60a2      	str	r2, [r4, #8]
 8006dbc:	68a3      	ldr	r3, [r4, #8]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	60a3      	str	r3, [r4, #8]
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	f340 8084 	ble.w	8006edc <_scanf_float+0x278>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	e766      	b.n	8006caa <_scanf_float+0x46>
 8006ddc:	eb1a 0f05 	cmn.w	sl, r5
 8006de0:	f47f af70 	bne.w	8006cc4 <_scanf_float+0x60>
 8006de4:	6822      	ldr	r2, [r4, #0]
 8006de6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006dea:	6022      	str	r2, [r4, #0]
 8006dec:	f806 3b01 	strb.w	r3, [r6], #1
 8006df0:	e7e4      	b.n	8006dbc <_scanf_float+0x158>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	0610      	lsls	r0, r2, #24
 8006df6:	f57f af65 	bpl.w	8006cc4 <_scanf_float+0x60>
 8006dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dfe:	e7f4      	b.n	8006dea <_scanf_float+0x186>
 8006e00:	f1ba 0f00 	cmp.w	sl, #0
 8006e04:	d10e      	bne.n	8006e24 <_scanf_float+0x1c0>
 8006e06:	f1b9 0f00 	cmp.w	r9, #0
 8006e0a:	d10e      	bne.n	8006e2a <_scanf_float+0x1c6>
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e16:	d108      	bne.n	8006e2a <_scanf_float+0x1c6>
 8006e18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	f04f 0a01 	mov.w	sl, #1
 8006e22:	e7e3      	b.n	8006dec <_scanf_float+0x188>
 8006e24:	f1ba 0f02 	cmp.w	sl, #2
 8006e28:	d055      	beq.n	8006ed6 <_scanf_float+0x272>
 8006e2a:	2d01      	cmp	r5, #1
 8006e2c:	d002      	beq.n	8006e34 <_scanf_float+0x1d0>
 8006e2e:	2d04      	cmp	r5, #4
 8006e30:	f47f af48 	bne.w	8006cc4 <_scanf_float+0x60>
 8006e34:	3501      	adds	r5, #1
 8006e36:	b2ed      	uxtb	r5, r5
 8006e38:	e7d8      	b.n	8006dec <_scanf_float+0x188>
 8006e3a:	f1ba 0f01 	cmp.w	sl, #1
 8006e3e:	f47f af41 	bne.w	8006cc4 <_scanf_float+0x60>
 8006e42:	f04f 0a02 	mov.w	sl, #2
 8006e46:	e7d1      	b.n	8006dec <_scanf_float+0x188>
 8006e48:	b97d      	cbnz	r5, 8006e6a <_scanf_float+0x206>
 8006e4a:	f1b9 0f00 	cmp.w	r9, #0
 8006e4e:	f47f af3c 	bne.w	8006cca <_scanf_float+0x66>
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e5c:	f47f af39 	bne.w	8006cd2 <_scanf_float+0x6e>
 8006e60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e64:	6022      	str	r2, [r4, #0]
 8006e66:	2501      	movs	r5, #1
 8006e68:	e7c0      	b.n	8006dec <_scanf_float+0x188>
 8006e6a:	2d03      	cmp	r5, #3
 8006e6c:	d0e2      	beq.n	8006e34 <_scanf_float+0x1d0>
 8006e6e:	2d05      	cmp	r5, #5
 8006e70:	e7de      	b.n	8006e30 <_scanf_float+0x1cc>
 8006e72:	2d02      	cmp	r5, #2
 8006e74:	f47f af26 	bne.w	8006cc4 <_scanf_float+0x60>
 8006e78:	2503      	movs	r5, #3
 8006e7a:	e7b7      	b.n	8006dec <_scanf_float+0x188>
 8006e7c:	2d06      	cmp	r5, #6
 8006e7e:	f47f af21 	bne.w	8006cc4 <_scanf_float+0x60>
 8006e82:	2507      	movs	r5, #7
 8006e84:	e7b2      	b.n	8006dec <_scanf_float+0x188>
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	0591      	lsls	r1, r2, #22
 8006e8a:	f57f af1b 	bpl.w	8006cc4 <_scanf_float+0x60>
 8006e8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e98:	e7a8      	b.n	8006dec <_scanf_float+0x188>
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ea0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ea4:	d006      	beq.n	8006eb4 <_scanf_float+0x250>
 8006ea6:	0550      	lsls	r0, r2, #21
 8006ea8:	f57f af0c 	bpl.w	8006cc4 <_scanf_float+0x60>
 8006eac:	f1b9 0f00 	cmp.w	r9, #0
 8006eb0:	f43f af0f 	beq.w	8006cd2 <_scanf_float+0x6e>
 8006eb4:	0591      	lsls	r1, r2, #22
 8006eb6:	bf58      	it	pl
 8006eb8:	9901      	ldrpl	r1, [sp, #4]
 8006eba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ebe:	bf58      	it	pl
 8006ec0:	eba9 0101 	subpl.w	r1, r9, r1
 8006ec4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ec8:	bf58      	it	pl
 8006eca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ece:	6022      	str	r2, [r4, #0]
 8006ed0:	f04f 0900 	mov.w	r9, #0
 8006ed4:	e78a      	b.n	8006dec <_scanf_float+0x188>
 8006ed6:	f04f 0a03 	mov.w	sl, #3
 8006eda:	e787      	b.n	8006dec <_scanf_float+0x188>
 8006edc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4798      	blx	r3
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f43f aedf 	beq.w	8006caa <_scanf_float+0x46>
 8006eec:	e6ea      	b.n	8006cc4 <_scanf_float+0x60>
 8006eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ef2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4798      	blx	r3
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	6123      	str	r3, [r4, #16]
 8006f02:	e6ec      	b.n	8006cde <_scanf_float+0x7a>
 8006f04:	1e6b      	subs	r3, r5, #1
 8006f06:	2b06      	cmp	r3, #6
 8006f08:	d825      	bhi.n	8006f56 <_scanf_float+0x2f2>
 8006f0a:	2d02      	cmp	r5, #2
 8006f0c:	d836      	bhi.n	8006f7c <_scanf_float+0x318>
 8006f0e:	455e      	cmp	r6, fp
 8006f10:	f67f aee8 	bls.w	8006ce4 <_scanf_float+0x80>
 8006f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4798      	blx	r3
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	e7f1      	b.n	8006f0e <_scanf_float+0x2aa>
 8006f2a:	9802      	ldr	r0, [sp, #8]
 8006f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f34:	9002      	str	r0, [sp, #8]
 8006f36:	463a      	mov	r2, r7
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4798      	blx	r3
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f46:	fa5f fa8a 	uxtb.w	sl, sl
 8006f4a:	f1ba 0f02 	cmp.w	sl, #2
 8006f4e:	d1ec      	bne.n	8006f2a <_scanf_float+0x2c6>
 8006f50:	3d03      	subs	r5, #3
 8006f52:	b2ed      	uxtb	r5, r5
 8006f54:	1b76      	subs	r6, r6, r5
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	05da      	lsls	r2, r3, #23
 8006f5a:	d52f      	bpl.n	8006fbc <_scanf_float+0x358>
 8006f5c:	055b      	lsls	r3, r3, #21
 8006f5e:	d510      	bpl.n	8006f82 <_scanf_float+0x31e>
 8006f60:	455e      	cmp	r6, fp
 8006f62:	f67f aebf 	bls.w	8006ce4 <_scanf_float+0x80>
 8006f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4640      	mov	r0, r8
 8006f72:	4798      	blx	r3
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	e7f1      	b.n	8006f60 <_scanf_float+0x2fc>
 8006f7c:	46aa      	mov	sl, r5
 8006f7e:	9602      	str	r6, [sp, #8]
 8006f80:	e7df      	b.n	8006f42 <_scanf_float+0x2de>
 8006f82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	2965      	cmp	r1, #101	; 0x65
 8006f8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f92:	6123      	str	r3, [r4, #16]
 8006f94:	d00c      	beq.n	8006fb0 <_scanf_float+0x34c>
 8006f96:	2945      	cmp	r1, #69	; 0x45
 8006f98:	d00a      	beq.n	8006fb0 <_scanf_float+0x34c>
 8006f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f9e:	463a      	mov	r2, r7
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4798      	blx	r3
 8006fa4:	6923      	ldr	r3, [r4, #16]
 8006fa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	1eb5      	subs	r5, r6, #2
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fb4:	463a      	mov	r2, r7
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4798      	blx	r3
 8006fba:	462e      	mov	r6, r5
 8006fbc:	6825      	ldr	r5, [r4, #0]
 8006fbe:	f015 0510 	ands.w	r5, r5, #16
 8006fc2:	d159      	bne.n	8007078 <_scanf_float+0x414>
 8006fc4:	7035      	strb	r5, [r6, #0]
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	d11b      	bne.n	800700a <_scanf_float+0x3a6>
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	eba3 0209 	sub.w	r2, r3, r9
 8006fda:	d123      	bne.n	8007024 <_scanf_float+0x3c0>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4659      	mov	r1, fp
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	f000 fe97 	bl	8007d14 <_strtod_r>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	f012 0f02 	tst.w	r2, #2
 8006fee:	ec57 6b10 	vmov	r6, r7, d0
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	d021      	beq.n	800703a <_scanf_float+0x3d6>
 8006ff6:	9903      	ldr	r1, [sp, #12]
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	600a      	str	r2, [r1, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	e9c3 6700 	strd	r6, r7, [r3]
 8007002:	68e3      	ldr	r3, [r4, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60e3      	str	r3, [r4, #12]
 8007008:	e66d      	b.n	8006ce6 <_scanf_float+0x82>
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0e5      	beq.n	8006fdc <_scanf_float+0x378>
 8007010:	9905      	ldr	r1, [sp, #20]
 8007012:	230a      	movs	r3, #10
 8007014:	462a      	mov	r2, r5
 8007016:	3101      	adds	r1, #1
 8007018:	4640      	mov	r0, r8
 800701a:	f000 ff03 	bl	8007e24 <_strtol_r>
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	9e05      	ldr	r6, [sp, #20]
 8007022:	1ac2      	subs	r2, r0, r3
 8007024:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007028:	429e      	cmp	r6, r3
 800702a:	bf28      	it	cs
 800702c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007030:	4912      	ldr	r1, [pc, #72]	; (800707c <_scanf_float+0x418>)
 8007032:	4630      	mov	r0, r6
 8007034:	f000 f82c 	bl	8007090 <siprintf>
 8007038:	e7d0      	b.n	8006fdc <_scanf_float+0x378>
 800703a:	9903      	ldr	r1, [sp, #12]
 800703c:	f012 0f04 	tst.w	r2, #4
 8007040:	f103 0204 	add.w	r2, r3, #4
 8007044:	600a      	str	r2, [r1, #0]
 8007046:	d1d9      	bne.n	8006ffc <_scanf_float+0x398>
 8007048:	f8d3 8000 	ldr.w	r8, [r3]
 800704c:	ee10 2a10 	vmov	r2, s0
 8007050:	ee10 0a10 	vmov	r0, s0
 8007054:	463b      	mov	r3, r7
 8007056:	4639      	mov	r1, r7
 8007058:	f7f9 fd88 	bl	8000b6c <__aeabi_dcmpun>
 800705c:	b128      	cbz	r0, 800706a <_scanf_float+0x406>
 800705e:	4808      	ldr	r0, [pc, #32]	; (8007080 <_scanf_float+0x41c>)
 8007060:	f000 f810 	bl	8007084 <nanf>
 8007064:	ed88 0a00 	vstr	s0, [r8]
 8007068:	e7cb      	b.n	8007002 <_scanf_float+0x39e>
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fddb 	bl	8000c28 <__aeabi_d2f>
 8007072:	f8c8 0000 	str.w	r0, [r8]
 8007076:	e7c4      	b.n	8007002 <_scanf_float+0x39e>
 8007078:	2500      	movs	r5, #0
 800707a:	e634      	b.n	8006ce6 <_scanf_float+0x82>
 800707c:	0800ad80 	.word	0x0800ad80
 8007080:	0800b188 	.word	0x0800b188

08007084 <nanf>:
 8007084:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800708c <nanf+0x8>
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	7fc00000 	.word	0x7fc00000

08007090 <siprintf>:
 8007090:	b40e      	push	{r1, r2, r3}
 8007092:	b500      	push	{lr}
 8007094:	b09c      	sub	sp, #112	; 0x70
 8007096:	ab1d      	add	r3, sp, #116	; 0x74
 8007098:	9002      	str	r0, [sp, #8]
 800709a:	9006      	str	r0, [sp, #24]
 800709c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070a0:	4809      	ldr	r0, [pc, #36]	; (80070c8 <siprintf+0x38>)
 80070a2:	9107      	str	r1, [sp, #28]
 80070a4:	9104      	str	r1, [sp, #16]
 80070a6:	4909      	ldr	r1, [pc, #36]	; (80070cc <siprintf+0x3c>)
 80070a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ac:	9105      	str	r1, [sp, #20]
 80070ae:	6800      	ldr	r0, [r0, #0]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	a902      	add	r1, sp, #8
 80070b4:	f002 fed4 	bl	8009e60 <_svfiprintf_r>
 80070b8:	9b02      	ldr	r3, [sp, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	b01c      	add	sp, #112	; 0x70
 80070c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c4:	b003      	add	sp, #12
 80070c6:	4770      	bx	lr
 80070c8:	20000010 	.word	0x20000010
 80070cc:	ffff0208 	.word	0xffff0208

080070d0 <sulp>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4604      	mov	r4, r0
 80070d4:	460d      	mov	r5, r1
 80070d6:	ec45 4b10 	vmov	d0, r4, r5
 80070da:	4616      	mov	r6, r2
 80070dc:	f002 fc1e 	bl	800991c <__ulp>
 80070e0:	ec51 0b10 	vmov	r0, r1, d0
 80070e4:	b17e      	cbz	r6, 8007106 <sulp+0x36>
 80070e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dd09      	ble.n	8007106 <sulp+0x36>
 80070f2:	051b      	lsls	r3, r3, #20
 80070f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070f8:	2400      	movs	r4, #0
 80070fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070fe:	4622      	mov	r2, r4
 8007100:	462b      	mov	r3, r5
 8007102:	f7f9 fa99 	bl	8000638 <__aeabi_dmul>
 8007106:	bd70      	pop	{r4, r5, r6, pc}

08007108 <_strtod_l>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	ed2d 8b02 	vpush	{d8}
 8007110:	b09d      	sub	sp, #116	; 0x74
 8007112:	461f      	mov	r7, r3
 8007114:	2300      	movs	r3, #0
 8007116:	9318      	str	r3, [sp, #96]	; 0x60
 8007118:	4ba2      	ldr	r3, [pc, #648]	; (80073a4 <_strtod_l+0x29c>)
 800711a:	9213      	str	r2, [sp, #76]	; 0x4c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	4604      	mov	r4, r0
 8007122:	4618      	mov	r0, r3
 8007124:	4688      	mov	r8, r1
 8007126:	f7f9 f873 	bl	8000210 <strlen>
 800712a:	f04f 0a00 	mov.w	sl, #0
 800712e:	4605      	mov	r5, r0
 8007130:	f04f 0b00 	mov.w	fp, #0
 8007134:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	2a2b      	cmp	r2, #43	; 0x2b
 800713e:	d04e      	beq.n	80071de <_strtod_l+0xd6>
 8007140:	d83b      	bhi.n	80071ba <_strtod_l+0xb2>
 8007142:	2a0d      	cmp	r2, #13
 8007144:	d834      	bhi.n	80071b0 <_strtod_l+0xa8>
 8007146:	2a08      	cmp	r2, #8
 8007148:	d834      	bhi.n	80071b4 <_strtod_l+0xac>
 800714a:	2a00      	cmp	r2, #0
 800714c:	d03e      	beq.n	80071cc <_strtod_l+0xc4>
 800714e:	2300      	movs	r3, #0
 8007150:	930a      	str	r3, [sp, #40]	; 0x28
 8007152:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007154:	7833      	ldrb	r3, [r6, #0]
 8007156:	2b30      	cmp	r3, #48	; 0x30
 8007158:	f040 80b0 	bne.w	80072bc <_strtod_l+0x1b4>
 800715c:	7873      	ldrb	r3, [r6, #1]
 800715e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007162:	2b58      	cmp	r3, #88	; 0x58
 8007164:	d168      	bne.n	8007238 <_strtod_l+0x130>
 8007166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	ab18      	add	r3, sp, #96	; 0x60
 800716c:	9702      	str	r7, [sp, #8]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4a8d      	ldr	r2, [pc, #564]	; (80073a8 <_strtod_l+0x2a0>)
 8007172:	ab19      	add	r3, sp, #100	; 0x64
 8007174:	a917      	add	r1, sp, #92	; 0x5c
 8007176:	4620      	mov	r0, r4
 8007178:	f001 fd38 	bl	8008bec <__gethex>
 800717c:	f010 0707 	ands.w	r7, r0, #7
 8007180:	4605      	mov	r5, r0
 8007182:	d005      	beq.n	8007190 <_strtod_l+0x88>
 8007184:	2f06      	cmp	r7, #6
 8007186:	d12c      	bne.n	80071e2 <_strtod_l+0xda>
 8007188:	3601      	adds	r6, #1
 800718a:	2300      	movs	r3, #0
 800718c:	9617      	str	r6, [sp, #92]	; 0x5c
 800718e:	930a      	str	r3, [sp, #40]	; 0x28
 8007190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 8590 	bne.w	8007cb8 <_strtod_l+0xbb0>
 8007198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719a:	b1eb      	cbz	r3, 80071d8 <_strtod_l+0xd0>
 800719c:	4652      	mov	r2, sl
 800719e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071a2:	ec43 2b10 	vmov	d0, r2, r3
 80071a6:	b01d      	add	sp, #116	; 0x74
 80071a8:	ecbd 8b02 	vpop	{d8}
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	2a20      	cmp	r2, #32
 80071b2:	d1cc      	bne.n	800714e <_strtod_l+0x46>
 80071b4:	3301      	adds	r3, #1
 80071b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80071b8:	e7be      	b.n	8007138 <_strtod_l+0x30>
 80071ba:	2a2d      	cmp	r2, #45	; 0x2d
 80071bc:	d1c7      	bne.n	800714e <_strtod_l+0x46>
 80071be:	2201      	movs	r2, #1
 80071c0:	920a      	str	r2, [sp, #40]	; 0x28
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1c2      	bne.n	8007152 <_strtod_l+0x4a>
 80071cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 856e 	bne.w	8007cb4 <_strtod_l+0xbac>
 80071d8:	4652      	mov	r2, sl
 80071da:	465b      	mov	r3, fp
 80071dc:	e7e1      	b.n	80071a2 <_strtod_l+0x9a>
 80071de:	2200      	movs	r2, #0
 80071e0:	e7ee      	b.n	80071c0 <_strtod_l+0xb8>
 80071e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071e4:	b13a      	cbz	r2, 80071f6 <_strtod_l+0xee>
 80071e6:	2135      	movs	r1, #53	; 0x35
 80071e8:	a81a      	add	r0, sp, #104	; 0x68
 80071ea:	f002 fca2 	bl	8009b32 <__copybits>
 80071ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071f0:	4620      	mov	r0, r4
 80071f2:	f002 f861 	bl	80092b8 <_Bfree>
 80071f6:	3f01      	subs	r7, #1
 80071f8:	2f04      	cmp	r7, #4
 80071fa:	d806      	bhi.n	800720a <_strtod_l+0x102>
 80071fc:	e8df f007 	tbb	[pc, r7]
 8007200:	1714030a 	.word	0x1714030a
 8007204:	0a          	.byte	0x0a
 8007205:	00          	.byte	0x00
 8007206:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800720a:	0728      	lsls	r0, r5, #28
 800720c:	d5c0      	bpl.n	8007190 <_strtod_l+0x88>
 800720e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007212:	e7bd      	b.n	8007190 <_strtod_l+0x88>
 8007214:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800721a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800721e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007222:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007226:	e7f0      	b.n	800720a <_strtod_l+0x102>
 8007228:	f8df b180 	ldr.w	fp, [pc, #384]	; 80073ac <_strtod_l+0x2a4>
 800722c:	e7ed      	b.n	800720a <_strtod_l+0x102>
 800722e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007232:	f04f 3aff 	mov.w	sl, #4294967295
 8007236:	e7e8      	b.n	800720a <_strtod_l+0x102>
 8007238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	9217      	str	r2, [sp, #92]	; 0x5c
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b30      	cmp	r3, #48	; 0x30
 8007242:	d0f9      	beq.n	8007238 <_strtod_l+0x130>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0a3      	beq.n	8007190 <_strtod_l+0x88>
 8007248:	2301      	movs	r3, #1
 800724a:	f04f 0900 	mov.w	r9, #0
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	f8cd 901c 	str.w	r9, [sp, #28]
 8007258:	464f      	mov	r7, r9
 800725a:	220a      	movs	r2, #10
 800725c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800725e:	7806      	ldrb	r6, [r0, #0]
 8007260:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007264:	b2d9      	uxtb	r1, r3
 8007266:	2909      	cmp	r1, #9
 8007268:	d92a      	bls.n	80072c0 <_strtod_l+0x1b8>
 800726a:	9905      	ldr	r1, [sp, #20]
 800726c:	462a      	mov	r2, r5
 800726e:	f002 ff0f 	bl	800a090 <strncmp>
 8007272:	b398      	cbz	r0, 80072dc <_strtod_l+0x1d4>
 8007274:	2000      	movs	r0, #0
 8007276:	4632      	mov	r2, r6
 8007278:	463d      	mov	r5, r7
 800727a:	9005      	str	r0, [sp, #20]
 800727c:	4603      	mov	r3, r0
 800727e:	2a65      	cmp	r2, #101	; 0x65
 8007280:	d001      	beq.n	8007286 <_strtod_l+0x17e>
 8007282:	2a45      	cmp	r2, #69	; 0x45
 8007284:	d118      	bne.n	80072b8 <_strtod_l+0x1b0>
 8007286:	b91d      	cbnz	r5, 8007290 <_strtod_l+0x188>
 8007288:	9a04      	ldr	r2, [sp, #16]
 800728a:	4302      	orrs	r2, r0
 800728c:	d09e      	beq.n	80071cc <_strtod_l+0xc4>
 800728e:	2500      	movs	r5, #0
 8007290:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007294:	f108 0201 	add.w	r2, r8, #1
 8007298:	9217      	str	r2, [sp, #92]	; 0x5c
 800729a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800729e:	2a2b      	cmp	r2, #43	; 0x2b
 80072a0:	d075      	beq.n	800738e <_strtod_l+0x286>
 80072a2:	2a2d      	cmp	r2, #45	; 0x2d
 80072a4:	d07b      	beq.n	800739e <_strtod_l+0x296>
 80072a6:	f04f 0c00 	mov.w	ip, #0
 80072aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072ae:	2909      	cmp	r1, #9
 80072b0:	f240 8082 	bls.w	80073b8 <_strtod_l+0x2b0>
 80072b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072b8:	2600      	movs	r6, #0
 80072ba:	e09d      	b.n	80073f8 <_strtod_l+0x2f0>
 80072bc:	2300      	movs	r3, #0
 80072be:	e7c4      	b.n	800724a <_strtod_l+0x142>
 80072c0:	2f08      	cmp	r7, #8
 80072c2:	bfd8      	it	le
 80072c4:	9907      	ldrle	r1, [sp, #28]
 80072c6:	f100 0001 	add.w	r0, r0, #1
 80072ca:	bfda      	itte	le
 80072cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80072d0:	9307      	strle	r3, [sp, #28]
 80072d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072d6:	3701      	adds	r7, #1
 80072d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80072da:	e7bf      	b.n	800725c <_strtod_l+0x154>
 80072dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072de:	195a      	adds	r2, r3, r5
 80072e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072e2:	5d5a      	ldrb	r2, [r3, r5]
 80072e4:	2f00      	cmp	r7, #0
 80072e6:	d037      	beq.n	8007358 <_strtod_l+0x250>
 80072e8:	9005      	str	r0, [sp, #20]
 80072ea:	463d      	mov	r5, r7
 80072ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d912      	bls.n	800731a <_strtod_l+0x212>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e7c2      	b.n	800727e <_strtod_l+0x176>
 80072f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80072fe:	785a      	ldrb	r2, [r3, #1]
 8007300:	3001      	adds	r0, #1
 8007302:	2a30      	cmp	r2, #48	; 0x30
 8007304:	d0f8      	beq.n	80072f8 <_strtod_l+0x1f0>
 8007306:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800730a:	2b08      	cmp	r3, #8
 800730c:	f200 84d9 	bhi.w	8007cc2 <_strtod_l+0xbba>
 8007310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007312:	9005      	str	r0, [sp, #20]
 8007314:	2000      	movs	r0, #0
 8007316:	9308      	str	r3, [sp, #32]
 8007318:	4605      	mov	r5, r0
 800731a:	3a30      	subs	r2, #48	; 0x30
 800731c:	f100 0301 	add.w	r3, r0, #1
 8007320:	d014      	beq.n	800734c <_strtod_l+0x244>
 8007322:	9905      	ldr	r1, [sp, #20]
 8007324:	4419      	add	r1, r3
 8007326:	9105      	str	r1, [sp, #20]
 8007328:	462b      	mov	r3, r5
 800732a:	eb00 0e05 	add.w	lr, r0, r5
 800732e:	210a      	movs	r1, #10
 8007330:	4573      	cmp	r3, lr
 8007332:	d113      	bne.n	800735c <_strtod_l+0x254>
 8007334:	182b      	adds	r3, r5, r0
 8007336:	2b08      	cmp	r3, #8
 8007338:	f105 0501 	add.w	r5, r5, #1
 800733c:	4405      	add	r5, r0
 800733e:	dc1c      	bgt.n	800737a <_strtod_l+0x272>
 8007340:	9907      	ldr	r1, [sp, #28]
 8007342:	230a      	movs	r3, #10
 8007344:	fb03 2301 	mla	r3, r3, r1, r2
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	2300      	movs	r3, #0
 800734c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800734e:	1c51      	adds	r1, r2, #1
 8007350:	9117      	str	r1, [sp, #92]	; 0x5c
 8007352:	7852      	ldrb	r2, [r2, #1]
 8007354:	4618      	mov	r0, r3
 8007356:	e7c9      	b.n	80072ec <_strtod_l+0x1e4>
 8007358:	4638      	mov	r0, r7
 800735a:	e7d2      	b.n	8007302 <_strtod_l+0x1fa>
 800735c:	2b08      	cmp	r3, #8
 800735e:	dc04      	bgt.n	800736a <_strtod_l+0x262>
 8007360:	9e07      	ldr	r6, [sp, #28]
 8007362:	434e      	muls	r6, r1
 8007364:	9607      	str	r6, [sp, #28]
 8007366:	3301      	adds	r3, #1
 8007368:	e7e2      	b.n	8007330 <_strtod_l+0x228>
 800736a:	f103 0c01 	add.w	ip, r3, #1
 800736e:	f1bc 0f10 	cmp.w	ip, #16
 8007372:	bfd8      	it	le
 8007374:	fb01 f909 	mulle.w	r9, r1, r9
 8007378:	e7f5      	b.n	8007366 <_strtod_l+0x25e>
 800737a:	2d10      	cmp	r5, #16
 800737c:	bfdc      	itt	le
 800737e:	230a      	movle	r3, #10
 8007380:	fb03 2909 	mlale	r9, r3, r9, r2
 8007384:	e7e1      	b.n	800734a <_strtod_l+0x242>
 8007386:	2300      	movs	r3, #0
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	2301      	movs	r3, #1
 800738c:	e77c      	b.n	8007288 <_strtod_l+0x180>
 800738e:	f04f 0c00 	mov.w	ip, #0
 8007392:	f108 0202 	add.w	r2, r8, #2
 8007396:	9217      	str	r2, [sp, #92]	; 0x5c
 8007398:	f898 2002 	ldrb.w	r2, [r8, #2]
 800739c:	e785      	b.n	80072aa <_strtod_l+0x1a2>
 800739e:	f04f 0c01 	mov.w	ip, #1
 80073a2:	e7f6      	b.n	8007392 <_strtod_l+0x28a>
 80073a4:	0800afd0 	.word	0x0800afd0
 80073a8:	0800ad88 	.word	0x0800ad88
 80073ac:	7ff00000 	.word	0x7ff00000
 80073b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073b2:	1c51      	adds	r1, r2, #1
 80073b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80073b6:	7852      	ldrb	r2, [r2, #1]
 80073b8:	2a30      	cmp	r2, #48	; 0x30
 80073ba:	d0f9      	beq.n	80073b0 <_strtod_l+0x2a8>
 80073bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073c0:	2908      	cmp	r1, #8
 80073c2:	f63f af79 	bhi.w	80072b8 <_strtod_l+0x1b0>
 80073c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073cc:	9206      	str	r2, [sp, #24]
 80073ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073d0:	1c51      	adds	r1, r2, #1
 80073d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80073d4:	7852      	ldrb	r2, [r2, #1]
 80073d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073da:	2e09      	cmp	r6, #9
 80073dc:	d937      	bls.n	800744e <_strtod_l+0x346>
 80073de:	9e06      	ldr	r6, [sp, #24]
 80073e0:	1b89      	subs	r1, r1, r6
 80073e2:	2908      	cmp	r1, #8
 80073e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073e8:	dc02      	bgt.n	80073f0 <_strtod_l+0x2e8>
 80073ea:	4576      	cmp	r6, lr
 80073ec:	bfa8      	it	ge
 80073ee:	4676      	movge	r6, lr
 80073f0:	f1bc 0f00 	cmp.w	ip, #0
 80073f4:	d000      	beq.n	80073f8 <_strtod_l+0x2f0>
 80073f6:	4276      	negs	r6, r6
 80073f8:	2d00      	cmp	r5, #0
 80073fa:	d14d      	bne.n	8007498 <_strtod_l+0x390>
 80073fc:	9904      	ldr	r1, [sp, #16]
 80073fe:	4301      	orrs	r1, r0
 8007400:	f47f aec6 	bne.w	8007190 <_strtod_l+0x88>
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f aee1 	bne.w	80071cc <_strtod_l+0xc4>
 800740a:	2a69      	cmp	r2, #105	; 0x69
 800740c:	d027      	beq.n	800745e <_strtod_l+0x356>
 800740e:	dc24      	bgt.n	800745a <_strtod_l+0x352>
 8007410:	2a49      	cmp	r2, #73	; 0x49
 8007412:	d024      	beq.n	800745e <_strtod_l+0x356>
 8007414:	2a4e      	cmp	r2, #78	; 0x4e
 8007416:	f47f aed9 	bne.w	80071cc <_strtod_l+0xc4>
 800741a:	499f      	ldr	r1, [pc, #636]	; (8007698 <_strtod_l+0x590>)
 800741c:	a817      	add	r0, sp, #92	; 0x5c
 800741e:	f001 fe3d 	bl	800909c <__match>
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aed2 	beq.w	80071cc <_strtod_l+0xc4>
 8007428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b28      	cmp	r3, #40	; 0x28
 800742e:	d12d      	bne.n	800748c <_strtod_l+0x384>
 8007430:	499a      	ldr	r1, [pc, #616]	; (800769c <_strtod_l+0x594>)
 8007432:	aa1a      	add	r2, sp, #104	; 0x68
 8007434:	a817      	add	r0, sp, #92	; 0x5c
 8007436:	f001 fe45 	bl	80090c4 <__hexnan>
 800743a:	2805      	cmp	r0, #5
 800743c:	d126      	bne.n	800748c <_strtod_l+0x384>
 800743e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007440:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007444:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007448:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800744c:	e6a0      	b.n	8007190 <_strtod_l+0x88>
 800744e:	210a      	movs	r1, #10
 8007450:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007454:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007458:	e7b9      	b.n	80073ce <_strtod_l+0x2c6>
 800745a:	2a6e      	cmp	r2, #110	; 0x6e
 800745c:	e7db      	b.n	8007416 <_strtod_l+0x30e>
 800745e:	4990      	ldr	r1, [pc, #576]	; (80076a0 <_strtod_l+0x598>)
 8007460:	a817      	add	r0, sp, #92	; 0x5c
 8007462:	f001 fe1b 	bl	800909c <__match>
 8007466:	2800      	cmp	r0, #0
 8007468:	f43f aeb0 	beq.w	80071cc <_strtod_l+0xc4>
 800746c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800746e:	498d      	ldr	r1, [pc, #564]	; (80076a4 <_strtod_l+0x59c>)
 8007470:	3b01      	subs	r3, #1
 8007472:	a817      	add	r0, sp, #92	; 0x5c
 8007474:	9317      	str	r3, [sp, #92]	; 0x5c
 8007476:	f001 fe11 	bl	800909c <__match>
 800747a:	b910      	cbnz	r0, 8007482 <_strtod_l+0x37a>
 800747c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800747e:	3301      	adds	r3, #1
 8007480:	9317      	str	r3, [sp, #92]	; 0x5c
 8007482:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076b4 <_strtod_l+0x5ac>
 8007486:	f04f 0a00 	mov.w	sl, #0
 800748a:	e681      	b.n	8007190 <_strtod_l+0x88>
 800748c:	4886      	ldr	r0, [pc, #536]	; (80076a8 <_strtod_l+0x5a0>)
 800748e:	f002 fde7 	bl	800a060 <nan>
 8007492:	ec5b ab10 	vmov	sl, fp, d0
 8007496:	e67b      	b.n	8007190 <_strtod_l+0x88>
 8007498:	9b05      	ldr	r3, [sp, #20]
 800749a:	9807      	ldr	r0, [sp, #28]
 800749c:	1af3      	subs	r3, r6, r3
 800749e:	2f00      	cmp	r7, #0
 80074a0:	bf08      	it	eq
 80074a2:	462f      	moveq	r7, r5
 80074a4:	2d10      	cmp	r5, #16
 80074a6:	9306      	str	r3, [sp, #24]
 80074a8:	46a8      	mov	r8, r5
 80074aa:	bfa8      	it	ge
 80074ac:	f04f 0810 	movge.w	r8, #16
 80074b0:	f7f9 f848 	bl	8000544 <__aeabi_ui2d>
 80074b4:	2d09      	cmp	r5, #9
 80074b6:	4682      	mov	sl, r0
 80074b8:	468b      	mov	fp, r1
 80074ba:	dd13      	ble.n	80074e4 <_strtod_l+0x3dc>
 80074bc:	4b7b      	ldr	r3, [pc, #492]	; (80076ac <_strtod_l+0x5a4>)
 80074be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074c6:	f7f9 f8b7 	bl	8000638 <__aeabi_dmul>
 80074ca:	4682      	mov	sl, r0
 80074cc:	4648      	mov	r0, r9
 80074ce:	468b      	mov	fp, r1
 80074d0:	f7f9 f838 	bl	8000544 <__aeabi_ui2d>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4650      	mov	r0, sl
 80074da:	4659      	mov	r1, fp
 80074dc:	f7f8 fef6 	bl	80002cc <__adddf3>
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	2d0f      	cmp	r5, #15
 80074e6:	dc38      	bgt.n	800755a <_strtod_l+0x452>
 80074e8:	9b06      	ldr	r3, [sp, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f43f ae50 	beq.w	8007190 <_strtod_l+0x88>
 80074f0:	dd24      	ble.n	800753c <_strtod_l+0x434>
 80074f2:	2b16      	cmp	r3, #22
 80074f4:	dc0b      	bgt.n	800750e <_strtod_l+0x406>
 80074f6:	496d      	ldr	r1, [pc, #436]	; (80076ac <_strtod_l+0x5a4>)
 80074f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007500:	4652      	mov	r2, sl
 8007502:	465b      	mov	r3, fp
 8007504:	f7f9 f898 	bl	8000638 <__aeabi_dmul>
 8007508:	4682      	mov	sl, r0
 800750a:	468b      	mov	fp, r1
 800750c:	e640      	b.n	8007190 <_strtod_l+0x88>
 800750e:	9a06      	ldr	r2, [sp, #24]
 8007510:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007514:	4293      	cmp	r3, r2
 8007516:	db20      	blt.n	800755a <_strtod_l+0x452>
 8007518:	4c64      	ldr	r4, [pc, #400]	; (80076ac <_strtod_l+0x5a4>)
 800751a:	f1c5 050f 	rsb	r5, r5, #15
 800751e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007522:	4652      	mov	r2, sl
 8007524:	465b      	mov	r3, fp
 8007526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752a:	f7f9 f885 	bl	8000638 <__aeabi_dmul>
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	1b5d      	subs	r5, r3, r5
 8007532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007536:	e9d4 2300 	ldrd	r2, r3, [r4]
 800753a:	e7e3      	b.n	8007504 <_strtod_l+0x3fc>
 800753c:	9b06      	ldr	r3, [sp, #24]
 800753e:	3316      	adds	r3, #22
 8007540:	db0b      	blt.n	800755a <_strtod_l+0x452>
 8007542:	9b05      	ldr	r3, [sp, #20]
 8007544:	1b9e      	subs	r6, r3, r6
 8007546:	4b59      	ldr	r3, [pc, #356]	; (80076ac <_strtod_l+0x5a4>)
 8007548:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800754c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007550:	4650      	mov	r0, sl
 8007552:	4659      	mov	r1, fp
 8007554:	f7f9 f99a 	bl	800088c <__aeabi_ddiv>
 8007558:	e7d6      	b.n	8007508 <_strtod_l+0x400>
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	eba5 0808 	sub.w	r8, r5, r8
 8007560:	4498      	add	r8, r3
 8007562:	f1b8 0f00 	cmp.w	r8, #0
 8007566:	dd74      	ble.n	8007652 <_strtod_l+0x54a>
 8007568:	f018 030f 	ands.w	r3, r8, #15
 800756c:	d00a      	beq.n	8007584 <_strtod_l+0x47c>
 800756e:	494f      	ldr	r1, [pc, #316]	; (80076ac <_strtod_l+0x5a4>)
 8007570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007574:	4652      	mov	r2, sl
 8007576:	465b      	mov	r3, fp
 8007578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757c:	f7f9 f85c 	bl	8000638 <__aeabi_dmul>
 8007580:	4682      	mov	sl, r0
 8007582:	468b      	mov	fp, r1
 8007584:	f038 080f 	bics.w	r8, r8, #15
 8007588:	d04f      	beq.n	800762a <_strtod_l+0x522>
 800758a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800758e:	dd22      	ble.n	80075d6 <_strtod_l+0x4ce>
 8007590:	2500      	movs	r5, #0
 8007592:	462e      	mov	r6, r5
 8007594:	9507      	str	r5, [sp, #28]
 8007596:	9505      	str	r5, [sp, #20]
 8007598:	2322      	movs	r3, #34	; 0x22
 800759a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076b4 <_strtod_l+0x5ac>
 800759e:	6023      	str	r3, [r4, #0]
 80075a0:	f04f 0a00 	mov.w	sl, #0
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f43f adf2 	beq.w	8007190 <_strtod_l+0x88>
 80075ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075ae:	4620      	mov	r0, r4
 80075b0:	f001 fe82 	bl	80092b8 <_Bfree>
 80075b4:	9905      	ldr	r1, [sp, #20]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f001 fe7e 	bl	80092b8 <_Bfree>
 80075bc:	4631      	mov	r1, r6
 80075be:	4620      	mov	r0, r4
 80075c0:	f001 fe7a 	bl	80092b8 <_Bfree>
 80075c4:	9907      	ldr	r1, [sp, #28]
 80075c6:	4620      	mov	r0, r4
 80075c8:	f001 fe76 	bl	80092b8 <_Bfree>
 80075cc:	4629      	mov	r1, r5
 80075ce:	4620      	mov	r0, r4
 80075d0:	f001 fe72 	bl	80092b8 <_Bfree>
 80075d4:	e5dc      	b.n	8007190 <_strtod_l+0x88>
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <_strtod_l+0x5a8>)
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075e0:	4650      	mov	r0, sl
 80075e2:	4659      	mov	r1, fp
 80075e4:	4699      	mov	r9, r3
 80075e6:	f1b8 0f01 	cmp.w	r8, #1
 80075ea:	dc21      	bgt.n	8007630 <_strtod_l+0x528>
 80075ec:	b10b      	cbz	r3, 80075f2 <_strtod_l+0x4ea>
 80075ee:	4682      	mov	sl, r0
 80075f0:	468b      	mov	fp, r1
 80075f2:	4b2f      	ldr	r3, [pc, #188]	; (80076b0 <_strtod_l+0x5a8>)
 80075f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075fc:	4652      	mov	r2, sl
 80075fe:	465b      	mov	r3, fp
 8007600:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007604:	f7f9 f818 	bl	8000638 <__aeabi_dmul>
 8007608:	4b2a      	ldr	r3, [pc, #168]	; (80076b4 <_strtod_l+0x5ac>)
 800760a:	460a      	mov	r2, r1
 800760c:	400b      	ands	r3, r1
 800760e:	492a      	ldr	r1, [pc, #168]	; (80076b8 <_strtod_l+0x5b0>)
 8007610:	428b      	cmp	r3, r1
 8007612:	4682      	mov	sl, r0
 8007614:	d8bc      	bhi.n	8007590 <_strtod_l+0x488>
 8007616:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800761a:	428b      	cmp	r3, r1
 800761c:	bf86      	itte	hi
 800761e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076bc <_strtod_l+0x5b4>
 8007622:	f04f 3aff 	movhi.w	sl, #4294967295
 8007626:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800762a:	2300      	movs	r3, #0
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	e084      	b.n	800773a <_strtod_l+0x632>
 8007630:	f018 0f01 	tst.w	r8, #1
 8007634:	d005      	beq.n	8007642 <_strtod_l+0x53a>
 8007636:	9b04      	ldr	r3, [sp, #16]
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f7f8 fffc 	bl	8000638 <__aeabi_dmul>
 8007640:	2301      	movs	r3, #1
 8007642:	9a04      	ldr	r2, [sp, #16]
 8007644:	3208      	adds	r2, #8
 8007646:	f109 0901 	add.w	r9, r9, #1
 800764a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800764e:	9204      	str	r2, [sp, #16]
 8007650:	e7c9      	b.n	80075e6 <_strtod_l+0x4de>
 8007652:	d0ea      	beq.n	800762a <_strtod_l+0x522>
 8007654:	f1c8 0800 	rsb	r8, r8, #0
 8007658:	f018 020f 	ands.w	r2, r8, #15
 800765c:	d00a      	beq.n	8007674 <_strtod_l+0x56c>
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <_strtod_l+0x5a4>)
 8007660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007664:	4650      	mov	r0, sl
 8007666:	4659      	mov	r1, fp
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f9 f90e 	bl	800088c <__aeabi_ddiv>
 8007670:	4682      	mov	sl, r0
 8007672:	468b      	mov	fp, r1
 8007674:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007678:	d0d7      	beq.n	800762a <_strtod_l+0x522>
 800767a:	f1b8 0f1f 	cmp.w	r8, #31
 800767e:	dd1f      	ble.n	80076c0 <_strtod_l+0x5b8>
 8007680:	2500      	movs	r5, #0
 8007682:	462e      	mov	r6, r5
 8007684:	9507      	str	r5, [sp, #28]
 8007686:	9505      	str	r5, [sp, #20]
 8007688:	2322      	movs	r3, #34	; 0x22
 800768a:	f04f 0a00 	mov.w	sl, #0
 800768e:	f04f 0b00 	mov.w	fp, #0
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	e786      	b.n	80075a4 <_strtod_l+0x49c>
 8007696:	bf00      	nop
 8007698:	0800ad59 	.word	0x0800ad59
 800769c:	0800ad9c 	.word	0x0800ad9c
 80076a0:	0800ad51 	.word	0x0800ad51
 80076a4:	0800aedc 	.word	0x0800aedc
 80076a8:	0800b188 	.word	0x0800b188
 80076ac:	0800b068 	.word	0x0800b068
 80076b0:	0800b040 	.word	0x0800b040
 80076b4:	7ff00000 	.word	0x7ff00000
 80076b8:	7ca00000 	.word	0x7ca00000
 80076bc:	7fefffff 	.word	0x7fefffff
 80076c0:	f018 0310 	ands.w	r3, r8, #16
 80076c4:	bf18      	it	ne
 80076c6:	236a      	movne	r3, #106	; 0x6a
 80076c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a78 <_strtod_l+0x970>
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	4650      	mov	r0, sl
 80076d0:	4659      	mov	r1, fp
 80076d2:	2300      	movs	r3, #0
 80076d4:	f018 0f01 	tst.w	r8, #1
 80076d8:	d004      	beq.n	80076e4 <_strtod_l+0x5dc>
 80076da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076de:	f7f8 ffab 	bl	8000638 <__aeabi_dmul>
 80076e2:	2301      	movs	r3, #1
 80076e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076e8:	f109 0908 	add.w	r9, r9, #8
 80076ec:	d1f2      	bne.n	80076d4 <_strtod_l+0x5cc>
 80076ee:	b10b      	cbz	r3, 80076f4 <_strtod_l+0x5ec>
 80076f0:	4682      	mov	sl, r0
 80076f2:	468b      	mov	fp, r1
 80076f4:	9b04      	ldr	r3, [sp, #16]
 80076f6:	b1c3      	cbz	r3, 800772a <_strtod_l+0x622>
 80076f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007700:	2b00      	cmp	r3, #0
 8007702:	4659      	mov	r1, fp
 8007704:	dd11      	ble.n	800772a <_strtod_l+0x622>
 8007706:	2b1f      	cmp	r3, #31
 8007708:	f340 8124 	ble.w	8007954 <_strtod_l+0x84c>
 800770c:	2b34      	cmp	r3, #52	; 0x34
 800770e:	bfde      	ittt	le
 8007710:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007714:	f04f 33ff 	movle.w	r3, #4294967295
 8007718:	fa03 f202 	lslle.w	r2, r3, r2
 800771c:	f04f 0a00 	mov.w	sl, #0
 8007720:	bfcc      	ite	gt
 8007722:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007726:	ea02 0b01 	andle.w	fp, r2, r1
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	4650      	mov	r0, sl
 8007730:	4659      	mov	r1, fp
 8007732:	f7f9 f9e9 	bl	8000b08 <__aeabi_dcmpeq>
 8007736:	2800      	cmp	r0, #0
 8007738:	d1a2      	bne.n	8007680 <_strtod_l+0x578>
 800773a:	9b07      	ldr	r3, [sp, #28]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	9908      	ldr	r1, [sp, #32]
 8007740:	462b      	mov	r3, r5
 8007742:	463a      	mov	r2, r7
 8007744:	4620      	mov	r0, r4
 8007746:	f001 fe1f 	bl	8009388 <__s2b>
 800774a:	9007      	str	r0, [sp, #28]
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f af1f 	beq.w	8007590 <_strtod_l+0x488>
 8007752:	9b05      	ldr	r3, [sp, #20]
 8007754:	1b9e      	subs	r6, r3, r6
 8007756:	9b06      	ldr	r3, [sp, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bfb4      	ite	lt
 800775c:	4633      	movlt	r3, r6
 800775e:	2300      	movge	r3, #0
 8007760:	930c      	str	r3, [sp, #48]	; 0x30
 8007762:	9b06      	ldr	r3, [sp, #24]
 8007764:	2500      	movs	r5, #0
 8007766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800776a:	9312      	str	r3, [sp, #72]	; 0x48
 800776c:	462e      	mov	r6, r5
 800776e:	9b07      	ldr	r3, [sp, #28]
 8007770:	4620      	mov	r0, r4
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	f001 fd60 	bl	8009238 <_Balloc>
 8007778:	9005      	str	r0, [sp, #20]
 800777a:	2800      	cmp	r0, #0
 800777c:	f43f af0c 	beq.w	8007598 <_strtod_l+0x490>
 8007780:	9b07      	ldr	r3, [sp, #28]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	3202      	adds	r2, #2
 8007786:	f103 010c 	add.w	r1, r3, #12
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	300c      	adds	r0, #12
 800778e:	f7fe fde9 	bl	8006364 <memcpy>
 8007792:	ec4b ab10 	vmov	d0, sl, fp
 8007796:	aa1a      	add	r2, sp, #104	; 0x68
 8007798:	a919      	add	r1, sp, #100	; 0x64
 800779a:	4620      	mov	r0, r4
 800779c:	f002 f93a 	bl	8009a14 <__d2b>
 80077a0:	ec4b ab18 	vmov	d8, sl, fp
 80077a4:	9018      	str	r0, [sp, #96]	; 0x60
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f aef6 	beq.w	8007598 <_strtod_l+0x490>
 80077ac:	2101      	movs	r1, #1
 80077ae:	4620      	mov	r0, r4
 80077b0:	f001 fe84 	bl	80094bc <__i2b>
 80077b4:	4606      	mov	r6, r0
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f aeee 	beq.w	8007598 <_strtod_l+0x490>
 80077bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077be:	9904      	ldr	r1, [sp, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bfab      	itete	ge
 80077c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077ce:	bfac      	ite	ge
 80077d0:	eb03 0902 	addge.w	r9, r3, r2
 80077d4:	1ad7      	sublt	r7, r2, r3
 80077d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077d8:	eba3 0801 	sub.w	r8, r3, r1
 80077dc:	4490      	add	r8, r2
 80077de:	4ba1      	ldr	r3, [pc, #644]	; (8007a64 <_strtod_l+0x95c>)
 80077e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077e4:	4598      	cmp	r8, r3
 80077e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077ea:	f280 80c7 	bge.w	800797c <_strtod_l+0x874>
 80077ee:	eba3 0308 	sub.w	r3, r3, r8
 80077f2:	2b1f      	cmp	r3, #31
 80077f4:	eba2 0203 	sub.w	r2, r2, r3
 80077f8:	f04f 0101 	mov.w	r1, #1
 80077fc:	f300 80b1 	bgt.w	8007962 <_strtod_l+0x85a>
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	930d      	str	r3, [sp, #52]	; 0x34
 8007806:	2300      	movs	r3, #0
 8007808:	9308      	str	r3, [sp, #32]
 800780a:	eb09 0802 	add.w	r8, r9, r2
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	45c1      	cmp	r9, r8
 8007812:	4417      	add	r7, r2
 8007814:	441f      	add	r7, r3
 8007816:	464b      	mov	r3, r9
 8007818:	bfa8      	it	ge
 800781a:	4643      	movge	r3, r8
 800781c:	42bb      	cmp	r3, r7
 800781e:	bfa8      	it	ge
 8007820:	463b      	movge	r3, r7
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfc2      	ittt	gt
 8007826:	eba8 0803 	subgt.w	r8, r8, r3
 800782a:	1aff      	subgt	r7, r7, r3
 800782c:	eba9 0903 	subgt.w	r9, r9, r3
 8007830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007832:	2b00      	cmp	r3, #0
 8007834:	dd17      	ble.n	8007866 <_strtod_l+0x75e>
 8007836:	4631      	mov	r1, r6
 8007838:	461a      	mov	r2, r3
 800783a:	4620      	mov	r0, r4
 800783c:	f001 fefe 	bl	800963c <__pow5mult>
 8007840:	4606      	mov	r6, r0
 8007842:	2800      	cmp	r0, #0
 8007844:	f43f aea8 	beq.w	8007598 <_strtod_l+0x490>
 8007848:	4601      	mov	r1, r0
 800784a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800784c:	4620      	mov	r0, r4
 800784e:	f001 fe4b 	bl	80094e8 <__multiply>
 8007852:	900b      	str	r0, [sp, #44]	; 0x2c
 8007854:	2800      	cmp	r0, #0
 8007856:	f43f ae9f 	beq.w	8007598 <_strtod_l+0x490>
 800785a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800785c:	4620      	mov	r0, r4
 800785e:	f001 fd2b 	bl	80092b8 <_Bfree>
 8007862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007864:	9318      	str	r3, [sp, #96]	; 0x60
 8007866:	f1b8 0f00 	cmp.w	r8, #0
 800786a:	f300 808c 	bgt.w	8007986 <_strtod_l+0x87e>
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	dd08      	ble.n	8007886 <_strtod_l+0x77e>
 8007874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007876:	9905      	ldr	r1, [sp, #20]
 8007878:	4620      	mov	r0, r4
 800787a:	f001 fedf 	bl	800963c <__pow5mult>
 800787e:	9005      	str	r0, [sp, #20]
 8007880:	2800      	cmp	r0, #0
 8007882:	f43f ae89 	beq.w	8007598 <_strtod_l+0x490>
 8007886:	2f00      	cmp	r7, #0
 8007888:	dd08      	ble.n	800789c <_strtod_l+0x794>
 800788a:	9905      	ldr	r1, [sp, #20]
 800788c:	463a      	mov	r2, r7
 800788e:	4620      	mov	r0, r4
 8007890:	f001 ff2e 	bl	80096f0 <__lshift>
 8007894:	9005      	str	r0, [sp, #20]
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f ae7e 	beq.w	8007598 <_strtod_l+0x490>
 800789c:	f1b9 0f00 	cmp.w	r9, #0
 80078a0:	dd08      	ble.n	80078b4 <_strtod_l+0x7ac>
 80078a2:	4631      	mov	r1, r6
 80078a4:	464a      	mov	r2, r9
 80078a6:	4620      	mov	r0, r4
 80078a8:	f001 ff22 	bl	80096f0 <__lshift>
 80078ac:	4606      	mov	r6, r0
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f ae72 	beq.w	8007598 <_strtod_l+0x490>
 80078b4:	9a05      	ldr	r2, [sp, #20]
 80078b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078b8:	4620      	mov	r0, r4
 80078ba:	f001 ffa5 	bl	8009808 <__mdiff>
 80078be:	4605      	mov	r5, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	f43f ae69 	beq.w	8007598 <_strtod_l+0x490>
 80078c6:	68c3      	ldr	r3, [r0, #12]
 80078c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ca:	2300      	movs	r3, #0
 80078cc:	60c3      	str	r3, [r0, #12]
 80078ce:	4631      	mov	r1, r6
 80078d0:	f001 ff7e 	bl	80097d0 <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	da60      	bge.n	800799a <_strtod_l+0x892>
 80078d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078da:	ea53 030a 	orrs.w	r3, r3, sl
 80078de:	f040 8082 	bne.w	80079e6 <_strtod_l+0x8de>
 80078e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d17d      	bne.n	80079e6 <_strtod_l+0x8de>
 80078ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078ee:	0d1b      	lsrs	r3, r3, #20
 80078f0:	051b      	lsls	r3, r3, #20
 80078f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078f6:	d976      	bls.n	80079e6 <_strtod_l+0x8de>
 80078f8:	696b      	ldr	r3, [r5, #20]
 80078fa:	b913      	cbnz	r3, 8007902 <_strtod_l+0x7fa>
 80078fc:	692b      	ldr	r3, [r5, #16]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	dd71      	ble.n	80079e6 <_strtod_l+0x8de>
 8007902:	4629      	mov	r1, r5
 8007904:	2201      	movs	r2, #1
 8007906:	4620      	mov	r0, r4
 8007908:	f001 fef2 	bl	80096f0 <__lshift>
 800790c:	4631      	mov	r1, r6
 800790e:	4605      	mov	r5, r0
 8007910:	f001 ff5e 	bl	80097d0 <__mcmp>
 8007914:	2800      	cmp	r0, #0
 8007916:	dd66      	ble.n	80079e6 <_strtod_l+0x8de>
 8007918:	9904      	ldr	r1, [sp, #16]
 800791a:	4a53      	ldr	r2, [pc, #332]	; (8007a68 <_strtod_l+0x960>)
 800791c:	465b      	mov	r3, fp
 800791e:	2900      	cmp	r1, #0
 8007920:	f000 8081 	beq.w	8007a26 <_strtod_l+0x91e>
 8007924:	ea02 010b 	and.w	r1, r2, fp
 8007928:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800792c:	dc7b      	bgt.n	8007a26 <_strtod_l+0x91e>
 800792e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007932:	f77f aea9 	ble.w	8007688 <_strtod_l+0x580>
 8007936:	4b4d      	ldr	r3, [pc, #308]	; (8007a6c <_strtod_l+0x964>)
 8007938:	4650      	mov	r0, sl
 800793a:	4659      	mov	r1, fp
 800793c:	2200      	movs	r2, #0
 800793e:	f7f8 fe7b 	bl	8000638 <__aeabi_dmul>
 8007942:	460b      	mov	r3, r1
 8007944:	4303      	orrs	r3, r0
 8007946:	bf08      	it	eq
 8007948:	2322      	moveq	r3, #34	; 0x22
 800794a:	4682      	mov	sl, r0
 800794c:	468b      	mov	fp, r1
 800794e:	bf08      	it	eq
 8007950:	6023      	streq	r3, [r4, #0]
 8007952:	e62b      	b.n	80075ac <_strtod_l+0x4a4>
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	ea03 0a0a 	and.w	sl, r3, sl
 8007960:	e6e3      	b.n	800772a <_strtod_l+0x622>
 8007962:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007966:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800796a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800796e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007972:	fa01 f308 	lsl.w	r3, r1, r8
 8007976:	9308      	str	r3, [sp, #32]
 8007978:	910d      	str	r1, [sp, #52]	; 0x34
 800797a:	e746      	b.n	800780a <_strtod_l+0x702>
 800797c:	2300      	movs	r3, #0
 800797e:	9308      	str	r3, [sp, #32]
 8007980:	2301      	movs	r3, #1
 8007982:	930d      	str	r3, [sp, #52]	; 0x34
 8007984:	e741      	b.n	800780a <_strtod_l+0x702>
 8007986:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007988:	4642      	mov	r2, r8
 800798a:	4620      	mov	r0, r4
 800798c:	f001 feb0 	bl	80096f0 <__lshift>
 8007990:	9018      	str	r0, [sp, #96]	; 0x60
 8007992:	2800      	cmp	r0, #0
 8007994:	f47f af6b 	bne.w	800786e <_strtod_l+0x766>
 8007998:	e5fe      	b.n	8007598 <_strtod_l+0x490>
 800799a:	465f      	mov	r7, fp
 800799c:	d16e      	bne.n	8007a7c <_strtod_l+0x974>
 800799e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079a4:	b342      	cbz	r2, 80079f8 <_strtod_l+0x8f0>
 80079a6:	4a32      	ldr	r2, [pc, #200]	; (8007a70 <_strtod_l+0x968>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d128      	bne.n	80079fe <_strtod_l+0x8f6>
 80079ac:	9b04      	ldr	r3, [sp, #16]
 80079ae:	4651      	mov	r1, sl
 80079b0:	b1eb      	cbz	r3, 80079ee <_strtod_l+0x8e6>
 80079b2:	4b2d      	ldr	r3, [pc, #180]	; (8007a68 <_strtod_l+0x960>)
 80079b4:	403b      	ands	r3, r7
 80079b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	d819      	bhi.n	80079f4 <_strtod_l+0x8ec>
 80079c0:	0d1b      	lsrs	r3, r3, #20
 80079c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	4299      	cmp	r1, r3
 80079cc:	d117      	bne.n	80079fe <_strtod_l+0x8f6>
 80079ce:	4b29      	ldr	r3, [pc, #164]	; (8007a74 <_strtod_l+0x96c>)
 80079d0:	429f      	cmp	r7, r3
 80079d2:	d102      	bne.n	80079da <_strtod_l+0x8d2>
 80079d4:	3101      	adds	r1, #1
 80079d6:	f43f addf 	beq.w	8007598 <_strtod_l+0x490>
 80079da:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <_strtod_l+0x960>)
 80079dc:	403b      	ands	r3, r7
 80079de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079e2:	f04f 0a00 	mov.w	sl, #0
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1a4      	bne.n	8007936 <_strtod_l+0x82e>
 80079ec:	e5de      	b.n	80075ac <_strtod_l+0x4a4>
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295
 80079f2:	e7ea      	b.n	80079ca <_strtod_l+0x8c2>
 80079f4:	4613      	mov	r3, r2
 80079f6:	e7e8      	b.n	80079ca <_strtod_l+0x8c2>
 80079f8:	ea53 030a 	orrs.w	r3, r3, sl
 80079fc:	d08c      	beq.n	8007918 <_strtod_l+0x810>
 80079fe:	9b08      	ldr	r3, [sp, #32]
 8007a00:	b1db      	cbz	r3, 8007a3a <_strtod_l+0x932>
 8007a02:	423b      	tst	r3, r7
 8007a04:	d0ef      	beq.n	80079e6 <_strtod_l+0x8de>
 8007a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a08:	9a04      	ldr	r2, [sp, #16]
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	b1c3      	cbz	r3, 8007a42 <_strtod_l+0x93a>
 8007a10:	f7ff fb5e 	bl	80070d0 <sulp>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	ec51 0b18 	vmov	r0, r1, d8
 8007a1c:	f7f8 fc56 	bl	80002cc <__adddf3>
 8007a20:	4682      	mov	sl, r0
 8007a22:	468b      	mov	fp, r1
 8007a24:	e7df      	b.n	80079e6 <_strtod_l+0x8de>
 8007a26:	4013      	ands	r3, r2
 8007a28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a34:	f04f 3aff 	mov.w	sl, #4294967295
 8007a38:	e7d5      	b.n	80079e6 <_strtod_l+0x8de>
 8007a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3c:	ea13 0f0a 	tst.w	r3, sl
 8007a40:	e7e0      	b.n	8007a04 <_strtod_l+0x8fc>
 8007a42:	f7ff fb45 	bl	80070d0 <sulp>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	ec51 0b18 	vmov	r0, r1, d8
 8007a4e:	f7f8 fc3b 	bl	80002c8 <__aeabi_dsub>
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	4682      	mov	sl, r0
 8007a58:	468b      	mov	fp, r1
 8007a5a:	f7f9 f855 	bl	8000b08 <__aeabi_dcmpeq>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d0c1      	beq.n	80079e6 <_strtod_l+0x8de>
 8007a62:	e611      	b.n	8007688 <_strtod_l+0x580>
 8007a64:	fffffc02 	.word	0xfffffc02
 8007a68:	7ff00000 	.word	0x7ff00000
 8007a6c:	39500000 	.word	0x39500000
 8007a70:	000fffff 	.word	0x000fffff
 8007a74:	7fefffff 	.word	0x7fefffff
 8007a78:	0800adb0 	.word	0x0800adb0
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f002 f824 	bl	8009acc <__ratio>
 8007a84:	ec59 8b10 	vmov	r8, r9, d0
 8007a88:	ee10 0a10 	vmov	r0, s0
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a92:	4649      	mov	r1, r9
 8007a94:	f7f9 f84c 	bl	8000b30 <__aeabi_dcmple>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d07a      	beq.n	8007b92 <_strtod_l+0xa8a>
 8007a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04a      	beq.n	8007b38 <_strtod_l+0xa30>
 8007aa2:	4b95      	ldr	r3, [pc, #596]	; (8007cf8 <_strtod_l+0xbf0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007aaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007cf8 <_strtod_l+0xbf0>
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	4b92      	ldr	r3, [pc, #584]	; (8007cfc <_strtod_l+0xbf4>)
 8007ab4:	403b      	ands	r3, r7
 8007ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aba:	4b91      	ldr	r3, [pc, #580]	; (8007d00 <_strtod_l+0xbf8>)
 8007abc:	429a      	cmp	r2, r3
 8007abe:	f040 80b0 	bne.w	8007c22 <_strtod_l+0xb1a>
 8007ac2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ac6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aca:	ec4b ab10 	vmov	d0, sl, fp
 8007ace:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ad2:	f001 ff23 	bl	800991c <__ulp>
 8007ad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ada:	ec53 2b10 	vmov	r2, r3, d0
 8007ade:	f7f8 fdab 	bl	8000638 <__aeabi_dmul>
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	465b      	mov	r3, fp
 8007ae6:	f7f8 fbf1 	bl	80002cc <__adddf3>
 8007aea:	460b      	mov	r3, r1
 8007aec:	4983      	ldr	r1, [pc, #524]	; (8007cfc <_strtod_l+0xbf4>)
 8007aee:	4a85      	ldr	r2, [pc, #532]	; (8007d04 <_strtod_l+0xbfc>)
 8007af0:	4019      	ands	r1, r3
 8007af2:	4291      	cmp	r1, r2
 8007af4:	4682      	mov	sl, r0
 8007af6:	d960      	bls.n	8007bba <_strtod_l+0xab2>
 8007af8:	ee18 3a90 	vmov	r3, s17
 8007afc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d104      	bne.n	8007b0e <_strtod_l+0xa06>
 8007b04:	ee18 3a10 	vmov	r3, s16
 8007b08:	3301      	adds	r3, #1
 8007b0a:	f43f ad45 	beq.w	8007598 <_strtod_l+0x490>
 8007b0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d10 <_strtod_l+0xc08>
 8007b12:	f04f 3aff 	mov.w	sl, #4294967295
 8007b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f001 fbcd 	bl	80092b8 <_Bfree>
 8007b1e:	9905      	ldr	r1, [sp, #20]
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fbc9 	bl	80092b8 <_Bfree>
 8007b26:	4631      	mov	r1, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 fbc5 	bl	80092b8 <_Bfree>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4620      	mov	r0, r4
 8007b32:	f001 fbc1 	bl	80092b8 <_Bfree>
 8007b36:	e61a      	b.n	800776e <_strtod_l+0x666>
 8007b38:	f1ba 0f00 	cmp.w	sl, #0
 8007b3c:	d11b      	bne.n	8007b76 <_strtod_l+0xa6e>
 8007b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b42:	b9f3      	cbnz	r3, 8007b82 <_strtod_l+0xa7a>
 8007b44:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <_strtod_l+0xbf0>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	f7f8 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8007b50:	b9d0      	cbnz	r0, 8007b88 <_strtod_l+0xa80>
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	4b6c      	ldr	r3, [pc, #432]	; (8007d08 <_strtod_l+0xc00>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f7f8 fd6d 	bl	8000638 <__aeabi_dmul>
 8007b5e:	4680      	mov	r8, r0
 8007b60:	4689      	mov	r9, r1
 8007b62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b6a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b74:	e79d      	b.n	8007ab2 <_strtod_l+0x9aa>
 8007b76:	f1ba 0f01 	cmp.w	sl, #1
 8007b7a:	d102      	bne.n	8007b82 <_strtod_l+0xa7a>
 8007b7c:	2f00      	cmp	r7, #0
 8007b7e:	f43f ad83 	beq.w	8007688 <_strtod_l+0x580>
 8007b82:	4b62      	ldr	r3, [pc, #392]	; (8007d0c <_strtod_l+0xc04>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	e78e      	b.n	8007aa6 <_strtod_l+0x99e>
 8007b88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d08 <_strtod_l+0xc00>
 8007b8c:	f04f 0800 	mov.w	r8, #0
 8007b90:	e7e7      	b.n	8007b62 <_strtod_l+0xa5a>
 8007b92:	4b5d      	ldr	r3, [pc, #372]	; (8007d08 <_strtod_l+0xc00>)
 8007b94:	4640      	mov	r0, r8
 8007b96:	4649      	mov	r1, r9
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f7f8 fd4d 	bl	8000638 <__aeabi_dmul>
 8007b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba0:	4680      	mov	r8, r0
 8007ba2:	4689      	mov	r9, r1
 8007ba4:	b933      	cbnz	r3, 8007bb4 <_strtod_l+0xaac>
 8007ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007baa:	900e      	str	r0, [sp, #56]	; 0x38
 8007bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007bb2:	e7dd      	b.n	8007b70 <_strtod_l+0xa68>
 8007bb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007bb8:	e7f9      	b.n	8007bae <_strtod_l+0xaa6>
 8007bba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1a8      	bne.n	8007b16 <_strtod_l+0xa0e>
 8007bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bca:	0d1b      	lsrs	r3, r3, #20
 8007bcc:	051b      	lsls	r3, r3, #20
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d1a1      	bne.n	8007b16 <_strtod_l+0xa0e>
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f9 f88f 	bl	8000cf8 <__aeabi_d2lz>
 8007bda:	f7f8 fcff 	bl	80005dc <__aeabi_l2d>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fb6f 	bl	80002c8 <__aeabi_dsub>
 8007bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bf0:	ea43 030a 	orr.w	r3, r3, sl
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	4689      	mov	r9, r1
 8007bfa:	d055      	beq.n	8007ca8 <_strtod_l+0xba0>
 8007bfc:	a336      	add	r3, pc, #216	; (adr r3, 8007cd8 <_strtod_l+0xbd0>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f47f acd0 	bne.w	80075ac <_strtod_l+0x4a4>
 8007c0c:	a334      	add	r3, pc, #208	; (adr r3, 8007ce0 <_strtod_l+0xbd8>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 ff9f 	bl	8000b58 <__aeabi_dcmpgt>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f43f af7b 	beq.w	8007b16 <_strtod_l+0xa0e>
 8007c20:	e4c4      	b.n	80075ac <_strtod_l+0x4a4>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	b333      	cbz	r3, 8007c74 <_strtod_l+0xb6c>
 8007c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c2c:	d822      	bhi.n	8007c74 <_strtod_l+0xb6c>
 8007c2e:	a32e      	add	r3, pc, #184	; (adr r3, 8007ce8 <_strtod_l+0xbe0>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	4640      	mov	r0, r8
 8007c36:	4649      	mov	r1, r9
 8007c38:	f7f8 ff7a 	bl	8000b30 <__aeabi_dcmple>
 8007c3c:	b1a0      	cbz	r0, 8007c68 <_strtod_l+0xb60>
 8007c3e:	4649      	mov	r1, r9
 8007c40:	4640      	mov	r0, r8
 8007c42:	f7f8 ffd1 	bl	8000be8 <__aeabi_d2uiz>
 8007c46:	2801      	cmp	r0, #1
 8007c48:	bf38      	it	cc
 8007c4a:	2001      	movcc	r0, #1
 8007c4c:	f7f8 fc7a 	bl	8000544 <__aeabi_ui2d>
 8007c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c52:	4680      	mov	r8, r0
 8007c54:	4689      	mov	r9, r1
 8007c56:	bb23      	cbnz	r3, 8007ca2 <_strtod_l+0xb9a>
 8007c58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c5c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c5e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	9309      	str	r3, [sp, #36]	; 0x24
 8007c74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c78:	eeb0 0a48 	vmov.f32	s0, s16
 8007c7c:	eef0 0a68 	vmov.f32	s1, s17
 8007c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c84:	f001 fe4a 	bl	800991c <__ulp>
 8007c88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c8c:	ec53 2b10 	vmov	r2, r3, d0
 8007c90:	f7f8 fcd2 	bl	8000638 <__aeabi_dmul>
 8007c94:	ec53 2b18 	vmov	r2, r3, d8
 8007c98:	f7f8 fb18 	bl	80002cc <__adddf3>
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	468b      	mov	fp, r1
 8007ca0:	e78d      	b.n	8007bbe <_strtod_l+0xab6>
 8007ca2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007ca6:	e7db      	b.n	8007c60 <_strtod_l+0xb58>
 8007ca8:	a311      	add	r3, pc, #68	; (adr r3, 8007cf0 <_strtod_l+0xbe8>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 ff35 	bl	8000b1c <__aeabi_dcmplt>
 8007cb2:	e7b2      	b.n	8007c1a <_strtod_l+0xb12>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	f7ff ba6b 	b.w	8007198 <_strtod_l+0x90>
 8007cc2:	2a65      	cmp	r2, #101	; 0x65
 8007cc4:	f43f ab5f 	beq.w	8007386 <_strtod_l+0x27e>
 8007cc8:	2a45      	cmp	r2, #69	; 0x45
 8007cca:	f43f ab5c 	beq.w	8007386 <_strtod_l+0x27e>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f7ff bb94 	b.w	80073fc <_strtod_l+0x2f4>
 8007cd4:	f3af 8000 	nop.w
 8007cd8:	94a03595 	.word	0x94a03595
 8007cdc:	3fdfffff 	.word	0x3fdfffff
 8007ce0:	35afe535 	.word	0x35afe535
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	ffc00000 	.word	0xffc00000
 8007cec:	41dfffff 	.word	0x41dfffff
 8007cf0:	94a03595 	.word	0x94a03595
 8007cf4:	3fcfffff 	.word	0x3fcfffff
 8007cf8:	3ff00000 	.word	0x3ff00000
 8007cfc:	7ff00000 	.word	0x7ff00000
 8007d00:	7fe00000 	.word	0x7fe00000
 8007d04:	7c9fffff 	.word	0x7c9fffff
 8007d08:	3fe00000 	.word	0x3fe00000
 8007d0c:	bff00000 	.word	0xbff00000
 8007d10:	7fefffff 	.word	0x7fefffff

08007d14 <_strtod_r>:
 8007d14:	4b01      	ldr	r3, [pc, #4]	; (8007d1c <_strtod_r+0x8>)
 8007d16:	f7ff b9f7 	b.w	8007108 <_strtod_l>
 8007d1a:	bf00      	nop
 8007d1c:	20000078 	.word	0x20000078

08007d20 <_strtol_l.constprop.0>:
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d26:	d001      	beq.n	8007d2c <_strtol_l.constprop.0+0xc>
 8007d28:	2b24      	cmp	r3, #36	; 0x24
 8007d2a:	d906      	bls.n	8007d3a <_strtol_l.constprop.0+0x1a>
 8007d2c:	f7fe faf0 	bl	8006310 <__errno>
 8007d30:	2316      	movs	r3, #22
 8007d32:	6003      	str	r3, [r0, #0]
 8007d34:	2000      	movs	r0, #0
 8007d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e20 <_strtol_l.constprop.0+0x100>
 8007d3e:	460d      	mov	r5, r1
 8007d40:	462e      	mov	r6, r5
 8007d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d4a:	f017 0708 	ands.w	r7, r7, #8
 8007d4e:	d1f7      	bne.n	8007d40 <_strtol_l.constprop.0+0x20>
 8007d50:	2c2d      	cmp	r4, #45	; 0x2d
 8007d52:	d132      	bne.n	8007dba <_strtol_l.constprop.0+0x9a>
 8007d54:	782c      	ldrb	r4, [r5, #0]
 8007d56:	2701      	movs	r7, #1
 8007d58:	1cb5      	adds	r5, r6, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d05b      	beq.n	8007e16 <_strtol_l.constprop.0+0xf6>
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d109      	bne.n	8007d76 <_strtol_l.constprop.0+0x56>
 8007d62:	2c30      	cmp	r4, #48	; 0x30
 8007d64:	d107      	bne.n	8007d76 <_strtol_l.constprop.0+0x56>
 8007d66:	782c      	ldrb	r4, [r5, #0]
 8007d68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d6c:	2c58      	cmp	r4, #88	; 0x58
 8007d6e:	d14d      	bne.n	8007e0c <_strtol_l.constprop.0+0xec>
 8007d70:	786c      	ldrb	r4, [r5, #1]
 8007d72:	2310      	movs	r3, #16
 8007d74:	3502      	adds	r5, #2
 8007d76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d7e:	f04f 0c00 	mov.w	ip, #0
 8007d82:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d86:	4666      	mov	r6, ip
 8007d88:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d90:	f1be 0f09 	cmp.w	lr, #9
 8007d94:	d816      	bhi.n	8007dc4 <_strtol_l.constprop.0+0xa4>
 8007d96:	4674      	mov	r4, lr
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	dd24      	ble.n	8007de6 <_strtol_l.constprop.0+0xc6>
 8007d9c:	f1bc 0f00 	cmp.w	ip, #0
 8007da0:	db1e      	blt.n	8007de0 <_strtol_l.constprop.0+0xc0>
 8007da2:	45b1      	cmp	r9, r6
 8007da4:	d31c      	bcc.n	8007de0 <_strtol_l.constprop.0+0xc0>
 8007da6:	d101      	bne.n	8007dac <_strtol_l.constprop.0+0x8c>
 8007da8:	45a2      	cmp	sl, r4
 8007daa:	db19      	blt.n	8007de0 <_strtol_l.constprop.0+0xc0>
 8007dac:	fb06 4603 	mla	r6, r6, r3, r4
 8007db0:	f04f 0c01 	mov.w	ip, #1
 8007db4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007db8:	e7e8      	b.n	8007d8c <_strtol_l.constprop.0+0x6c>
 8007dba:	2c2b      	cmp	r4, #43	; 0x2b
 8007dbc:	bf04      	itt	eq
 8007dbe:	782c      	ldrbeq	r4, [r5, #0]
 8007dc0:	1cb5      	addeq	r5, r6, #2
 8007dc2:	e7ca      	b.n	8007d5a <_strtol_l.constprop.0+0x3a>
 8007dc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007dc8:	f1be 0f19 	cmp.w	lr, #25
 8007dcc:	d801      	bhi.n	8007dd2 <_strtol_l.constprop.0+0xb2>
 8007dce:	3c37      	subs	r4, #55	; 0x37
 8007dd0:	e7e2      	b.n	8007d98 <_strtol_l.constprop.0+0x78>
 8007dd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007dd6:	f1be 0f19 	cmp.w	lr, #25
 8007dda:	d804      	bhi.n	8007de6 <_strtol_l.constprop.0+0xc6>
 8007ddc:	3c57      	subs	r4, #87	; 0x57
 8007dde:	e7db      	b.n	8007d98 <_strtol_l.constprop.0+0x78>
 8007de0:	f04f 3cff 	mov.w	ip, #4294967295
 8007de4:	e7e6      	b.n	8007db4 <_strtol_l.constprop.0+0x94>
 8007de6:	f1bc 0f00 	cmp.w	ip, #0
 8007dea:	da05      	bge.n	8007df8 <_strtol_l.constprop.0+0xd8>
 8007dec:	2322      	movs	r3, #34	; 0x22
 8007dee:	6003      	str	r3, [r0, #0]
 8007df0:	4646      	mov	r6, r8
 8007df2:	b942      	cbnz	r2, 8007e06 <_strtol_l.constprop.0+0xe6>
 8007df4:	4630      	mov	r0, r6
 8007df6:	e79e      	b.n	8007d36 <_strtol_l.constprop.0+0x16>
 8007df8:	b107      	cbz	r7, 8007dfc <_strtol_l.constprop.0+0xdc>
 8007dfa:	4276      	negs	r6, r6
 8007dfc:	2a00      	cmp	r2, #0
 8007dfe:	d0f9      	beq.n	8007df4 <_strtol_l.constprop.0+0xd4>
 8007e00:	f1bc 0f00 	cmp.w	ip, #0
 8007e04:	d000      	beq.n	8007e08 <_strtol_l.constprop.0+0xe8>
 8007e06:	1e69      	subs	r1, r5, #1
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	e7f3      	b.n	8007df4 <_strtol_l.constprop.0+0xd4>
 8007e0c:	2430      	movs	r4, #48	; 0x30
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1b1      	bne.n	8007d76 <_strtol_l.constprop.0+0x56>
 8007e12:	2308      	movs	r3, #8
 8007e14:	e7af      	b.n	8007d76 <_strtol_l.constprop.0+0x56>
 8007e16:	2c30      	cmp	r4, #48	; 0x30
 8007e18:	d0a5      	beq.n	8007d66 <_strtol_l.constprop.0+0x46>
 8007e1a:	230a      	movs	r3, #10
 8007e1c:	e7ab      	b.n	8007d76 <_strtol_l.constprop.0+0x56>
 8007e1e:	bf00      	nop
 8007e20:	0800add9 	.word	0x0800add9

08007e24 <_strtol_r>:
 8007e24:	f7ff bf7c 	b.w	8007d20 <_strtol_l.constprop.0>

08007e28 <quorem>:
 8007e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	6903      	ldr	r3, [r0, #16]
 8007e2e:	690c      	ldr	r4, [r1, #16]
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	4607      	mov	r7, r0
 8007e34:	f2c0 8081 	blt.w	8007f3a <quorem+0x112>
 8007e38:	3c01      	subs	r4, #1
 8007e3a:	f101 0814 	add.w	r8, r1, #20
 8007e3e:	f100 0514 	add.w	r5, r0, #20
 8007e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e50:	3301      	adds	r3, #1
 8007e52:	429a      	cmp	r2, r3
 8007e54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e60:	d331      	bcc.n	8007ec6 <quorem+0x9e>
 8007e62:	f04f 0e00 	mov.w	lr, #0
 8007e66:	4640      	mov	r0, r8
 8007e68:	46ac      	mov	ip, r5
 8007e6a:	46f2      	mov	sl, lr
 8007e6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e70:	b293      	uxth	r3, r2
 8007e72:	fb06 e303 	mla	r3, r6, r3, lr
 8007e76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	ebaa 0303 	sub.w	r3, sl, r3
 8007e80:	f8dc a000 	ldr.w	sl, [ip]
 8007e84:	0c12      	lsrs	r2, r2, #16
 8007e86:	fa13 f38a 	uxtah	r3, r3, sl
 8007e8a:	fb06 e202 	mla	r2, r6, r2, lr
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	9b00      	ldr	r3, [sp, #0]
 8007e92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e96:	b292      	uxth	r2, r2
 8007e98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ea4:	4581      	cmp	r9, r0
 8007ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eaa:	f84c 3b04 	str.w	r3, [ip], #4
 8007eae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eb2:	d2db      	bcs.n	8007e6c <quorem+0x44>
 8007eb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eb8:	b92b      	cbnz	r3, 8007ec6 <quorem+0x9e>
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	429d      	cmp	r5, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	d32e      	bcc.n	8007f22 <quorem+0xfa>
 8007ec4:	613c      	str	r4, [r7, #16]
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f001 fc82 	bl	80097d0 <__mcmp>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	db24      	blt.n	8007f1a <quorem+0xf2>
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f04f 0c00 	mov.w	ip, #0
 8007ed8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007edc:	f8d0 e000 	ldr.w	lr, [r0]
 8007ee0:	b293      	uxth	r3, r2
 8007ee2:	ebac 0303 	sub.w	r3, ip, r3
 8007ee6:	0c12      	lsrs	r2, r2, #16
 8007ee8:	fa13 f38e 	uxtah	r3, r3, lr
 8007eec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007efa:	45c1      	cmp	r9, r8
 8007efc:	f840 3b04 	str.w	r3, [r0], #4
 8007f00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f04:	d2e8      	bcs.n	8007ed8 <quorem+0xb0>
 8007f06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f0e:	b922      	cbnz	r2, 8007f1a <quorem+0xf2>
 8007f10:	3b04      	subs	r3, #4
 8007f12:	429d      	cmp	r5, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	d30a      	bcc.n	8007f2e <quorem+0x106>
 8007f18:	613c      	str	r4, [r7, #16]
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	b003      	add	sp, #12
 8007f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	d1cc      	bne.n	8007ec4 <quorem+0x9c>
 8007f2a:	3c01      	subs	r4, #1
 8007f2c:	e7c7      	b.n	8007ebe <quorem+0x96>
 8007f2e:	6812      	ldr	r2, [r2, #0]
 8007f30:	3b04      	subs	r3, #4
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	d1f0      	bne.n	8007f18 <quorem+0xf0>
 8007f36:	3c01      	subs	r4, #1
 8007f38:	e7eb      	b.n	8007f12 <quorem+0xea>
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e7ee      	b.n	8007f1c <quorem+0xf4>
	...

08007f40 <_dtoa_r>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	ed2d 8b04 	vpush	{d8-d9}
 8007f48:	ec57 6b10 	vmov	r6, r7, d0
 8007f4c:	b093      	sub	sp, #76	; 0x4c
 8007f4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f54:	9106      	str	r1, [sp, #24]
 8007f56:	ee10 aa10 	vmov	sl, s0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f60:	46bb      	mov	fp, r7
 8007f62:	b975      	cbnz	r5, 8007f82 <_dtoa_r+0x42>
 8007f64:	2010      	movs	r0, #16
 8007f66:	f001 f94d 	bl	8009204 <malloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f6e:	b920      	cbnz	r0, 8007f7a <_dtoa_r+0x3a>
 8007f70:	4ba7      	ldr	r3, [pc, #668]	; (8008210 <_dtoa_r+0x2d0>)
 8007f72:	21ea      	movs	r1, #234	; 0xea
 8007f74:	48a7      	ldr	r0, [pc, #668]	; (8008214 <_dtoa_r+0x2d4>)
 8007f76:	f002 f8ad 	bl	800a0d4 <__assert_func>
 8007f7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f7e:	6005      	str	r5, [r0, #0]
 8007f80:	60c5      	str	r5, [r0, #12]
 8007f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f84:	6819      	ldr	r1, [r3, #0]
 8007f86:	b151      	cbz	r1, 8007f9e <_dtoa_r+0x5e>
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	604a      	str	r2, [r1, #4]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4093      	lsls	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
 8007f92:	4620      	mov	r0, r4
 8007f94:	f001 f990 	bl	80092b8 <_Bfree>
 8007f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	1e3b      	subs	r3, r7, #0
 8007fa0:	bfaa      	itet	ge
 8007fa2:	2300      	movge	r3, #0
 8007fa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fa8:	f8c8 3000 	strge.w	r3, [r8]
 8007fac:	4b9a      	ldr	r3, [pc, #616]	; (8008218 <_dtoa_r+0x2d8>)
 8007fae:	bfbc      	itt	lt
 8007fb0:	2201      	movlt	r2, #1
 8007fb2:	f8c8 2000 	strlt.w	r2, [r8]
 8007fb6:	ea33 030b 	bics.w	r3, r3, fp
 8007fba:	d11b      	bne.n	8007ff4 <_dtoa_r+0xb4>
 8007fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fc8:	4333      	orrs	r3, r6
 8007fca:	f000 8592 	beq.w	8008af2 <_dtoa_r+0xbb2>
 8007fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd0:	b963      	cbnz	r3, 8007fec <_dtoa_r+0xac>
 8007fd2:	4b92      	ldr	r3, [pc, #584]	; (800821c <_dtoa_r+0x2dc>)
 8007fd4:	e022      	b.n	800801c <_dtoa_r+0xdc>
 8007fd6:	4b92      	ldr	r3, [pc, #584]	; (8008220 <_dtoa_r+0x2e0>)
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	9801      	ldr	r0, [sp, #4]
 8007fe2:	b013      	add	sp, #76	; 0x4c
 8007fe4:	ecbd 8b04 	vpop	{d8-d9}
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	4b8b      	ldr	r3, [pc, #556]	; (800821c <_dtoa_r+0x2dc>)
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	3303      	adds	r3, #3
 8007ff2:	e7f3      	b.n	8007fdc <_dtoa_r+0x9c>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	4659      	mov	r1, fp
 8007ffc:	f7f8 fd84 	bl	8000b08 <__aeabi_dcmpeq>
 8008000:	ec4b ab19 	vmov	d9, sl, fp
 8008004:	4680      	mov	r8, r0
 8008006:	b158      	cbz	r0, 8008020 <_dtoa_r+0xe0>
 8008008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800800a:	2301      	movs	r3, #1
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 856b 	beq.w	8008aec <_dtoa_r+0xbac>
 8008016:	4883      	ldr	r0, [pc, #524]	; (8008224 <_dtoa_r+0x2e4>)
 8008018:	6018      	str	r0, [r3, #0]
 800801a:	1e43      	subs	r3, r0, #1
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	e7df      	b.n	8007fe0 <_dtoa_r+0xa0>
 8008020:	ec4b ab10 	vmov	d0, sl, fp
 8008024:	aa10      	add	r2, sp, #64	; 0x40
 8008026:	a911      	add	r1, sp, #68	; 0x44
 8008028:	4620      	mov	r0, r4
 800802a:	f001 fcf3 	bl	8009a14 <__d2b>
 800802e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008032:	ee08 0a10 	vmov	s16, r0
 8008036:	2d00      	cmp	r5, #0
 8008038:	f000 8084 	beq.w	8008144 <_dtoa_r+0x204>
 800803c:	ee19 3a90 	vmov	r3, s19
 8008040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008044:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008048:	4656      	mov	r6, sl
 800804a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800804e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008052:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008056:	4b74      	ldr	r3, [pc, #464]	; (8008228 <_dtoa_r+0x2e8>)
 8008058:	2200      	movs	r2, #0
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 f933 	bl	80002c8 <__aeabi_dsub>
 8008062:	a365      	add	r3, pc, #404	; (adr r3, 80081f8 <_dtoa_r+0x2b8>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 fae6 	bl	8000638 <__aeabi_dmul>
 800806c:	a364      	add	r3, pc, #400	; (adr r3, 8008200 <_dtoa_r+0x2c0>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f92b 	bl	80002cc <__adddf3>
 8008076:	4606      	mov	r6, r0
 8008078:	4628      	mov	r0, r5
 800807a:	460f      	mov	r7, r1
 800807c:	f7f8 fa72 	bl	8000564 <__aeabi_i2d>
 8008080:	a361      	add	r3, pc, #388	; (adr r3, 8008208 <_dtoa_r+0x2c8>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 fad7 	bl	8000638 <__aeabi_dmul>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 f91b 	bl	80002cc <__adddf3>
 8008096:	4606      	mov	r6, r0
 8008098:	460f      	mov	r7, r1
 800809a:	f7f8 fd7d 	bl	8000b98 <__aeabi_d2iz>
 800809e:	2200      	movs	r2, #0
 80080a0:	9000      	str	r0, [sp, #0]
 80080a2:	2300      	movs	r3, #0
 80080a4:	4630      	mov	r0, r6
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fd38 	bl	8000b1c <__aeabi_dcmplt>
 80080ac:	b150      	cbz	r0, 80080c4 <_dtoa_r+0x184>
 80080ae:	9800      	ldr	r0, [sp, #0]
 80080b0:	f7f8 fa58 	bl	8000564 <__aeabi_i2d>
 80080b4:	4632      	mov	r2, r6
 80080b6:	463b      	mov	r3, r7
 80080b8:	f7f8 fd26 	bl	8000b08 <__aeabi_dcmpeq>
 80080bc:	b910      	cbnz	r0, 80080c4 <_dtoa_r+0x184>
 80080be:	9b00      	ldr	r3, [sp, #0]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	2b16      	cmp	r3, #22
 80080c8:	d85a      	bhi.n	8008180 <_dtoa_r+0x240>
 80080ca:	9a00      	ldr	r2, [sp, #0]
 80080cc:	4b57      	ldr	r3, [pc, #348]	; (800822c <_dtoa_r+0x2ec>)
 80080ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	ec51 0b19 	vmov	r0, r1, d9
 80080da:	f7f8 fd1f 	bl	8000b1c <__aeabi_dcmplt>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d050      	beq.n	8008184 <_dtoa_r+0x244>
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	2300      	movs	r3, #0
 80080ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080ee:	1b5d      	subs	r5, r3, r5
 80080f0:	1e6b      	subs	r3, r5, #1
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	bf45      	ittet	mi
 80080f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80080fa:	9304      	strmi	r3, [sp, #16]
 80080fc:	2300      	movpl	r3, #0
 80080fe:	2300      	movmi	r3, #0
 8008100:	bf4c      	ite	mi
 8008102:	9305      	strmi	r3, [sp, #20]
 8008104:	9304      	strpl	r3, [sp, #16]
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	db3d      	blt.n	8008188 <_dtoa_r+0x248>
 800810c:	9b05      	ldr	r3, [sp, #20]
 800810e:	9a00      	ldr	r2, [sp, #0]
 8008110:	920a      	str	r2, [sp, #40]	; 0x28
 8008112:	4413      	add	r3, r2
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	2300      	movs	r3, #0
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	9b06      	ldr	r3, [sp, #24]
 800811c:	2b09      	cmp	r3, #9
 800811e:	f200 8089 	bhi.w	8008234 <_dtoa_r+0x2f4>
 8008122:	2b05      	cmp	r3, #5
 8008124:	bfc4      	itt	gt
 8008126:	3b04      	subgt	r3, #4
 8008128:	9306      	strgt	r3, [sp, #24]
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	f1a3 0302 	sub.w	r3, r3, #2
 8008130:	bfcc      	ite	gt
 8008132:	2500      	movgt	r5, #0
 8008134:	2501      	movle	r5, #1
 8008136:	2b03      	cmp	r3, #3
 8008138:	f200 8087 	bhi.w	800824a <_dtoa_r+0x30a>
 800813c:	e8df f003 	tbb	[pc, r3]
 8008140:	59383a2d 	.word	0x59383a2d
 8008144:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008148:	441d      	add	r5, r3
 800814a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800814e:	2b20      	cmp	r3, #32
 8008150:	bfc1      	itttt	gt
 8008152:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008156:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800815a:	fa0b f303 	lslgt.w	r3, fp, r3
 800815e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008162:	bfda      	itte	le
 8008164:	f1c3 0320 	rsble	r3, r3, #32
 8008168:	fa06 f003 	lslle.w	r0, r6, r3
 800816c:	4318      	orrgt	r0, r3
 800816e:	f7f8 f9e9 	bl	8000544 <__aeabi_ui2d>
 8008172:	2301      	movs	r3, #1
 8008174:	4606      	mov	r6, r0
 8008176:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800817a:	3d01      	subs	r5, #1
 800817c:	930e      	str	r3, [sp, #56]	; 0x38
 800817e:	e76a      	b.n	8008056 <_dtoa_r+0x116>
 8008180:	2301      	movs	r3, #1
 8008182:	e7b2      	b.n	80080ea <_dtoa_r+0x1aa>
 8008184:	900b      	str	r0, [sp, #44]	; 0x2c
 8008186:	e7b1      	b.n	80080ec <_dtoa_r+0x1ac>
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	9a00      	ldr	r2, [sp, #0]
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	9304      	str	r3, [sp, #16]
 8008190:	4253      	negs	r3, r2
 8008192:	9307      	str	r3, [sp, #28]
 8008194:	2300      	movs	r3, #0
 8008196:	930a      	str	r3, [sp, #40]	; 0x28
 8008198:	e7bf      	b.n	800811a <_dtoa_r+0x1da>
 800819a:	2300      	movs	r3, #0
 800819c:	9308      	str	r3, [sp, #32]
 800819e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dc55      	bgt.n	8008250 <_dtoa_r+0x310>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081aa:	461a      	mov	r2, r3
 80081ac:	9209      	str	r2, [sp, #36]	; 0x24
 80081ae:	e00c      	b.n	80081ca <_dtoa_r+0x28a>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e7f3      	b.n	800819c <_dtoa_r+0x25c>
 80081b4:	2300      	movs	r3, #0
 80081b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9b00      	ldr	r3, [sp, #0]
 80081bc:	4413      	add	r3, r2
 80081be:	9302      	str	r3, [sp, #8]
 80081c0:	3301      	adds	r3, #1
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	bfb8      	it	lt
 80081c8:	2301      	movlt	r3, #1
 80081ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081cc:	2200      	movs	r2, #0
 80081ce:	6042      	str	r2, [r0, #4]
 80081d0:	2204      	movs	r2, #4
 80081d2:	f102 0614 	add.w	r6, r2, #20
 80081d6:	429e      	cmp	r6, r3
 80081d8:	6841      	ldr	r1, [r0, #4]
 80081da:	d93d      	bls.n	8008258 <_dtoa_r+0x318>
 80081dc:	4620      	mov	r0, r4
 80081de:	f001 f82b 	bl	8009238 <_Balloc>
 80081e2:	9001      	str	r0, [sp, #4]
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d13b      	bne.n	8008260 <_dtoa_r+0x320>
 80081e8:	4b11      	ldr	r3, [pc, #68]	; (8008230 <_dtoa_r+0x2f0>)
 80081ea:	4602      	mov	r2, r0
 80081ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081f0:	e6c0      	b.n	8007f74 <_dtoa_r+0x34>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7df      	b.n	80081b6 <_dtoa_r+0x276>
 80081f6:	bf00      	nop
 80081f8:	636f4361 	.word	0x636f4361
 80081fc:	3fd287a7 	.word	0x3fd287a7
 8008200:	8b60c8b3 	.word	0x8b60c8b3
 8008204:	3fc68a28 	.word	0x3fc68a28
 8008208:	509f79fb 	.word	0x509f79fb
 800820c:	3fd34413 	.word	0x3fd34413
 8008210:	0800aee6 	.word	0x0800aee6
 8008214:	0800aefd 	.word	0x0800aefd
 8008218:	7ff00000 	.word	0x7ff00000
 800821c:	0800aee2 	.word	0x0800aee2
 8008220:	0800aed9 	.word	0x0800aed9
 8008224:	0800ad5d 	.word	0x0800ad5d
 8008228:	3ff80000 	.word	0x3ff80000
 800822c:	0800b068 	.word	0x0800b068
 8008230:	0800af58 	.word	0x0800af58
 8008234:	2501      	movs	r5, #1
 8008236:	2300      	movs	r3, #0
 8008238:	9306      	str	r3, [sp, #24]
 800823a:	9508      	str	r5, [sp, #32]
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008244:	2200      	movs	r2, #0
 8008246:	2312      	movs	r3, #18
 8008248:	e7b0      	b.n	80081ac <_dtoa_r+0x26c>
 800824a:	2301      	movs	r3, #1
 800824c:	9308      	str	r3, [sp, #32]
 800824e:	e7f5      	b.n	800823c <_dtoa_r+0x2fc>
 8008250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008252:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008256:	e7b8      	b.n	80081ca <_dtoa_r+0x28a>
 8008258:	3101      	adds	r1, #1
 800825a:	6041      	str	r1, [r0, #4]
 800825c:	0052      	lsls	r2, r2, #1
 800825e:	e7b8      	b.n	80081d2 <_dtoa_r+0x292>
 8008260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008262:	9a01      	ldr	r2, [sp, #4]
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	2b0e      	cmp	r3, #14
 800826a:	f200 809d 	bhi.w	80083a8 <_dtoa_r+0x468>
 800826e:	2d00      	cmp	r5, #0
 8008270:	f000 809a 	beq.w	80083a8 <_dtoa_r+0x468>
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd32      	ble.n	80082e0 <_dtoa_r+0x3a0>
 800827a:	4ab7      	ldr	r2, [pc, #732]	; (8008558 <_dtoa_r+0x618>)
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	05d8      	lsls	r0, r3, #23
 800828c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008290:	d516      	bpl.n	80082c0 <_dtoa_r+0x380>
 8008292:	4bb2      	ldr	r3, [pc, #712]	; (800855c <_dtoa_r+0x61c>)
 8008294:	ec51 0b19 	vmov	r0, r1, d9
 8008298:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800829c:	f7f8 faf6 	bl	800088c <__aeabi_ddiv>
 80082a0:	f007 070f 	and.w	r7, r7, #15
 80082a4:	4682      	mov	sl, r0
 80082a6:	468b      	mov	fp, r1
 80082a8:	2503      	movs	r5, #3
 80082aa:	4eac      	ldr	r6, [pc, #688]	; (800855c <_dtoa_r+0x61c>)
 80082ac:	b957      	cbnz	r7, 80082c4 <_dtoa_r+0x384>
 80082ae:	4642      	mov	r2, r8
 80082b0:	464b      	mov	r3, r9
 80082b2:	4650      	mov	r0, sl
 80082b4:	4659      	mov	r1, fp
 80082b6:	f7f8 fae9 	bl	800088c <__aeabi_ddiv>
 80082ba:	4682      	mov	sl, r0
 80082bc:	468b      	mov	fp, r1
 80082be:	e028      	b.n	8008312 <_dtoa_r+0x3d2>
 80082c0:	2502      	movs	r5, #2
 80082c2:	e7f2      	b.n	80082aa <_dtoa_r+0x36a>
 80082c4:	07f9      	lsls	r1, r7, #31
 80082c6:	d508      	bpl.n	80082da <_dtoa_r+0x39a>
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082d0:	f7f8 f9b2 	bl	8000638 <__aeabi_dmul>
 80082d4:	3501      	adds	r5, #1
 80082d6:	4680      	mov	r8, r0
 80082d8:	4689      	mov	r9, r1
 80082da:	107f      	asrs	r7, r7, #1
 80082dc:	3608      	adds	r6, #8
 80082de:	e7e5      	b.n	80082ac <_dtoa_r+0x36c>
 80082e0:	f000 809b 	beq.w	800841a <_dtoa_r+0x4da>
 80082e4:	9b00      	ldr	r3, [sp, #0]
 80082e6:	4f9d      	ldr	r7, [pc, #628]	; (800855c <_dtoa_r+0x61c>)
 80082e8:	425e      	negs	r6, r3
 80082ea:	4b9b      	ldr	r3, [pc, #620]	; (8008558 <_dtoa_r+0x618>)
 80082ec:	f006 020f 	and.w	r2, r6, #15
 80082f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	ec51 0b19 	vmov	r0, r1, d9
 80082fc:	f7f8 f99c 	bl	8000638 <__aeabi_dmul>
 8008300:	1136      	asrs	r6, r6, #4
 8008302:	4682      	mov	sl, r0
 8008304:	468b      	mov	fp, r1
 8008306:	2300      	movs	r3, #0
 8008308:	2502      	movs	r5, #2
 800830a:	2e00      	cmp	r6, #0
 800830c:	d17a      	bne.n	8008404 <_dtoa_r+0x4c4>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1d3      	bne.n	80082ba <_dtoa_r+0x37a>
 8008312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8082 	beq.w	800841e <_dtoa_r+0x4de>
 800831a:	4b91      	ldr	r3, [pc, #580]	; (8008560 <_dtoa_r+0x620>)
 800831c:	2200      	movs	r2, #0
 800831e:	4650      	mov	r0, sl
 8008320:	4659      	mov	r1, fp
 8008322:	f7f8 fbfb 	bl	8000b1c <__aeabi_dcmplt>
 8008326:	2800      	cmp	r0, #0
 8008328:	d079      	beq.n	800841e <_dtoa_r+0x4de>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d076      	beq.n	800841e <_dtoa_r+0x4de>
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dd36      	ble.n	80083a4 <_dtoa_r+0x464>
 8008336:	9b00      	ldr	r3, [sp, #0]
 8008338:	4650      	mov	r0, sl
 800833a:	4659      	mov	r1, fp
 800833c:	1e5f      	subs	r7, r3, #1
 800833e:	2200      	movs	r2, #0
 8008340:	4b88      	ldr	r3, [pc, #544]	; (8008564 <_dtoa_r+0x624>)
 8008342:	f7f8 f979 	bl	8000638 <__aeabi_dmul>
 8008346:	9e02      	ldr	r6, [sp, #8]
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	3501      	adds	r5, #1
 800834e:	4628      	mov	r0, r5
 8008350:	f7f8 f908 	bl	8000564 <__aeabi_i2d>
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	f7f8 f96e 	bl	8000638 <__aeabi_dmul>
 800835c:	4b82      	ldr	r3, [pc, #520]	; (8008568 <_dtoa_r+0x628>)
 800835e:	2200      	movs	r2, #0
 8008360:	f7f7 ffb4 	bl	80002cc <__adddf3>
 8008364:	46d0      	mov	r8, sl
 8008366:	46d9      	mov	r9, fp
 8008368:	4682      	mov	sl, r0
 800836a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800836e:	2e00      	cmp	r6, #0
 8008370:	d158      	bne.n	8008424 <_dtoa_r+0x4e4>
 8008372:	4b7e      	ldr	r3, [pc, #504]	; (800856c <_dtoa_r+0x62c>)
 8008374:	2200      	movs	r2, #0
 8008376:	4640      	mov	r0, r8
 8008378:	4649      	mov	r1, r9
 800837a:	f7f7 ffa5 	bl	80002c8 <__aeabi_dsub>
 800837e:	4652      	mov	r2, sl
 8008380:	465b      	mov	r3, fp
 8008382:	4680      	mov	r8, r0
 8008384:	4689      	mov	r9, r1
 8008386:	f7f8 fbe7 	bl	8000b58 <__aeabi_dcmpgt>
 800838a:	2800      	cmp	r0, #0
 800838c:	f040 8295 	bne.w	80088ba <_dtoa_r+0x97a>
 8008390:	4652      	mov	r2, sl
 8008392:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f8 fbbf 	bl	8000b1c <__aeabi_dcmplt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f040 8289 	bne.w	80088b6 <_dtoa_r+0x976>
 80083a4:	ec5b ab19 	vmov	sl, fp, d9
 80083a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f2c0 8148 	blt.w	8008640 <_dtoa_r+0x700>
 80083b0:	9a00      	ldr	r2, [sp, #0]
 80083b2:	2a0e      	cmp	r2, #14
 80083b4:	f300 8144 	bgt.w	8008640 <_dtoa_r+0x700>
 80083b8:	4b67      	ldr	r3, [pc, #412]	; (8008558 <_dtoa_r+0x618>)
 80083ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f280 80d5 	bge.w	8008574 <_dtoa_r+0x634>
 80083ca:	9b03      	ldr	r3, [sp, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f300 80d1 	bgt.w	8008574 <_dtoa_r+0x634>
 80083d2:	f040 826f 	bne.w	80088b4 <_dtoa_r+0x974>
 80083d6:	4b65      	ldr	r3, [pc, #404]	; (800856c <_dtoa_r+0x62c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	4640      	mov	r0, r8
 80083dc:	4649      	mov	r1, r9
 80083de:	f7f8 f92b 	bl	8000638 <__aeabi_dmul>
 80083e2:	4652      	mov	r2, sl
 80083e4:	465b      	mov	r3, fp
 80083e6:	f7f8 fbad 	bl	8000b44 <__aeabi_dcmpge>
 80083ea:	9e03      	ldr	r6, [sp, #12]
 80083ec:	4637      	mov	r7, r6
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f040 8245 	bne.w	800887e <_dtoa_r+0x93e>
 80083f4:	9d01      	ldr	r5, [sp, #4]
 80083f6:	2331      	movs	r3, #49	; 0x31
 80083f8:	f805 3b01 	strb.w	r3, [r5], #1
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	e240      	b.n	8008886 <_dtoa_r+0x946>
 8008404:	07f2      	lsls	r2, r6, #31
 8008406:	d505      	bpl.n	8008414 <_dtoa_r+0x4d4>
 8008408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800840c:	f7f8 f914 	bl	8000638 <__aeabi_dmul>
 8008410:	3501      	adds	r5, #1
 8008412:	2301      	movs	r3, #1
 8008414:	1076      	asrs	r6, r6, #1
 8008416:	3708      	adds	r7, #8
 8008418:	e777      	b.n	800830a <_dtoa_r+0x3ca>
 800841a:	2502      	movs	r5, #2
 800841c:	e779      	b.n	8008312 <_dtoa_r+0x3d2>
 800841e:	9f00      	ldr	r7, [sp, #0]
 8008420:	9e03      	ldr	r6, [sp, #12]
 8008422:	e794      	b.n	800834e <_dtoa_r+0x40e>
 8008424:	9901      	ldr	r1, [sp, #4]
 8008426:	4b4c      	ldr	r3, [pc, #304]	; (8008558 <_dtoa_r+0x618>)
 8008428:	4431      	add	r1, r6
 800842a:	910d      	str	r1, [sp, #52]	; 0x34
 800842c:	9908      	ldr	r1, [sp, #32]
 800842e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008432:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008436:	2900      	cmp	r1, #0
 8008438:	d043      	beq.n	80084c2 <_dtoa_r+0x582>
 800843a:	494d      	ldr	r1, [pc, #308]	; (8008570 <_dtoa_r+0x630>)
 800843c:	2000      	movs	r0, #0
 800843e:	f7f8 fa25 	bl	800088c <__aeabi_ddiv>
 8008442:	4652      	mov	r2, sl
 8008444:	465b      	mov	r3, fp
 8008446:	f7f7 ff3f 	bl	80002c8 <__aeabi_dsub>
 800844a:	9d01      	ldr	r5, [sp, #4]
 800844c:	4682      	mov	sl, r0
 800844e:	468b      	mov	fp, r1
 8008450:	4649      	mov	r1, r9
 8008452:	4640      	mov	r0, r8
 8008454:	f7f8 fba0 	bl	8000b98 <__aeabi_d2iz>
 8008458:	4606      	mov	r6, r0
 800845a:	f7f8 f883 	bl	8000564 <__aeabi_i2d>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	f7f7 ff2f 	bl	80002c8 <__aeabi_dsub>
 800846a:	3630      	adds	r6, #48	; 0x30
 800846c:	f805 6b01 	strb.w	r6, [r5], #1
 8008470:	4652      	mov	r2, sl
 8008472:	465b      	mov	r3, fp
 8008474:	4680      	mov	r8, r0
 8008476:	4689      	mov	r9, r1
 8008478:	f7f8 fb50 	bl	8000b1c <__aeabi_dcmplt>
 800847c:	2800      	cmp	r0, #0
 800847e:	d163      	bne.n	8008548 <_dtoa_r+0x608>
 8008480:	4642      	mov	r2, r8
 8008482:	464b      	mov	r3, r9
 8008484:	4936      	ldr	r1, [pc, #216]	; (8008560 <_dtoa_r+0x620>)
 8008486:	2000      	movs	r0, #0
 8008488:	f7f7 ff1e 	bl	80002c8 <__aeabi_dsub>
 800848c:	4652      	mov	r2, sl
 800848e:	465b      	mov	r3, fp
 8008490:	f7f8 fb44 	bl	8000b1c <__aeabi_dcmplt>
 8008494:	2800      	cmp	r0, #0
 8008496:	f040 80b5 	bne.w	8008604 <_dtoa_r+0x6c4>
 800849a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800849c:	429d      	cmp	r5, r3
 800849e:	d081      	beq.n	80083a4 <_dtoa_r+0x464>
 80084a0:	4b30      	ldr	r3, [pc, #192]	; (8008564 <_dtoa_r+0x624>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	4650      	mov	r0, sl
 80084a6:	4659      	mov	r1, fp
 80084a8:	f7f8 f8c6 	bl	8000638 <__aeabi_dmul>
 80084ac:	4b2d      	ldr	r3, [pc, #180]	; (8008564 <_dtoa_r+0x624>)
 80084ae:	4682      	mov	sl, r0
 80084b0:	468b      	mov	fp, r1
 80084b2:	4640      	mov	r0, r8
 80084b4:	4649      	mov	r1, r9
 80084b6:	2200      	movs	r2, #0
 80084b8:	f7f8 f8be 	bl	8000638 <__aeabi_dmul>
 80084bc:	4680      	mov	r8, r0
 80084be:	4689      	mov	r9, r1
 80084c0:	e7c6      	b.n	8008450 <_dtoa_r+0x510>
 80084c2:	4650      	mov	r0, sl
 80084c4:	4659      	mov	r1, fp
 80084c6:	f7f8 f8b7 	bl	8000638 <__aeabi_dmul>
 80084ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084cc:	9d01      	ldr	r5, [sp, #4]
 80084ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d0:	4682      	mov	sl, r0
 80084d2:	468b      	mov	fp, r1
 80084d4:	4649      	mov	r1, r9
 80084d6:	4640      	mov	r0, r8
 80084d8:	f7f8 fb5e 	bl	8000b98 <__aeabi_d2iz>
 80084dc:	4606      	mov	r6, r0
 80084de:	f7f8 f841 	bl	8000564 <__aeabi_i2d>
 80084e2:	3630      	adds	r6, #48	; 0x30
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f7 feec 	bl	80002c8 <__aeabi_dsub>
 80084f0:	f805 6b01 	strb.w	r6, [r5], #1
 80084f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f6:	429d      	cmp	r5, r3
 80084f8:	4680      	mov	r8, r0
 80084fa:	4689      	mov	r9, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	d124      	bne.n	800854c <_dtoa_r+0x60c>
 8008502:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <_dtoa_r+0x630>)
 8008504:	4650      	mov	r0, sl
 8008506:	4659      	mov	r1, fp
 8008508:	f7f7 fee0 	bl	80002cc <__adddf3>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4640      	mov	r0, r8
 8008512:	4649      	mov	r1, r9
 8008514:	f7f8 fb20 	bl	8000b58 <__aeabi_dcmpgt>
 8008518:	2800      	cmp	r0, #0
 800851a:	d173      	bne.n	8008604 <_dtoa_r+0x6c4>
 800851c:	4652      	mov	r2, sl
 800851e:	465b      	mov	r3, fp
 8008520:	4913      	ldr	r1, [pc, #76]	; (8008570 <_dtoa_r+0x630>)
 8008522:	2000      	movs	r0, #0
 8008524:	f7f7 fed0 	bl	80002c8 <__aeabi_dsub>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f8 faf4 	bl	8000b1c <__aeabi_dcmplt>
 8008534:	2800      	cmp	r0, #0
 8008536:	f43f af35 	beq.w	80083a4 <_dtoa_r+0x464>
 800853a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800853c:	1e6b      	subs	r3, r5, #1
 800853e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008540:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008544:	2b30      	cmp	r3, #48	; 0x30
 8008546:	d0f8      	beq.n	800853a <_dtoa_r+0x5fa>
 8008548:	9700      	str	r7, [sp, #0]
 800854a:	e049      	b.n	80085e0 <_dtoa_r+0x6a0>
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <_dtoa_r+0x624>)
 800854e:	f7f8 f873 	bl	8000638 <__aeabi_dmul>
 8008552:	4680      	mov	r8, r0
 8008554:	4689      	mov	r9, r1
 8008556:	e7bd      	b.n	80084d4 <_dtoa_r+0x594>
 8008558:	0800b068 	.word	0x0800b068
 800855c:	0800b040 	.word	0x0800b040
 8008560:	3ff00000 	.word	0x3ff00000
 8008564:	40240000 	.word	0x40240000
 8008568:	401c0000 	.word	0x401c0000
 800856c:	40140000 	.word	0x40140000
 8008570:	3fe00000 	.word	0x3fe00000
 8008574:	9d01      	ldr	r5, [sp, #4]
 8008576:	4656      	mov	r6, sl
 8008578:	465f      	mov	r7, fp
 800857a:	4642      	mov	r2, r8
 800857c:	464b      	mov	r3, r9
 800857e:	4630      	mov	r0, r6
 8008580:	4639      	mov	r1, r7
 8008582:	f7f8 f983 	bl	800088c <__aeabi_ddiv>
 8008586:	f7f8 fb07 	bl	8000b98 <__aeabi_d2iz>
 800858a:	4682      	mov	sl, r0
 800858c:	f7f7 ffea 	bl	8000564 <__aeabi_i2d>
 8008590:	4642      	mov	r2, r8
 8008592:	464b      	mov	r3, r9
 8008594:	f7f8 f850 	bl	8000638 <__aeabi_dmul>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085a4:	f7f7 fe90 	bl	80002c8 <__aeabi_dsub>
 80085a8:	f805 6b01 	strb.w	r6, [r5], #1
 80085ac:	9e01      	ldr	r6, [sp, #4]
 80085ae:	9f03      	ldr	r7, [sp, #12]
 80085b0:	1bae      	subs	r6, r5, r6
 80085b2:	42b7      	cmp	r7, r6
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	d135      	bne.n	8008626 <_dtoa_r+0x6e6>
 80085ba:	f7f7 fe87 	bl	80002cc <__adddf3>
 80085be:	4642      	mov	r2, r8
 80085c0:	464b      	mov	r3, r9
 80085c2:	4606      	mov	r6, r0
 80085c4:	460f      	mov	r7, r1
 80085c6:	f7f8 fac7 	bl	8000b58 <__aeabi_dcmpgt>
 80085ca:	b9d0      	cbnz	r0, 8008602 <_dtoa_r+0x6c2>
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f8 fa98 	bl	8000b08 <__aeabi_dcmpeq>
 80085d8:	b110      	cbz	r0, 80085e0 <_dtoa_r+0x6a0>
 80085da:	f01a 0f01 	tst.w	sl, #1
 80085de:	d110      	bne.n	8008602 <_dtoa_r+0x6c2>
 80085e0:	4620      	mov	r0, r4
 80085e2:	ee18 1a10 	vmov	r1, s16
 80085e6:	f000 fe67 	bl	80092b8 <_Bfree>
 80085ea:	2300      	movs	r3, #0
 80085ec:	9800      	ldr	r0, [sp, #0]
 80085ee:	702b      	strb	r3, [r5, #0]
 80085f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f2:	3001      	adds	r0, #1
 80085f4:	6018      	str	r0, [r3, #0]
 80085f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f43f acf1 	beq.w	8007fe0 <_dtoa_r+0xa0>
 80085fe:	601d      	str	r5, [r3, #0]
 8008600:	e4ee      	b.n	8007fe0 <_dtoa_r+0xa0>
 8008602:	9f00      	ldr	r7, [sp, #0]
 8008604:	462b      	mov	r3, r5
 8008606:	461d      	mov	r5, r3
 8008608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800860c:	2a39      	cmp	r2, #57	; 0x39
 800860e:	d106      	bne.n	800861e <_dtoa_r+0x6de>
 8008610:	9a01      	ldr	r2, [sp, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d1f7      	bne.n	8008606 <_dtoa_r+0x6c6>
 8008616:	9901      	ldr	r1, [sp, #4]
 8008618:	2230      	movs	r2, #48	; 0x30
 800861a:	3701      	adds	r7, #1
 800861c:	700a      	strb	r2, [r1, #0]
 800861e:	781a      	ldrb	r2, [r3, #0]
 8008620:	3201      	adds	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e790      	b.n	8008548 <_dtoa_r+0x608>
 8008626:	4ba6      	ldr	r3, [pc, #664]	; (80088c0 <_dtoa_r+0x980>)
 8008628:	2200      	movs	r2, #0
 800862a:	f7f8 f805 	bl	8000638 <__aeabi_dmul>
 800862e:	2200      	movs	r2, #0
 8008630:	2300      	movs	r3, #0
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	f7f8 fa67 	bl	8000b08 <__aeabi_dcmpeq>
 800863a:	2800      	cmp	r0, #0
 800863c:	d09d      	beq.n	800857a <_dtoa_r+0x63a>
 800863e:	e7cf      	b.n	80085e0 <_dtoa_r+0x6a0>
 8008640:	9a08      	ldr	r2, [sp, #32]
 8008642:	2a00      	cmp	r2, #0
 8008644:	f000 80d7 	beq.w	80087f6 <_dtoa_r+0x8b6>
 8008648:	9a06      	ldr	r2, [sp, #24]
 800864a:	2a01      	cmp	r2, #1
 800864c:	f300 80ba 	bgt.w	80087c4 <_dtoa_r+0x884>
 8008650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008652:	2a00      	cmp	r2, #0
 8008654:	f000 80b2 	beq.w	80087bc <_dtoa_r+0x87c>
 8008658:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800865c:	9e07      	ldr	r6, [sp, #28]
 800865e:	9d04      	ldr	r5, [sp, #16]
 8008660:	9a04      	ldr	r2, [sp, #16]
 8008662:	441a      	add	r2, r3
 8008664:	9204      	str	r2, [sp, #16]
 8008666:	9a05      	ldr	r2, [sp, #20]
 8008668:	2101      	movs	r1, #1
 800866a:	441a      	add	r2, r3
 800866c:	4620      	mov	r0, r4
 800866e:	9205      	str	r2, [sp, #20]
 8008670:	f000 ff24 	bl	80094bc <__i2b>
 8008674:	4607      	mov	r7, r0
 8008676:	2d00      	cmp	r5, #0
 8008678:	dd0c      	ble.n	8008694 <_dtoa_r+0x754>
 800867a:	9b05      	ldr	r3, [sp, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd09      	ble.n	8008694 <_dtoa_r+0x754>
 8008680:	42ab      	cmp	r3, r5
 8008682:	9a04      	ldr	r2, [sp, #16]
 8008684:	bfa8      	it	ge
 8008686:	462b      	movge	r3, r5
 8008688:	1ad2      	subs	r2, r2, r3
 800868a:	9204      	str	r2, [sp, #16]
 800868c:	9a05      	ldr	r2, [sp, #20]
 800868e:	1aed      	subs	r5, r5, r3
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	9305      	str	r3, [sp, #20]
 8008694:	9b07      	ldr	r3, [sp, #28]
 8008696:	b31b      	cbz	r3, 80086e0 <_dtoa_r+0x7a0>
 8008698:	9b08      	ldr	r3, [sp, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 80af 	beq.w	80087fe <_dtoa_r+0x8be>
 80086a0:	2e00      	cmp	r6, #0
 80086a2:	dd13      	ble.n	80086cc <_dtoa_r+0x78c>
 80086a4:	4639      	mov	r1, r7
 80086a6:	4632      	mov	r2, r6
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 ffc7 	bl	800963c <__pow5mult>
 80086ae:	ee18 2a10 	vmov	r2, s16
 80086b2:	4601      	mov	r1, r0
 80086b4:	4607      	mov	r7, r0
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 ff16 	bl	80094e8 <__multiply>
 80086bc:	ee18 1a10 	vmov	r1, s16
 80086c0:	4680      	mov	r8, r0
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fdf8 	bl	80092b8 <_Bfree>
 80086c8:	ee08 8a10 	vmov	s16, r8
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	1b9a      	subs	r2, r3, r6
 80086d0:	d006      	beq.n	80086e0 <_dtoa_r+0x7a0>
 80086d2:	ee18 1a10 	vmov	r1, s16
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 ffb0 	bl	800963c <__pow5mult>
 80086dc:	ee08 0a10 	vmov	s16, r0
 80086e0:	2101      	movs	r1, #1
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 feea 	bl	80094bc <__i2b>
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	4606      	mov	r6, r0
 80086ee:	f340 8088 	ble.w	8008802 <_dtoa_r+0x8c2>
 80086f2:	461a      	mov	r2, r3
 80086f4:	4601      	mov	r1, r0
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 ffa0 	bl	800963c <__pow5mult>
 80086fc:	9b06      	ldr	r3, [sp, #24]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	4606      	mov	r6, r0
 8008702:	f340 8081 	ble.w	8008808 <_dtoa_r+0x8c8>
 8008706:	f04f 0800 	mov.w	r8, #0
 800870a:	6933      	ldr	r3, [r6, #16]
 800870c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008710:	6918      	ldr	r0, [r3, #16]
 8008712:	f000 fe83 	bl	800941c <__hi0bits>
 8008716:	f1c0 0020 	rsb	r0, r0, #32
 800871a:	9b05      	ldr	r3, [sp, #20]
 800871c:	4418      	add	r0, r3
 800871e:	f010 001f 	ands.w	r0, r0, #31
 8008722:	f000 8092 	beq.w	800884a <_dtoa_r+0x90a>
 8008726:	f1c0 0320 	rsb	r3, r0, #32
 800872a:	2b04      	cmp	r3, #4
 800872c:	f340 808a 	ble.w	8008844 <_dtoa_r+0x904>
 8008730:	f1c0 001c 	rsb	r0, r0, #28
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	4403      	add	r3, r0
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	9b05      	ldr	r3, [sp, #20]
 800873c:	4403      	add	r3, r0
 800873e:	4405      	add	r5, r0
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd07      	ble.n	8008758 <_dtoa_r+0x818>
 8008748:	ee18 1a10 	vmov	r1, s16
 800874c:	461a      	mov	r2, r3
 800874e:	4620      	mov	r0, r4
 8008750:	f000 ffce 	bl	80096f0 <__lshift>
 8008754:	ee08 0a10 	vmov	s16, r0
 8008758:	9b05      	ldr	r3, [sp, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	dd05      	ble.n	800876a <_dtoa_r+0x82a>
 800875e:	4631      	mov	r1, r6
 8008760:	461a      	mov	r2, r3
 8008762:	4620      	mov	r0, r4
 8008764:	f000 ffc4 	bl	80096f0 <__lshift>
 8008768:	4606      	mov	r6, r0
 800876a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d06e      	beq.n	800884e <_dtoa_r+0x90e>
 8008770:	ee18 0a10 	vmov	r0, s16
 8008774:	4631      	mov	r1, r6
 8008776:	f001 f82b 	bl	80097d0 <__mcmp>
 800877a:	2800      	cmp	r0, #0
 800877c:	da67      	bge.n	800884e <_dtoa_r+0x90e>
 800877e:	9b00      	ldr	r3, [sp, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	ee18 1a10 	vmov	r1, s16
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	220a      	movs	r2, #10
 800878a:	2300      	movs	r3, #0
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fdb5 	bl	80092fc <__multadd>
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	ee08 0a10 	vmov	s16, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 81b1 	beq.w	8008b00 <_dtoa_r+0xbc0>
 800879e:	2300      	movs	r3, #0
 80087a0:	4639      	mov	r1, r7
 80087a2:	220a      	movs	r2, #10
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 fda9 	bl	80092fc <__multadd>
 80087aa:	9b02      	ldr	r3, [sp, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	4607      	mov	r7, r0
 80087b0:	f300 808e 	bgt.w	80088d0 <_dtoa_r+0x990>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	dc51      	bgt.n	800885e <_dtoa_r+0x91e>
 80087ba:	e089      	b.n	80088d0 <_dtoa_r+0x990>
 80087bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087c2:	e74b      	b.n	800865c <_dtoa_r+0x71c>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1e5e      	subs	r6, r3, #1
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	42b3      	cmp	r3, r6
 80087cc:	bfbf      	itttt	lt
 80087ce:	9b07      	ldrlt	r3, [sp, #28]
 80087d0:	9607      	strlt	r6, [sp, #28]
 80087d2:	1af2      	sublt	r2, r6, r3
 80087d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087d6:	bfb6      	itet	lt
 80087d8:	189b      	addlt	r3, r3, r2
 80087da:	1b9e      	subge	r6, r3, r6
 80087dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	bfb8      	it	lt
 80087e2:	2600      	movlt	r6, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bfb7      	itett	lt
 80087e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087f0:	1a9d      	sublt	r5, r3, r2
 80087f2:	2300      	movlt	r3, #0
 80087f4:	e734      	b.n	8008660 <_dtoa_r+0x720>
 80087f6:	9e07      	ldr	r6, [sp, #28]
 80087f8:	9d04      	ldr	r5, [sp, #16]
 80087fa:	9f08      	ldr	r7, [sp, #32]
 80087fc:	e73b      	b.n	8008676 <_dtoa_r+0x736>
 80087fe:	9a07      	ldr	r2, [sp, #28]
 8008800:	e767      	b.n	80086d2 <_dtoa_r+0x792>
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	2b01      	cmp	r3, #1
 8008806:	dc18      	bgt.n	800883a <_dtoa_r+0x8fa>
 8008808:	f1ba 0f00 	cmp.w	sl, #0
 800880c:	d115      	bne.n	800883a <_dtoa_r+0x8fa>
 800880e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008812:	b993      	cbnz	r3, 800883a <_dtoa_r+0x8fa>
 8008814:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008818:	0d1b      	lsrs	r3, r3, #20
 800881a:	051b      	lsls	r3, r3, #20
 800881c:	b183      	cbz	r3, 8008840 <_dtoa_r+0x900>
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	3301      	adds	r3, #1
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	9b05      	ldr	r3, [sp, #20]
 8008826:	3301      	adds	r3, #1
 8008828:	9305      	str	r3, [sp, #20]
 800882a:	f04f 0801 	mov.w	r8, #1
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	f47f af6a 	bne.w	800870a <_dtoa_r+0x7ca>
 8008836:	2001      	movs	r0, #1
 8008838:	e76f      	b.n	800871a <_dtoa_r+0x7da>
 800883a:	f04f 0800 	mov.w	r8, #0
 800883e:	e7f6      	b.n	800882e <_dtoa_r+0x8ee>
 8008840:	4698      	mov	r8, r3
 8008842:	e7f4      	b.n	800882e <_dtoa_r+0x8ee>
 8008844:	f43f af7d 	beq.w	8008742 <_dtoa_r+0x802>
 8008848:	4618      	mov	r0, r3
 800884a:	301c      	adds	r0, #28
 800884c:	e772      	b.n	8008734 <_dtoa_r+0x7f4>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	dc37      	bgt.n	80088c4 <_dtoa_r+0x984>
 8008854:	9b06      	ldr	r3, [sp, #24]
 8008856:	2b02      	cmp	r3, #2
 8008858:	dd34      	ble.n	80088c4 <_dtoa_r+0x984>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	9302      	str	r3, [sp, #8]
 800885e:	9b02      	ldr	r3, [sp, #8]
 8008860:	b96b      	cbnz	r3, 800887e <_dtoa_r+0x93e>
 8008862:	4631      	mov	r1, r6
 8008864:	2205      	movs	r2, #5
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fd48 	bl	80092fc <__multadd>
 800886c:	4601      	mov	r1, r0
 800886e:	4606      	mov	r6, r0
 8008870:	ee18 0a10 	vmov	r0, s16
 8008874:	f000 ffac 	bl	80097d0 <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	f73f adbb 	bgt.w	80083f4 <_dtoa_r+0x4b4>
 800887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008880:	9d01      	ldr	r5, [sp, #4]
 8008882:	43db      	mvns	r3, r3
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	f04f 0800 	mov.w	r8, #0
 800888a:	4631      	mov	r1, r6
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fd13 	bl	80092b8 <_Bfree>
 8008892:	2f00      	cmp	r7, #0
 8008894:	f43f aea4 	beq.w	80085e0 <_dtoa_r+0x6a0>
 8008898:	f1b8 0f00 	cmp.w	r8, #0
 800889c:	d005      	beq.n	80088aa <_dtoa_r+0x96a>
 800889e:	45b8      	cmp	r8, r7
 80088a0:	d003      	beq.n	80088aa <_dtoa_r+0x96a>
 80088a2:	4641      	mov	r1, r8
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fd07 	bl	80092b8 <_Bfree>
 80088aa:	4639      	mov	r1, r7
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fd03 	bl	80092b8 <_Bfree>
 80088b2:	e695      	b.n	80085e0 <_dtoa_r+0x6a0>
 80088b4:	2600      	movs	r6, #0
 80088b6:	4637      	mov	r7, r6
 80088b8:	e7e1      	b.n	800887e <_dtoa_r+0x93e>
 80088ba:	9700      	str	r7, [sp, #0]
 80088bc:	4637      	mov	r7, r6
 80088be:	e599      	b.n	80083f4 <_dtoa_r+0x4b4>
 80088c0:	40240000 	.word	0x40240000
 80088c4:	9b08      	ldr	r3, [sp, #32]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80ca 	beq.w	8008a60 <_dtoa_r+0xb20>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	dd05      	ble.n	80088e0 <_dtoa_r+0x9a0>
 80088d4:	4639      	mov	r1, r7
 80088d6:	462a      	mov	r2, r5
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 ff09 	bl	80096f0 <__lshift>
 80088de:	4607      	mov	r7, r0
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	d05b      	beq.n	800899e <_dtoa_r+0xa5e>
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fca5 	bl	8009238 <_Balloc>
 80088ee:	4605      	mov	r5, r0
 80088f0:	b928      	cbnz	r0, 80088fe <_dtoa_r+0x9be>
 80088f2:	4b87      	ldr	r3, [pc, #540]	; (8008b10 <_dtoa_r+0xbd0>)
 80088f4:	4602      	mov	r2, r0
 80088f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088fa:	f7ff bb3b 	b.w	8007f74 <_dtoa_r+0x34>
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	3202      	adds	r2, #2
 8008902:	0092      	lsls	r2, r2, #2
 8008904:	f107 010c 	add.w	r1, r7, #12
 8008908:	300c      	adds	r0, #12
 800890a:	f7fd fd2b 	bl	8006364 <memcpy>
 800890e:	2201      	movs	r2, #1
 8008910:	4629      	mov	r1, r5
 8008912:	4620      	mov	r0, r4
 8008914:	f000 feec 	bl	80096f0 <__lshift>
 8008918:	9b01      	ldr	r3, [sp, #4]
 800891a:	f103 0901 	add.w	r9, r3, #1
 800891e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008922:	4413      	add	r3, r2
 8008924:	9305      	str	r3, [sp, #20]
 8008926:	f00a 0301 	and.w	r3, sl, #1
 800892a:	46b8      	mov	r8, r7
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	4607      	mov	r7, r0
 8008930:	4631      	mov	r1, r6
 8008932:	ee18 0a10 	vmov	r0, s16
 8008936:	f7ff fa77 	bl	8007e28 <quorem>
 800893a:	4641      	mov	r1, r8
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008942:	ee18 0a10 	vmov	r0, s16
 8008946:	f000 ff43 	bl	80097d0 <__mcmp>
 800894a:	463a      	mov	r2, r7
 800894c:	9003      	str	r0, [sp, #12]
 800894e:	4631      	mov	r1, r6
 8008950:	4620      	mov	r0, r4
 8008952:	f000 ff59 	bl	8009808 <__mdiff>
 8008956:	68c2      	ldr	r2, [r0, #12]
 8008958:	f109 3bff 	add.w	fp, r9, #4294967295
 800895c:	4605      	mov	r5, r0
 800895e:	bb02      	cbnz	r2, 80089a2 <_dtoa_r+0xa62>
 8008960:	4601      	mov	r1, r0
 8008962:	ee18 0a10 	vmov	r0, s16
 8008966:	f000 ff33 	bl	80097d0 <__mcmp>
 800896a:	4602      	mov	r2, r0
 800896c:	4629      	mov	r1, r5
 800896e:	4620      	mov	r0, r4
 8008970:	9207      	str	r2, [sp, #28]
 8008972:	f000 fca1 	bl	80092b8 <_Bfree>
 8008976:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800897a:	ea43 0102 	orr.w	r1, r3, r2
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	430b      	orrs	r3, r1
 8008982:	464d      	mov	r5, r9
 8008984:	d10f      	bne.n	80089a6 <_dtoa_r+0xa66>
 8008986:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800898a:	d02a      	beq.n	80089e2 <_dtoa_r+0xaa2>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd02      	ble.n	8008998 <_dtoa_r+0xa58>
 8008992:	9b02      	ldr	r3, [sp, #8]
 8008994:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008998:	f88b a000 	strb.w	sl, [fp]
 800899c:	e775      	b.n	800888a <_dtoa_r+0x94a>
 800899e:	4638      	mov	r0, r7
 80089a0:	e7ba      	b.n	8008918 <_dtoa_r+0x9d8>
 80089a2:	2201      	movs	r2, #1
 80089a4:	e7e2      	b.n	800896c <_dtoa_r+0xa2c>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	db04      	blt.n	80089b6 <_dtoa_r+0xa76>
 80089ac:	9906      	ldr	r1, [sp, #24]
 80089ae:	430b      	orrs	r3, r1
 80089b0:	9904      	ldr	r1, [sp, #16]
 80089b2:	430b      	orrs	r3, r1
 80089b4:	d122      	bne.n	80089fc <_dtoa_r+0xabc>
 80089b6:	2a00      	cmp	r2, #0
 80089b8:	ddee      	ble.n	8008998 <_dtoa_r+0xa58>
 80089ba:	ee18 1a10 	vmov	r1, s16
 80089be:	2201      	movs	r2, #1
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fe95 	bl	80096f0 <__lshift>
 80089c6:	4631      	mov	r1, r6
 80089c8:	ee08 0a10 	vmov	s16, r0
 80089cc:	f000 ff00 	bl	80097d0 <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	dc03      	bgt.n	80089dc <_dtoa_r+0xa9c>
 80089d4:	d1e0      	bne.n	8008998 <_dtoa_r+0xa58>
 80089d6:	f01a 0f01 	tst.w	sl, #1
 80089da:	d0dd      	beq.n	8008998 <_dtoa_r+0xa58>
 80089dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089e0:	d1d7      	bne.n	8008992 <_dtoa_r+0xa52>
 80089e2:	2339      	movs	r3, #57	; 0x39
 80089e4:	f88b 3000 	strb.w	r3, [fp]
 80089e8:	462b      	mov	r3, r5
 80089ea:	461d      	mov	r5, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089f2:	2a39      	cmp	r2, #57	; 0x39
 80089f4:	d071      	beq.n	8008ada <_dtoa_r+0xb9a>
 80089f6:	3201      	adds	r2, #1
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	e746      	b.n	800888a <_dtoa_r+0x94a>
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	dd07      	ble.n	8008a10 <_dtoa_r+0xad0>
 8008a00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a04:	d0ed      	beq.n	80089e2 <_dtoa_r+0xaa2>
 8008a06:	f10a 0301 	add.w	r3, sl, #1
 8008a0a:	f88b 3000 	strb.w	r3, [fp]
 8008a0e:	e73c      	b.n	800888a <_dtoa_r+0x94a>
 8008a10:	9b05      	ldr	r3, [sp, #20]
 8008a12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a16:	4599      	cmp	r9, r3
 8008a18:	d047      	beq.n	8008aaa <_dtoa_r+0xb6a>
 8008a1a:	ee18 1a10 	vmov	r1, s16
 8008a1e:	2300      	movs	r3, #0
 8008a20:	220a      	movs	r2, #10
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fc6a 	bl	80092fc <__multadd>
 8008a28:	45b8      	cmp	r8, r7
 8008a2a:	ee08 0a10 	vmov	s16, r0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	f04f 020a 	mov.w	r2, #10
 8008a36:	4641      	mov	r1, r8
 8008a38:	4620      	mov	r0, r4
 8008a3a:	d106      	bne.n	8008a4a <_dtoa_r+0xb0a>
 8008a3c:	f000 fc5e 	bl	80092fc <__multadd>
 8008a40:	4680      	mov	r8, r0
 8008a42:	4607      	mov	r7, r0
 8008a44:	f109 0901 	add.w	r9, r9, #1
 8008a48:	e772      	b.n	8008930 <_dtoa_r+0x9f0>
 8008a4a:	f000 fc57 	bl	80092fc <__multadd>
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4680      	mov	r8, r0
 8008a52:	2300      	movs	r3, #0
 8008a54:	220a      	movs	r2, #10
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fc50 	bl	80092fc <__multadd>
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	e7f1      	b.n	8008a44 <_dtoa_r+0xb04>
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	9302      	str	r3, [sp, #8]
 8008a64:	9d01      	ldr	r5, [sp, #4]
 8008a66:	ee18 0a10 	vmov	r0, s16
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	f7ff f9dc 	bl	8007e28 <quorem>
 8008a70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	f805 ab01 	strb.w	sl, [r5], #1
 8008a7a:	1aea      	subs	r2, r5, r3
 8008a7c:	9b02      	ldr	r3, [sp, #8]
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	dd09      	ble.n	8008a96 <_dtoa_r+0xb56>
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	2300      	movs	r3, #0
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fc36 	bl	80092fc <__multadd>
 8008a90:	ee08 0a10 	vmov	s16, r0
 8008a94:	e7e7      	b.n	8008a66 <_dtoa_r+0xb26>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfc8      	it	gt
 8008a9c:	461d      	movgt	r5, r3
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	bfd8      	it	le
 8008aa2:	2501      	movle	r5, #1
 8008aa4:	441d      	add	r5, r3
 8008aa6:	f04f 0800 	mov.w	r8, #0
 8008aaa:	ee18 1a10 	vmov	r1, s16
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fe1d 	bl	80096f0 <__lshift>
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	ee08 0a10 	vmov	s16, r0
 8008abc:	f000 fe88 	bl	80097d0 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	dc91      	bgt.n	80089e8 <_dtoa_r+0xaa8>
 8008ac4:	d102      	bne.n	8008acc <_dtoa_r+0xb8c>
 8008ac6:	f01a 0f01 	tst.w	sl, #1
 8008aca:	d18d      	bne.n	80089e8 <_dtoa_r+0xaa8>
 8008acc:	462b      	mov	r3, r5
 8008ace:	461d      	mov	r5, r3
 8008ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ad4:	2a30      	cmp	r2, #48	; 0x30
 8008ad6:	d0fa      	beq.n	8008ace <_dtoa_r+0xb8e>
 8008ad8:	e6d7      	b.n	800888a <_dtoa_r+0x94a>
 8008ada:	9a01      	ldr	r2, [sp, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d184      	bne.n	80089ea <_dtoa_r+0xaaa>
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2331      	movs	r3, #49	; 0x31
 8008ae8:	7013      	strb	r3, [r2, #0]
 8008aea:	e6ce      	b.n	800888a <_dtoa_r+0x94a>
 8008aec:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <_dtoa_r+0xbd4>)
 8008aee:	f7ff ba95 	b.w	800801c <_dtoa_r+0xdc>
 8008af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f47f aa6e 	bne.w	8007fd6 <_dtoa_r+0x96>
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <_dtoa_r+0xbd8>)
 8008afc:	f7ff ba8e 	b.w	800801c <_dtoa_r+0xdc>
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	dcae      	bgt.n	8008a64 <_dtoa_r+0xb24>
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	f73f aea8 	bgt.w	800885e <_dtoa_r+0x91e>
 8008b0e:	e7a9      	b.n	8008a64 <_dtoa_r+0xb24>
 8008b10:	0800af58 	.word	0x0800af58
 8008b14:	0800ad5c 	.word	0x0800ad5c
 8008b18:	0800aed9 	.word	0x0800aed9

08008b1c <rshift>:
 8008b1c:	6903      	ldr	r3, [r0, #16]
 8008b1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b2a:	f100 0414 	add.w	r4, r0, #20
 8008b2e:	dd45      	ble.n	8008bbc <rshift+0xa0>
 8008b30:	f011 011f 	ands.w	r1, r1, #31
 8008b34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b3c:	d10c      	bne.n	8008b58 <rshift+0x3c>
 8008b3e:	f100 0710 	add.w	r7, r0, #16
 8008b42:	4629      	mov	r1, r5
 8008b44:	42b1      	cmp	r1, r6
 8008b46:	d334      	bcc.n	8008bb2 <rshift+0x96>
 8008b48:	1a9b      	subs	r3, r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	1eea      	subs	r2, r5, #3
 8008b4e:	4296      	cmp	r6, r2
 8008b50:	bf38      	it	cc
 8008b52:	2300      	movcc	r3, #0
 8008b54:	4423      	add	r3, r4
 8008b56:	e015      	b.n	8008b84 <rshift+0x68>
 8008b58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b5c:	f1c1 0820 	rsb	r8, r1, #32
 8008b60:	40cf      	lsrs	r7, r1
 8008b62:	f105 0e04 	add.w	lr, r5, #4
 8008b66:	46a1      	mov	r9, r4
 8008b68:	4576      	cmp	r6, lr
 8008b6a:	46f4      	mov	ip, lr
 8008b6c:	d815      	bhi.n	8008b9a <rshift+0x7e>
 8008b6e:	1a9a      	subs	r2, r3, r2
 8008b70:	0092      	lsls	r2, r2, #2
 8008b72:	3a04      	subs	r2, #4
 8008b74:	3501      	adds	r5, #1
 8008b76:	42ae      	cmp	r6, r5
 8008b78:	bf38      	it	cc
 8008b7a:	2200      	movcc	r2, #0
 8008b7c:	18a3      	adds	r3, r4, r2
 8008b7e:	50a7      	str	r7, [r4, r2]
 8008b80:	b107      	cbz	r7, 8008b84 <rshift+0x68>
 8008b82:	3304      	adds	r3, #4
 8008b84:	1b1a      	subs	r2, r3, r4
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b8c:	bf08      	it	eq
 8008b8e:	2300      	moveq	r3, #0
 8008b90:	6102      	str	r2, [r0, #16]
 8008b92:	bf08      	it	eq
 8008b94:	6143      	streq	r3, [r0, #20]
 8008b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	f8dc c000 	ldr.w	ip, [ip]
 8008b9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ba2:	ea4c 0707 	orr.w	r7, ip, r7
 8008ba6:	f849 7b04 	str.w	r7, [r9], #4
 8008baa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bae:	40cf      	lsrs	r7, r1
 8008bb0:	e7da      	b.n	8008b68 <rshift+0x4c>
 8008bb2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bb6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bba:	e7c3      	b.n	8008b44 <rshift+0x28>
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	e7e1      	b.n	8008b84 <rshift+0x68>

08008bc0 <__hexdig_fun>:
 8008bc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d802      	bhi.n	8008bce <__hexdig_fun+0xe>
 8008bc8:	3820      	subs	r0, #32
 8008bca:	b2c0      	uxtb	r0, r0
 8008bcc:	4770      	bx	lr
 8008bce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d801      	bhi.n	8008bda <__hexdig_fun+0x1a>
 8008bd6:	3847      	subs	r0, #71	; 0x47
 8008bd8:	e7f7      	b.n	8008bca <__hexdig_fun+0xa>
 8008bda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d801      	bhi.n	8008be6 <__hexdig_fun+0x26>
 8008be2:	3827      	subs	r0, #39	; 0x27
 8008be4:	e7f1      	b.n	8008bca <__hexdig_fun+0xa>
 8008be6:	2000      	movs	r0, #0
 8008be8:	4770      	bx	lr
	...

08008bec <__gethex>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	ed2d 8b02 	vpush	{d8}
 8008bf4:	b089      	sub	sp, #36	; 0x24
 8008bf6:	ee08 0a10 	vmov	s16, r0
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	4bb4      	ldr	r3, [pc, #720]	; (8008ed0 <__gethex+0x2e4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	4618      	mov	r0, r3
 8008c04:	468b      	mov	fp, r1
 8008c06:	4690      	mov	r8, r2
 8008c08:	f7f7 fb02 	bl	8000210 <strlen>
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	f8db 2000 	ldr.w	r2, [fp]
 8008c12:	4403      	add	r3, r0
 8008c14:	4682      	mov	sl, r0
 8008c16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c1a:	9305      	str	r3, [sp, #20]
 8008c1c:	1c93      	adds	r3, r2, #2
 8008c1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c26:	32fe      	adds	r2, #254	; 0xfe
 8008c28:	18d1      	adds	r1, r2, r3
 8008c2a:	461f      	mov	r7, r3
 8008c2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c30:	9100      	str	r1, [sp, #0]
 8008c32:	2830      	cmp	r0, #48	; 0x30
 8008c34:	d0f8      	beq.n	8008c28 <__gethex+0x3c>
 8008c36:	f7ff ffc3 	bl	8008bc0 <__hexdig_fun>
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d13a      	bne.n	8008cb6 <__gethex+0xca>
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	4652      	mov	r2, sl
 8008c44:	4638      	mov	r0, r7
 8008c46:	f001 fa23 	bl	800a090 <strncmp>
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d168      	bne.n	8008d22 <__gethex+0x136>
 8008c50:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c54:	eb07 060a 	add.w	r6, r7, sl
 8008c58:	f7ff ffb2 	bl	8008bc0 <__hexdig_fun>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d062      	beq.n	8008d26 <__gethex+0x13a>
 8008c60:	4633      	mov	r3, r6
 8008c62:	7818      	ldrb	r0, [r3, #0]
 8008c64:	2830      	cmp	r0, #48	; 0x30
 8008c66:	461f      	mov	r7, r3
 8008c68:	f103 0301 	add.w	r3, r3, #1
 8008c6c:	d0f9      	beq.n	8008c62 <__gethex+0x76>
 8008c6e:	f7ff ffa7 	bl	8008bc0 <__hexdig_fun>
 8008c72:	2301      	movs	r3, #1
 8008c74:	fab0 f480 	clz	r4, r0
 8008c78:	0964      	lsrs	r4, r4, #5
 8008c7a:	4635      	mov	r5, r6
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	463a      	mov	r2, r7
 8008c80:	4616      	mov	r6, r2
 8008c82:	3201      	adds	r2, #1
 8008c84:	7830      	ldrb	r0, [r6, #0]
 8008c86:	f7ff ff9b 	bl	8008bc0 <__hexdig_fun>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1f8      	bne.n	8008c80 <__gethex+0x94>
 8008c8e:	9901      	ldr	r1, [sp, #4]
 8008c90:	4652      	mov	r2, sl
 8008c92:	4630      	mov	r0, r6
 8008c94:	f001 f9fc 	bl	800a090 <strncmp>
 8008c98:	b980      	cbnz	r0, 8008cbc <__gethex+0xd0>
 8008c9a:	b94d      	cbnz	r5, 8008cb0 <__gethex+0xc4>
 8008c9c:	eb06 050a 	add.w	r5, r6, sl
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	7830      	ldrb	r0, [r6, #0]
 8008ca8:	f7ff ff8a 	bl	8008bc0 <__hexdig_fun>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d1f8      	bne.n	8008ca2 <__gethex+0xb6>
 8008cb0:	1bad      	subs	r5, r5, r6
 8008cb2:	00ad      	lsls	r5, r5, #2
 8008cb4:	e004      	b.n	8008cc0 <__gethex+0xd4>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	4625      	mov	r5, r4
 8008cba:	e7e0      	b.n	8008c7e <__gethex+0x92>
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	d1f7      	bne.n	8008cb0 <__gethex+0xc4>
 8008cc0:	7833      	ldrb	r3, [r6, #0]
 8008cc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cc6:	2b50      	cmp	r3, #80	; 0x50
 8008cc8:	d13b      	bne.n	8008d42 <__gethex+0x156>
 8008cca:	7873      	ldrb	r3, [r6, #1]
 8008ccc:	2b2b      	cmp	r3, #43	; 0x2b
 8008cce:	d02c      	beq.n	8008d2a <__gethex+0x13e>
 8008cd0:	2b2d      	cmp	r3, #45	; 0x2d
 8008cd2:	d02e      	beq.n	8008d32 <__gethex+0x146>
 8008cd4:	1c71      	adds	r1, r6, #1
 8008cd6:	f04f 0900 	mov.w	r9, #0
 8008cda:	7808      	ldrb	r0, [r1, #0]
 8008cdc:	f7ff ff70 	bl	8008bc0 <__hexdig_fun>
 8008ce0:	1e43      	subs	r3, r0, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b18      	cmp	r3, #24
 8008ce6:	d82c      	bhi.n	8008d42 <__gethex+0x156>
 8008ce8:	f1a0 0210 	sub.w	r2, r0, #16
 8008cec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cf0:	f7ff ff66 	bl	8008bc0 <__hexdig_fun>
 8008cf4:	1e43      	subs	r3, r0, #1
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b18      	cmp	r3, #24
 8008cfa:	d91d      	bls.n	8008d38 <__gethex+0x14c>
 8008cfc:	f1b9 0f00 	cmp.w	r9, #0
 8008d00:	d000      	beq.n	8008d04 <__gethex+0x118>
 8008d02:	4252      	negs	r2, r2
 8008d04:	4415      	add	r5, r2
 8008d06:	f8cb 1000 	str.w	r1, [fp]
 8008d0a:	b1e4      	cbz	r4, 8008d46 <__gethex+0x15a>
 8008d0c:	9b00      	ldr	r3, [sp, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bf14      	ite	ne
 8008d12:	2700      	movne	r7, #0
 8008d14:	2706      	moveq	r7, #6
 8008d16:	4638      	mov	r0, r7
 8008d18:	b009      	add	sp, #36	; 0x24
 8008d1a:	ecbd 8b02 	vpop	{d8}
 8008d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d22:	463e      	mov	r6, r7
 8008d24:	4625      	mov	r5, r4
 8008d26:	2401      	movs	r4, #1
 8008d28:	e7ca      	b.n	8008cc0 <__gethex+0xd4>
 8008d2a:	f04f 0900 	mov.w	r9, #0
 8008d2e:	1cb1      	adds	r1, r6, #2
 8008d30:	e7d3      	b.n	8008cda <__gethex+0xee>
 8008d32:	f04f 0901 	mov.w	r9, #1
 8008d36:	e7fa      	b.n	8008d2e <__gethex+0x142>
 8008d38:	230a      	movs	r3, #10
 8008d3a:	fb03 0202 	mla	r2, r3, r2, r0
 8008d3e:	3a10      	subs	r2, #16
 8008d40:	e7d4      	b.n	8008cec <__gethex+0x100>
 8008d42:	4631      	mov	r1, r6
 8008d44:	e7df      	b.n	8008d06 <__gethex+0x11a>
 8008d46:	1bf3      	subs	r3, r6, r7
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	2b07      	cmp	r3, #7
 8008d4e:	dc0b      	bgt.n	8008d68 <__gethex+0x17c>
 8008d50:	ee18 0a10 	vmov	r0, s16
 8008d54:	f000 fa70 	bl	8009238 <_Balloc>
 8008d58:	4604      	mov	r4, r0
 8008d5a:	b940      	cbnz	r0, 8008d6e <__gethex+0x182>
 8008d5c:	4b5d      	ldr	r3, [pc, #372]	; (8008ed4 <__gethex+0x2e8>)
 8008d5e:	4602      	mov	r2, r0
 8008d60:	21de      	movs	r1, #222	; 0xde
 8008d62:	485d      	ldr	r0, [pc, #372]	; (8008ed8 <__gethex+0x2ec>)
 8008d64:	f001 f9b6 	bl	800a0d4 <__assert_func>
 8008d68:	3101      	adds	r1, #1
 8008d6a:	105b      	asrs	r3, r3, #1
 8008d6c:	e7ee      	b.n	8008d4c <__gethex+0x160>
 8008d6e:	f100 0914 	add.w	r9, r0, #20
 8008d72:	f04f 0b00 	mov.w	fp, #0
 8008d76:	f1ca 0301 	rsb	r3, sl, #1
 8008d7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d7e:	f8cd b000 	str.w	fp, [sp]
 8008d82:	9306      	str	r3, [sp, #24]
 8008d84:	42b7      	cmp	r7, r6
 8008d86:	d340      	bcc.n	8008e0a <__gethex+0x21e>
 8008d88:	9802      	ldr	r0, [sp, #8]
 8008d8a:	9b00      	ldr	r3, [sp, #0]
 8008d8c:	f840 3b04 	str.w	r3, [r0], #4
 8008d90:	eba0 0009 	sub.w	r0, r0, r9
 8008d94:	1080      	asrs	r0, r0, #2
 8008d96:	0146      	lsls	r6, r0, #5
 8008d98:	6120      	str	r0, [r4, #16]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fb3e 	bl	800941c <__hi0bits>
 8008da0:	1a30      	subs	r0, r6, r0
 8008da2:	f8d8 6000 	ldr.w	r6, [r8]
 8008da6:	42b0      	cmp	r0, r6
 8008da8:	dd63      	ble.n	8008e72 <__gethex+0x286>
 8008daa:	1b87      	subs	r7, r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 fee2 	bl	8009b78 <__any_on>
 8008db4:	4682      	mov	sl, r0
 8008db6:	b1a8      	cbz	r0, 8008de4 <__gethex+0x1f8>
 8008db8:	1e7b      	subs	r3, r7, #1
 8008dba:	1159      	asrs	r1, r3, #5
 8008dbc:	f003 021f 	and.w	r2, r3, #31
 8008dc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dc4:	f04f 0a01 	mov.w	sl, #1
 8008dc8:	fa0a f202 	lsl.w	r2, sl, r2
 8008dcc:	420a      	tst	r2, r1
 8008dce:	d009      	beq.n	8008de4 <__gethex+0x1f8>
 8008dd0:	4553      	cmp	r3, sl
 8008dd2:	dd05      	ble.n	8008de0 <__gethex+0x1f4>
 8008dd4:	1eb9      	subs	r1, r7, #2
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 fece 	bl	8009b78 <__any_on>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d145      	bne.n	8008e6c <__gethex+0x280>
 8008de0:	f04f 0a02 	mov.w	sl, #2
 8008de4:	4639      	mov	r1, r7
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7ff fe98 	bl	8008b1c <rshift>
 8008dec:	443d      	add	r5, r7
 8008dee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008df2:	42ab      	cmp	r3, r5
 8008df4:	da4c      	bge.n	8008e90 <__gethex+0x2a4>
 8008df6:	ee18 0a10 	vmov	r0, s16
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	f000 fa5c 	bl	80092b8 <_Bfree>
 8008e00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e02:	2300      	movs	r3, #0
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	27a3      	movs	r7, #163	; 0xa3
 8008e08:	e785      	b.n	8008d16 <__gethex+0x12a>
 8008e0a:	1e73      	subs	r3, r6, #1
 8008e0c:	9a05      	ldr	r2, [sp, #20]
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d019      	beq.n	8008e4c <__gethex+0x260>
 8008e18:	f1bb 0f20 	cmp.w	fp, #32
 8008e1c:	d107      	bne.n	8008e2e <__gethex+0x242>
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	9a00      	ldr	r2, [sp, #0]
 8008e22:	f843 2b04 	str.w	r2, [r3], #4
 8008e26:	9302      	str	r3, [sp, #8]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	469b      	mov	fp, r3
 8008e2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e32:	f7ff fec5 	bl	8008bc0 <__hexdig_fun>
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	f000 000f 	and.w	r0, r0, #15
 8008e3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e40:	4303      	orrs	r3, r0
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	f10b 0b04 	add.w	fp, fp, #4
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	e00d      	b.n	8008e68 <__gethex+0x27c>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	9a06      	ldr	r2, [sp, #24]
 8008e50:	4413      	add	r3, r2
 8008e52:	42bb      	cmp	r3, r7
 8008e54:	d3e0      	bcc.n	8008e18 <__gethex+0x22c>
 8008e56:	4618      	mov	r0, r3
 8008e58:	9901      	ldr	r1, [sp, #4]
 8008e5a:	9307      	str	r3, [sp, #28]
 8008e5c:	4652      	mov	r2, sl
 8008e5e:	f001 f917 	bl	800a090 <strncmp>
 8008e62:	9b07      	ldr	r3, [sp, #28]
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d1d7      	bne.n	8008e18 <__gethex+0x22c>
 8008e68:	461e      	mov	r6, r3
 8008e6a:	e78b      	b.n	8008d84 <__gethex+0x198>
 8008e6c:	f04f 0a03 	mov.w	sl, #3
 8008e70:	e7b8      	b.n	8008de4 <__gethex+0x1f8>
 8008e72:	da0a      	bge.n	8008e8a <__gethex+0x29e>
 8008e74:	1a37      	subs	r7, r6, r0
 8008e76:	4621      	mov	r1, r4
 8008e78:	ee18 0a10 	vmov	r0, s16
 8008e7c:	463a      	mov	r2, r7
 8008e7e:	f000 fc37 	bl	80096f0 <__lshift>
 8008e82:	1bed      	subs	r5, r5, r7
 8008e84:	4604      	mov	r4, r0
 8008e86:	f100 0914 	add.w	r9, r0, #20
 8008e8a:	f04f 0a00 	mov.w	sl, #0
 8008e8e:	e7ae      	b.n	8008dee <__gethex+0x202>
 8008e90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e94:	42a8      	cmp	r0, r5
 8008e96:	dd72      	ble.n	8008f7e <__gethex+0x392>
 8008e98:	1b45      	subs	r5, r0, r5
 8008e9a:	42ae      	cmp	r6, r5
 8008e9c:	dc36      	bgt.n	8008f0c <__gethex+0x320>
 8008e9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d02a      	beq.n	8008efc <__gethex+0x310>
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d02c      	beq.n	8008f04 <__gethex+0x318>
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d11c      	bne.n	8008ee8 <__gethex+0x2fc>
 8008eae:	42ae      	cmp	r6, r5
 8008eb0:	d11a      	bne.n	8008ee8 <__gethex+0x2fc>
 8008eb2:	2e01      	cmp	r6, #1
 8008eb4:	d112      	bne.n	8008edc <__gethex+0x2f0>
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	6123      	str	r3, [r4, #16]
 8008ec2:	f8c9 3000 	str.w	r3, [r9]
 8008ec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ec8:	2762      	movs	r7, #98	; 0x62
 8008eca:	601c      	str	r4, [r3, #0]
 8008ecc:	e723      	b.n	8008d16 <__gethex+0x12a>
 8008ece:	bf00      	nop
 8008ed0:	0800afd0 	.word	0x0800afd0
 8008ed4:	0800af58 	.word	0x0800af58
 8008ed8:	0800af69 	.word	0x0800af69
 8008edc:	1e71      	subs	r1, r6, #1
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fe4a 	bl	8009b78 <__any_on>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <__gethex+0x2ca>
 8008ee8:	ee18 0a10 	vmov	r0, s16
 8008eec:	4621      	mov	r1, r4
 8008eee:	f000 f9e3 	bl	80092b8 <_Bfree>
 8008ef2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	2750      	movs	r7, #80	; 0x50
 8008efa:	e70c      	b.n	8008d16 <__gethex+0x12a>
 8008efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f2      	bne.n	8008ee8 <__gethex+0x2fc>
 8008f02:	e7d8      	b.n	8008eb6 <__gethex+0x2ca>
 8008f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1d5      	bne.n	8008eb6 <__gethex+0x2ca>
 8008f0a:	e7ed      	b.n	8008ee8 <__gethex+0x2fc>
 8008f0c:	1e6f      	subs	r7, r5, #1
 8008f0e:	f1ba 0f00 	cmp.w	sl, #0
 8008f12:	d131      	bne.n	8008f78 <__gethex+0x38c>
 8008f14:	b127      	cbz	r7, 8008f20 <__gethex+0x334>
 8008f16:	4639      	mov	r1, r7
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fe2d 	bl	8009b78 <__any_on>
 8008f1e:	4682      	mov	sl, r0
 8008f20:	117b      	asrs	r3, r7, #5
 8008f22:	2101      	movs	r1, #1
 8008f24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f28:	f007 071f 	and.w	r7, r7, #31
 8008f2c:	fa01 f707 	lsl.w	r7, r1, r7
 8008f30:	421f      	tst	r7, r3
 8008f32:	4629      	mov	r1, r5
 8008f34:	4620      	mov	r0, r4
 8008f36:	bf18      	it	ne
 8008f38:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f3c:	1b76      	subs	r6, r6, r5
 8008f3e:	f7ff fded 	bl	8008b1c <rshift>
 8008f42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f46:	2702      	movs	r7, #2
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d048      	beq.n	8008fe0 <__gethex+0x3f4>
 8008f4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d015      	beq.n	8008f82 <__gethex+0x396>
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d017      	beq.n	8008f8a <__gethex+0x39e>
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d109      	bne.n	8008f72 <__gethex+0x386>
 8008f5e:	f01a 0f02 	tst.w	sl, #2
 8008f62:	d006      	beq.n	8008f72 <__gethex+0x386>
 8008f64:	f8d9 0000 	ldr.w	r0, [r9]
 8008f68:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f6c:	f01a 0f01 	tst.w	sl, #1
 8008f70:	d10e      	bne.n	8008f90 <__gethex+0x3a4>
 8008f72:	f047 0710 	orr.w	r7, r7, #16
 8008f76:	e033      	b.n	8008fe0 <__gethex+0x3f4>
 8008f78:	f04f 0a01 	mov.w	sl, #1
 8008f7c:	e7d0      	b.n	8008f20 <__gethex+0x334>
 8008f7e:	2701      	movs	r7, #1
 8008f80:	e7e2      	b.n	8008f48 <__gethex+0x35c>
 8008f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f84:	f1c3 0301 	rsb	r3, r3, #1
 8008f88:	9315      	str	r3, [sp, #84]	; 0x54
 8008f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d0f0      	beq.n	8008f72 <__gethex+0x386>
 8008f90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f94:	f104 0314 	add.w	r3, r4, #20
 8008f98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fa0:	f04f 0c00 	mov.w	ip, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008faa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fae:	d01c      	beq.n	8008fea <__gethex+0x3fe>
 8008fb0:	3201      	adds	r2, #1
 8008fb2:	6002      	str	r2, [r0, #0]
 8008fb4:	2f02      	cmp	r7, #2
 8008fb6:	f104 0314 	add.w	r3, r4, #20
 8008fba:	d13f      	bne.n	800903c <__gethex+0x450>
 8008fbc:	f8d8 2000 	ldr.w	r2, [r8]
 8008fc0:	3a01      	subs	r2, #1
 8008fc2:	42b2      	cmp	r2, r6
 8008fc4:	d10a      	bne.n	8008fdc <__gethex+0x3f0>
 8008fc6:	1171      	asrs	r1, r6, #5
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fce:	f006 061f 	and.w	r6, r6, #31
 8008fd2:	fa02 f606 	lsl.w	r6, r2, r6
 8008fd6:	421e      	tst	r6, r3
 8008fd8:	bf18      	it	ne
 8008fda:	4617      	movne	r7, r2
 8008fdc:	f047 0720 	orr.w	r7, r7, #32
 8008fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fe2:	601c      	str	r4, [r3, #0]
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	601d      	str	r5, [r3, #0]
 8008fe8:	e695      	b.n	8008d16 <__gethex+0x12a>
 8008fea:	4299      	cmp	r1, r3
 8008fec:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ff0:	d8d8      	bhi.n	8008fa4 <__gethex+0x3b8>
 8008ff2:	68a3      	ldr	r3, [r4, #8]
 8008ff4:	459b      	cmp	fp, r3
 8008ff6:	db19      	blt.n	800902c <__gethex+0x440>
 8008ff8:	6861      	ldr	r1, [r4, #4]
 8008ffa:	ee18 0a10 	vmov	r0, s16
 8008ffe:	3101      	adds	r1, #1
 8009000:	f000 f91a 	bl	8009238 <_Balloc>
 8009004:	4681      	mov	r9, r0
 8009006:	b918      	cbnz	r0, 8009010 <__gethex+0x424>
 8009008:	4b1a      	ldr	r3, [pc, #104]	; (8009074 <__gethex+0x488>)
 800900a:	4602      	mov	r2, r0
 800900c:	2184      	movs	r1, #132	; 0x84
 800900e:	e6a8      	b.n	8008d62 <__gethex+0x176>
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	3202      	adds	r2, #2
 8009014:	f104 010c 	add.w	r1, r4, #12
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	300c      	adds	r0, #12
 800901c:	f7fd f9a2 	bl	8006364 <memcpy>
 8009020:	4621      	mov	r1, r4
 8009022:	ee18 0a10 	vmov	r0, s16
 8009026:	f000 f947 	bl	80092b8 <_Bfree>
 800902a:	464c      	mov	r4, r9
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009034:	6122      	str	r2, [r4, #16]
 8009036:	2201      	movs	r2, #1
 8009038:	615a      	str	r2, [r3, #20]
 800903a:	e7bb      	b.n	8008fb4 <__gethex+0x3c8>
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	455a      	cmp	r2, fp
 8009040:	dd0b      	ble.n	800905a <__gethex+0x46e>
 8009042:	2101      	movs	r1, #1
 8009044:	4620      	mov	r0, r4
 8009046:	f7ff fd69 	bl	8008b1c <rshift>
 800904a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800904e:	3501      	adds	r5, #1
 8009050:	42ab      	cmp	r3, r5
 8009052:	f6ff aed0 	blt.w	8008df6 <__gethex+0x20a>
 8009056:	2701      	movs	r7, #1
 8009058:	e7c0      	b.n	8008fdc <__gethex+0x3f0>
 800905a:	f016 061f 	ands.w	r6, r6, #31
 800905e:	d0fa      	beq.n	8009056 <__gethex+0x46a>
 8009060:	4453      	add	r3, sl
 8009062:	f1c6 0620 	rsb	r6, r6, #32
 8009066:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800906a:	f000 f9d7 	bl	800941c <__hi0bits>
 800906e:	42b0      	cmp	r0, r6
 8009070:	dbe7      	blt.n	8009042 <__gethex+0x456>
 8009072:	e7f0      	b.n	8009056 <__gethex+0x46a>
 8009074:	0800af58 	.word	0x0800af58

08009078 <L_shift>:
 8009078:	f1c2 0208 	rsb	r2, r2, #8
 800907c:	0092      	lsls	r2, r2, #2
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	f1c2 0620 	rsb	r6, r2, #32
 8009084:	6843      	ldr	r3, [r0, #4]
 8009086:	6804      	ldr	r4, [r0, #0]
 8009088:	fa03 f506 	lsl.w	r5, r3, r6
 800908c:	432c      	orrs	r4, r5
 800908e:	40d3      	lsrs	r3, r2
 8009090:	6004      	str	r4, [r0, #0]
 8009092:	f840 3f04 	str.w	r3, [r0, #4]!
 8009096:	4288      	cmp	r0, r1
 8009098:	d3f4      	bcc.n	8009084 <L_shift+0xc>
 800909a:	bd70      	pop	{r4, r5, r6, pc}

0800909c <__match>:
 800909c:	b530      	push	{r4, r5, lr}
 800909e:	6803      	ldr	r3, [r0, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a6:	b914      	cbnz	r4, 80090ae <__match+0x12>
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	2001      	movs	r0, #1
 80090ac:	bd30      	pop	{r4, r5, pc}
 80090ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090b6:	2d19      	cmp	r5, #25
 80090b8:	bf98      	it	ls
 80090ba:	3220      	addls	r2, #32
 80090bc:	42a2      	cmp	r2, r4
 80090be:	d0f0      	beq.n	80090a2 <__match+0x6>
 80090c0:	2000      	movs	r0, #0
 80090c2:	e7f3      	b.n	80090ac <__match+0x10>

080090c4 <__hexnan>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	680b      	ldr	r3, [r1, #0]
 80090ca:	115e      	asrs	r6, r3, #5
 80090cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090d0:	f013 031f 	ands.w	r3, r3, #31
 80090d4:	b087      	sub	sp, #28
 80090d6:	bf18      	it	ne
 80090d8:	3604      	addne	r6, #4
 80090da:	2500      	movs	r5, #0
 80090dc:	1f37      	subs	r7, r6, #4
 80090de:	4690      	mov	r8, r2
 80090e0:	6802      	ldr	r2, [r0, #0]
 80090e2:	9301      	str	r3, [sp, #4]
 80090e4:	4682      	mov	sl, r0
 80090e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80090ea:	46b9      	mov	r9, r7
 80090ec:	463c      	mov	r4, r7
 80090ee:	9502      	str	r5, [sp, #8]
 80090f0:	46ab      	mov	fp, r5
 80090f2:	7851      	ldrb	r1, [r2, #1]
 80090f4:	1c53      	adds	r3, r2, #1
 80090f6:	9303      	str	r3, [sp, #12]
 80090f8:	b341      	cbz	r1, 800914c <__hexnan+0x88>
 80090fa:	4608      	mov	r0, r1
 80090fc:	9205      	str	r2, [sp, #20]
 80090fe:	9104      	str	r1, [sp, #16]
 8009100:	f7ff fd5e 	bl	8008bc0 <__hexdig_fun>
 8009104:	2800      	cmp	r0, #0
 8009106:	d14f      	bne.n	80091a8 <__hexnan+0xe4>
 8009108:	9904      	ldr	r1, [sp, #16]
 800910a:	9a05      	ldr	r2, [sp, #20]
 800910c:	2920      	cmp	r1, #32
 800910e:	d818      	bhi.n	8009142 <__hexnan+0x7e>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	459b      	cmp	fp, r3
 8009114:	dd13      	ble.n	800913e <__hexnan+0x7a>
 8009116:	454c      	cmp	r4, r9
 8009118:	d206      	bcs.n	8009128 <__hexnan+0x64>
 800911a:	2d07      	cmp	r5, #7
 800911c:	dc04      	bgt.n	8009128 <__hexnan+0x64>
 800911e:	462a      	mov	r2, r5
 8009120:	4649      	mov	r1, r9
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff ffa8 	bl	8009078 <L_shift>
 8009128:	4544      	cmp	r4, r8
 800912a:	d950      	bls.n	80091ce <__hexnan+0x10a>
 800912c:	2300      	movs	r3, #0
 800912e:	f1a4 0904 	sub.w	r9, r4, #4
 8009132:	f844 3c04 	str.w	r3, [r4, #-4]
 8009136:	f8cd b008 	str.w	fp, [sp, #8]
 800913a:	464c      	mov	r4, r9
 800913c:	461d      	mov	r5, r3
 800913e:	9a03      	ldr	r2, [sp, #12]
 8009140:	e7d7      	b.n	80090f2 <__hexnan+0x2e>
 8009142:	2929      	cmp	r1, #41	; 0x29
 8009144:	d156      	bne.n	80091f4 <__hexnan+0x130>
 8009146:	3202      	adds	r2, #2
 8009148:	f8ca 2000 	str.w	r2, [sl]
 800914c:	f1bb 0f00 	cmp.w	fp, #0
 8009150:	d050      	beq.n	80091f4 <__hexnan+0x130>
 8009152:	454c      	cmp	r4, r9
 8009154:	d206      	bcs.n	8009164 <__hexnan+0xa0>
 8009156:	2d07      	cmp	r5, #7
 8009158:	dc04      	bgt.n	8009164 <__hexnan+0xa0>
 800915a:	462a      	mov	r2, r5
 800915c:	4649      	mov	r1, r9
 800915e:	4620      	mov	r0, r4
 8009160:	f7ff ff8a 	bl	8009078 <L_shift>
 8009164:	4544      	cmp	r4, r8
 8009166:	d934      	bls.n	80091d2 <__hexnan+0x10e>
 8009168:	f1a8 0204 	sub.w	r2, r8, #4
 800916c:	4623      	mov	r3, r4
 800916e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009172:	f842 1f04 	str.w	r1, [r2, #4]!
 8009176:	429f      	cmp	r7, r3
 8009178:	d2f9      	bcs.n	800916e <__hexnan+0xaa>
 800917a:	1b3b      	subs	r3, r7, r4
 800917c:	f023 0303 	bic.w	r3, r3, #3
 8009180:	3304      	adds	r3, #4
 8009182:	3401      	adds	r4, #1
 8009184:	3e03      	subs	r6, #3
 8009186:	42b4      	cmp	r4, r6
 8009188:	bf88      	it	hi
 800918a:	2304      	movhi	r3, #4
 800918c:	4443      	add	r3, r8
 800918e:	2200      	movs	r2, #0
 8009190:	f843 2b04 	str.w	r2, [r3], #4
 8009194:	429f      	cmp	r7, r3
 8009196:	d2fb      	bcs.n	8009190 <__hexnan+0xcc>
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	b91b      	cbnz	r3, 80091a4 <__hexnan+0xe0>
 800919c:	4547      	cmp	r7, r8
 800919e:	d127      	bne.n	80091f0 <__hexnan+0x12c>
 80091a0:	2301      	movs	r3, #1
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	2005      	movs	r0, #5
 80091a6:	e026      	b.n	80091f6 <__hexnan+0x132>
 80091a8:	3501      	adds	r5, #1
 80091aa:	2d08      	cmp	r5, #8
 80091ac:	f10b 0b01 	add.w	fp, fp, #1
 80091b0:	dd06      	ble.n	80091c0 <__hexnan+0xfc>
 80091b2:	4544      	cmp	r4, r8
 80091b4:	d9c3      	bls.n	800913e <__hexnan+0x7a>
 80091b6:	2300      	movs	r3, #0
 80091b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80091bc:	2501      	movs	r5, #1
 80091be:	3c04      	subs	r4, #4
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	f000 000f 	and.w	r0, r0, #15
 80091c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091ca:	6022      	str	r2, [r4, #0]
 80091cc:	e7b7      	b.n	800913e <__hexnan+0x7a>
 80091ce:	2508      	movs	r5, #8
 80091d0:	e7b5      	b.n	800913e <__hexnan+0x7a>
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0df      	beq.n	8009198 <__hexnan+0xd4>
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	f1c3 0320 	rsb	r3, r3, #32
 80091e0:	fa22 f303 	lsr.w	r3, r2, r3
 80091e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091e8:	401a      	ands	r2, r3
 80091ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80091ee:	e7d3      	b.n	8009198 <__hexnan+0xd4>
 80091f0:	3f04      	subs	r7, #4
 80091f2:	e7d1      	b.n	8009198 <__hexnan+0xd4>
 80091f4:	2004      	movs	r0, #4
 80091f6:	b007      	add	sp, #28
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091fc <_localeconv_r>:
 80091fc:	4800      	ldr	r0, [pc, #0]	; (8009200 <_localeconv_r+0x4>)
 80091fe:	4770      	bx	lr
 8009200:	20000168 	.word	0x20000168

08009204 <malloc>:
 8009204:	4b02      	ldr	r3, [pc, #8]	; (8009210 <malloc+0xc>)
 8009206:	4601      	mov	r1, r0
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f000 bd59 	b.w	8009cc0 <_malloc_r>
 800920e:	bf00      	nop
 8009210:	20000010 	.word	0x20000010

08009214 <__ascii_mbtowc>:
 8009214:	b082      	sub	sp, #8
 8009216:	b901      	cbnz	r1, 800921a <__ascii_mbtowc+0x6>
 8009218:	a901      	add	r1, sp, #4
 800921a:	b142      	cbz	r2, 800922e <__ascii_mbtowc+0x1a>
 800921c:	b14b      	cbz	r3, 8009232 <__ascii_mbtowc+0x1e>
 800921e:	7813      	ldrb	r3, [r2, #0]
 8009220:	600b      	str	r3, [r1, #0]
 8009222:	7812      	ldrb	r2, [r2, #0]
 8009224:	1e10      	subs	r0, r2, #0
 8009226:	bf18      	it	ne
 8009228:	2001      	movne	r0, #1
 800922a:	b002      	add	sp, #8
 800922c:	4770      	bx	lr
 800922e:	4610      	mov	r0, r2
 8009230:	e7fb      	b.n	800922a <__ascii_mbtowc+0x16>
 8009232:	f06f 0001 	mvn.w	r0, #1
 8009236:	e7f8      	b.n	800922a <__ascii_mbtowc+0x16>

08009238 <_Balloc>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800923c:	4604      	mov	r4, r0
 800923e:	460d      	mov	r5, r1
 8009240:	b976      	cbnz	r6, 8009260 <_Balloc+0x28>
 8009242:	2010      	movs	r0, #16
 8009244:	f7ff ffde 	bl	8009204 <malloc>
 8009248:	4602      	mov	r2, r0
 800924a:	6260      	str	r0, [r4, #36]	; 0x24
 800924c:	b920      	cbnz	r0, 8009258 <_Balloc+0x20>
 800924e:	4b18      	ldr	r3, [pc, #96]	; (80092b0 <_Balloc+0x78>)
 8009250:	4818      	ldr	r0, [pc, #96]	; (80092b4 <_Balloc+0x7c>)
 8009252:	2166      	movs	r1, #102	; 0x66
 8009254:	f000 ff3e 	bl	800a0d4 <__assert_func>
 8009258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800925c:	6006      	str	r6, [r0, #0]
 800925e:	60c6      	str	r6, [r0, #12]
 8009260:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009262:	68f3      	ldr	r3, [r6, #12]
 8009264:	b183      	cbz	r3, 8009288 <_Balloc+0x50>
 8009266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800926e:	b9b8      	cbnz	r0, 80092a0 <_Balloc+0x68>
 8009270:	2101      	movs	r1, #1
 8009272:	fa01 f605 	lsl.w	r6, r1, r5
 8009276:	1d72      	adds	r2, r6, #5
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fc9d 	bl	8009bba <_calloc_r>
 8009280:	b160      	cbz	r0, 800929c <_Balloc+0x64>
 8009282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009286:	e00e      	b.n	80092a6 <_Balloc+0x6e>
 8009288:	2221      	movs	r2, #33	; 0x21
 800928a:	2104      	movs	r1, #4
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fc94 	bl	8009bba <_calloc_r>
 8009292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009294:	60f0      	str	r0, [r6, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e4      	bne.n	8009266 <_Balloc+0x2e>
 800929c:	2000      	movs	r0, #0
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	6802      	ldr	r2, [r0, #0]
 80092a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092a6:	2300      	movs	r3, #0
 80092a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092ac:	e7f7      	b.n	800929e <_Balloc+0x66>
 80092ae:	bf00      	nop
 80092b0:	0800aee6 	.word	0x0800aee6
 80092b4:	0800afe4 	.word	0x0800afe4

080092b8 <_Bfree>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b976      	cbnz	r6, 80092e0 <_Bfree+0x28>
 80092c2:	2010      	movs	r0, #16
 80092c4:	f7ff ff9e 	bl	8009204 <malloc>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6268      	str	r0, [r5, #36]	; 0x24
 80092cc:	b920      	cbnz	r0, 80092d8 <_Bfree+0x20>
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <_Bfree+0x3c>)
 80092d0:	4809      	ldr	r0, [pc, #36]	; (80092f8 <_Bfree+0x40>)
 80092d2:	218a      	movs	r1, #138	; 0x8a
 80092d4:	f000 fefe 	bl	800a0d4 <__assert_func>
 80092d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092dc:	6006      	str	r6, [r0, #0]
 80092de:	60c6      	str	r6, [r0, #12]
 80092e0:	b13c      	cbz	r4, 80092f2 <_Bfree+0x3a>
 80092e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092e4:	6862      	ldr	r2, [r4, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092ec:	6021      	str	r1, [r4, #0]
 80092ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	0800aee6 	.word	0x0800aee6
 80092f8:	0800afe4 	.word	0x0800afe4

080092fc <__multadd>:
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	690d      	ldr	r5, [r1, #16]
 8009302:	4607      	mov	r7, r0
 8009304:	460c      	mov	r4, r1
 8009306:	461e      	mov	r6, r3
 8009308:	f101 0c14 	add.w	ip, r1, #20
 800930c:	2000      	movs	r0, #0
 800930e:	f8dc 3000 	ldr.w	r3, [ip]
 8009312:	b299      	uxth	r1, r3
 8009314:	fb02 6101 	mla	r1, r2, r1, r6
 8009318:	0c1e      	lsrs	r6, r3, #16
 800931a:	0c0b      	lsrs	r3, r1, #16
 800931c:	fb02 3306 	mla	r3, r2, r6, r3
 8009320:	b289      	uxth	r1, r1
 8009322:	3001      	adds	r0, #1
 8009324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009328:	4285      	cmp	r5, r0
 800932a:	f84c 1b04 	str.w	r1, [ip], #4
 800932e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009332:	dcec      	bgt.n	800930e <__multadd+0x12>
 8009334:	b30e      	cbz	r6, 800937a <__multadd+0x7e>
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	42ab      	cmp	r3, r5
 800933a:	dc19      	bgt.n	8009370 <__multadd+0x74>
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	4638      	mov	r0, r7
 8009340:	3101      	adds	r1, #1
 8009342:	f7ff ff79 	bl	8009238 <_Balloc>
 8009346:	4680      	mov	r8, r0
 8009348:	b928      	cbnz	r0, 8009356 <__multadd+0x5a>
 800934a:	4602      	mov	r2, r0
 800934c:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <__multadd+0x84>)
 800934e:	480d      	ldr	r0, [pc, #52]	; (8009384 <__multadd+0x88>)
 8009350:	21b5      	movs	r1, #181	; 0xb5
 8009352:	f000 febf 	bl	800a0d4 <__assert_func>
 8009356:	6922      	ldr	r2, [r4, #16]
 8009358:	3202      	adds	r2, #2
 800935a:	f104 010c 	add.w	r1, r4, #12
 800935e:	0092      	lsls	r2, r2, #2
 8009360:	300c      	adds	r0, #12
 8009362:	f7fc ffff 	bl	8006364 <memcpy>
 8009366:	4621      	mov	r1, r4
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ffa5 	bl	80092b8 <_Bfree>
 800936e:	4644      	mov	r4, r8
 8009370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009374:	3501      	adds	r5, #1
 8009376:	615e      	str	r6, [r3, #20]
 8009378:	6125      	str	r5, [r4, #16]
 800937a:	4620      	mov	r0, r4
 800937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009380:	0800af58 	.word	0x0800af58
 8009384:	0800afe4 	.word	0x0800afe4

08009388 <__s2b>:
 8009388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	4615      	mov	r5, r2
 8009390:	461f      	mov	r7, r3
 8009392:	2209      	movs	r2, #9
 8009394:	3308      	adds	r3, #8
 8009396:	4606      	mov	r6, r0
 8009398:	fb93 f3f2 	sdiv	r3, r3, r2
 800939c:	2100      	movs	r1, #0
 800939e:	2201      	movs	r2, #1
 80093a0:	429a      	cmp	r2, r3
 80093a2:	db09      	blt.n	80093b8 <__s2b+0x30>
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff ff47 	bl	8009238 <_Balloc>
 80093aa:	b940      	cbnz	r0, 80093be <__s2b+0x36>
 80093ac:	4602      	mov	r2, r0
 80093ae:	4b19      	ldr	r3, [pc, #100]	; (8009414 <__s2b+0x8c>)
 80093b0:	4819      	ldr	r0, [pc, #100]	; (8009418 <__s2b+0x90>)
 80093b2:	21ce      	movs	r1, #206	; 0xce
 80093b4:	f000 fe8e 	bl	800a0d4 <__assert_func>
 80093b8:	0052      	lsls	r2, r2, #1
 80093ba:	3101      	adds	r1, #1
 80093bc:	e7f0      	b.n	80093a0 <__s2b+0x18>
 80093be:	9b08      	ldr	r3, [sp, #32]
 80093c0:	6143      	str	r3, [r0, #20]
 80093c2:	2d09      	cmp	r5, #9
 80093c4:	f04f 0301 	mov.w	r3, #1
 80093c8:	6103      	str	r3, [r0, #16]
 80093ca:	dd16      	ble.n	80093fa <__s2b+0x72>
 80093cc:	f104 0909 	add.w	r9, r4, #9
 80093d0:	46c8      	mov	r8, r9
 80093d2:	442c      	add	r4, r5
 80093d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093d8:	4601      	mov	r1, r0
 80093da:	3b30      	subs	r3, #48	; 0x30
 80093dc:	220a      	movs	r2, #10
 80093de:	4630      	mov	r0, r6
 80093e0:	f7ff ff8c 	bl	80092fc <__multadd>
 80093e4:	45a0      	cmp	r8, r4
 80093e6:	d1f5      	bne.n	80093d4 <__s2b+0x4c>
 80093e8:	f1a5 0408 	sub.w	r4, r5, #8
 80093ec:	444c      	add	r4, r9
 80093ee:	1b2d      	subs	r5, r5, r4
 80093f0:	1963      	adds	r3, r4, r5
 80093f2:	42bb      	cmp	r3, r7
 80093f4:	db04      	blt.n	8009400 <__s2b+0x78>
 80093f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fa:	340a      	adds	r4, #10
 80093fc:	2509      	movs	r5, #9
 80093fe:	e7f6      	b.n	80093ee <__s2b+0x66>
 8009400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009404:	4601      	mov	r1, r0
 8009406:	3b30      	subs	r3, #48	; 0x30
 8009408:	220a      	movs	r2, #10
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff ff76 	bl	80092fc <__multadd>
 8009410:	e7ee      	b.n	80093f0 <__s2b+0x68>
 8009412:	bf00      	nop
 8009414:	0800af58 	.word	0x0800af58
 8009418:	0800afe4 	.word	0x0800afe4

0800941c <__hi0bits>:
 800941c:	0c03      	lsrs	r3, r0, #16
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	b9d3      	cbnz	r3, 8009458 <__hi0bits+0x3c>
 8009422:	0400      	lsls	r0, r0, #16
 8009424:	2310      	movs	r3, #16
 8009426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800942a:	bf04      	itt	eq
 800942c:	0200      	lsleq	r0, r0, #8
 800942e:	3308      	addeq	r3, #8
 8009430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009434:	bf04      	itt	eq
 8009436:	0100      	lsleq	r0, r0, #4
 8009438:	3304      	addeq	r3, #4
 800943a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800943e:	bf04      	itt	eq
 8009440:	0080      	lsleq	r0, r0, #2
 8009442:	3302      	addeq	r3, #2
 8009444:	2800      	cmp	r0, #0
 8009446:	db05      	blt.n	8009454 <__hi0bits+0x38>
 8009448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800944c:	f103 0301 	add.w	r3, r3, #1
 8009450:	bf08      	it	eq
 8009452:	2320      	moveq	r3, #32
 8009454:	4618      	mov	r0, r3
 8009456:	4770      	bx	lr
 8009458:	2300      	movs	r3, #0
 800945a:	e7e4      	b.n	8009426 <__hi0bits+0xa>

0800945c <__lo0bits>:
 800945c:	6803      	ldr	r3, [r0, #0]
 800945e:	f013 0207 	ands.w	r2, r3, #7
 8009462:	4601      	mov	r1, r0
 8009464:	d00b      	beq.n	800947e <__lo0bits+0x22>
 8009466:	07da      	lsls	r2, r3, #31
 8009468:	d423      	bmi.n	80094b2 <__lo0bits+0x56>
 800946a:	0798      	lsls	r0, r3, #30
 800946c:	bf49      	itett	mi
 800946e:	085b      	lsrmi	r3, r3, #1
 8009470:	089b      	lsrpl	r3, r3, #2
 8009472:	2001      	movmi	r0, #1
 8009474:	600b      	strmi	r3, [r1, #0]
 8009476:	bf5c      	itt	pl
 8009478:	600b      	strpl	r3, [r1, #0]
 800947a:	2002      	movpl	r0, #2
 800947c:	4770      	bx	lr
 800947e:	b298      	uxth	r0, r3
 8009480:	b9a8      	cbnz	r0, 80094ae <__lo0bits+0x52>
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	2010      	movs	r0, #16
 8009486:	b2da      	uxtb	r2, r3
 8009488:	b90a      	cbnz	r2, 800948e <__lo0bits+0x32>
 800948a:	3008      	adds	r0, #8
 800948c:	0a1b      	lsrs	r3, r3, #8
 800948e:	071a      	lsls	r2, r3, #28
 8009490:	bf04      	itt	eq
 8009492:	091b      	lsreq	r3, r3, #4
 8009494:	3004      	addeq	r0, #4
 8009496:	079a      	lsls	r2, r3, #30
 8009498:	bf04      	itt	eq
 800949a:	089b      	lsreq	r3, r3, #2
 800949c:	3002      	addeq	r0, #2
 800949e:	07da      	lsls	r2, r3, #31
 80094a0:	d403      	bmi.n	80094aa <__lo0bits+0x4e>
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	f100 0001 	add.w	r0, r0, #1
 80094a8:	d005      	beq.n	80094b6 <__lo0bits+0x5a>
 80094aa:	600b      	str	r3, [r1, #0]
 80094ac:	4770      	bx	lr
 80094ae:	4610      	mov	r0, r2
 80094b0:	e7e9      	b.n	8009486 <__lo0bits+0x2a>
 80094b2:	2000      	movs	r0, #0
 80094b4:	4770      	bx	lr
 80094b6:	2020      	movs	r0, #32
 80094b8:	4770      	bx	lr
	...

080094bc <__i2b>:
 80094bc:	b510      	push	{r4, lr}
 80094be:	460c      	mov	r4, r1
 80094c0:	2101      	movs	r1, #1
 80094c2:	f7ff feb9 	bl	8009238 <_Balloc>
 80094c6:	4602      	mov	r2, r0
 80094c8:	b928      	cbnz	r0, 80094d6 <__i2b+0x1a>
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <__i2b+0x24>)
 80094cc:	4805      	ldr	r0, [pc, #20]	; (80094e4 <__i2b+0x28>)
 80094ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094d2:	f000 fdff 	bl	800a0d4 <__assert_func>
 80094d6:	2301      	movs	r3, #1
 80094d8:	6144      	str	r4, [r0, #20]
 80094da:	6103      	str	r3, [r0, #16]
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	bf00      	nop
 80094e0:	0800af58 	.word	0x0800af58
 80094e4:	0800afe4 	.word	0x0800afe4

080094e8 <__multiply>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	4691      	mov	r9, r2
 80094ee:	690a      	ldr	r2, [r1, #16]
 80094f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	bfb8      	it	lt
 80094f8:	460b      	movlt	r3, r1
 80094fa:	460c      	mov	r4, r1
 80094fc:	bfbc      	itt	lt
 80094fe:	464c      	movlt	r4, r9
 8009500:	4699      	movlt	r9, r3
 8009502:	6927      	ldr	r7, [r4, #16]
 8009504:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009508:	68a3      	ldr	r3, [r4, #8]
 800950a:	6861      	ldr	r1, [r4, #4]
 800950c:	eb07 060a 	add.w	r6, r7, sl
 8009510:	42b3      	cmp	r3, r6
 8009512:	b085      	sub	sp, #20
 8009514:	bfb8      	it	lt
 8009516:	3101      	addlt	r1, #1
 8009518:	f7ff fe8e 	bl	8009238 <_Balloc>
 800951c:	b930      	cbnz	r0, 800952c <__multiply+0x44>
 800951e:	4602      	mov	r2, r0
 8009520:	4b44      	ldr	r3, [pc, #272]	; (8009634 <__multiply+0x14c>)
 8009522:	4845      	ldr	r0, [pc, #276]	; (8009638 <__multiply+0x150>)
 8009524:	f240 115d 	movw	r1, #349	; 0x15d
 8009528:	f000 fdd4 	bl	800a0d4 <__assert_func>
 800952c:	f100 0514 	add.w	r5, r0, #20
 8009530:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009534:	462b      	mov	r3, r5
 8009536:	2200      	movs	r2, #0
 8009538:	4543      	cmp	r3, r8
 800953a:	d321      	bcc.n	8009580 <__multiply+0x98>
 800953c:	f104 0314 	add.w	r3, r4, #20
 8009540:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009544:	f109 0314 	add.w	r3, r9, #20
 8009548:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800954c:	9202      	str	r2, [sp, #8]
 800954e:	1b3a      	subs	r2, r7, r4
 8009550:	3a15      	subs	r2, #21
 8009552:	f022 0203 	bic.w	r2, r2, #3
 8009556:	3204      	adds	r2, #4
 8009558:	f104 0115 	add.w	r1, r4, #21
 800955c:	428f      	cmp	r7, r1
 800955e:	bf38      	it	cc
 8009560:	2204      	movcc	r2, #4
 8009562:	9201      	str	r2, [sp, #4]
 8009564:	9a02      	ldr	r2, [sp, #8]
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	429a      	cmp	r2, r3
 800956a:	d80c      	bhi.n	8009586 <__multiply+0x9e>
 800956c:	2e00      	cmp	r6, #0
 800956e:	dd03      	ble.n	8009578 <__multiply+0x90>
 8009570:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009574:	2b00      	cmp	r3, #0
 8009576:	d05a      	beq.n	800962e <__multiply+0x146>
 8009578:	6106      	str	r6, [r0, #16]
 800957a:	b005      	add	sp, #20
 800957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	f843 2b04 	str.w	r2, [r3], #4
 8009584:	e7d8      	b.n	8009538 <__multiply+0x50>
 8009586:	f8b3 a000 	ldrh.w	sl, [r3]
 800958a:	f1ba 0f00 	cmp.w	sl, #0
 800958e:	d024      	beq.n	80095da <__multiply+0xf2>
 8009590:	f104 0e14 	add.w	lr, r4, #20
 8009594:	46a9      	mov	r9, r5
 8009596:	f04f 0c00 	mov.w	ip, #0
 800959a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800959e:	f8d9 1000 	ldr.w	r1, [r9]
 80095a2:	fa1f fb82 	uxth.w	fp, r2
 80095a6:	b289      	uxth	r1, r1
 80095a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80095ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095b0:	f8d9 2000 	ldr.w	r2, [r9]
 80095b4:	4461      	add	r1, ip
 80095b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80095be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095c2:	b289      	uxth	r1, r1
 80095c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095c8:	4577      	cmp	r7, lr
 80095ca:	f849 1b04 	str.w	r1, [r9], #4
 80095ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095d2:	d8e2      	bhi.n	800959a <__multiply+0xb2>
 80095d4:	9a01      	ldr	r2, [sp, #4]
 80095d6:	f845 c002 	str.w	ip, [r5, r2]
 80095da:	9a03      	ldr	r2, [sp, #12]
 80095dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095e0:	3304      	adds	r3, #4
 80095e2:	f1b9 0f00 	cmp.w	r9, #0
 80095e6:	d020      	beq.n	800962a <__multiply+0x142>
 80095e8:	6829      	ldr	r1, [r5, #0]
 80095ea:	f104 0c14 	add.w	ip, r4, #20
 80095ee:	46ae      	mov	lr, r5
 80095f0:	f04f 0a00 	mov.w	sl, #0
 80095f4:	f8bc b000 	ldrh.w	fp, [ip]
 80095f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095fc:	fb09 220b 	mla	r2, r9, fp, r2
 8009600:	4492      	add	sl, r2
 8009602:	b289      	uxth	r1, r1
 8009604:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009608:	f84e 1b04 	str.w	r1, [lr], #4
 800960c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009610:	f8be 1000 	ldrh.w	r1, [lr]
 8009614:	0c12      	lsrs	r2, r2, #16
 8009616:	fb09 1102 	mla	r1, r9, r2, r1
 800961a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800961e:	4567      	cmp	r7, ip
 8009620:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009624:	d8e6      	bhi.n	80095f4 <__multiply+0x10c>
 8009626:	9a01      	ldr	r2, [sp, #4]
 8009628:	50a9      	str	r1, [r5, r2]
 800962a:	3504      	adds	r5, #4
 800962c:	e79a      	b.n	8009564 <__multiply+0x7c>
 800962e:	3e01      	subs	r6, #1
 8009630:	e79c      	b.n	800956c <__multiply+0x84>
 8009632:	bf00      	nop
 8009634:	0800af58 	.word	0x0800af58
 8009638:	0800afe4 	.word	0x0800afe4

0800963c <__pow5mult>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	4615      	mov	r5, r2
 8009642:	f012 0203 	ands.w	r2, r2, #3
 8009646:	4606      	mov	r6, r0
 8009648:	460f      	mov	r7, r1
 800964a:	d007      	beq.n	800965c <__pow5mult+0x20>
 800964c:	4c25      	ldr	r4, [pc, #148]	; (80096e4 <__pow5mult+0xa8>)
 800964e:	3a01      	subs	r2, #1
 8009650:	2300      	movs	r3, #0
 8009652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009656:	f7ff fe51 	bl	80092fc <__multadd>
 800965a:	4607      	mov	r7, r0
 800965c:	10ad      	asrs	r5, r5, #2
 800965e:	d03d      	beq.n	80096dc <__pow5mult+0xa0>
 8009660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009662:	b97c      	cbnz	r4, 8009684 <__pow5mult+0x48>
 8009664:	2010      	movs	r0, #16
 8009666:	f7ff fdcd 	bl	8009204 <malloc>
 800966a:	4602      	mov	r2, r0
 800966c:	6270      	str	r0, [r6, #36]	; 0x24
 800966e:	b928      	cbnz	r0, 800967c <__pow5mult+0x40>
 8009670:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <__pow5mult+0xac>)
 8009672:	481e      	ldr	r0, [pc, #120]	; (80096ec <__pow5mult+0xb0>)
 8009674:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009678:	f000 fd2c 	bl	800a0d4 <__assert_func>
 800967c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009680:	6004      	str	r4, [r0, #0]
 8009682:	60c4      	str	r4, [r0, #12]
 8009684:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800968c:	b94c      	cbnz	r4, 80096a2 <__pow5mult+0x66>
 800968e:	f240 2171 	movw	r1, #625	; 0x271
 8009692:	4630      	mov	r0, r6
 8009694:	f7ff ff12 	bl	80094bc <__i2b>
 8009698:	2300      	movs	r3, #0
 800969a:	f8c8 0008 	str.w	r0, [r8, #8]
 800969e:	4604      	mov	r4, r0
 80096a0:	6003      	str	r3, [r0, #0]
 80096a2:	f04f 0900 	mov.w	r9, #0
 80096a6:	07eb      	lsls	r3, r5, #31
 80096a8:	d50a      	bpl.n	80096c0 <__pow5mult+0x84>
 80096aa:	4639      	mov	r1, r7
 80096ac:	4622      	mov	r2, r4
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ff1a 	bl	80094e8 <__multiply>
 80096b4:	4639      	mov	r1, r7
 80096b6:	4680      	mov	r8, r0
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7ff fdfd 	bl	80092b8 <_Bfree>
 80096be:	4647      	mov	r7, r8
 80096c0:	106d      	asrs	r5, r5, #1
 80096c2:	d00b      	beq.n	80096dc <__pow5mult+0xa0>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	b938      	cbnz	r0, 80096d8 <__pow5mult+0x9c>
 80096c8:	4622      	mov	r2, r4
 80096ca:	4621      	mov	r1, r4
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff ff0b 	bl	80094e8 <__multiply>
 80096d2:	6020      	str	r0, [r4, #0]
 80096d4:	f8c0 9000 	str.w	r9, [r0]
 80096d8:	4604      	mov	r4, r0
 80096da:	e7e4      	b.n	80096a6 <__pow5mult+0x6a>
 80096dc:	4638      	mov	r0, r7
 80096de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e2:	bf00      	nop
 80096e4:	0800b130 	.word	0x0800b130
 80096e8:	0800aee6 	.word	0x0800aee6
 80096ec:	0800afe4 	.word	0x0800afe4

080096f0 <__lshift>:
 80096f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	460c      	mov	r4, r1
 80096f6:	6849      	ldr	r1, [r1, #4]
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096fe:	68a3      	ldr	r3, [r4, #8]
 8009700:	4607      	mov	r7, r0
 8009702:	4691      	mov	r9, r2
 8009704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009708:	f108 0601 	add.w	r6, r8, #1
 800970c:	42b3      	cmp	r3, r6
 800970e:	db0b      	blt.n	8009728 <__lshift+0x38>
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff fd91 	bl	8009238 <_Balloc>
 8009716:	4605      	mov	r5, r0
 8009718:	b948      	cbnz	r0, 800972e <__lshift+0x3e>
 800971a:	4602      	mov	r2, r0
 800971c:	4b2a      	ldr	r3, [pc, #168]	; (80097c8 <__lshift+0xd8>)
 800971e:	482b      	ldr	r0, [pc, #172]	; (80097cc <__lshift+0xdc>)
 8009720:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009724:	f000 fcd6 	bl	800a0d4 <__assert_func>
 8009728:	3101      	adds	r1, #1
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	e7ee      	b.n	800970c <__lshift+0x1c>
 800972e:	2300      	movs	r3, #0
 8009730:	f100 0114 	add.w	r1, r0, #20
 8009734:	f100 0210 	add.w	r2, r0, #16
 8009738:	4618      	mov	r0, r3
 800973a:	4553      	cmp	r3, sl
 800973c:	db37      	blt.n	80097ae <__lshift+0xbe>
 800973e:	6920      	ldr	r0, [r4, #16]
 8009740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009744:	f104 0314 	add.w	r3, r4, #20
 8009748:	f019 091f 	ands.w	r9, r9, #31
 800974c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009750:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009754:	d02f      	beq.n	80097b6 <__lshift+0xc6>
 8009756:	f1c9 0e20 	rsb	lr, r9, #32
 800975a:	468a      	mov	sl, r1
 800975c:	f04f 0c00 	mov.w	ip, #0
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	fa02 f209 	lsl.w	r2, r2, r9
 8009766:	ea42 020c 	orr.w	r2, r2, ip
 800976a:	f84a 2b04 	str.w	r2, [sl], #4
 800976e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009772:	4298      	cmp	r0, r3
 8009774:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009778:	d8f2      	bhi.n	8009760 <__lshift+0x70>
 800977a:	1b03      	subs	r3, r0, r4
 800977c:	3b15      	subs	r3, #21
 800977e:	f023 0303 	bic.w	r3, r3, #3
 8009782:	3304      	adds	r3, #4
 8009784:	f104 0215 	add.w	r2, r4, #21
 8009788:	4290      	cmp	r0, r2
 800978a:	bf38      	it	cc
 800978c:	2304      	movcc	r3, #4
 800978e:	f841 c003 	str.w	ip, [r1, r3]
 8009792:	f1bc 0f00 	cmp.w	ip, #0
 8009796:	d001      	beq.n	800979c <__lshift+0xac>
 8009798:	f108 0602 	add.w	r6, r8, #2
 800979c:	3e01      	subs	r6, #1
 800979e:	4638      	mov	r0, r7
 80097a0:	612e      	str	r6, [r5, #16]
 80097a2:	4621      	mov	r1, r4
 80097a4:	f7ff fd88 	bl	80092b8 <_Bfree>
 80097a8:	4628      	mov	r0, r5
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80097b2:	3301      	adds	r3, #1
 80097b4:	e7c1      	b.n	800973a <__lshift+0x4a>
 80097b6:	3904      	subs	r1, #4
 80097b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80097c0:	4298      	cmp	r0, r3
 80097c2:	d8f9      	bhi.n	80097b8 <__lshift+0xc8>
 80097c4:	e7ea      	b.n	800979c <__lshift+0xac>
 80097c6:	bf00      	nop
 80097c8:	0800af58 	.word	0x0800af58
 80097cc:	0800afe4 	.word	0x0800afe4

080097d0 <__mcmp>:
 80097d0:	b530      	push	{r4, r5, lr}
 80097d2:	6902      	ldr	r2, [r0, #16]
 80097d4:	690c      	ldr	r4, [r1, #16]
 80097d6:	1b12      	subs	r2, r2, r4
 80097d8:	d10e      	bne.n	80097f8 <__mcmp+0x28>
 80097da:	f100 0314 	add.w	r3, r0, #20
 80097de:	3114      	adds	r1, #20
 80097e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097f0:	42a5      	cmp	r5, r4
 80097f2:	d003      	beq.n	80097fc <__mcmp+0x2c>
 80097f4:	d305      	bcc.n	8009802 <__mcmp+0x32>
 80097f6:	2201      	movs	r2, #1
 80097f8:	4610      	mov	r0, r2
 80097fa:	bd30      	pop	{r4, r5, pc}
 80097fc:	4283      	cmp	r3, r0
 80097fe:	d3f3      	bcc.n	80097e8 <__mcmp+0x18>
 8009800:	e7fa      	b.n	80097f8 <__mcmp+0x28>
 8009802:	f04f 32ff 	mov.w	r2, #4294967295
 8009806:	e7f7      	b.n	80097f8 <__mcmp+0x28>

08009808 <__mdiff>:
 8009808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	460c      	mov	r4, r1
 800980e:	4606      	mov	r6, r0
 8009810:	4611      	mov	r1, r2
 8009812:	4620      	mov	r0, r4
 8009814:	4690      	mov	r8, r2
 8009816:	f7ff ffdb 	bl	80097d0 <__mcmp>
 800981a:	1e05      	subs	r5, r0, #0
 800981c:	d110      	bne.n	8009840 <__mdiff+0x38>
 800981e:	4629      	mov	r1, r5
 8009820:	4630      	mov	r0, r6
 8009822:	f7ff fd09 	bl	8009238 <_Balloc>
 8009826:	b930      	cbnz	r0, 8009836 <__mdiff+0x2e>
 8009828:	4b3a      	ldr	r3, [pc, #232]	; (8009914 <__mdiff+0x10c>)
 800982a:	4602      	mov	r2, r0
 800982c:	f240 2132 	movw	r1, #562	; 0x232
 8009830:	4839      	ldr	r0, [pc, #228]	; (8009918 <__mdiff+0x110>)
 8009832:	f000 fc4f 	bl	800a0d4 <__assert_func>
 8009836:	2301      	movs	r3, #1
 8009838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800983c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	bfa4      	itt	ge
 8009842:	4643      	movge	r3, r8
 8009844:	46a0      	movge	r8, r4
 8009846:	4630      	mov	r0, r6
 8009848:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800984c:	bfa6      	itte	ge
 800984e:	461c      	movge	r4, r3
 8009850:	2500      	movge	r5, #0
 8009852:	2501      	movlt	r5, #1
 8009854:	f7ff fcf0 	bl	8009238 <_Balloc>
 8009858:	b920      	cbnz	r0, 8009864 <__mdiff+0x5c>
 800985a:	4b2e      	ldr	r3, [pc, #184]	; (8009914 <__mdiff+0x10c>)
 800985c:	4602      	mov	r2, r0
 800985e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009862:	e7e5      	b.n	8009830 <__mdiff+0x28>
 8009864:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009868:	6926      	ldr	r6, [r4, #16]
 800986a:	60c5      	str	r5, [r0, #12]
 800986c:	f104 0914 	add.w	r9, r4, #20
 8009870:	f108 0514 	add.w	r5, r8, #20
 8009874:	f100 0e14 	add.w	lr, r0, #20
 8009878:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800987c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009880:	f108 0210 	add.w	r2, r8, #16
 8009884:	46f2      	mov	sl, lr
 8009886:	2100      	movs	r1, #0
 8009888:	f859 3b04 	ldr.w	r3, [r9], #4
 800988c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009890:	fa1f f883 	uxth.w	r8, r3
 8009894:	fa11 f18b 	uxtah	r1, r1, fp
 8009898:	0c1b      	lsrs	r3, r3, #16
 800989a:	eba1 0808 	sub.w	r8, r1, r8
 800989e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098a6:	fa1f f888 	uxth.w	r8, r8
 80098aa:	1419      	asrs	r1, r3, #16
 80098ac:	454e      	cmp	r6, r9
 80098ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098b2:	f84a 3b04 	str.w	r3, [sl], #4
 80098b6:	d8e7      	bhi.n	8009888 <__mdiff+0x80>
 80098b8:	1b33      	subs	r3, r6, r4
 80098ba:	3b15      	subs	r3, #21
 80098bc:	f023 0303 	bic.w	r3, r3, #3
 80098c0:	3304      	adds	r3, #4
 80098c2:	3415      	adds	r4, #21
 80098c4:	42a6      	cmp	r6, r4
 80098c6:	bf38      	it	cc
 80098c8:	2304      	movcc	r3, #4
 80098ca:	441d      	add	r5, r3
 80098cc:	4473      	add	r3, lr
 80098ce:	469e      	mov	lr, r3
 80098d0:	462e      	mov	r6, r5
 80098d2:	4566      	cmp	r6, ip
 80098d4:	d30e      	bcc.n	80098f4 <__mdiff+0xec>
 80098d6:	f10c 0203 	add.w	r2, ip, #3
 80098da:	1b52      	subs	r2, r2, r5
 80098dc:	f022 0203 	bic.w	r2, r2, #3
 80098e0:	3d03      	subs	r5, #3
 80098e2:	45ac      	cmp	ip, r5
 80098e4:	bf38      	it	cc
 80098e6:	2200      	movcc	r2, #0
 80098e8:	441a      	add	r2, r3
 80098ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098ee:	b17b      	cbz	r3, 8009910 <__mdiff+0x108>
 80098f0:	6107      	str	r7, [r0, #16]
 80098f2:	e7a3      	b.n	800983c <__mdiff+0x34>
 80098f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80098f8:	fa11 f288 	uxtah	r2, r1, r8
 80098fc:	1414      	asrs	r4, r2, #16
 80098fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009902:	b292      	uxth	r2, r2
 8009904:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009908:	f84e 2b04 	str.w	r2, [lr], #4
 800990c:	1421      	asrs	r1, r4, #16
 800990e:	e7e0      	b.n	80098d2 <__mdiff+0xca>
 8009910:	3f01      	subs	r7, #1
 8009912:	e7ea      	b.n	80098ea <__mdiff+0xe2>
 8009914:	0800af58 	.word	0x0800af58
 8009918:	0800afe4 	.word	0x0800afe4

0800991c <__ulp>:
 800991c:	b082      	sub	sp, #8
 800991e:	ed8d 0b00 	vstr	d0, [sp]
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	4912      	ldr	r1, [pc, #72]	; (8009970 <__ulp+0x54>)
 8009926:	4019      	ands	r1, r3
 8009928:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800992c:	2900      	cmp	r1, #0
 800992e:	dd05      	ble.n	800993c <__ulp+0x20>
 8009930:	2200      	movs	r2, #0
 8009932:	460b      	mov	r3, r1
 8009934:	ec43 2b10 	vmov	d0, r2, r3
 8009938:	b002      	add	sp, #8
 800993a:	4770      	bx	lr
 800993c:	4249      	negs	r1, r1
 800993e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009942:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	da04      	bge.n	800995a <__ulp+0x3e>
 8009950:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009954:	fa41 f300 	asr.w	r3, r1, r0
 8009958:	e7ec      	b.n	8009934 <__ulp+0x18>
 800995a:	f1a0 0114 	sub.w	r1, r0, #20
 800995e:	291e      	cmp	r1, #30
 8009960:	bfda      	itte	le
 8009962:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009966:	fa20 f101 	lsrle.w	r1, r0, r1
 800996a:	2101      	movgt	r1, #1
 800996c:	460a      	mov	r2, r1
 800996e:	e7e1      	b.n	8009934 <__ulp+0x18>
 8009970:	7ff00000 	.word	0x7ff00000

08009974 <__b2d>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	6905      	ldr	r5, [r0, #16]
 8009978:	f100 0714 	add.w	r7, r0, #20
 800997c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009980:	1f2e      	subs	r6, r5, #4
 8009982:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff fd48 	bl	800941c <__hi0bits>
 800998c:	f1c0 0320 	rsb	r3, r0, #32
 8009990:	280a      	cmp	r0, #10
 8009992:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a10 <__b2d+0x9c>
 8009996:	600b      	str	r3, [r1, #0]
 8009998:	dc14      	bgt.n	80099c4 <__b2d+0x50>
 800999a:	f1c0 0e0b 	rsb	lr, r0, #11
 800999e:	fa24 f10e 	lsr.w	r1, r4, lr
 80099a2:	42b7      	cmp	r7, r6
 80099a4:	ea41 030c 	orr.w	r3, r1, ip
 80099a8:	bf34      	ite	cc
 80099aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099ae:	2100      	movcs	r1, #0
 80099b0:	3015      	adds	r0, #21
 80099b2:	fa04 f000 	lsl.w	r0, r4, r0
 80099b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80099ba:	ea40 0201 	orr.w	r2, r0, r1
 80099be:	ec43 2b10 	vmov	d0, r2, r3
 80099c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c4:	42b7      	cmp	r7, r6
 80099c6:	bf3a      	itte	cc
 80099c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80099d0:	2100      	movcs	r1, #0
 80099d2:	380b      	subs	r0, #11
 80099d4:	d017      	beq.n	8009a06 <__b2d+0x92>
 80099d6:	f1c0 0c20 	rsb	ip, r0, #32
 80099da:	fa04 f500 	lsl.w	r5, r4, r0
 80099de:	42be      	cmp	r6, r7
 80099e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80099e4:	ea45 0504 	orr.w	r5, r5, r4
 80099e8:	bf8c      	ite	hi
 80099ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099ee:	2400      	movls	r4, #0
 80099f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80099f4:	fa01 f000 	lsl.w	r0, r1, r0
 80099f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80099fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a00:	ea40 0204 	orr.w	r2, r0, r4
 8009a04:	e7db      	b.n	80099be <__b2d+0x4a>
 8009a06:	ea44 030c 	orr.w	r3, r4, ip
 8009a0a:	460a      	mov	r2, r1
 8009a0c:	e7d7      	b.n	80099be <__b2d+0x4a>
 8009a0e:	bf00      	nop
 8009a10:	3ff00000 	.word	0x3ff00000

08009a14 <__d2b>:
 8009a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	4689      	mov	r9, r1
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	ec57 6b10 	vmov	r6, r7, d0
 8009a20:	4690      	mov	r8, r2
 8009a22:	f7ff fc09 	bl	8009238 <_Balloc>
 8009a26:	4604      	mov	r4, r0
 8009a28:	b930      	cbnz	r0, 8009a38 <__d2b+0x24>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4b25      	ldr	r3, [pc, #148]	; (8009ac4 <__d2b+0xb0>)
 8009a2e:	4826      	ldr	r0, [pc, #152]	; (8009ac8 <__d2b+0xb4>)
 8009a30:	f240 310a 	movw	r1, #778	; 0x30a
 8009a34:	f000 fb4e 	bl	800a0d4 <__assert_func>
 8009a38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a40:	bb35      	cbnz	r5, 8009a90 <__d2b+0x7c>
 8009a42:	2e00      	cmp	r6, #0
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	d028      	beq.n	8009a9a <__d2b+0x86>
 8009a48:	4668      	mov	r0, sp
 8009a4a:	9600      	str	r6, [sp, #0]
 8009a4c:	f7ff fd06 	bl	800945c <__lo0bits>
 8009a50:	9900      	ldr	r1, [sp, #0]
 8009a52:	b300      	cbz	r0, 8009a96 <__d2b+0x82>
 8009a54:	9a01      	ldr	r2, [sp, #4]
 8009a56:	f1c0 0320 	rsb	r3, r0, #32
 8009a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	40c2      	lsrs	r2, r0
 8009a62:	6163      	str	r3, [r4, #20]
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	61a3      	str	r3, [r4, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bf14      	ite	ne
 8009a6e:	2202      	movne	r2, #2
 8009a70:	2201      	moveq	r2, #1
 8009a72:	6122      	str	r2, [r4, #16]
 8009a74:	b1d5      	cbz	r5, 8009aac <__d2b+0x98>
 8009a76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a7a:	4405      	add	r5, r0
 8009a7c:	f8c9 5000 	str.w	r5, [r9]
 8009a80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a84:	f8c8 0000 	str.w	r0, [r8]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	b003      	add	sp, #12
 8009a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a94:	e7d5      	b.n	8009a42 <__d2b+0x2e>
 8009a96:	6161      	str	r1, [r4, #20]
 8009a98:	e7e5      	b.n	8009a66 <__d2b+0x52>
 8009a9a:	a801      	add	r0, sp, #4
 8009a9c:	f7ff fcde 	bl	800945c <__lo0bits>
 8009aa0:	9b01      	ldr	r3, [sp, #4]
 8009aa2:	6163      	str	r3, [r4, #20]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	6122      	str	r2, [r4, #16]
 8009aa8:	3020      	adds	r0, #32
 8009aaa:	e7e3      	b.n	8009a74 <__d2b+0x60>
 8009aac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ab4:	f8c9 0000 	str.w	r0, [r9]
 8009ab8:	6918      	ldr	r0, [r3, #16]
 8009aba:	f7ff fcaf 	bl	800941c <__hi0bits>
 8009abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ac2:	e7df      	b.n	8009a84 <__d2b+0x70>
 8009ac4:	0800af58 	.word	0x0800af58
 8009ac8:	0800afe4 	.word	0x0800afe4

08009acc <__ratio>:
 8009acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	4688      	mov	r8, r1
 8009ad2:	4669      	mov	r1, sp
 8009ad4:	4681      	mov	r9, r0
 8009ad6:	f7ff ff4d 	bl	8009974 <__b2d>
 8009ada:	a901      	add	r1, sp, #4
 8009adc:	4640      	mov	r0, r8
 8009ade:	ec55 4b10 	vmov	r4, r5, d0
 8009ae2:	f7ff ff47 	bl	8009974 <__b2d>
 8009ae6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009aea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009aee:	eba3 0c02 	sub.w	ip, r3, r2
 8009af2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009afc:	ec51 0b10 	vmov	r0, r1, d0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfd6      	itet	le
 8009b04:	460a      	movle	r2, r1
 8009b06:	462a      	movgt	r2, r5
 8009b08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b0c:	468b      	mov	fp, r1
 8009b0e:	462f      	mov	r7, r5
 8009b10:	bfd4      	ite	le
 8009b12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	ee10 2a10 	vmov	r2, s0
 8009b20:	465b      	mov	r3, fp
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f6 feb2 	bl	800088c <__aeabi_ddiv>
 8009b28:	ec41 0b10 	vmov	d0, r0, r1
 8009b2c:	b003      	add	sp, #12
 8009b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b32 <__copybits>:
 8009b32:	3901      	subs	r1, #1
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	1149      	asrs	r1, r1, #5
 8009b38:	6914      	ldr	r4, [r2, #16]
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	f102 0314 	add.w	r3, r2, #20
 8009b40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b48:	1f05      	subs	r5, r0, #4
 8009b4a:	42a3      	cmp	r3, r4
 8009b4c:	d30c      	bcc.n	8009b68 <__copybits+0x36>
 8009b4e:	1aa3      	subs	r3, r4, r2
 8009b50:	3b11      	subs	r3, #17
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	3211      	adds	r2, #17
 8009b58:	42a2      	cmp	r2, r4
 8009b5a:	bf88      	it	hi
 8009b5c:	2300      	movhi	r3, #0
 8009b5e:	4418      	add	r0, r3
 8009b60:	2300      	movs	r3, #0
 8009b62:	4288      	cmp	r0, r1
 8009b64:	d305      	bcc.n	8009b72 <__copybits+0x40>
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b70:	e7eb      	b.n	8009b4a <__copybits+0x18>
 8009b72:	f840 3b04 	str.w	r3, [r0], #4
 8009b76:	e7f4      	b.n	8009b62 <__copybits+0x30>

08009b78 <__any_on>:
 8009b78:	f100 0214 	add.w	r2, r0, #20
 8009b7c:	6900      	ldr	r0, [r0, #16]
 8009b7e:	114b      	asrs	r3, r1, #5
 8009b80:	4298      	cmp	r0, r3
 8009b82:	b510      	push	{r4, lr}
 8009b84:	db11      	blt.n	8009baa <__any_on+0x32>
 8009b86:	dd0a      	ble.n	8009b9e <__any_on+0x26>
 8009b88:	f011 011f 	ands.w	r1, r1, #31
 8009b8c:	d007      	beq.n	8009b9e <__any_on+0x26>
 8009b8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b92:	fa24 f001 	lsr.w	r0, r4, r1
 8009b96:	fa00 f101 	lsl.w	r1, r0, r1
 8009b9a:	428c      	cmp	r4, r1
 8009b9c:	d10b      	bne.n	8009bb6 <__any_on+0x3e>
 8009b9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d803      	bhi.n	8009bae <__any_on+0x36>
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	bd10      	pop	{r4, pc}
 8009baa:	4603      	mov	r3, r0
 8009bac:	e7f7      	b.n	8009b9e <__any_on+0x26>
 8009bae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bb2:	2900      	cmp	r1, #0
 8009bb4:	d0f5      	beq.n	8009ba2 <__any_on+0x2a>
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	e7f6      	b.n	8009ba8 <__any_on+0x30>

08009bba <_calloc_r>:
 8009bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bbc:	fba1 2402 	umull	r2, r4, r1, r2
 8009bc0:	b94c      	cbnz	r4, 8009bd6 <_calloc_r+0x1c>
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	9201      	str	r2, [sp, #4]
 8009bc6:	f000 f87b 	bl	8009cc0 <_malloc_r>
 8009bca:	9a01      	ldr	r2, [sp, #4]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	b930      	cbnz	r0, 8009bde <_calloc_r+0x24>
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	b003      	add	sp, #12
 8009bd4:	bd30      	pop	{r4, r5, pc}
 8009bd6:	220c      	movs	r2, #12
 8009bd8:	6002      	str	r2, [r0, #0]
 8009bda:	2500      	movs	r5, #0
 8009bdc:	e7f8      	b.n	8009bd0 <_calloc_r+0x16>
 8009bde:	4621      	mov	r1, r4
 8009be0:	f7fc fbce 	bl	8006380 <memset>
 8009be4:	e7f4      	b.n	8009bd0 <_calloc_r+0x16>
	...

08009be8 <_free_r>:
 8009be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d044      	beq.n	8009c78 <_free_r+0x90>
 8009bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf2:	9001      	str	r0, [sp, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8009bfa:	bfb8      	it	lt
 8009bfc:	18e4      	addlt	r4, r4, r3
 8009bfe:	f000 fab3 	bl	800a168 <__malloc_lock>
 8009c02:	4a1e      	ldr	r2, [pc, #120]	; (8009c7c <_free_r+0x94>)
 8009c04:	9801      	ldr	r0, [sp, #4]
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	b933      	cbnz	r3, 8009c18 <_free_r+0x30>
 8009c0a:	6063      	str	r3, [r4, #4]
 8009c0c:	6014      	str	r4, [r2, #0]
 8009c0e:	b003      	add	sp, #12
 8009c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c14:	f000 baae 	b.w	800a174 <__malloc_unlock>
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	d908      	bls.n	8009c2e <_free_r+0x46>
 8009c1c:	6825      	ldr	r5, [r4, #0]
 8009c1e:	1961      	adds	r1, r4, r5
 8009c20:	428b      	cmp	r3, r1
 8009c22:	bf01      	itttt	eq
 8009c24:	6819      	ldreq	r1, [r3, #0]
 8009c26:	685b      	ldreq	r3, [r3, #4]
 8009c28:	1949      	addeq	r1, r1, r5
 8009c2a:	6021      	streq	r1, [r4, #0]
 8009c2c:	e7ed      	b.n	8009c0a <_free_r+0x22>
 8009c2e:	461a      	mov	r2, r3
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	b10b      	cbz	r3, 8009c38 <_free_r+0x50>
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d9fa      	bls.n	8009c2e <_free_r+0x46>
 8009c38:	6811      	ldr	r1, [r2, #0]
 8009c3a:	1855      	adds	r5, r2, r1
 8009c3c:	42a5      	cmp	r5, r4
 8009c3e:	d10b      	bne.n	8009c58 <_free_r+0x70>
 8009c40:	6824      	ldr	r4, [r4, #0]
 8009c42:	4421      	add	r1, r4
 8009c44:	1854      	adds	r4, r2, r1
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	d1e0      	bne.n	8009c0e <_free_r+0x26>
 8009c4c:	681c      	ldr	r4, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	6053      	str	r3, [r2, #4]
 8009c52:	4421      	add	r1, r4
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	e7da      	b.n	8009c0e <_free_r+0x26>
 8009c58:	d902      	bls.n	8009c60 <_free_r+0x78>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	e7d6      	b.n	8009c0e <_free_r+0x26>
 8009c60:	6825      	ldr	r5, [r4, #0]
 8009c62:	1961      	adds	r1, r4, r5
 8009c64:	428b      	cmp	r3, r1
 8009c66:	bf04      	itt	eq
 8009c68:	6819      	ldreq	r1, [r3, #0]
 8009c6a:	685b      	ldreq	r3, [r3, #4]
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	bf04      	itt	eq
 8009c70:	1949      	addeq	r1, r1, r5
 8009c72:	6021      	streq	r1, [r4, #0]
 8009c74:	6054      	str	r4, [r2, #4]
 8009c76:	e7ca      	b.n	8009c0e <_free_r+0x26>
 8009c78:	b003      	add	sp, #12
 8009c7a:	bd30      	pop	{r4, r5, pc}
 8009c7c:	200002a0 	.word	0x200002a0

08009c80 <sbrk_aligned>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	4e0e      	ldr	r6, [pc, #56]	; (8009cbc <sbrk_aligned+0x3c>)
 8009c84:	460c      	mov	r4, r1
 8009c86:	6831      	ldr	r1, [r6, #0]
 8009c88:	4605      	mov	r5, r0
 8009c8a:	b911      	cbnz	r1, 8009c92 <sbrk_aligned+0x12>
 8009c8c:	f000 f9f0 	bl	800a070 <_sbrk_r>
 8009c90:	6030      	str	r0, [r6, #0]
 8009c92:	4621      	mov	r1, r4
 8009c94:	4628      	mov	r0, r5
 8009c96:	f000 f9eb 	bl	800a070 <_sbrk_r>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	d00a      	beq.n	8009cb4 <sbrk_aligned+0x34>
 8009c9e:	1cc4      	adds	r4, r0, #3
 8009ca0:	f024 0403 	bic.w	r4, r4, #3
 8009ca4:	42a0      	cmp	r0, r4
 8009ca6:	d007      	beq.n	8009cb8 <sbrk_aligned+0x38>
 8009ca8:	1a21      	subs	r1, r4, r0
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 f9e0 	bl	800a070 <_sbrk_r>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d101      	bne.n	8009cb8 <sbrk_aligned+0x38>
 8009cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009cb8:	4620      	mov	r0, r4
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	200002a4 	.word	0x200002a4

08009cc0 <_malloc_r>:
 8009cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc4:	1ccd      	adds	r5, r1, #3
 8009cc6:	f025 0503 	bic.w	r5, r5, #3
 8009cca:	3508      	adds	r5, #8
 8009ccc:	2d0c      	cmp	r5, #12
 8009cce:	bf38      	it	cc
 8009cd0:	250c      	movcc	r5, #12
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	db01      	blt.n	8009cdc <_malloc_r+0x1c>
 8009cd8:	42a9      	cmp	r1, r5
 8009cda:	d905      	bls.n	8009ce8 <_malloc_r+0x28>
 8009cdc:	230c      	movs	r3, #12
 8009cde:	603b      	str	r3, [r7, #0]
 8009ce0:	2600      	movs	r6, #0
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	4e2e      	ldr	r6, [pc, #184]	; (8009da4 <_malloc_r+0xe4>)
 8009cea:	f000 fa3d 	bl	800a168 <__malloc_lock>
 8009cee:	6833      	ldr	r3, [r6, #0]
 8009cf0:	461c      	mov	r4, r3
 8009cf2:	bb34      	cbnz	r4, 8009d42 <_malloc_r+0x82>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f7ff ffc2 	bl	8009c80 <sbrk_aligned>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	4604      	mov	r4, r0
 8009d00:	d14d      	bne.n	8009d9e <_malloc_r+0xde>
 8009d02:	6834      	ldr	r4, [r6, #0]
 8009d04:	4626      	mov	r6, r4
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d140      	bne.n	8009d8c <_malloc_r+0xcc>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4638      	mov	r0, r7
 8009d10:	eb04 0803 	add.w	r8, r4, r3
 8009d14:	f000 f9ac 	bl	800a070 <_sbrk_r>
 8009d18:	4580      	cmp	r8, r0
 8009d1a:	d13a      	bne.n	8009d92 <_malloc_r+0xd2>
 8009d1c:	6821      	ldr	r1, [r4, #0]
 8009d1e:	3503      	adds	r5, #3
 8009d20:	1a6d      	subs	r5, r5, r1
 8009d22:	f025 0503 	bic.w	r5, r5, #3
 8009d26:	3508      	adds	r5, #8
 8009d28:	2d0c      	cmp	r5, #12
 8009d2a:	bf38      	it	cc
 8009d2c:	250c      	movcc	r5, #12
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4638      	mov	r0, r7
 8009d32:	f7ff ffa5 	bl	8009c80 <sbrk_aligned>
 8009d36:	3001      	adds	r0, #1
 8009d38:	d02b      	beq.n	8009d92 <_malloc_r+0xd2>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	442b      	add	r3, r5
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	e00e      	b.n	8009d60 <_malloc_r+0xa0>
 8009d42:	6822      	ldr	r2, [r4, #0]
 8009d44:	1b52      	subs	r2, r2, r5
 8009d46:	d41e      	bmi.n	8009d86 <_malloc_r+0xc6>
 8009d48:	2a0b      	cmp	r2, #11
 8009d4a:	d916      	bls.n	8009d7a <_malloc_r+0xba>
 8009d4c:	1961      	adds	r1, r4, r5
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	6025      	str	r5, [r4, #0]
 8009d52:	bf18      	it	ne
 8009d54:	6059      	strne	r1, [r3, #4]
 8009d56:	6863      	ldr	r3, [r4, #4]
 8009d58:	bf08      	it	eq
 8009d5a:	6031      	streq	r1, [r6, #0]
 8009d5c:	5162      	str	r2, [r4, r5]
 8009d5e:	604b      	str	r3, [r1, #4]
 8009d60:	4638      	mov	r0, r7
 8009d62:	f104 060b 	add.w	r6, r4, #11
 8009d66:	f000 fa05 	bl	800a174 <__malloc_unlock>
 8009d6a:	f026 0607 	bic.w	r6, r6, #7
 8009d6e:	1d23      	adds	r3, r4, #4
 8009d70:	1af2      	subs	r2, r6, r3
 8009d72:	d0b6      	beq.n	8009ce2 <_malloc_r+0x22>
 8009d74:	1b9b      	subs	r3, r3, r6
 8009d76:	50a3      	str	r3, [r4, r2]
 8009d78:	e7b3      	b.n	8009ce2 <_malloc_r+0x22>
 8009d7a:	6862      	ldr	r2, [r4, #4]
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	bf0c      	ite	eq
 8009d80:	6032      	streq	r2, [r6, #0]
 8009d82:	605a      	strne	r2, [r3, #4]
 8009d84:	e7ec      	b.n	8009d60 <_malloc_r+0xa0>
 8009d86:	4623      	mov	r3, r4
 8009d88:	6864      	ldr	r4, [r4, #4]
 8009d8a:	e7b2      	b.n	8009cf2 <_malloc_r+0x32>
 8009d8c:	4634      	mov	r4, r6
 8009d8e:	6876      	ldr	r6, [r6, #4]
 8009d90:	e7b9      	b.n	8009d06 <_malloc_r+0x46>
 8009d92:	230c      	movs	r3, #12
 8009d94:	603b      	str	r3, [r7, #0]
 8009d96:	4638      	mov	r0, r7
 8009d98:	f000 f9ec 	bl	800a174 <__malloc_unlock>
 8009d9c:	e7a1      	b.n	8009ce2 <_malloc_r+0x22>
 8009d9e:	6025      	str	r5, [r4, #0]
 8009da0:	e7de      	b.n	8009d60 <_malloc_r+0xa0>
 8009da2:	bf00      	nop
 8009da4:	200002a0 	.word	0x200002a0

08009da8 <__ssputs_r>:
 8009da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	688e      	ldr	r6, [r1, #8]
 8009dae:	429e      	cmp	r6, r3
 8009db0:	4682      	mov	sl, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	4690      	mov	r8, r2
 8009db6:	461f      	mov	r7, r3
 8009db8:	d838      	bhi.n	8009e2c <__ssputs_r+0x84>
 8009dba:	898a      	ldrh	r2, [r1, #12]
 8009dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dc0:	d032      	beq.n	8009e28 <__ssputs_r+0x80>
 8009dc2:	6825      	ldr	r5, [r4, #0]
 8009dc4:	6909      	ldr	r1, [r1, #16]
 8009dc6:	eba5 0901 	sub.w	r9, r5, r1
 8009dca:	6965      	ldr	r5, [r4, #20]
 8009dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	444b      	add	r3, r9
 8009dd8:	106d      	asrs	r5, r5, #1
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	bf38      	it	cc
 8009dde:	461d      	movcc	r5, r3
 8009de0:	0553      	lsls	r3, r2, #21
 8009de2:	d531      	bpl.n	8009e48 <__ssputs_r+0xa0>
 8009de4:	4629      	mov	r1, r5
 8009de6:	f7ff ff6b 	bl	8009cc0 <_malloc_r>
 8009dea:	4606      	mov	r6, r0
 8009dec:	b950      	cbnz	r0, 8009e04 <__ssputs_r+0x5c>
 8009dee:	230c      	movs	r3, #12
 8009df0:	f8ca 3000 	str.w	r3, [sl]
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e04:	6921      	ldr	r1, [r4, #16]
 8009e06:	464a      	mov	r2, r9
 8009e08:	f7fc faac 	bl	8006364 <memcpy>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e16:	81a3      	strh	r3, [r4, #12]
 8009e18:	6126      	str	r6, [r4, #16]
 8009e1a:	6165      	str	r5, [r4, #20]
 8009e1c:	444e      	add	r6, r9
 8009e1e:	eba5 0509 	sub.w	r5, r5, r9
 8009e22:	6026      	str	r6, [r4, #0]
 8009e24:	60a5      	str	r5, [r4, #8]
 8009e26:	463e      	mov	r6, r7
 8009e28:	42be      	cmp	r6, r7
 8009e2a:	d900      	bls.n	8009e2e <__ssputs_r+0x86>
 8009e2c:	463e      	mov	r6, r7
 8009e2e:	6820      	ldr	r0, [r4, #0]
 8009e30:	4632      	mov	r2, r6
 8009e32:	4641      	mov	r1, r8
 8009e34:	f000 f97e 	bl	800a134 <memmove>
 8009e38:	68a3      	ldr	r3, [r4, #8]
 8009e3a:	1b9b      	subs	r3, r3, r6
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	4433      	add	r3, r6
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	2000      	movs	r0, #0
 8009e46:	e7db      	b.n	8009e00 <__ssputs_r+0x58>
 8009e48:	462a      	mov	r2, r5
 8009e4a:	f000 f999 	bl	800a180 <_realloc_r>
 8009e4e:	4606      	mov	r6, r0
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d1e1      	bne.n	8009e18 <__ssputs_r+0x70>
 8009e54:	6921      	ldr	r1, [r4, #16]
 8009e56:	4650      	mov	r0, sl
 8009e58:	f7ff fec6 	bl	8009be8 <_free_r>
 8009e5c:	e7c7      	b.n	8009dee <__ssputs_r+0x46>
	...

08009e60 <_svfiprintf_r>:
 8009e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	4698      	mov	r8, r3
 8009e66:	898b      	ldrh	r3, [r1, #12]
 8009e68:	061b      	lsls	r3, r3, #24
 8009e6a:	b09d      	sub	sp, #116	; 0x74
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	4614      	mov	r4, r2
 8009e72:	d50e      	bpl.n	8009e92 <_svfiprintf_r+0x32>
 8009e74:	690b      	ldr	r3, [r1, #16]
 8009e76:	b963      	cbnz	r3, 8009e92 <_svfiprintf_r+0x32>
 8009e78:	2140      	movs	r1, #64	; 0x40
 8009e7a:	f7ff ff21 	bl	8009cc0 <_malloc_r>
 8009e7e:	6028      	str	r0, [r5, #0]
 8009e80:	6128      	str	r0, [r5, #16]
 8009e82:	b920      	cbnz	r0, 8009e8e <_svfiprintf_r+0x2e>
 8009e84:	230c      	movs	r3, #12
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	e0d1      	b.n	800a032 <_svfiprintf_r+0x1d2>
 8009e8e:	2340      	movs	r3, #64	; 0x40
 8009e90:	616b      	str	r3, [r5, #20]
 8009e92:	2300      	movs	r3, #0
 8009e94:	9309      	str	r3, [sp, #36]	; 0x24
 8009e96:	2320      	movs	r3, #32
 8009e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea0:	2330      	movs	r3, #48	; 0x30
 8009ea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a04c <_svfiprintf_r+0x1ec>
 8009ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eaa:	f04f 0901 	mov.w	r9, #1
 8009eae:	4623      	mov	r3, r4
 8009eb0:	469a      	mov	sl, r3
 8009eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb6:	b10a      	cbz	r2, 8009ebc <_svfiprintf_r+0x5c>
 8009eb8:	2a25      	cmp	r2, #37	; 0x25
 8009eba:	d1f9      	bne.n	8009eb0 <_svfiprintf_r+0x50>
 8009ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec0:	d00b      	beq.n	8009eda <_svfiprintf_r+0x7a>
 8009ec2:	465b      	mov	r3, fp
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4638      	mov	r0, r7
 8009eca:	f7ff ff6d 	bl	8009da8 <__ssputs_r>
 8009ece:	3001      	adds	r0, #1
 8009ed0:	f000 80aa 	beq.w	800a028 <_svfiprintf_r+0x1c8>
 8009ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed6:	445a      	add	r2, fp
 8009ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8009eda:	f89a 3000 	ldrb.w	r3, [sl]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 80a2 	beq.w	800a028 <_svfiprintf_r+0x1c8>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eee:	f10a 0a01 	add.w	sl, sl, #1
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	9307      	str	r3, [sp, #28]
 8009ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009efa:	931a      	str	r3, [sp, #104]	; 0x68
 8009efc:	4654      	mov	r4, sl
 8009efe:	2205      	movs	r2, #5
 8009f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f04:	4851      	ldr	r0, [pc, #324]	; (800a04c <_svfiprintf_r+0x1ec>)
 8009f06:	f7f6 f98b 	bl	8000220 <memchr>
 8009f0a:	9a04      	ldr	r2, [sp, #16]
 8009f0c:	b9d8      	cbnz	r0, 8009f46 <_svfiprintf_r+0xe6>
 8009f0e:	06d0      	lsls	r0, r2, #27
 8009f10:	bf44      	itt	mi
 8009f12:	2320      	movmi	r3, #32
 8009f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f18:	0711      	lsls	r1, r2, #28
 8009f1a:	bf44      	itt	mi
 8009f1c:	232b      	movmi	r3, #43	; 0x2b
 8009f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f22:	f89a 3000 	ldrb.w	r3, [sl]
 8009f26:	2b2a      	cmp	r3, #42	; 0x2a
 8009f28:	d015      	beq.n	8009f56 <_svfiprintf_r+0xf6>
 8009f2a:	9a07      	ldr	r2, [sp, #28]
 8009f2c:	4654      	mov	r4, sl
 8009f2e:	2000      	movs	r0, #0
 8009f30:	f04f 0c0a 	mov.w	ip, #10
 8009f34:	4621      	mov	r1, r4
 8009f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f3a:	3b30      	subs	r3, #48	; 0x30
 8009f3c:	2b09      	cmp	r3, #9
 8009f3e:	d94e      	bls.n	8009fde <_svfiprintf_r+0x17e>
 8009f40:	b1b0      	cbz	r0, 8009f70 <_svfiprintf_r+0x110>
 8009f42:	9207      	str	r2, [sp, #28]
 8009f44:	e014      	b.n	8009f70 <_svfiprintf_r+0x110>
 8009f46:	eba0 0308 	sub.w	r3, r0, r8
 8009f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	9304      	str	r3, [sp, #16]
 8009f52:	46a2      	mov	sl, r4
 8009f54:	e7d2      	b.n	8009efc <_svfiprintf_r+0x9c>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	1d19      	adds	r1, r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	9103      	str	r1, [sp, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfbb      	ittet	lt
 8009f62:	425b      	neglt	r3, r3
 8009f64:	f042 0202 	orrlt.w	r2, r2, #2
 8009f68:	9307      	strge	r3, [sp, #28]
 8009f6a:	9307      	strlt	r3, [sp, #28]
 8009f6c:	bfb8      	it	lt
 8009f6e:	9204      	strlt	r2, [sp, #16]
 8009f70:	7823      	ldrb	r3, [r4, #0]
 8009f72:	2b2e      	cmp	r3, #46	; 0x2e
 8009f74:	d10c      	bne.n	8009f90 <_svfiprintf_r+0x130>
 8009f76:	7863      	ldrb	r3, [r4, #1]
 8009f78:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7a:	d135      	bne.n	8009fe8 <_svfiprintf_r+0x188>
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	1d1a      	adds	r2, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	9203      	str	r2, [sp, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bfb8      	it	lt
 8009f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f8c:	3402      	adds	r4, #2
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a05c <_svfiprintf_r+0x1fc>
 8009f94:	7821      	ldrb	r1, [r4, #0]
 8009f96:	2203      	movs	r2, #3
 8009f98:	4650      	mov	r0, sl
 8009f9a:	f7f6 f941 	bl	8000220 <memchr>
 8009f9e:	b140      	cbz	r0, 8009fb2 <_svfiprintf_r+0x152>
 8009fa0:	2340      	movs	r3, #64	; 0x40
 8009fa2:	eba0 000a 	sub.w	r0, r0, sl
 8009fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8009faa:	9b04      	ldr	r3, [sp, #16]
 8009fac:	4303      	orrs	r3, r0
 8009fae:	3401      	adds	r4, #1
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb6:	4826      	ldr	r0, [pc, #152]	; (800a050 <_svfiprintf_r+0x1f0>)
 8009fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fbc:	2206      	movs	r2, #6
 8009fbe:	f7f6 f92f 	bl	8000220 <memchr>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d038      	beq.n	800a038 <_svfiprintf_r+0x1d8>
 8009fc6:	4b23      	ldr	r3, [pc, #140]	; (800a054 <_svfiprintf_r+0x1f4>)
 8009fc8:	bb1b      	cbnz	r3, 800a012 <_svfiprintf_r+0x1b2>
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	f023 0307 	bic.w	r3, r3, #7
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	9303      	str	r3, [sp, #12]
 8009fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd8:	4433      	add	r3, r6
 8009fda:	9309      	str	r3, [sp, #36]	; 0x24
 8009fdc:	e767      	b.n	8009eae <_svfiprintf_r+0x4e>
 8009fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	e7a5      	b.n	8009f34 <_svfiprintf_r+0xd4>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	3401      	adds	r4, #1
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	f04f 0c0a 	mov.w	ip, #10
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffa:	3a30      	subs	r2, #48	; 0x30
 8009ffc:	2a09      	cmp	r2, #9
 8009ffe:	d903      	bls.n	800a008 <_svfiprintf_r+0x1a8>
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0c5      	beq.n	8009f90 <_svfiprintf_r+0x130>
 800a004:	9105      	str	r1, [sp, #20]
 800a006:	e7c3      	b.n	8009f90 <_svfiprintf_r+0x130>
 800a008:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00c:	4604      	mov	r4, r0
 800a00e:	2301      	movs	r3, #1
 800a010:	e7f0      	b.n	8009ff4 <_svfiprintf_r+0x194>
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	462a      	mov	r2, r5
 800a018:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <_svfiprintf_r+0x1f8>)
 800a01a:	a904      	add	r1, sp, #16
 800a01c:	4638      	mov	r0, r7
 800a01e:	f7fc fa57 	bl	80064d0 <_printf_float>
 800a022:	1c42      	adds	r2, r0, #1
 800a024:	4606      	mov	r6, r0
 800a026:	d1d6      	bne.n	8009fd6 <_svfiprintf_r+0x176>
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	065b      	lsls	r3, r3, #25
 800a02c:	f53f af2c 	bmi.w	8009e88 <_svfiprintf_r+0x28>
 800a030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a032:	b01d      	add	sp, #116	; 0x74
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	ab03      	add	r3, sp, #12
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	462a      	mov	r2, r5
 800a03e:	4b06      	ldr	r3, [pc, #24]	; (800a058 <_svfiprintf_r+0x1f8>)
 800a040:	a904      	add	r1, sp, #16
 800a042:	4638      	mov	r0, r7
 800a044:	f7fc fce8 	bl	8006a18 <_printf_i>
 800a048:	e7eb      	b.n	800a022 <_svfiprintf_r+0x1c2>
 800a04a:	bf00      	nop
 800a04c:	0800b13c 	.word	0x0800b13c
 800a050:	0800b146 	.word	0x0800b146
 800a054:	080064d1 	.word	0x080064d1
 800a058:	08009da9 	.word	0x08009da9
 800a05c:	0800b142 	.word	0x0800b142

0800a060 <nan>:
 800a060:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a068 <nan+0x8>
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	00000000 	.word	0x00000000
 800a06c:	7ff80000 	.word	0x7ff80000

0800a070 <_sbrk_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4d06      	ldr	r5, [pc, #24]	; (800a08c <_sbrk_r+0x1c>)
 800a074:	2300      	movs	r3, #0
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7f7 fd76 	bl	8001b6c <_sbrk>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_sbrk_r+0x1a>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_sbrk_r+0x1a>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	200002a8 	.word	0x200002a8

0800a090 <strncmp>:
 800a090:	b510      	push	{r4, lr}
 800a092:	b17a      	cbz	r2, 800a0b4 <strncmp+0x24>
 800a094:	4603      	mov	r3, r0
 800a096:	3901      	subs	r1, #1
 800a098:	1884      	adds	r4, r0, r2
 800a09a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a09e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0a2:	4290      	cmp	r0, r2
 800a0a4:	d101      	bne.n	800a0aa <strncmp+0x1a>
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	d101      	bne.n	800a0ae <strncmp+0x1e>
 800a0aa:	1a80      	subs	r0, r0, r2
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d1f3      	bne.n	800a09a <strncmp+0xa>
 800a0b2:	e7fa      	b.n	800a0aa <strncmp+0x1a>
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	e7f9      	b.n	800a0ac <strncmp+0x1c>

0800a0b8 <__ascii_wctomb>:
 800a0b8:	b149      	cbz	r1, 800a0ce <__ascii_wctomb+0x16>
 800a0ba:	2aff      	cmp	r2, #255	; 0xff
 800a0bc:	bf85      	ittet	hi
 800a0be:	238a      	movhi	r3, #138	; 0x8a
 800a0c0:	6003      	strhi	r3, [r0, #0]
 800a0c2:	700a      	strbls	r2, [r1, #0]
 800a0c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0c8:	bf98      	it	ls
 800a0ca:	2001      	movls	r0, #1
 800a0cc:	4770      	bx	lr
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <__assert_func>:
 800a0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0d6:	4614      	mov	r4, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b09      	ldr	r3, [pc, #36]	; (800a100 <__assert_func+0x2c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	68d8      	ldr	r0, [r3, #12]
 800a0e2:	b14c      	cbz	r4, 800a0f8 <__assert_func+0x24>
 800a0e4:	4b07      	ldr	r3, [pc, #28]	; (800a104 <__assert_func+0x30>)
 800a0e6:	9100      	str	r1, [sp, #0]
 800a0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0ec:	4906      	ldr	r1, [pc, #24]	; (800a108 <__assert_func+0x34>)
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	f000 f80e 	bl	800a110 <fiprintf>
 800a0f4:	f000 fa8c 	bl	800a610 <abort>
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <__assert_func+0x38>)
 800a0fa:	461c      	mov	r4, r3
 800a0fc:	e7f3      	b.n	800a0e6 <__assert_func+0x12>
 800a0fe:	bf00      	nop
 800a100:	20000010 	.word	0x20000010
 800a104:	0800b14d 	.word	0x0800b14d
 800a108:	0800b15a 	.word	0x0800b15a
 800a10c:	0800b188 	.word	0x0800b188

0800a110 <fiprintf>:
 800a110:	b40e      	push	{r1, r2, r3}
 800a112:	b503      	push	{r0, r1, lr}
 800a114:	4601      	mov	r1, r0
 800a116:	ab03      	add	r3, sp, #12
 800a118:	4805      	ldr	r0, [pc, #20]	; (800a130 <fiprintf+0x20>)
 800a11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11e:	6800      	ldr	r0, [r0, #0]
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f000 f885 	bl	800a230 <_vfiprintf_r>
 800a126:	b002      	add	sp, #8
 800a128:	f85d eb04 	ldr.w	lr, [sp], #4
 800a12c:	b003      	add	sp, #12
 800a12e:	4770      	bx	lr
 800a130:	20000010 	.word	0x20000010

0800a134 <memmove>:
 800a134:	4288      	cmp	r0, r1
 800a136:	b510      	push	{r4, lr}
 800a138:	eb01 0402 	add.w	r4, r1, r2
 800a13c:	d902      	bls.n	800a144 <memmove+0x10>
 800a13e:	4284      	cmp	r4, r0
 800a140:	4623      	mov	r3, r4
 800a142:	d807      	bhi.n	800a154 <memmove+0x20>
 800a144:	1e43      	subs	r3, r0, #1
 800a146:	42a1      	cmp	r1, r4
 800a148:	d008      	beq.n	800a15c <memmove+0x28>
 800a14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a152:	e7f8      	b.n	800a146 <memmove+0x12>
 800a154:	4402      	add	r2, r0
 800a156:	4601      	mov	r1, r0
 800a158:	428a      	cmp	r2, r1
 800a15a:	d100      	bne.n	800a15e <memmove+0x2a>
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a166:	e7f7      	b.n	800a158 <memmove+0x24>

0800a168 <__malloc_lock>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__malloc_lock+0x8>)
 800a16a:	f000 bc11 	b.w	800a990 <__retarget_lock_acquire_recursive>
 800a16e:	bf00      	nop
 800a170:	200002ac 	.word	0x200002ac

0800a174 <__malloc_unlock>:
 800a174:	4801      	ldr	r0, [pc, #4]	; (800a17c <__malloc_unlock+0x8>)
 800a176:	f000 bc0c 	b.w	800a992 <__retarget_lock_release_recursive>
 800a17a:	bf00      	nop
 800a17c:	200002ac 	.word	0x200002ac

0800a180 <_realloc_r>:
 800a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a184:	4680      	mov	r8, r0
 800a186:	4614      	mov	r4, r2
 800a188:	460e      	mov	r6, r1
 800a18a:	b921      	cbnz	r1, 800a196 <_realloc_r+0x16>
 800a18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a190:	4611      	mov	r1, r2
 800a192:	f7ff bd95 	b.w	8009cc0 <_malloc_r>
 800a196:	b92a      	cbnz	r2, 800a1a4 <_realloc_r+0x24>
 800a198:	f7ff fd26 	bl	8009be8 <_free_r>
 800a19c:	4625      	mov	r5, r4
 800a19e:	4628      	mov	r0, r5
 800a1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a4:	f000 fc5c 	bl	800aa60 <_malloc_usable_size_r>
 800a1a8:	4284      	cmp	r4, r0
 800a1aa:	4607      	mov	r7, r0
 800a1ac:	d802      	bhi.n	800a1b4 <_realloc_r+0x34>
 800a1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1b2:	d812      	bhi.n	800a1da <_realloc_r+0x5a>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7ff fd82 	bl	8009cc0 <_malloc_r>
 800a1bc:	4605      	mov	r5, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0ed      	beq.n	800a19e <_realloc_r+0x1e>
 800a1c2:	42bc      	cmp	r4, r7
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	bf28      	it	cs
 800a1ca:	463a      	movcs	r2, r7
 800a1cc:	f7fc f8ca 	bl	8006364 <memcpy>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	f7ff fd08 	bl	8009be8 <_free_r>
 800a1d8:	e7e1      	b.n	800a19e <_realloc_r+0x1e>
 800a1da:	4635      	mov	r5, r6
 800a1dc:	e7df      	b.n	800a19e <_realloc_r+0x1e>

0800a1de <__sfputc_r>:
 800a1de:	6893      	ldr	r3, [r2, #8]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	b410      	push	{r4}
 800a1e6:	6093      	str	r3, [r2, #8]
 800a1e8:	da08      	bge.n	800a1fc <__sfputc_r+0x1e>
 800a1ea:	6994      	ldr	r4, [r2, #24]
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	db01      	blt.n	800a1f4 <__sfputc_r+0x16>
 800a1f0:	290a      	cmp	r1, #10
 800a1f2:	d103      	bne.n	800a1fc <__sfputc_r+0x1e>
 800a1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f8:	f000 b94a 	b.w	800a490 <__swbuf_r>
 800a1fc:	6813      	ldr	r3, [r2, #0]
 800a1fe:	1c58      	adds	r0, r3, #1
 800a200:	6010      	str	r0, [r2, #0]
 800a202:	7019      	strb	r1, [r3, #0]
 800a204:	4608      	mov	r0, r1
 800a206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <__sfputs_r>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	4606      	mov	r6, r0
 800a210:	460f      	mov	r7, r1
 800a212:	4614      	mov	r4, r2
 800a214:	18d5      	adds	r5, r2, r3
 800a216:	42ac      	cmp	r4, r5
 800a218:	d101      	bne.n	800a21e <__sfputs_r+0x12>
 800a21a:	2000      	movs	r0, #0
 800a21c:	e007      	b.n	800a22e <__sfputs_r+0x22>
 800a21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a222:	463a      	mov	r2, r7
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff ffda 	bl	800a1de <__sfputc_r>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	d1f3      	bne.n	800a216 <__sfputs_r+0xa>
 800a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a230 <_vfiprintf_r>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	460d      	mov	r5, r1
 800a236:	b09d      	sub	sp, #116	; 0x74
 800a238:	4614      	mov	r4, r2
 800a23a:	4698      	mov	r8, r3
 800a23c:	4606      	mov	r6, r0
 800a23e:	b118      	cbz	r0, 800a248 <_vfiprintf_r+0x18>
 800a240:	6983      	ldr	r3, [r0, #24]
 800a242:	b90b      	cbnz	r3, 800a248 <_vfiprintf_r+0x18>
 800a244:	f000 fb06 	bl	800a854 <__sinit>
 800a248:	4b89      	ldr	r3, [pc, #548]	; (800a470 <_vfiprintf_r+0x240>)
 800a24a:	429d      	cmp	r5, r3
 800a24c:	d11b      	bne.n	800a286 <_vfiprintf_r+0x56>
 800a24e:	6875      	ldr	r5, [r6, #4]
 800a250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a252:	07d9      	lsls	r1, r3, #31
 800a254:	d405      	bmi.n	800a262 <_vfiprintf_r+0x32>
 800a256:	89ab      	ldrh	r3, [r5, #12]
 800a258:	059a      	lsls	r2, r3, #22
 800a25a:	d402      	bmi.n	800a262 <_vfiprintf_r+0x32>
 800a25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a25e:	f000 fb97 	bl	800a990 <__retarget_lock_acquire_recursive>
 800a262:	89ab      	ldrh	r3, [r5, #12]
 800a264:	071b      	lsls	r3, r3, #28
 800a266:	d501      	bpl.n	800a26c <_vfiprintf_r+0x3c>
 800a268:	692b      	ldr	r3, [r5, #16]
 800a26a:	b9eb      	cbnz	r3, 800a2a8 <_vfiprintf_r+0x78>
 800a26c:	4629      	mov	r1, r5
 800a26e:	4630      	mov	r0, r6
 800a270:	f000 f960 	bl	800a534 <__swsetup_r>
 800a274:	b1c0      	cbz	r0, 800a2a8 <_vfiprintf_r+0x78>
 800a276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a278:	07dc      	lsls	r4, r3, #31
 800a27a:	d50e      	bpl.n	800a29a <_vfiprintf_r+0x6a>
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295
 800a280:	b01d      	add	sp, #116	; 0x74
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	4b7b      	ldr	r3, [pc, #492]	; (800a474 <_vfiprintf_r+0x244>)
 800a288:	429d      	cmp	r5, r3
 800a28a:	d101      	bne.n	800a290 <_vfiprintf_r+0x60>
 800a28c:	68b5      	ldr	r5, [r6, #8]
 800a28e:	e7df      	b.n	800a250 <_vfiprintf_r+0x20>
 800a290:	4b79      	ldr	r3, [pc, #484]	; (800a478 <_vfiprintf_r+0x248>)
 800a292:	429d      	cmp	r5, r3
 800a294:	bf08      	it	eq
 800a296:	68f5      	ldreq	r5, [r6, #12]
 800a298:	e7da      	b.n	800a250 <_vfiprintf_r+0x20>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	0598      	lsls	r0, r3, #22
 800a29e:	d4ed      	bmi.n	800a27c <_vfiprintf_r+0x4c>
 800a2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2a2:	f000 fb76 	bl	800a992 <__retarget_lock_release_recursive>
 800a2a6:	e7e9      	b.n	800a27c <_vfiprintf_r+0x4c>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b6:	2330      	movs	r3, #48	; 0x30
 800a2b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a47c <_vfiprintf_r+0x24c>
 800a2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2c0:	f04f 0901 	mov.w	r9, #1
 800a2c4:	4623      	mov	r3, r4
 800a2c6:	469a      	mov	sl, r3
 800a2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2cc:	b10a      	cbz	r2, 800a2d2 <_vfiprintf_r+0xa2>
 800a2ce:	2a25      	cmp	r2, #37	; 0x25
 800a2d0:	d1f9      	bne.n	800a2c6 <_vfiprintf_r+0x96>
 800a2d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2d6:	d00b      	beq.n	800a2f0 <_vfiprintf_r+0xc0>
 800a2d8:	465b      	mov	r3, fp
 800a2da:	4622      	mov	r2, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f7ff ff94 	bl	800a20c <__sfputs_r>
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f000 80aa 	beq.w	800a43e <_vfiprintf_r+0x20e>
 800a2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ec:	445a      	add	r2, fp
 800a2ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 80a2 	beq.w	800a43e <_vfiprintf_r+0x20e>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a304:	f10a 0a01 	add.w	sl, sl, #1
 800a308:	9304      	str	r3, [sp, #16]
 800a30a:	9307      	str	r3, [sp, #28]
 800a30c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a310:	931a      	str	r3, [sp, #104]	; 0x68
 800a312:	4654      	mov	r4, sl
 800a314:	2205      	movs	r2, #5
 800a316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31a:	4858      	ldr	r0, [pc, #352]	; (800a47c <_vfiprintf_r+0x24c>)
 800a31c:	f7f5 ff80 	bl	8000220 <memchr>
 800a320:	9a04      	ldr	r2, [sp, #16]
 800a322:	b9d8      	cbnz	r0, 800a35c <_vfiprintf_r+0x12c>
 800a324:	06d1      	lsls	r1, r2, #27
 800a326:	bf44      	itt	mi
 800a328:	2320      	movmi	r3, #32
 800a32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a32e:	0713      	lsls	r3, r2, #28
 800a330:	bf44      	itt	mi
 800a332:	232b      	movmi	r3, #43	; 0x2b
 800a334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a338:	f89a 3000 	ldrb.w	r3, [sl]
 800a33c:	2b2a      	cmp	r3, #42	; 0x2a
 800a33e:	d015      	beq.n	800a36c <_vfiprintf_r+0x13c>
 800a340:	9a07      	ldr	r2, [sp, #28]
 800a342:	4654      	mov	r4, sl
 800a344:	2000      	movs	r0, #0
 800a346:	f04f 0c0a 	mov.w	ip, #10
 800a34a:	4621      	mov	r1, r4
 800a34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a350:	3b30      	subs	r3, #48	; 0x30
 800a352:	2b09      	cmp	r3, #9
 800a354:	d94e      	bls.n	800a3f4 <_vfiprintf_r+0x1c4>
 800a356:	b1b0      	cbz	r0, 800a386 <_vfiprintf_r+0x156>
 800a358:	9207      	str	r2, [sp, #28]
 800a35a:	e014      	b.n	800a386 <_vfiprintf_r+0x156>
 800a35c:	eba0 0308 	sub.w	r3, r0, r8
 800a360:	fa09 f303 	lsl.w	r3, r9, r3
 800a364:	4313      	orrs	r3, r2
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	46a2      	mov	sl, r4
 800a36a:	e7d2      	b.n	800a312 <_vfiprintf_r+0xe2>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	1d19      	adds	r1, r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	9103      	str	r1, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfbb      	ittet	lt
 800a378:	425b      	neglt	r3, r3
 800a37a:	f042 0202 	orrlt.w	r2, r2, #2
 800a37e:	9307      	strge	r3, [sp, #28]
 800a380:	9307      	strlt	r3, [sp, #28]
 800a382:	bfb8      	it	lt
 800a384:	9204      	strlt	r2, [sp, #16]
 800a386:	7823      	ldrb	r3, [r4, #0]
 800a388:	2b2e      	cmp	r3, #46	; 0x2e
 800a38a:	d10c      	bne.n	800a3a6 <_vfiprintf_r+0x176>
 800a38c:	7863      	ldrb	r3, [r4, #1]
 800a38e:	2b2a      	cmp	r3, #42	; 0x2a
 800a390:	d135      	bne.n	800a3fe <_vfiprintf_r+0x1ce>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	1d1a      	adds	r2, r3, #4
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	9203      	str	r2, [sp, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bfb8      	it	lt
 800a39e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3a2:	3402      	adds	r4, #2
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a48c <_vfiprintf_r+0x25c>
 800a3aa:	7821      	ldrb	r1, [r4, #0]
 800a3ac:	2203      	movs	r2, #3
 800a3ae:	4650      	mov	r0, sl
 800a3b0:	f7f5 ff36 	bl	8000220 <memchr>
 800a3b4:	b140      	cbz	r0, 800a3c8 <_vfiprintf_r+0x198>
 800a3b6:	2340      	movs	r3, #64	; 0x40
 800a3b8:	eba0 000a 	sub.w	r0, r0, sl
 800a3bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a3c0:	9b04      	ldr	r3, [sp, #16]
 800a3c2:	4303      	orrs	r3, r0
 800a3c4:	3401      	adds	r4, #1
 800a3c6:	9304      	str	r3, [sp, #16]
 800a3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3cc:	482c      	ldr	r0, [pc, #176]	; (800a480 <_vfiprintf_r+0x250>)
 800a3ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3d2:	2206      	movs	r2, #6
 800a3d4:	f7f5 ff24 	bl	8000220 <memchr>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d03f      	beq.n	800a45c <_vfiprintf_r+0x22c>
 800a3dc:	4b29      	ldr	r3, [pc, #164]	; (800a484 <_vfiprintf_r+0x254>)
 800a3de:	bb1b      	cbnz	r3, 800a428 <_vfiprintf_r+0x1f8>
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	3307      	adds	r3, #7
 800a3e4:	f023 0307 	bic.w	r3, r3, #7
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	9303      	str	r3, [sp, #12]
 800a3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ee:	443b      	add	r3, r7
 800a3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f2:	e767      	b.n	800a2c4 <_vfiprintf_r+0x94>
 800a3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	e7a5      	b.n	800a34a <_vfiprintf_r+0x11a>
 800a3fe:	2300      	movs	r3, #0
 800a400:	3401      	adds	r4, #1
 800a402:	9305      	str	r3, [sp, #20]
 800a404:	4619      	mov	r1, r3
 800a406:	f04f 0c0a 	mov.w	ip, #10
 800a40a:	4620      	mov	r0, r4
 800a40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a410:	3a30      	subs	r2, #48	; 0x30
 800a412:	2a09      	cmp	r2, #9
 800a414:	d903      	bls.n	800a41e <_vfiprintf_r+0x1ee>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0c5      	beq.n	800a3a6 <_vfiprintf_r+0x176>
 800a41a:	9105      	str	r1, [sp, #20]
 800a41c:	e7c3      	b.n	800a3a6 <_vfiprintf_r+0x176>
 800a41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a422:	4604      	mov	r4, r0
 800a424:	2301      	movs	r3, #1
 800a426:	e7f0      	b.n	800a40a <_vfiprintf_r+0x1da>
 800a428:	ab03      	add	r3, sp, #12
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	462a      	mov	r2, r5
 800a42e:	4b16      	ldr	r3, [pc, #88]	; (800a488 <_vfiprintf_r+0x258>)
 800a430:	a904      	add	r1, sp, #16
 800a432:	4630      	mov	r0, r6
 800a434:	f7fc f84c 	bl	80064d0 <_printf_float>
 800a438:	4607      	mov	r7, r0
 800a43a:	1c78      	adds	r0, r7, #1
 800a43c:	d1d6      	bne.n	800a3ec <_vfiprintf_r+0x1bc>
 800a43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a440:	07d9      	lsls	r1, r3, #31
 800a442:	d405      	bmi.n	800a450 <_vfiprintf_r+0x220>
 800a444:	89ab      	ldrh	r3, [r5, #12]
 800a446:	059a      	lsls	r2, r3, #22
 800a448:	d402      	bmi.n	800a450 <_vfiprintf_r+0x220>
 800a44a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44c:	f000 faa1 	bl	800a992 <__retarget_lock_release_recursive>
 800a450:	89ab      	ldrh	r3, [r5, #12]
 800a452:	065b      	lsls	r3, r3, #25
 800a454:	f53f af12 	bmi.w	800a27c <_vfiprintf_r+0x4c>
 800a458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a45a:	e711      	b.n	800a280 <_vfiprintf_r+0x50>
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	462a      	mov	r2, r5
 800a462:	4b09      	ldr	r3, [pc, #36]	; (800a488 <_vfiprintf_r+0x258>)
 800a464:	a904      	add	r1, sp, #16
 800a466:	4630      	mov	r0, r6
 800a468:	f7fc fad6 	bl	8006a18 <_printf_i>
 800a46c:	e7e4      	b.n	800a438 <_vfiprintf_r+0x208>
 800a46e:	bf00      	nop
 800a470:	0800b1ac 	.word	0x0800b1ac
 800a474:	0800b1cc 	.word	0x0800b1cc
 800a478:	0800b18c 	.word	0x0800b18c
 800a47c:	0800b13c 	.word	0x0800b13c
 800a480:	0800b146 	.word	0x0800b146
 800a484:	080064d1 	.word	0x080064d1
 800a488:	0800a20d 	.word	0x0800a20d
 800a48c:	0800b142 	.word	0x0800b142

0800a490 <__swbuf_r>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	460e      	mov	r6, r1
 800a494:	4614      	mov	r4, r2
 800a496:	4605      	mov	r5, r0
 800a498:	b118      	cbz	r0, 800a4a2 <__swbuf_r+0x12>
 800a49a:	6983      	ldr	r3, [r0, #24]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <__swbuf_r+0x12>
 800a49e:	f000 f9d9 	bl	800a854 <__sinit>
 800a4a2:	4b21      	ldr	r3, [pc, #132]	; (800a528 <__swbuf_r+0x98>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d12b      	bne.n	800a500 <__swbuf_r+0x70>
 800a4a8:	686c      	ldr	r4, [r5, #4]
 800a4aa:	69a3      	ldr	r3, [r4, #24]
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	071a      	lsls	r2, r3, #28
 800a4b2:	d52f      	bpl.n	800a514 <__swbuf_r+0x84>
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	b36b      	cbz	r3, 800a514 <__swbuf_r+0x84>
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	6820      	ldr	r0, [r4, #0]
 800a4bc:	1ac0      	subs	r0, r0, r3
 800a4be:	6963      	ldr	r3, [r4, #20]
 800a4c0:	b2f6      	uxtb	r6, r6
 800a4c2:	4283      	cmp	r3, r0
 800a4c4:	4637      	mov	r7, r6
 800a4c6:	dc04      	bgt.n	800a4d2 <__swbuf_r+0x42>
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f92e 	bl	800a72c <_fflush_r>
 800a4d0:	bb30      	cbnz	r0, 800a520 <__swbuf_r+0x90>
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	60a3      	str	r3, [r4, #8]
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	701e      	strb	r6, [r3, #0]
 800a4e0:	6963      	ldr	r3, [r4, #20]
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	4283      	cmp	r3, r0
 800a4e6:	d004      	beq.n	800a4f2 <__swbuf_r+0x62>
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	07db      	lsls	r3, r3, #31
 800a4ec:	d506      	bpl.n	800a4fc <__swbuf_r+0x6c>
 800a4ee:	2e0a      	cmp	r6, #10
 800a4f0:	d104      	bne.n	800a4fc <__swbuf_r+0x6c>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f000 f919 	bl	800a72c <_fflush_r>
 800a4fa:	b988      	cbnz	r0, 800a520 <__swbuf_r+0x90>
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <__swbuf_r+0x9c>)
 800a502:	429c      	cmp	r4, r3
 800a504:	d101      	bne.n	800a50a <__swbuf_r+0x7a>
 800a506:	68ac      	ldr	r4, [r5, #8]
 800a508:	e7cf      	b.n	800a4aa <__swbuf_r+0x1a>
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <__swbuf_r+0xa0>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	bf08      	it	eq
 800a510:	68ec      	ldreq	r4, [r5, #12]
 800a512:	e7ca      	b.n	800a4aa <__swbuf_r+0x1a>
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f000 f80c 	bl	800a534 <__swsetup_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d0cb      	beq.n	800a4b8 <__swbuf_r+0x28>
 800a520:	f04f 37ff 	mov.w	r7, #4294967295
 800a524:	e7ea      	b.n	800a4fc <__swbuf_r+0x6c>
 800a526:	bf00      	nop
 800a528:	0800b1ac 	.word	0x0800b1ac
 800a52c:	0800b1cc 	.word	0x0800b1cc
 800a530:	0800b18c 	.word	0x0800b18c

0800a534 <__swsetup_r>:
 800a534:	4b32      	ldr	r3, [pc, #200]	; (800a600 <__swsetup_r+0xcc>)
 800a536:	b570      	push	{r4, r5, r6, lr}
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	4606      	mov	r6, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	b125      	cbz	r5, 800a54a <__swsetup_r+0x16>
 800a540:	69ab      	ldr	r3, [r5, #24]
 800a542:	b913      	cbnz	r3, 800a54a <__swsetup_r+0x16>
 800a544:	4628      	mov	r0, r5
 800a546:	f000 f985 	bl	800a854 <__sinit>
 800a54a:	4b2e      	ldr	r3, [pc, #184]	; (800a604 <__swsetup_r+0xd0>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d10f      	bne.n	800a570 <__swsetup_r+0x3c>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a558:	0719      	lsls	r1, r3, #28
 800a55a:	d42c      	bmi.n	800a5b6 <__swsetup_r+0x82>
 800a55c:	06dd      	lsls	r5, r3, #27
 800a55e:	d411      	bmi.n	800a584 <__swsetup_r+0x50>
 800a560:	2309      	movs	r3, #9
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	e03e      	b.n	800a5ee <__swsetup_r+0xba>
 800a570:	4b25      	ldr	r3, [pc, #148]	; (800a608 <__swsetup_r+0xd4>)
 800a572:	429c      	cmp	r4, r3
 800a574:	d101      	bne.n	800a57a <__swsetup_r+0x46>
 800a576:	68ac      	ldr	r4, [r5, #8]
 800a578:	e7eb      	b.n	800a552 <__swsetup_r+0x1e>
 800a57a:	4b24      	ldr	r3, [pc, #144]	; (800a60c <__swsetup_r+0xd8>)
 800a57c:	429c      	cmp	r4, r3
 800a57e:	bf08      	it	eq
 800a580:	68ec      	ldreq	r4, [r5, #12]
 800a582:	e7e6      	b.n	800a552 <__swsetup_r+0x1e>
 800a584:	0758      	lsls	r0, r3, #29
 800a586:	d512      	bpl.n	800a5ae <__swsetup_r+0x7a>
 800a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a58a:	b141      	cbz	r1, 800a59e <__swsetup_r+0x6a>
 800a58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a590:	4299      	cmp	r1, r3
 800a592:	d002      	beq.n	800a59a <__swsetup_r+0x66>
 800a594:	4630      	mov	r0, r6
 800a596:	f7ff fb27 	bl	8009be8 <_free_r>
 800a59a:	2300      	movs	r3, #0
 800a59c:	6363      	str	r3, [r4, #52]	; 0x34
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f043 0308 	orr.w	r3, r3, #8
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	b94b      	cbnz	r3, 800a5ce <__swsetup_r+0x9a>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c4:	d003      	beq.n	800a5ce <__swsetup_r+0x9a>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 fa09 	bl	800a9e0 <__smakebuf_r>
 800a5ce:	89a0      	ldrh	r0, [r4, #12]
 800a5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d4:	f010 0301 	ands.w	r3, r0, #1
 800a5d8:	d00a      	beq.n	800a5f0 <__swsetup_r+0xbc>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	61a3      	str	r3, [r4, #24]
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	b943      	cbnz	r3, 800a5fa <__swsetup_r+0xc6>
 800a5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5ec:	d1ba      	bne.n	800a564 <__swsetup_r+0x30>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	0781      	lsls	r1, r0, #30
 800a5f2:	bf58      	it	pl
 800a5f4:	6963      	ldrpl	r3, [r4, #20]
 800a5f6:	60a3      	str	r3, [r4, #8]
 800a5f8:	e7f4      	b.n	800a5e4 <__swsetup_r+0xb0>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e7f7      	b.n	800a5ee <__swsetup_r+0xba>
 800a5fe:	bf00      	nop
 800a600:	20000010 	.word	0x20000010
 800a604:	0800b1ac 	.word	0x0800b1ac
 800a608:	0800b1cc 	.word	0x0800b1cc
 800a60c:	0800b18c 	.word	0x0800b18c

0800a610 <abort>:
 800a610:	b508      	push	{r3, lr}
 800a612:	2006      	movs	r0, #6
 800a614:	f000 fa54 	bl	800aac0 <raise>
 800a618:	2001      	movs	r0, #1
 800a61a:	f7f7 fa2f 	bl	8001a7c <_exit>
	...

0800a620 <__sflush_r>:
 800a620:	898a      	ldrh	r2, [r1, #12]
 800a622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a626:	4605      	mov	r5, r0
 800a628:	0710      	lsls	r0, r2, #28
 800a62a:	460c      	mov	r4, r1
 800a62c:	d458      	bmi.n	800a6e0 <__sflush_r+0xc0>
 800a62e:	684b      	ldr	r3, [r1, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc05      	bgt.n	800a640 <__sflush_r+0x20>
 800a634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	dc02      	bgt.n	800a640 <__sflush_r+0x20>
 800a63a:	2000      	movs	r0, #0
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a642:	2e00      	cmp	r6, #0
 800a644:	d0f9      	beq.n	800a63a <__sflush_r+0x1a>
 800a646:	2300      	movs	r3, #0
 800a648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a64c:	682f      	ldr	r7, [r5, #0]
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	d032      	beq.n	800a6b8 <__sflush_r+0x98>
 800a652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	075a      	lsls	r2, r3, #29
 800a658:	d505      	bpl.n	800a666 <__sflush_r+0x46>
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	1ac0      	subs	r0, r0, r3
 800a65e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a660:	b10b      	cbz	r3, 800a666 <__sflush_r+0x46>
 800a662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a664:	1ac0      	subs	r0, r0, r3
 800a666:	2300      	movs	r3, #0
 800a668:	4602      	mov	r2, r0
 800a66a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a66c:	6a21      	ldr	r1, [r4, #32]
 800a66e:	4628      	mov	r0, r5
 800a670:	47b0      	blx	r6
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	d106      	bne.n	800a686 <__sflush_r+0x66>
 800a678:	6829      	ldr	r1, [r5, #0]
 800a67a:	291d      	cmp	r1, #29
 800a67c:	d82c      	bhi.n	800a6d8 <__sflush_r+0xb8>
 800a67e:	4a2a      	ldr	r2, [pc, #168]	; (800a728 <__sflush_r+0x108>)
 800a680:	40ca      	lsrs	r2, r1
 800a682:	07d6      	lsls	r6, r2, #31
 800a684:	d528      	bpl.n	800a6d8 <__sflush_r+0xb8>
 800a686:	2200      	movs	r2, #0
 800a688:	6062      	str	r2, [r4, #4]
 800a68a:	04d9      	lsls	r1, r3, #19
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	d504      	bpl.n	800a69c <__sflush_r+0x7c>
 800a692:	1c42      	adds	r2, r0, #1
 800a694:	d101      	bne.n	800a69a <__sflush_r+0x7a>
 800a696:	682b      	ldr	r3, [r5, #0]
 800a698:	b903      	cbnz	r3, 800a69c <__sflush_r+0x7c>
 800a69a:	6560      	str	r0, [r4, #84]	; 0x54
 800a69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69e:	602f      	str	r7, [r5, #0]
 800a6a0:	2900      	cmp	r1, #0
 800a6a2:	d0ca      	beq.n	800a63a <__sflush_r+0x1a>
 800a6a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	d002      	beq.n	800a6b2 <__sflush_r+0x92>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7ff fa9b 	bl	8009be8 <_free_r>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6b6:	e7c1      	b.n	800a63c <__sflush_r+0x1c>
 800a6b8:	6a21      	ldr	r1, [r4, #32]
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b0      	blx	r6
 800a6c0:	1c41      	adds	r1, r0, #1
 800a6c2:	d1c7      	bne.n	800a654 <__sflush_r+0x34>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0c4      	beq.n	800a654 <__sflush_r+0x34>
 800a6ca:	2b1d      	cmp	r3, #29
 800a6cc:	d001      	beq.n	800a6d2 <__sflush_r+0xb2>
 800a6ce:	2b16      	cmp	r3, #22
 800a6d0:	d101      	bne.n	800a6d6 <__sflush_r+0xb6>
 800a6d2:	602f      	str	r7, [r5, #0]
 800a6d4:	e7b1      	b.n	800a63a <__sflush_r+0x1a>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	e7ad      	b.n	800a63c <__sflush_r+0x1c>
 800a6e0:	690f      	ldr	r7, [r1, #16]
 800a6e2:	2f00      	cmp	r7, #0
 800a6e4:	d0a9      	beq.n	800a63a <__sflush_r+0x1a>
 800a6e6:	0793      	lsls	r3, r2, #30
 800a6e8:	680e      	ldr	r6, [r1, #0]
 800a6ea:	bf08      	it	eq
 800a6ec:	694b      	ldreq	r3, [r1, #20]
 800a6ee:	600f      	str	r7, [r1, #0]
 800a6f0:	bf18      	it	ne
 800a6f2:	2300      	movne	r3, #0
 800a6f4:	eba6 0807 	sub.w	r8, r6, r7
 800a6f8:	608b      	str	r3, [r1, #8]
 800a6fa:	f1b8 0f00 	cmp.w	r8, #0
 800a6fe:	dd9c      	ble.n	800a63a <__sflush_r+0x1a>
 800a700:	6a21      	ldr	r1, [r4, #32]
 800a702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a704:	4643      	mov	r3, r8
 800a706:	463a      	mov	r2, r7
 800a708:	4628      	mov	r0, r5
 800a70a:	47b0      	blx	r6
 800a70c:	2800      	cmp	r0, #0
 800a70e:	dc06      	bgt.n	800a71e <__sflush_r+0xfe>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	e78e      	b.n	800a63c <__sflush_r+0x1c>
 800a71e:	4407      	add	r7, r0
 800a720:	eba8 0800 	sub.w	r8, r8, r0
 800a724:	e7e9      	b.n	800a6fa <__sflush_r+0xda>
 800a726:	bf00      	nop
 800a728:	20400001 	.word	0x20400001

0800a72c <_fflush_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	690b      	ldr	r3, [r1, #16]
 800a730:	4605      	mov	r5, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b913      	cbnz	r3, 800a73c <_fflush_r+0x10>
 800a736:	2500      	movs	r5, #0
 800a738:	4628      	mov	r0, r5
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	b118      	cbz	r0, 800a746 <_fflush_r+0x1a>
 800a73e:	6983      	ldr	r3, [r0, #24]
 800a740:	b90b      	cbnz	r3, 800a746 <_fflush_r+0x1a>
 800a742:	f000 f887 	bl	800a854 <__sinit>
 800a746:	4b14      	ldr	r3, [pc, #80]	; (800a798 <_fflush_r+0x6c>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	d11b      	bne.n	800a784 <_fflush_r+0x58>
 800a74c:	686c      	ldr	r4, [r5, #4]
 800a74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0ef      	beq.n	800a736 <_fflush_r+0xa>
 800a756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a758:	07d0      	lsls	r0, r2, #31
 800a75a:	d404      	bmi.n	800a766 <_fflush_r+0x3a>
 800a75c:	0599      	lsls	r1, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_fflush_r+0x3a>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f000 f915 	bl	800a990 <__retarget_lock_acquire_recursive>
 800a766:	4628      	mov	r0, r5
 800a768:	4621      	mov	r1, r4
 800a76a:	f7ff ff59 	bl	800a620 <__sflush_r>
 800a76e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a770:	07da      	lsls	r2, r3, #31
 800a772:	4605      	mov	r5, r0
 800a774:	d4e0      	bmi.n	800a738 <_fflush_r+0xc>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	059b      	lsls	r3, r3, #22
 800a77a:	d4dd      	bmi.n	800a738 <_fflush_r+0xc>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f000 f908 	bl	800a992 <__retarget_lock_release_recursive>
 800a782:	e7d9      	b.n	800a738 <_fflush_r+0xc>
 800a784:	4b05      	ldr	r3, [pc, #20]	; (800a79c <_fflush_r+0x70>)
 800a786:	429c      	cmp	r4, r3
 800a788:	d101      	bne.n	800a78e <_fflush_r+0x62>
 800a78a:	68ac      	ldr	r4, [r5, #8]
 800a78c:	e7df      	b.n	800a74e <_fflush_r+0x22>
 800a78e:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <_fflush_r+0x74>)
 800a790:	429c      	cmp	r4, r3
 800a792:	bf08      	it	eq
 800a794:	68ec      	ldreq	r4, [r5, #12]
 800a796:	e7da      	b.n	800a74e <_fflush_r+0x22>
 800a798:	0800b1ac 	.word	0x0800b1ac
 800a79c:	0800b1cc 	.word	0x0800b1cc
 800a7a0:	0800b18c 	.word	0x0800b18c

0800a7a4 <std>:
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	b510      	push	{r4, lr}
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7b2:	6083      	str	r3, [r0, #8]
 800a7b4:	8181      	strh	r1, [r0, #12]
 800a7b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a7b8:	81c2      	strh	r2, [r0, #14]
 800a7ba:	6183      	str	r3, [r0, #24]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	2208      	movs	r2, #8
 800a7c0:	305c      	adds	r0, #92	; 0x5c
 800a7c2:	f7fb fddd 	bl	8006380 <memset>
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <std+0x38>)
 800a7c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <std+0x3c>)
 800a7cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7ce:	4b05      	ldr	r3, [pc, #20]	; (800a7e4 <std+0x40>)
 800a7d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7d2:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <std+0x44>)
 800a7d4:	6224      	str	r4, [r4, #32]
 800a7d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800aaf9 	.word	0x0800aaf9
 800a7e0:	0800ab1b 	.word	0x0800ab1b
 800a7e4:	0800ab53 	.word	0x0800ab53
 800a7e8:	0800ab77 	.word	0x0800ab77

0800a7ec <_cleanup_r>:
 800a7ec:	4901      	ldr	r1, [pc, #4]	; (800a7f4 <_cleanup_r+0x8>)
 800a7ee:	f000 b8af 	b.w	800a950 <_fwalk_reent>
 800a7f2:	bf00      	nop
 800a7f4:	0800a72d 	.word	0x0800a72d

0800a7f8 <__sfmoreglue>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	2268      	movs	r2, #104	; 0x68
 800a7fc:	1e4d      	subs	r5, r1, #1
 800a7fe:	4355      	muls	r5, r2
 800a800:	460e      	mov	r6, r1
 800a802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a806:	f7ff fa5b 	bl	8009cc0 <_malloc_r>
 800a80a:	4604      	mov	r4, r0
 800a80c:	b140      	cbz	r0, 800a820 <__sfmoreglue+0x28>
 800a80e:	2100      	movs	r1, #0
 800a810:	e9c0 1600 	strd	r1, r6, [r0]
 800a814:	300c      	adds	r0, #12
 800a816:	60a0      	str	r0, [r4, #8]
 800a818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a81c:	f7fb fdb0 	bl	8006380 <memset>
 800a820:	4620      	mov	r0, r4
 800a822:	bd70      	pop	{r4, r5, r6, pc}

0800a824 <__sfp_lock_acquire>:
 800a824:	4801      	ldr	r0, [pc, #4]	; (800a82c <__sfp_lock_acquire+0x8>)
 800a826:	f000 b8b3 	b.w	800a990 <__retarget_lock_acquire_recursive>
 800a82a:	bf00      	nop
 800a82c:	200002ad 	.word	0x200002ad

0800a830 <__sfp_lock_release>:
 800a830:	4801      	ldr	r0, [pc, #4]	; (800a838 <__sfp_lock_release+0x8>)
 800a832:	f000 b8ae 	b.w	800a992 <__retarget_lock_release_recursive>
 800a836:	bf00      	nop
 800a838:	200002ad 	.word	0x200002ad

0800a83c <__sinit_lock_acquire>:
 800a83c:	4801      	ldr	r0, [pc, #4]	; (800a844 <__sinit_lock_acquire+0x8>)
 800a83e:	f000 b8a7 	b.w	800a990 <__retarget_lock_acquire_recursive>
 800a842:	bf00      	nop
 800a844:	200002ae 	.word	0x200002ae

0800a848 <__sinit_lock_release>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__sinit_lock_release+0x8>)
 800a84a:	f000 b8a2 	b.w	800a992 <__retarget_lock_release_recursive>
 800a84e:	bf00      	nop
 800a850:	200002ae 	.word	0x200002ae

0800a854 <__sinit>:
 800a854:	b510      	push	{r4, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	f7ff fff0 	bl	800a83c <__sinit_lock_acquire>
 800a85c:	69a3      	ldr	r3, [r4, #24]
 800a85e:	b11b      	cbz	r3, 800a868 <__sinit+0x14>
 800a860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a864:	f7ff bff0 	b.w	800a848 <__sinit_lock_release>
 800a868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a86c:	6523      	str	r3, [r4, #80]	; 0x50
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <__sinit+0x68>)
 800a870:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <__sinit+0x6c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	62a2      	str	r2, [r4, #40]	; 0x28
 800a876:	42a3      	cmp	r3, r4
 800a878:	bf04      	itt	eq
 800a87a:	2301      	moveq	r3, #1
 800a87c:	61a3      	streq	r3, [r4, #24]
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 f820 	bl	800a8c4 <__sfp>
 800a884:	6060      	str	r0, [r4, #4]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f81c 	bl	800a8c4 <__sfp>
 800a88c:	60a0      	str	r0, [r4, #8]
 800a88e:	4620      	mov	r0, r4
 800a890:	f000 f818 	bl	800a8c4 <__sfp>
 800a894:	2200      	movs	r2, #0
 800a896:	60e0      	str	r0, [r4, #12]
 800a898:	2104      	movs	r1, #4
 800a89a:	6860      	ldr	r0, [r4, #4]
 800a89c:	f7ff ff82 	bl	800a7a4 <std>
 800a8a0:	68a0      	ldr	r0, [r4, #8]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	2109      	movs	r1, #9
 800a8a6:	f7ff ff7d 	bl	800a7a4 <std>
 800a8aa:	68e0      	ldr	r0, [r4, #12]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	2112      	movs	r1, #18
 800a8b0:	f7ff ff78 	bl	800a7a4 <std>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	61a3      	str	r3, [r4, #24]
 800a8b8:	e7d2      	b.n	800a860 <__sinit+0xc>
 800a8ba:	bf00      	nop
 800a8bc:	0800ad48 	.word	0x0800ad48
 800a8c0:	0800a7ed 	.word	0x0800a7ed

0800a8c4 <__sfp>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	f7ff ffac 	bl	800a824 <__sfp_lock_acquire>
 800a8cc:	4b1e      	ldr	r3, [pc, #120]	; (800a948 <__sfp+0x84>)
 800a8ce:	681e      	ldr	r6, [r3, #0]
 800a8d0:	69b3      	ldr	r3, [r6, #24]
 800a8d2:	b913      	cbnz	r3, 800a8da <__sfp+0x16>
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f7ff ffbd 	bl	800a854 <__sinit>
 800a8da:	3648      	adds	r6, #72	; 0x48
 800a8dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	d503      	bpl.n	800a8ec <__sfp+0x28>
 800a8e4:	6833      	ldr	r3, [r6, #0]
 800a8e6:	b30b      	cbz	r3, 800a92c <__sfp+0x68>
 800a8e8:	6836      	ldr	r6, [r6, #0]
 800a8ea:	e7f7      	b.n	800a8dc <__sfp+0x18>
 800a8ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8f0:	b9d5      	cbnz	r5, 800a928 <__sfp+0x64>
 800a8f2:	4b16      	ldr	r3, [pc, #88]	; (800a94c <__sfp+0x88>)
 800a8f4:	60e3      	str	r3, [r4, #12]
 800a8f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a8fc:	f000 f847 	bl	800a98e <__retarget_lock_init_recursive>
 800a900:	f7ff ff96 	bl	800a830 <__sfp_lock_release>
 800a904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a90c:	6025      	str	r5, [r4, #0]
 800a90e:	61a5      	str	r5, [r4, #24]
 800a910:	2208      	movs	r2, #8
 800a912:	4629      	mov	r1, r5
 800a914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a918:	f7fb fd32 	bl	8006380 <memset>
 800a91c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a924:	4620      	mov	r0, r4
 800a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a928:	3468      	adds	r4, #104	; 0x68
 800a92a:	e7d9      	b.n	800a8e0 <__sfp+0x1c>
 800a92c:	2104      	movs	r1, #4
 800a92e:	4638      	mov	r0, r7
 800a930:	f7ff ff62 	bl	800a7f8 <__sfmoreglue>
 800a934:	4604      	mov	r4, r0
 800a936:	6030      	str	r0, [r6, #0]
 800a938:	2800      	cmp	r0, #0
 800a93a:	d1d5      	bne.n	800a8e8 <__sfp+0x24>
 800a93c:	f7ff ff78 	bl	800a830 <__sfp_lock_release>
 800a940:	230c      	movs	r3, #12
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	e7ee      	b.n	800a924 <__sfp+0x60>
 800a946:	bf00      	nop
 800a948:	0800ad48 	.word	0x0800ad48
 800a94c:	ffff0001 	.word	0xffff0001

0800a950 <_fwalk_reent>:
 800a950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a954:	4606      	mov	r6, r0
 800a956:	4688      	mov	r8, r1
 800a958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a95c:	2700      	movs	r7, #0
 800a95e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a962:	f1b9 0901 	subs.w	r9, r9, #1
 800a966:	d505      	bpl.n	800a974 <_fwalk_reent+0x24>
 800a968:	6824      	ldr	r4, [r4, #0]
 800a96a:	2c00      	cmp	r4, #0
 800a96c:	d1f7      	bne.n	800a95e <_fwalk_reent+0xe>
 800a96e:	4638      	mov	r0, r7
 800a970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a974:	89ab      	ldrh	r3, [r5, #12]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d907      	bls.n	800a98a <_fwalk_reent+0x3a>
 800a97a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a97e:	3301      	adds	r3, #1
 800a980:	d003      	beq.n	800a98a <_fwalk_reent+0x3a>
 800a982:	4629      	mov	r1, r5
 800a984:	4630      	mov	r0, r6
 800a986:	47c0      	blx	r8
 800a988:	4307      	orrs	r7, r0
 800a98a:	3568      	adds	r5, #104	; 0x68
 800a98c:	e7e9      	b.n	800a962 <_fwalk_reent+0x12>

0800a98e <__retarget_lock_init_recursive>:
 800a98e:	4770      	bx	lr

0800a990 <__retarget_lock_acquire_recursive>:
 800a990:	4770      	bx	lr

0800a992 <__retarget_lock_release_recursive>:
 800a992:	4770      	bx	lr

0800a994 <__swhatbuf_r>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	460e      	mov	r6, r1
 800a998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99c:	2900      	cmp	r1, #0
 800a99e:	b096      	sub	sp, #88	; 0x58
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	461d      	mov	r5, r3
 800a9a4:	da08      	bge.n	800a9b8 <__swhatbuf_r+0x24>
 800a9a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	602a      	str	r2, [r5, #0]
 800a9ae:	061a      	lsls	r2, r3, #24
 800a9b0:	d410      	bmi.n	800a9d4 <__swhatbuf_r+0x40>
 800a9b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9b6:	e00e      	b.n	800a9d6 <__swhatbuf_r+0x42>
 800a9b8:	466a      	mov	r2, sp
 800a9ba:	f000 f903 	bl	800abc4 <_fstat_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	dbf1      	blt.n	800a9a6 <__swhatbuf_r+0x12>
 800a9c2:	9a01      	ldr	r2, [sp, #4]
 800a9c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9cc:	425a      	negs	r2, r3
 800a9ce:	415a      	adcs	r2, r3
 800a9d0:	602a      	str	r2, [r5, #0]
 800a9d2:	e7ee      	b.n	800a9b2 <__swhatbuf_r+0x1e>
 800a9d4:	2340      	movs	r3, #64	; 0x40
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	b016      	add	sp, #88	; 0x58
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9e0 <__smakebuf_r>:
 800a9e0:	898b      	ldrh	r3, [r1, #12]
 800a9e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9e4:	079d      	lsls	r5, r3, #30
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	d507      	bpl.n	800a9fc <__smakebuf_r+0x1c>
 800a9ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	6163      	str	r3, [r4, #20]
 800a9f8:	b002      	add	sp, #8
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	ab01      	add	r3, sp, #4
 800a9fe:	466a      	mov	r2, sp
 800aa00:	f7ff ffc8 	bl	800a994 <__swhatbuf_r>
 800aa04:	9900      	ldr	r1, [sp, #0]
 800aa06:	4605      	mov	r5, r0
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f7ff f959 	bl	8009cc0 <_malloc_r>
 800aa0e:	b948      	cbnz	r0, 800aa24 <__smakebuf_r+0x44>
 800aa10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa14:	059a      	lsls	r2, r3, #22
 800aa16:	d4ef      	bmi.n	800a9f8 <__smakebuf_r+0x18>
 800aa18:	f023 0303 	bic.w	r3, r3, #3
 800aa1c:	f043 0302 	orr.w	r3, r3, #2
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	e7e3      	b.n	800a9ec <__smakebuf_r+0xc>
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <__smakebuf_r+0x7c>)
 800aa26:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	6020      	str	r0, [r4, #0]
 800aa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	9b00      	ldr	r3, [sp, #0]
 800aa34:	6163      	str	r3, [r4, #20]
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	6120      	str	r0, [r4, #16]
 800aa3a:	b15b      	cbz	r3, 800aa54 <__smakebuf_r+0x74>
 800aa3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 f8d1 	bl	800abe8 <_isatty_r>
 800aa46:	b128      	cbz	r0, 800aa54 <__smakebuf_r+0x74>
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	f023 0303 	bic.w	r3, r3, #3
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	89a0      	ldrh	r0, [r4, #12]
 800aa56:	4305      	orrs	r5, r0
 800aa58:	81a5      	strh	r5, [r4, #12]
 800aa5a:	e7cd      	b.n	800a9f8 <__smakebuf_r+0x18>
 800aa5c:	0800a7ed 	.word	0x0800a7ed

0800aa60 <_malloc_usable_size_r>:
 800aa60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa64:	1f18      	subs	r0, r3, #4
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfbc      	itt	lt
 800aa6a:	580b      	ldrlt	r3, [r1, r0]
 800aa6c:	18c0      	addlt	r0, r0, r3
 800aa6e:	4770      	bx	lr

0800aa70 <_raise_r>:
 800aa70:	291f      	cmp	r1, #31
 800aa72:	b538      	push	{r3, r4, r5, lr}
 800aa74:	4604      	mov	r4, r0
 800aa76:	460d      	mov	r5, r1
 800aa78:	d904      	bls.n	800aa84 <_raise_r+0x14>
 800aa7a:	2316      	movs	r3, #22
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa86:	b112      	cbz	r2, 800aa8e <_raise_r+0x1e>
 800aa88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa8c:	b94b      	cbnz	r3, 800aaa2 <_raise_r+0x32>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 f830 	bl	800aaf4 <_getpid_r>
 800aa94:	462a      	mov	r2, r5
 800aa96:	4601      	mov	r1, r0
 800aa98:	4620      	mov	r0, r4
 800aa9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa9e:	f000 b817 	b.w	800aad0 <_kill_r>
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d00a      	beq.n	800aabc <_raise_r+0x4c>
 800aaa6:	1c59      	adds	r1, r3, #1
 800aaa8:	d103      	bne.n	800aab2 <_raise_r+0x42>
 800aaaa:	2316      	movs	r3, #22
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	2001      	movs	r0, #1
 800aab0:	e7e7      	b.n	800aa82 <_raise_r+0x12>
 800aab2:	2400      	movs	r4, #0
 800aab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aab8:	4628      	mov	r0, r5
 800aaba:	4798      	blx	r3
 800aabc:	2000      	movs	r0, #0
 800aabe:	e7e0      	b.n	800aa82 <_raise_r+0x12>

0800aac0 <raise>:
 800aac0:	4b02      	ldr	r3, [pc, #8]	; (800aacc <raise+0xc>)
 800aac2:	4601      	mov	r1, r0
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	f7ff bfd3 	b.w	800aa70 <_raise_r>
 800aaca:	bf00      	nop
 800aacc:	20000010 	.word	0x20000010

0800aad0 <_kill_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d07      	ldr	r5, [pc, #28]	; (800aaf0 <_kill_r+0x20>)
 800aad4:	2300      	movs	r3, #0
 800aad6:	4604      	mov	r4, r0
 800aad8:	4608      	mov	r0, r1
 800aada:	4611      	mov	r1, r2
 800aadc:	602b      	str	r3, [r5, #0]
 800aade:	f7f6 ffbd 	bl	8001a5c <_kill>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d102      	bne.n	800aaec <_kill_r+0x1c>
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	b103      	cbz	r3, 800aaec <_kill_r+0x1c>
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	bf00      	nop
 800aaf0:	200002a8 	.word	0x200002a8

0800aaf4 <_getpid_r>:
 800aaf4:	f7f6 bfaa 	b.w	8001a4c <_getpid>

0800aaf8 <__sread>:
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	460c      	mov	r4, r1
 800aafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab00:	f000 f894 	bl	800ac2c <_read_r>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	bfab      	itete	ge
 800ab08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab0c:	181b      	addge	r3, r3, r0
 800ab0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab12:	bfac      	ite	ge
 800ab14:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab16:	81a3      	strhlt	r3, [r4, #12]
 800ab18:	bd10      	pop	{r4, pc}

0800ab1a <__swrite>:
 800ab1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1e:	461f      	mov	r7, r3
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	05db      	lsls	r3, r3, #23
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	4616      	mov	r6, r2
 800ab2a:	d505      	bpl.n	800ab38 <__swrite+0x1e>
 800ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab30:	2302      	movs	r3, #2
 800ab32:	2200      	movs	r2, #0
 800ab34:	f000 f868 	bl	800ac08 <_lseek_r>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	4632      	mov	r2, r6
 800ab46:	463b      	mov	r3, r7
 800ab48:	4628      	mov	r0, r5
 800ab4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	f000 b817 	b.w	800ab80 <_write_r>

0800ab52 <__sseek>:
 800ab52:	b510      	push	{r4, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5a:	f000 f855 	bl	800ac08 <_lseek_r>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	bf15      	itete	ne
 800ab64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab6e:	81a3      	strheq	r3, [r4, #12]
 800ab70:	bf18      	it	ne
 800ab72:	81a3      	strhne	r3, [r4, #12]
 800ab74:	bd10      	pop	{r4, pc}

0800ab76 <__sclose>:
 800ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7a:	f000 b813 	b.w	800aba4 <_close_r>
	...

0800ab80 <_write_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	; (800aba0 <_write_r+0x20>)
 800ab84:	4604      	mov	r4, r0
 800ab86:	4608      	mov	r0, r1
 800ab88:	4611      	mov	r1, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	602a      	str	r2, [r5, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7f6 ff9b 	bl	8001aca <_write>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_write_r+0x1e>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_write_r+0x1e>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	200002a8 	.word	0x200002a8

0800aba4 <_close_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d06      	ldr	r5, [pc, #24]	; (800abc0 <_close_r+0x1c>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	f7f6 ffa7 	bl	8001b02 <_close>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_close_r+0x1a>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_close_r+0x1a>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	200002a8 	.word	0x200002a8

0800abc4 <_fstat_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d07      	ldr	r5, [pc, #28]	; (800abe4 <_fstat_r+0x20>)
 800abc8:	2300      	movs	r3, #0
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	4611      	mov	r1, r2
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	f7f6 ffa2 	bl	8001b1a <_fstat>
 800abd6:	1c43      	adds	r3, r0, #1
 800abd8:	d102      	bne.n	800abe0 <_fstat_r+0x1c>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	b103      	cbz	r3, 800abe0 <_fstat_r+0x1c>
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	bd38      	pop	{r3, r4, r5, pc}
 800abe2:	bf00      	nop
 800abe4:	200002a8 	.word	0x200002a8

0800abe8 <_isatty_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d06      	ldr	r5, [pc, #24]	; (800ac04 <_isatty_r+0x1c>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f7f6 ffa1 	bl	8001b3a <_isatty>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_isatty_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_isatty_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	200002a8 	.word	0x200002a8

0800ac08 <_lseek_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4d07      	ldr	r5, [pc, #28]	; (800ac28 <_lseek_r+0x20>)
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	4608      	mov	r0, r1
 800ac10:	4611      	mov	r1, r2
 800ac12:	2200      	movs	r2, #0
 800ac14:	602a      	str	r2, [r5, #0]
 800ac16:	461a      	mov	r2, r3
 800ac18:	f7f6 ff9a 	bl	8001b50 <_lseek>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d102      	bne.n	800ac26 <_lseek_r+0x1e>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	b103      	cbz	r3, 800ac26 <_lseek_r+0x1e>
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	200002a8 	.word	0x200002a8

0800ac2c <_read_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d07      	ldr	r5, [pc, #28]	; (800ac4c <_read_r+0x20>)
 800ac30:	4604      	mov	r4, r0
 800ac32:	4608      	mov	r0, r1
 800ac34:	4611      	mov	r1, r2
 800ac36:	2200      	movs	r2, #0
 800ac38:	602a      	str	r2, [r5, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f7f6 ff28 	bl	8001a90 <_read>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_read_r+0x1e>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_read_r+0x1e>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	200002a8 	.word	0x200002a8

0800ac50 <_init>:
 800ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac52:	bf00      	nop
 800ac54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac56:	bc08      	pop	{r3}
 800ac58:	469e      	mov	lr, r3
 800ac5a:	4770      	bx	lr

0800ac5c <_fini>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr
