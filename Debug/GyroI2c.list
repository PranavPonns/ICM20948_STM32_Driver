
GyroI2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e500  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  0800e6d0  0800e6d0  0001e6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f074  0800f074  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f074  0800f074  0001f074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f07c  0800f07c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f07c  0800f07c  0001f07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001e4  0800f268  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800f268  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a59  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002859  00000000  00000000  00032c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a6  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011974  00000000  00000000  0005d36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d106c  00000000  00000000  0006ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013fd4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  0013fda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e6b8 	.word	0x0800e6b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800e6b8 	.word	0x0800e6b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_ZN9ICM_20948C1E17I2C_HandleTypeDefh>:
 *      Author: Pranav Ponnusamy
 */

#include "ICM_20948.h"

ICM_20948::ICM_20948(I2C_HandleTypeDef handle, uint8_t addr) {
 8001038:	b084      	sub	sp, #16
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	f107 0014 	add.w	r0, r7, #20
 8001046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	address = addr;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001050:	701a      	strb	r2, [r3, #0]
	i2c = handle;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3304      	adds	r3, #4
 8001056:	f107 0114 	add.w	r1, r7, #20
 800105a:	2254      	movs	r2, #84	; 0x54
 800105c:	4618      	mov	r0, r3
 800105e:	f008 febb 	bl	8009dd8 <memcpy>

	initIMU();
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f808 	bl	8001078 <_ZN9ICM_209487initIMUEv>
}
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr

08001078 <_ZN9ICM_209487initIMUEv>:

void ICM_20948::initIMU() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

	initMag();
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f808 	bl	8001096 <_ZN9ICM_209487initMagEv>
	readMagReg(0x11);
 8001086:	2111      	movs	r1, #17
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fa8f 	bl	80015ac <_ZN9ICM_2094810readMagRegEh>
//	writeReg(I2C_MST_CTRL, 0b00000111, 1, 3);
//
//	writeReg(LP_CONFIG, 0x40, 1, 0);
//
//	writeReg(I2C_MST_ODR_CONFIG, 0b00000011, 1, 3);
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN9ICM_209487initMagEv>:
//		writeReg(0x72, x, 1);
//		readReg(0x72, buf[x]);
//	}
//}

void ICM_20948::initMag(){
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af02      	add	r7, sp, #8
 800109c:	6078      	str	r0, [r7, #4]
	uint8_t temp_data = readICMReg(USER_CTRL, 1, 0);
 800109e:	2300      	movs	r3, #0
 80010a0:	2201      	movs	r2, #1
 80010a2:	2103      	movs	r1, #3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fa3a 	bl	800151e <_ZN9ICM_2094810readICMRegEiii>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]
	temp_data |= 0x02;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	73fb      	strb	r3, [r7, #15]
	writeICMReg(USER_CTRL, temp_data, 1, 0);
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2103      	movs	r1, #3
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f9dc 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f003 f966 	bl	8004398 <HAL_Delay>

	temp_data = readICMReg(USER_CTRL, 1, 0);
 80010cc:	2300      	movs	r3, #0
 80010ce:	2201      	movs	r2, #1
 80010d0:	2103      	movs	r1, #3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fa23 	bl	800151e <_ZN9ICM_2094810readICMRegEiii>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
	temp_data |= 0x20;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	73fb      	strb	r3, [r7, #15]
	writeICMReg(USER_CTRL, temp_data, 1, 0);
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	2300      	movs	r3, #0
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2103      	movs	r1, #3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f9c5 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	HAL_Delay(10);
 80010f4:	200a      	movs	r0, #10
 80010f6:	f003 f94f 	bl	8004398 <HAL_Delay>

	temp_data = 0x07;
 80010fa:	2307      	movs	r3, #7
 80010fc:	73fb      	strb	r3, [r7, #15]
	writeICMReg(I2C_MST_CTRL, temp_data, 1, 3);
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	2303      	movs	r3, #3
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2101      	movs	r1, #1
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f9b8 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	HAL_Delay(10);
 800110e:	200a      	movs	r0, #10
 8001110:	f003 f942 	bl	8004398 <HAL_Delay>

	temp_data = 0x40;
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	73fb      	strb	r3, [r7, #15]
	writeICMReg(LP_CONFIG, temp_data, 1, 0);
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	2105      	movs	r1, #5
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f9ab 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f003 f935 	bl	8004398 <HAL_Delay>


	writeMagReg(CNTL3, 0x01);
 800112e:	2201      	movs	r2, #1
 8001130:	2132      	movs	r1, #50	; 0x32
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fa5d 	bl	80015f2 <_ZN9ICM_2094811writeMagRegEhh>
	HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f003 f92d 	bl	8004398 <HAL_Delay>

	writeMagReg(CNTL2, 0x08);
 800113e:	2208      	movs	r2, #8
 8001140:	2131      	movs	r1, #49	; 0x31
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fa55 	bl	80015f2 <_ZN9ICM_2094811writeMagRegEhh>
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZN9ICM_209489updateIMUEv>:


void ICM_20948::updateIMU(){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	updateGyro();
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f80d 	bl	8001178 <_ZN9ICM_2094810updateGyroEv>
	updateAccel();
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f88a 	bl	8001278 <_ZN9ICM_2094811updateAccelEv>
	updateMag();
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f925 	bl	80013b4 <_ZN9ICM_209489updateMagEv>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	0000      	movs	r0, r0
 8001174:	0000      	movs	r0, r0
	...

08001178 <_ZN9ICM_2094810updateGyroEv>:

HAL_StatusTypeDef ICM_20948::updateGyro() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t temp[6];
	HAL_StatusTypeDef ret;

	ret = readICMReg(GYRO_XOUT_H, temp, 6, 0);
 8001180:	f107 0208 	add.w	r2, r7, #8
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2306      	movs	r3, #6
 800118a:	2133      	movs	r1, #51	; 0x33
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f9a0 	bl	80014d2 <_ZN9ICM_2094810readICMRegEiPhii>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]

	if (ret == HAL_OK) {
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d157      	bne.n	800124c <_ZN9ICM_2094810updateGyroEv+0xd4>
		gyroReading.x = twoComplementToDec(
 800119c:	7a7b      	ldrb	r3, [r7, #9]
 800119e:	7a3a      	ldrb	r2, [r7, #8]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fa52 	bl	800164c <_ZN9ICM_209489addBinaryEhh>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 fa63 	bl	8001678 <_ZN9ICM_2094818twoComplementToDecEt>
 80011b2:	4603      	mov	r3, r0
				addBinary(temp[1], temp[0])) / GYRO_SENSITIVITY;
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9d5 	bl	8000564 <__aeabi_i2d>
 80011ba:	a32c      	add	r3, pc, #176	; (adr r3, 800126c <_ZN9ICM_2094810updateGyroEv+0xf4>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fb64 	bl	800088c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fd2c 	bl	8000c28 <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
		gyroReading.x = twoComplementToDec(
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	659a      	str	r2, [r3, #88]	; 0x58
		gyroReading.y = twoComplementToDec(
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	7aba      	ldrb	r2, [r7, #10]
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fa35 	bl	800164c <_ZN9ICM_209489addBinaryEhh>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fa46 	bl	8001678 <_ZN9ICM_2094818twoComplementToDecEt>
 80011ec:	4603      	mov	r3, r0
				addBinary(temp[3], temp[2])) / GYRO_SENSITIVITY;
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9b8 	bl	8000564 <__aeabi_i2d>
 80011f4:	a31d      	add	r3, pc, #116	; (adr r3, 800126c <_ZN9ICM_2094810updateGyroEv+0xf4>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fb47 	bl	800088c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fd0f 	bl	8000c28 <__aeabi_d2f>
 800120a:	4602      	mov	r2, r0
		gyroReading.y = twoComplementToDec(
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	65da      	str	r2, [r3, #92]	; 0x5c
		gyroReading.z = twoComplementToDec(
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	7b3a      	ldrb	r2, [r7, #12]
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fa18 	bl	800164c <_ZN9ICM_209489addBinaryEhh>
 800121c:	4603      	mov	r3, r0
 800121e:	4619      	mov	r1, r3
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa29 	bl	8001678 <_ZN9ICM_2094818twoComplementToDecEt>
 8001226:	4603      	mov	r3, r0
				addBinary(temp[5], temp[4])) / GYRO_SENSITIVITY;
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f99b 	bl	8000564 <__aeabi_i2d>
 800122e:	a30f      	add	r3, pc, #60	; (adr r3, 800126c <_ZN9ICM_2094810updateGyroEv+0xf4>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff fb2a 	bl	800088c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fcf2 	bl	8000c28 <__aeabi_d2f>
 8001244:	4602      	mov	r2, r0
		gyroReading.z = twoComplementToDec(
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	661a      	str	r2, [r3, #96]	; 0x60
 800124a:	e008      	b.n	800125e <_ZN9ICM_2094810updateGyroEv+0xe6>
	} else {
		gyroReading.x = -999;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <_ZN9ICM_2094810updateGyroEv+0xf0>)
 8001250:	659a      	str	r2, [r3, #88]	; 0x58
		gyroReading.y = -999;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <_ZN9ICM_2094810updateGyroEv+0xf0>)
 8001256:	65da      	str	r2, [r3, #92]	; 0x5c
		gyroReading.z = -999;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a03      	ldr	r2, [pc, #12]	; (8001268 <_ZN9ICM_2094810updateGyroEv+0xf0>)
 800125c:	661a      	str	r2, [r3, #96]	; 0x60
	}

	return ret;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	c479c000 	.word	0xc479c000
 800126c:	1eb851ec 	.word	0x1eb851ec
 8001270:	3fb1eb85 	.word	0x3fb1eb85
 8001274:	00000000 	.word	0x00000000

08001278 <_ZN9ICM_2094811updateAccelEv>:

HAL_StatusTypeDef ICM_20948::updateAccel() {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	uint8_t temp[6];
	HAL_StatusTypeDef ret;

	ret = readICMReg(ACCEL_XOUT_H, temp, 6, 0);
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2300      	movs	r3, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2306      	movs	r3, #6
 800128a:	212d      	movs	r1, #45	; 0x2d
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f920 	bl	80014d2 <_ZN9ICM_2094810readICMRegEiPhii>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]

	if (ret == HAL_OK) {
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d172      	bne.n	8001382 <_ZN9ICM_2094811updateAccelEv+0x10a>
		accelReading.x = twoComplementToDec(
 800129c:	7a7b      	ldrb	r3, [r7, #9]
 800129e:	7a3a      	ldrb	r2, [r7, #8]
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f9d2 	bl	800164c <_ZN9ICM_209489addBinaryEhh>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4619      	mov	r1, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f9e3 	bl	8001678 <_ZN9ICM_2094818twoComplementToDecEt>
 80012b2:	4603      	mov	r3, r0
				addBinary(temp[1], temp[0])) / ACCEL_SENSITIVITY;
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f955 	bl	8000564 <__aeabi_i2d>
 80012ba:	a33a      	add	r3, pc, #232	; (adr r3, 80013a4 <_ZN9ICM_2094811updateAccelEv+0x12c>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff fae4 	bl	800088c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	a337      	add	r3, pc, #220	; (adr r3, 80013ac <_ZN9ICM_2094811updateAccelEv+0x134>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f9b1 	bl	8000638 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fca3 	bl	8000c28 <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
		accelReading.x = twoComplementToDec(
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	665a      	str	r2, [r3, #100]	; 0x64
		accelReading.y = twoComplementToDec(
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	7aba      	ldrb	r2, [r7, #10]
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f9ac 	bl	800164c <_ZN9ICM_209489addBinaryEhh>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f9bd 	bl	8001678 <_ZN9ICM_2094818twoComplementToDecEt>
 80012fe:	4603      	mov	r3, r0
				addBinary(temp[3], temp[2])) / ACCEL_SENSITIVITY;
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f92f 	bl	8000564 <__aeabi_i2d>
 8001306:	a327      	add	r3, pc, #156	; (adr r3, 80013a4 <_ZN9ICM_2094811updateAccelEv+0x12c>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fabe 	bl	800088c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	a324      	add	r3, pc, #144	; (adr r3, 80013ac <_ZN9ICM_2094811updateAccelEv+0x134>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f98b 	bl	8000638 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc7d 	bl	8000c28 <__aeabi_d2f>
 800132e:	4602      	mov	r2, r0
		accelReading.y = twoComplementToDec(
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	669a      	str	r2, [r3, #104]	; 0x68
		accelReading.z = twoComplementToDec(
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	7b3a      	ldrb	r2, [r7, #12]
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f986 	bl	800164c <_ZN9ICM_209489addBinaryEhh>
 8001340:	4603      	mov	r3, r0
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f997 	bl	8001678 <_ZN9ICM_2094818twoComplementToDecEt>
 800134a:	4603      	mov	r3, r0
				addBinary(temp[5], temp[4])) / ACCEL_SENSITIVITY;
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f909 	bl	8000564 <__aeabi_i2d>
 8001352:	a314      	add	r3, pc, #80	; (adr r3, 80013a4 <_ZN9ICM_2094811updateAccelEv+0x12c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fa98 	bl	800088c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	a311      	add	r3, pc, #68	; (adr r3, 80013ac <_ZN9ICM_2094811updateAccelEv+0x134>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff f965 	bl	8000638 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc57 	bl	8000c28 <__aeabi_d2f>
 800137a:	4602      	mov	r2, r0
		accelReading.z = twoComplementToDec(
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001380:	e008      	b.n	8001394 <_ZN9ICM_2094811updateAccelEv+0x11c>
	} else {
		accelReading.x = -999;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <_ZN9ICM_2094811updateAccelEv+0x128>)
 8001386:	665a      	str	r2, [r3, #100]	; 0x64
		accelReading.y = -999;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_ZN9ICM_2094811updateAccelEv+0x128>)
 800138c:	669a      	str	r2, [r3, #104]	; 0x68
		accelReading.z = -999;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <_ZN9ICM_2094811updateAccelEv+0x128>)
 8001392:	66da      	str	r2, [r3, #108]	; 0x6c
	}

	return ret;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	c479c000 	.word	0xc479c000
 80013a4:	147ae148 	.word	0x147ae148
 80013a8:	409a4eae 	.word	0x409a4eae
 80013ac:	9999999a 	.word	0x9999999a
 80013b0:	40239999 	.word	0x40239999

080013b4 <_ZN9ICM_209489updateMagEv>:

HAL_StatusTypeDef ICM_20948::updateMag(){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_ZN9ICM_209488getGyroXEv>:
	return atan2(getAccelY(), getAccelZ()) * 360 / (2 * M_PI);
}

//Angular velocity in each axis
float ICM_20948::getGyroX()
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return gyroReading.x;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	ee07 3a90 	vmov	s15, r3
}
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_ZN9ICM_209488getGyroYEv>:

float ICM_20948::getGyroY() {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return gyroReading.y;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	ee07 3a90 	vmov	s15, r3
}
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_ZN9ICM_209488getGyroZEv>:

float ICM_20948::getGyroZ() {
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	return gyroReading.z;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	ee07 3a90 	vmov	s15, r3
}
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_ZN9ICM_209489getAccelXEv>:

//Acceleration in each axis
float ICM_20948::getAccelX() {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	return accelReading.x;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001430:	ee07 3a90 	vmov	s15, r3
}
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_ZN9ICM_209489getAccelYEv>:

float ICM_20948::getAccelY() {
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return accelReading.y;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800144e:	ee07 3a90 	vmov	s15, r3
}
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_ZN9ICM_209489getAccelZEv>:

float ICM_20948::getAccelZ() {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	return accelReading.z;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800146c:	ee07 3a90 	vmov	s15, r3
}
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZN9ICM_2094811writeICMRegEiiii>:
		return 0;
	}
}

HAL_StatusTypeDef ICM_20948::writeICMReg(int regAddress, int data,
		int dataAmount, int userbank) {
 800147e:	b590      	push	{r4, r7, lr}
 8001480:	b08b      	sub	sp, #44	; 0x2c
 8001482:	af04      	add	r7, sp, #16
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]

	selUserBank(userbank);
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4619      	mov	r1, r3
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 f868 	bl	8001568 <_ZN9ICM_2094811selUserBankEh>

	HAL_StatusTypeDef ret;
	uint8_t temp = data;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	75bb      	strb	r3, [r7, #22]
	ret = HAL_I2C_Mem_Write(&i2c, address, regAddress, 1, &temp, dataAmount,
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1d18      	adds	r0, r3, #4
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b299      	uxth	r1, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f04f 34ff 	mov.w	r4, #4294967295
 80014b4:	9402      	str	r4, [sp, #8]
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f107 0316 	add.w	r3, r7, #22
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	f003 fbc2 	bl	8004c48 <HAL_I2C_Mem_Write>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);
	return ret;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}

080014d2 <_ZN9ICM_2094810readICMRegEiPhii>:

HAL_StatusTypeDef ICM_20948::readICMReg(int regAddress, uint8_t *buf,
		int dataAmount, int userbank) {
 80014d2:	b590      	push	{r4, r7, lr}
 80014d4:	b08b      	sub	sp, #44	; 0x2c
 80014d6:	af04      	add	r7, sp, #16
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	603b      	str	r3, [r7, #0]
	selUserBank(userbank);
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f83e 	bl	8001568 <_ZN9ICM_2094811selUserBankEh>
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(&i2c, address, regAddress, 1, buf, dataAmount,
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1d18      	adds	r0, r3, #4
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b299      	uxth	r1, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f04f 34ff 	mov.w	r4, #4294967295
 8001502:	9402      	str	r4, [sp, #8]
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	f003 fc96 	bl	8004e3c <HAL_I2C_Mem_Read>
 8001510:	4603      	mov	r3, r0
 8001512:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);
	return ret;
 8001514:	7dfb      	ldrb	r3, [r7, #23]
}
 8001516:	4618      	mov	r0, r3
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}

0800151e <_ZN9ICM_2094810readICMRegEiii>:

uint8_t ICM_20948::readICMReg(int regAddress, int dataAmount, int userbank) {
 800151e:	b590      	push	{r4, r7, lr}
 8001520:	b08b      	sub	sp, #44	; 0x2c
 8001522:	af04      	add	r7, sp, #16
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	603b      	str	r3, [r7, #0]
	selUserBank(userbank);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f818 	bl	8001568 <_ZN9ICM_2094811selUserBankEh>
	uint8_t buf[1];
	HAL_I2C_Mem_Read(&i2c, address, regAddress, 1, buf, dataAmount,
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1d18      	adds	r0, r3, #4
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b299      	uxth	r1, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	b29b      	uxth	r3, r3
 800154a:	f04f 34ff 	mov.w	r4, #4294967295
 800154e:	9402      	str	r4, [sp, #8]
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	f003 fc6f 	bl	8004e3c <HAL_I2C_Mem_Read>
	HAL_MAX_DELAY);
	return buf[0];
 800155e:	7d3b      	ldrb	r3, [r7, #20]
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}

08001568 <_ZN9ICM_2094811selUserBankEh>:

HAL_StatusTypeDef ICM_20948::selUserBank(uint8_t userbank){
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af04      	add	r7, sp, #16
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t temp = userbank << 4;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	b2db      	uxtb	r3, r3
 800157a:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&i2c, address, REG_BANK_SEL, 1, &temp, 1,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1d18      	adds	r0, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b299      	uxth	r1, r3
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030e 	add.w	r3, r7, #14
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	227f      	movs	r2, #127	; 0x7f
 800159a:	f003 fb55 	bl	8004c48 <HAL_I2C_Mem_Write>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	return ret;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_ZN9ICM_2094810readMagRegEh>:

HAL_StatusTypeDef ICM_20948::readMagReg(uint8_t reg){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
	writeICMReg(I2C_SLV0_ADDR, 0x80|MagAddress, 1, 3);
 80015b8:	2303      	movs	r3, #3
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	228c      	movs	r2, #140	; 0x8c
 80015c0:	2103      	movs	r1, #3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff5b 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	writeICMReg(I2C_SLV0_REG, reg, 1, 3);
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	2303      	movs	r3, #3
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	2104      	movs	r1, #4
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff53 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	writeICMReg(I2C_SLV0_CTRL, 0x80|8, 1, 3);
 80015d8:	2303      	movs	r3, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	2288      	movs	r2, #136	; 0x88
 80015e0:	2105      	movs	r1, #5
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff4b 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>

	return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZN9ICM_2094811writeMagRegEhh>:

HAL_StatusTypeDef ICM_20948::writeMagReg(uint8_t reg, uint8_t data){
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af02      	add	r7, sp, #8
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	4613      	mov	r3, r2
 8001600:	70bb      	strb	r3, [r7, #2]
	writeICMReg(I2C_SLV0_ADDR, 0x80 | MagAddress, 1, 3);
 8001602:	2303      	movs	r3, #3
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	228c      	movs	r2, #140	; 0x8c
 800160a:	2103      	movs	r1, #3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff36 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	writeICMReg(I2C_SLV0_REG, reg, 1, 3);
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	2303      	movs	r3, #3
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	2104      	movs	r1, #4
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff2e 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	writeICMReg(I2C_SLV0_DO, data, 1, 3);
 8001622:	78ba      	ldrb	r2, [r7, #2]
 8001624:	2303      	movs	r3, #3
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	2106      	movs	r1, #6
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff26 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>
	writeICMReg(I2C_SLV0_CTRL, 0x80 | 0x01, 1, 3);
 8001632:	2303      	movs	r3, #3
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	2281      	movs	r2, #129	; 0x81
 800163a:	2105      	movs	r1, #5
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff1e 	bl	800147e <_ZN9ICM_2094811writeICMRegEiiii>

	return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN9ICM_209489addBinaryEhh>:



uint16_t ICM_20948::addBinary(uint8_t lowByte, uint8_t highByte) {
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	4613      	mov	r3, r2
 800165a:	70bb      	strb	r3, [r7, #2]
	return ((highByte << 8) | lowByte);
 800165c:	78bb      	ldrb	r3, [r7, #2]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29b      	uxth	r3, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_ZN9ICM_2094818twoComplementToDecEt>:

int16_t ICM_20948::twoComplementToDec(uint16_t val) {
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
	if ((val & 0x8000) == 0) {
 8001684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db02      	blt.n	8001692 <_ZN9ICM_2094818twoComplementToDecEt+0x1a>
		return val;
 800168c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001690:	e006      	b.n	80016a0 <_ZN9ICM_2094818twoComplementToDecEt+0x28>
	} else {
		val = ~(val) + 1;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	425b      	negs	r3, r3
 8001696:	807b      	strh	r3, [r7, #2]
		return -val;
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	425b      	negs	r3, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	b21b      	sxth	r3, r3
	}
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80016d0 <FusionRadiansToDegrees+0x24>
 80016be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	42652ee0 	.word	0x42652ee0

080016d4 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80016e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d802      	bhi.n	80016f6 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 80016f0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001728 <FusionAsin+0x54>
 80016f4:	e012      	b.n	800171c <FusionAsin+0x48>
    }
    if (value >= 1.0f) {
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	db02      	blt.n	800170e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8001708:	eddf 7a08 	vldr	s15, [pc, #32]	; 800172c <FusionAsin+0x58>
 800170c:	e006      	b.n	800171c <FusionAsin+0x48>
    }
    return asinf(value);
 800170e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001712:	f007 f83b 	bl	800878c <asinf>
 8001716:	eef0 7a40 	vmov.f32	s15, s0
 800171a:	bf00      	nop
}
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	bfc90fdb 	.word	0xbfc90fdb
 800172c:	3fc90fdb 	.word	0x3fc90fdb

08001730 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0
 8001736:	eeb0 6a40 	vmov.f32	s12, s0
 800173a:	eef0 6a60 	vmov.f32	s13, s1
 800173e:	eeb0 7a41 	vmov.f32	s14, s2
 8001742:	eef0 7a61 	vmov.f32	s15, s3
 8001746:	ed87 6a04 	vstr	s12, [r7, #16]
 800174a:	edc7 6a05 	vstr	s13, [r7, #20]
 800174e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001752:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001756:	ed97 7a06 	vldr	s14, [r7, #24]
 800175a:	edd7 7a06 	vldr	s15, [r7, #24]
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001762:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800176e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001772:	edd7 7a05 	vldr	s15, [r7, #20]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 6a06 	vldr	s13, [r7, #24]
 800177e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001786:	ee77 6a27 	vadd.f32	s13, s14, s15
 800178a:	ed97 7a05 	vldr	s14, [r7, #20]
 800178e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	eef0 0a67 	vmov.f32	s1, s15
 80017a2:	eeb0 0a66 	vmov.f32	s0, s13
 80017a6:	f007 f81d 	bl	80087e4 <atan2f>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	f7ff ff7b 	bl	80016ac <FusionRadiansToDegrees>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
    }};
 80017ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 80017be:	ed97 7a04 	vldr	s14, [r7, #16]
 80017c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80017ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80017d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	f7ff ff77 	bl	80016d4 <FusionAsin>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	f7ff ff5d 	bl	80016ac <FusionRadiansToDegrees>
 80017f2:	eef0 7a40 	vmov.f32	s15, s0
    }};
 80017f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80017fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80017fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001806:	edd7 6a05 	vldr	s13, [r7, #20]
 800180a:	edd7 7a06 	vldr	s15, [r7, #24]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001816:	ed97 7a07 	vldr	s14, [r7, #28]
 800181a:	edd7 7a07 	vldr	s15, [r7, #28]
 800181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001822:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182a:	eef0 0a67 	vmov.f32	s1, s15
 800182e:	eeb0 0a66 	vmov.f32	s0, s13
 8001832:	f006 ffd7 	bl	80087e4 <atan2f>
 8001836:	eef0 7a40 	vmov.f32	s15, s0
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	f7ff ff35 	bl	80016ac <FusionRadiansToDegrees>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
    }};
 8001846:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return euler;
 800184a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800184e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001852:	ca07      	ldmia	r2, {r0, r1, r2}
 8001854:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800185a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185e:	ee06 1a90 	vmov	s13, r1
 8001862:	ee07 2a10 	vmov	s14, r2
 8001866:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800186a:	eeb0 0a66 	vmov.f32	s0, s13
 800186e:	eef0 0a47 	vmov.f32	s1, s14
 8001872:	eeb0 1a67 	vmov.f32	s2, s15
 8001876:	3740      	adds	r7, #64	; 0x40
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_Z6UprintPc>:
//	}
//
//	sendToUsb((uint8_t*) "Scan done.\n");
//}

void Uprint(char message[]){
 800187c:	b580      	push	{r7, lr}
 800187e:	b09c      	sub	sp, #112	; 0x70
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	char uart_buf[100];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	f009 f934 	bl	800aaf8 <siprintf>
 8001890:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <_Z6UprintPc+0x30>)
 800189e:	f006 fb76 	bl	8007f8e <HAL_UART_Transmit>
}
 80018a2:	bf00      	nop
 80018a4:	3770      	adds	r7, #112	; 0x70
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000254 	.word	0x20000254

080018b0 <_Z9configRegiii>:
//		ans = 0;
//	}
//	return ans;
}

HAL_StatusTypeDef configReg(int regAddress, int regSize, int data){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08b      	sub	sp, #44	; 0x2c
 80018b4:	af04      	add	r7, sp, #16
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t temp = data;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	75bb      	strb	r3, [r7, #22]
	ret = HAL_I2C_Mem_Write(&hi2c1, addr, regAddress, regSize, &temp, regSize, HAL_MAX_DELAY);
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <_Z9configRegiii+0x48>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b299      	uxth	r1, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	b298      	uxth	r0, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f04f 34ff 	mov.w	r4, #4294967295
 80018d8:	9402      	str	r4, [sp, #8]
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	f107 0316 	add.w	r3, r7, #22
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4603      	mov	r3, r0
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <_Z9configRegiii+0x4c>)
 80018e6:	f003 f9af 	bl	8004c48 <HAL_I2C_Mem_Write>
 80018ea:	4603      	mov	r3, r0
 80018ec:	75fb      	strb	r3, [r7, #23]

	return ret;
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000200 	.word	0x20000200

08001900 <_Z9configIMUv>:

void configIMU(){
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;


//	Clock and sleep settings
	ret = configReg(0x06, 1, 0b00000001);
 8001906:	2201      	movs	r2, #1
 8001908:	2101      	movs	r1, #1
 800190a:	2006      	movs	r0, #6
 800190c:	f7ff ffd0 	bl	80018b0 <_Z9configRegiii>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
//	Ensure that accelerometer and gyroscope are both enabled
	ret = configReg(0x07, 1, 0b00000000);
 8001914:	2200      	movs	r2, #0
 8001916:	2101      	movs	r1, #1
 8001918:	2007      	movs	r0, #7
 800191a:	f7ff ffc9 	bl	80018b0 <_Z9configRegiii>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]

//	Mag Config
//	ret = configReg(0x31, 1, 0b00000010);


	if (ret == HAL_OK) {
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <_Z9configIMUv+0x30>
		Uprint("write worked\r\n");
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <_Z9configIMUv+0x8c>)
 800192a:	f7ff ffa7 	bl	800187c <_Z6UprintPc>
 800192e:	e002      	b.n	8001936 <_Z9configIMUv+0x36>
	} else {
		Uprint("write failed\r\n");
 8001930:	4817      	ldr	r0, [pc, #92]	; (8001990 <_Z9configIMUv+0x90>)
 8001932:	f7ff ffa3 	bl	800187c <_Z6UprintPc>
	}

	uint8_t buf[1];
	char str[10];

	ret = HAL_I2C_Mem_Read(&hi2c1, addr, 0x01, 1, buf, 1, HAL_MAX_DELAY);
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <_Z9configIMUv+0x94>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b299      	uxth	r1, r3
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	2301      	movs	r3, #1
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2301      	movs	r3, #1
 800194e:	2201      	movs	r2, #1
 8001950:	4811      	ldr	r0, [pc, #68]	; (8001998 <_Z9configIMUv+0x98>)
 8001952:	f003 fa73 	bl	8004e3c <HAL_I2C_Mem_Read>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
	if (ret == HAL_OK) {
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10e      	bne.n	800197e <_Z9configIMUv+0x7e>
			Uprint("read worked\r\n");
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <_Z9configIMUv+0x9c>)
 8001962:	f7ff ff8b 	bl	800187c <_Z6UprintPc>
			sprintf(str, "%d\r\n", buf[0]);
 8001966:	7b3b      	ldrb	r3, [r7, #12]
 8001968:	461a      	mov	r2, r3
 800196a:	463b      	mov	r3, r7
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <_Z9configIMUv+0xa0>)
 800196e:	4618      	mov	r0, r3
 8001970:	f009 f8c2 	bl	800aaf8 <siprintf>
			Uprint(str);
 8001974:	463b      	mov	r3, r7
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <_Z6UprintPc>
		} else {
			Uprint("read failed\r\n");
		}

}
 800197c:	e002      	b.n	8001984 <_Z9configIMUv+0x84>
			Uprint("read failed\r\n");
 800197e:	4809      	ldr	r0, [pc, #36]	; (80019a4 <_Z9configIMUv+0xa4>)
 8001980:	f7ff ff7c 	bl	800187c <_Z6UprintPc>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	0800e6d0 	.word	0x0800e6d0
 8001990:	0800e6e0 	.word	0x0800e6e0
 8001994:	20000000 	.word	0x20000000
 8001998:	20000200 	.word	0x20000200
 800199c:	0800e6f0 	.word	0x0800e6f0
 80019a0:	0800e700 	.word	0x0800e700
 80019a4:	0800e708 	.word	0x0800e708

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ac:	b0f6      	sub	sp, #472	; 0x1d8
 80019ae:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b0:	f002 fc80 	bl	80042b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b4:	f000 f922 	bl	8001bfc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b8:	f000 f9f8 	bl	8001dac <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80019bc:	f000 f9c8 	bl	8001d50 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80019c0:	f000 f992 	bl	8001ce8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 100);
 80019c4:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <main+0x240>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b299      	uxth	r1, r3
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	2201      	movs	r2, #1
 80019ce:	4887      	ldr	r0, [pc, #540]	; (8001bec <main+0x244>)
 80019d0:	f003 fc5a 	bl	8005288 <HAL_I2C_IsDeviceReady>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
  if(ret == HAL_OK){
 80019da:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <main+0x42>
	  Uprint("The device is ready\r\n");
 80019e2:	4883      	ldr	r0, [pc, #524]	; (8001bf0 <main+0x248>)
 80019e4:	f7ff ff4a 	bl	800187c <_Z6UprintPc>
 80019e8:	e002      	b.n	80019f0 <main+0x48>
  }
  else {
	  Uprint("The device is not ready. Check cables\r\n");
 80019ea:	4882      	ldr	r0, [pc, #520]	; (8001bf4 <main+0x24c>)
 80019ec:	f7ff ff46 	bl	800187c <_Z6UprintPc>
  }

  configIMU();
 80019f0:	f7ff ff86 	bl	8001900 <_Z9configIMUv>
//	HAL_StatusTypeDef ret;
//	uint8_t buf[12];
//	int16_t val;
//	float temp_c;

  	ICM_20948 IMU(hi2c1, addr);
 80019f4:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <main+0x240>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4c7c      	ldr	r4, [pc, #496]	; (8001bec <main+0x244>)
 80019fa:	f107 05f4 	add.w	r5, r7, #244	; 0xf4
 80019fe:	9312      	str	r3, [sp, #72]	; 0x48
 8001a00:	4668      	mov	r0, sp
 8001a02:	f104 030c 	add.w	r3, r4, #12
 8001a06:	2248      	movs	r2, #72	; 0x48
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f008 f9e5 	bl	8009dd8 <memcpy>
 8001a0e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a12:	4628      	mov	r0, r5
 8001a14:	f7ff fb10 	bl	8001038 <_ZN9ICM_20948C1E17I2C_HandleTypeDefh>
	FusionAhrs ahrs;
	FusionAhrsInitialise(&ahrs);
 8001a18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 f8df 	bl	8002be0 <FusionAhrsInitialise>
//		sprintf(str, "ACCEL X:%f Y:%f Z:%f\r\n", IMU.getAccelX(), IMU.getAccelY(), IMU.getAccelZ());
//		Uprint(str);
//		sprintf(str, "GYRO X:%d Y:%d Z:%d\r\n", IMU.getGyroX(), IMU.getGyroY(), IMU.getGyroZ());
//		Uprint(str);

		IMU.updateIMU();
 8001a22:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fb92 	bl	8001150 <_ZN9ICM_209489updateIMUEv>
		const FusionVector gyroscope = { IMU.getGyroX(), IMU.getGyroY(), IMU.getGyroZ() }; // replace this with actual gyroscope data in degrees/s
 8001a2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fcca 	bl	80013ca <_ZN9ICM_209488getGyroXEv>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
 8001a3a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a42:	edc3 7a00 	vstr	s15, [r3]
 8001a46:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fccc 	bl	80013e8 <_ZN9ICM_209488getGyroYEv>
 8001a50:	eef0 7a40 	vmov.f32	s15, s0
 8001a54:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a5c:	edc3 7a01 	vstr	s15, [r3, #4]
 8001a60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fcce 	bl	8001406 <_ZN9ICM_209488getGyroZEv>
 8001a6a:	eef0 7a40 	vmov.f32	s15, s0
 8001a6e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a76:	edc3 7a02 	vstr	s15, [r3, #8]
		const FusionVector accelerometer = { IMU.getAccelX(), IMU.getAccelY(), IMU.getAccelZ()}; // replace this with actual accelerometer data in g
 8001a7a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fcd0 	bl	8001424 <_ZN9ICM_209489getAccelXEv>
 8001a84:	eef0 7a40 	vmov.f32	s15, s0
 8001a88:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a90:	edc3 7a00 	vstr	s15, [r3]
 8001a94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fcd2 	bl	8001442 <_ZN9ICM_209489getAccelYEv>
 8001a9e:	eef0 7a40 	vmov.f32	s15, s0
 8001aa2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001aa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001aaa:	edc3 7a01 	vstr	s15, [r3, #4]
 8001aae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fcd4 	bl	8001460 <_ZN9ICM_209489getAccelZEv>
 8001ab8:	eef0 7a40 	vmov.f32	s15, s0
 8001abc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001ac0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ac4:	edc3 7a02 	vstr	s15, [r3, #8]
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer,
 8001ac8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001acc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ad0:	ed93 5a00 	vldr	s10, [r3]
 8001ad4:	edd3 5a01 	vldr	s11, [r3, #4]
 8001ad8:	ed93 6a02 	vldr	s12, [r3, #8]
 8001adc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ae4:	edd3 6a00 	vldr	s13, [r3]
 8001ae8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aec:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001af4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8001af8:	eef0 1a45 	vmov.f32	s3, s10
 8001afc:	eeb0 2a65 	vmov.f32	s4, s11
 8001b00:	eef0 2a46 	vmov.f32	s5, s12
 8001b04:	eeb0 0a66 	vmov.f32	s0, s13
 8001b08:	eef0 0a47 	vmov.f32	s1, s14
 8001b0c:	eeb0 1a67 	vmov.f32	s2, s15
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fe95 	bl	8003840 <FusionAhrsUpdateNoMagnetometer>
						SAMPLE_PERIOD);
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001b16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fef2 	bl	8003904 <FusionAhrsGetQuaternion>
 8001b20:	eeb0 6a40 	vmov.f32	s12, s0
 8001b24:	eef0 6a60 	vmov.f32	s13, s1
 8001b28:	eeb0 7a41 	vmov.f32	s14, s2
 8001b2c:	eef0 7a61 	vmov.f32	s15, s3
 8001b30:	ed87 6a5d 	vstr	s12, [r7, #372]	; 0x174
 8001b34:	edc7 6a5e 	vstr	s13, [r7, #376]	; 0x178
 8001b38:	ed87 7a5f 	vstr	s14, [r7, #380]	; 0x17c
 8001b3c:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
 8001b40:	ed97 6a5d 	vldr	s12, [r7, #372]	; 0x174
 8001b44:	edd7 6a5e 	vldr	s13, [r7, #376]	; 0x178
 8001b48:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8001b4c:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 8001b50:	eeb0 0a46 	vmov.f32	s0, s12
 8001b54:	eef0 0a66 	vmov.f32	s1, s13
 8001b58:	eeb0 1a47 	vmov.f32	s2, s14
 8001b5c:	eef0 1a67 	vmov.f32	s3, s15
 8001b60:	f7ff fde6 	bl	8001730 <FusionQuaternionToEuler>
 8001b64:	eef0 6a40 	vmov.f32	s13, s0
 8001b68:	eeb0 7a60 	vmov.f32	s14, s1
 8001b6c:	eef0 7a41 	vmov.f32	s15, s2
 8001b70:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b78:	edc3 6a00 	vstr	s13, [r3]
 8001b7c:	ed83 7a01 	vstr	s14, [r3, #4]
 8001b80:	edc3 7a02 	vstr	s15, [r3, #8]
		sprintf(str,"Roll %0.1f, Pitch %0.1f, Yaw %0.1f\r\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
 8001b84:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcfa 	bl	8000588 <__aeabi_f2d>
 8001b94:	4680      	mov	r8, r0
 8001b96:	4689      	mov	r9, r1
 8001b98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcf0 	bl	8000588 <__aeabi_f2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	1d38      	adds	r0, r7, #4
 8001bc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bc6:	e9cd 4500 	strd	r4, r5, [sp]
 8001bca:	4642      	mov	r2, r8
 8001bcc:	464b      	mov	r3, r9
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <main+0x250>)
 8001bd0:	f008 ff92 	bl	800aaf8 <siprintf>
//		sprintf(str, "%f\r\n", IMU.getMagX());
		Uprint(str);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fe50 	bl	800187c <_Z6UprintPc>
		HAL_Delay(1000);
 8001bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be0:	f002 fbda 	bl	8004398 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	}
 8001be4:	e71d      	b.n	8001a22 <main+0x7a>
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000200 	.word	0x20000200
 8001bf0:	0800e718 	.word	0x0800e718
 8001bf4:	0800e730 	.word	0x0800e730
 8001bf8:	0800e758 	.word	0x0800e758

08001bfc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2234      	movs	r2, #52	; 0x34
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f008 f8f2 	bl	8009df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <_Z18SystemClock_Configv+0xe4>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <_Z18SystemClock_Configv+0xe4>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <_Z18SystemClock_Configv+0xe4>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <_Z18SystemClock_Configv+0xe8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <_Z18SystemClock_Configv+0xe8>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <_Z18SystemClock_Configv+0xe8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c66:	2302      	movs	r3, #2
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c74:	2348      	movs	r3, #72	; 0x48
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 fe95 	bl	80079b8 <HAL_RCC_OscConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001c9e:	f000 f8f3 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 fb30 	bl	8007324 <HAL_RCC_ClockConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8001cd4:	f000 f8d8 	bl	8001e88 <Error_Handler>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3750      	adds	r7, #80	; 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <_ZL12MX_I2C1_Initv+0x60>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <_ZL12MX_I2C1_Initv+0x64>)
 8001cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d26:	f002 fe4b 	bl	80049c0 <HAL_I2C_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001d3a:	f000 f8a5 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000200 	.word	0x20000200
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	000186a0 	.word	0x000186a0

08001d50 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d88:	f006 f8b4 	bl	8007ef4 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001d9c:	f000 f874 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000254 	.word	0x20000254
 8001da8:	40004400 	.word	0x40004400

08001dac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a2c      	ldr	r2, [pc, #176]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_ZL12MX_GPIO_Initv+0xd0>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2120      	movs	r1, #32
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <_ZL12MX_GPIO_Initv+0xd4>)
 8001e38:	f002 fda8 	bl	800498c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	480c      	ldr	r0, [pc, #48]	; (8001e84 <_ZL12MX_GPIO_Initv+0xd8>)
 8001e54:	f002 fc06 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <_ZL12MX_GPIO_Initv+0xd4>)
 8001e70:	f002 fbf8 	bl	8004664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020800 	.word	0x40020800

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1) {
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ed2:	2007      	movs	r0, #7
 8001ed4:	f002 fb54 	bl	8004580 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_I2C_MspInit+0x94>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d134      	bne.n	8001f70 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4810      	ldr	r0, [pc, #64]	; (8001f80 <HAL_I2C_MspInit+0x9c>)
 8001f40:	f002 fb90 	bl	8004664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_I2C_MspInit+0x98>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	201f      	movs	r0, #31
 8001f66:	f002 fb16 	bl	8004596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f6a:	201f      	movs	r0, #31
 8001f6c:	f002 fb2f 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_UART_MspInit+0x84>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12b      	bne.n	8001ffe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_UART_MspInit+0x88>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <HAL_UART_MspInit+0x88>)
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_UART_MspInit+0x88>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_UART_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_UART_MspInit+0x88>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_UART_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fde:	230c      	movs	r3, #12
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fee:	2307      	movs	r3, #7
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_UART_MspInit+0x8c>)
 8001ffa:	f002 fb33 	bl	8004664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40004400 	.word	0x40004400
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x4>

0800201a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002060:	f002 f97a 	bl	8004358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <I2C1_EV_IRQHandler+0x10>)
 800206e:	f003 fa39 	bl	80054e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000200 	.word	0x20000200

0800207c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8002096:	f007 fe75 	bl	8009d84 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit(int status) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
	while (1) {
 80020be:	e7fe      	b.n	80020be <_exit+0x12>

080020c0 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
		*ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
	}

	return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <_write+0x26>
		__io_putchar(*ptr++);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf1      	blt.n	800210c <_write+0x12>
	}
	return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:

int _close(int file) {
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:

int _fstat(int file, struct stat *st) {
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
	return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file) {
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f007 fdda 	bl	8009d84 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20020000 	.word	0x20020000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20000298 	.word	0x20000298
 8002204:	200002b0 	.word	0x200002b0

08002208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800222c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002248:	4c0b      	ldr	r4, [pc, #44]	; (8002278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002256:	f7ff ffd7 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225a:	f007 fd99 	bl	8009d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225e:	f7ff fba3 	bl	80019a8 <main>
  bx  lr    
 8002262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002270:	0800f084 	.word	0x0800f084
  ldr r2, =_sbss
 8002274:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002278:	200002b0 	.word	0x200002b0

0800227c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC_IRQHandler>
	...

08002280 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800228a:	edd7 7a01 	vldr	s15, [r7, #4]
 800228e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80022a4 <FusionDegreesToRadians+0x24>
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002296:	eeb0 0a67 	vmov.f32	s0, s15
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	3c8efa35 	.word	0x3c8efa35

080022a8 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	105a      	asrs	r2, r3, #1
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <FusionFastInverseSqrt+0x54>)
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80022c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80022c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002300 <FusionFastInverseSqrt+0x58>
 80022cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002304 <FusionFastInverseSqrt+0x5c>
 80022e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022e8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80022ec:	eeb0 0a67 	vmov.f32	s0, s15
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	5f1f1412 	.word	0x5f1f1412
 8002300:	3f36d312 	.word	0x3f36d312
 8002304:	3fd851ff 	.word	0x3fd851ff

08002308 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	eef0 6a40 	vmov.f32	s13, s0
 8002312:	eeb0 7a60 	vmov.f32	s14, s1
 8002316:	eef0 7a41 	vmov.f32	s15, s2
 800231a:	edc7 6a01 	vstr	s13, [r7, #4]
 800231e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002322:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8002326:	edd7 7a01 	vldr	s15, [r7, #4]
 800232a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	d10f      	bne.n	8002354 <FusionVectorIsZero+0x4c>
 8002334:	edd7 7a02 	vldr	s15, [r7, #8]
 8002338:	eef5 7a40 	vcmp.f32	s15, #0.0
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	d108      	bne.n	8002354 <FusionVectorIsZero+0x4c>
 8002342:	edd7 7a03 	vldr	s15, [r7, #12]
 8002346:	eef5 7a40 	vcmp.f32	s15, #0.0
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	d101      	bne.n	8002354 <FusionVectorIsZero+0x4c>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <FusionVectorIsZero+0x4e>
 8002354:	2300      	movs	r3, #0
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8002368:	b480      	push	{r7}
 800236a:	b091      	sub	sp, #68	; 0x44
 800236c:	af00      	add	r7, sp, #0
 800236e:	eeb0 5a40 	vmov.f32	s10, s0
 8002372:	eef0 5a60 	vmov.f32	s11, s1
 8002376:	eeb0 6a41 	vmov.f32	s12, s2
 800237a:	eef0 6a61 	vmov.f32	s13, s3
 800237e:	eeb0 7a42 	vmov.f32	s14, s4
 8002382:	eef0 7a62 	vmov.f32	s15, s5
 8002386:	ed87 5a07 	vstr	s10, [r7, #28]
 800238a:	edc7 5a08 	vstr	s11, [r7, #32]
 800238e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002392:	edc7 6a04 	vstr	s13, [r7, #16]
 8002396:	ed87 7a05 	vstr	s14, [r7, #20]
 800239a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800239e:	ed97 7a07 	vldr	s14, [r7, #28]
 80023a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80023aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80023ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80023b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80023ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80023be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80023ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80023ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	ee06 1a90 	vmov	s13, r1
 80023e6:	ee07 2a10 	vmov	s14, r2
 80023ea:	ee07 3a90 	vmov	s15, r3
}
 80023ee:	eeb0 0a66 	vmov.f32	s0, s13
 80023f2:	eef0 0a47 	vmov.f32	s1, s14
 80023f6:	eeb0 1a67 	vmov.f32	s2, s15
 80023fa:	3744      	adds	r7, #68	; 0x44
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	eef0 6a40 	vmov.f32	s13, s0
 800240e:	eeb0 7a60 	vmov.f32	s14, s1
 8002412:	eef0 7a41 	vmov.f32	s15, s2
 8002416:	edc7 6a01 	vstr	s13, [r7, #4]
 800241a:	ed87 7a02 	vstr	s14, [r7, #8]
 800241e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8002422:	ed97 7a01 	vldr	s14, [r7, #4]
 8002426:	edd7 7a02 	vldr	s15, [r7, #8]
 800242a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002436:	eeb0 0a67 	vmov.f32	s0, s15
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002444:	b480      	push	{r7}
 8002446:	b08f      	sub	sp, #60	; 0x3c
 8002448:	af00      	add	r7, sp, #0
 800244a:	eef0 6a40 	vmov.f32	s13, s0
 800244e:	eeb0 7a60 	vmov.f32	s14, s1
 8002452:	eef0 7a41 	vmov.f32	s15, s2
 8002456:	edc7 1a04 	vstr	s3, [r7, #16]
 800245a:	edc7 6a05 	vstr	s13, [r7, #20]
 800245e:	ed87 7a06 	vstr	s14, [r7, #24]
 8002462:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 8002466:	ed97 7a05 	vldr	s14, [r7, #20]
 800246a:	edd7 7a04 	vldr	s15, [r7, #16]
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002472:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8002476:	ed97 7a06 	vldr	s14, [r7, #24]
 800247a:	edd7 7a04 	vldr	s15, [r7, #16]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002482:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8002486:	ed97 7a07 	vldr	s14, [r7, #28]
 800248a:	edd7 7a04 	vldr	s15, [r7, #16]
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002492:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 8002496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249a:	f107 0220 	add.w	r2, r7, #32
 800249e:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	ee06 1a90 	vmov	s13, r1
 80024ae:	ee07 2a10 	vmov	s14, r2
 80024b2:	ee07 3a90 	vmov	s15, r3
}
 80024b6:	eeb0 0a66 	vmov.f32	s0, s13
 80024ba:	eef0 0a47 	vmov.f32	s1, s14
 80024be:	eeb0 1a67 	vmov.f32	s2, s15
 80024c2:	373c      	adds	r7, #60	; 0x3c
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80024cc:	b480      	push	{r7}
 80024ce:	b091      	sub	sp, #68	; 0x44
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	eeb0 5a40 	vmov.f32	s10, s0
 80024d6:	eef0 5a60 	vmov.f32	s11, s1
 80024da:	eeb0 6a41 	vmov.f32	s12, s2
 80024de:	eef0 6a61 	vmov.f32	s13, s3
 80024e2:	eeb0 7a42 	vmov.f32	s14, s4
 80024e6:	eef0 7a62 	vmov.f32	s15, s5
 80024ea:	ed87 5a07 	vstr	s10, [r7, #28]
 80024ee:	edc7 5a08 	vstr	s11, [r7, #32]
 80024f2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80024f6:	edc7 6a04 	vstr	s13, [r7, #16]
 80024fa:	ed87 7a05 	vstr	s14, [r7, #20]
 80024fe:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 8002502:	ed97 7a07 	vldr	s14, [r7, #28]
 8002506:	edd7 7a04 	vldr	s15, [r7, #16]
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800250e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8002512:	ed97 7a08 	vldr	s14, [r7, #32]
 8002516:	edd7 7a05 	vldr	s15, [r7, #20]
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800251e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8002522:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002526:	edd7 7a06 	vldr	s15, [r7, #24]
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800252e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8002532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800253a:	ca07      	ldmia	r2, {r0, r1, r2}
 800253c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	ee06 1a90 	vmov	s13, r1
 800254a:	ee07 2a10 	vmov	s14, r2
 800254e:	ee07 3a90 	vmov	s15, r3
}
 8002552:	eeb0 0a66 	vmov.f32	s0, s13
 8002556:	eef0 0a47 	vmov.f32	s1, s14
 800255a:	eeb0 1a67 	vmov.f32	s2, s15
 800255e:	3744      	adds	r7, #68	; 0x44
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002568:	b480      	push	{r7}
 800256a:	b091      	sub	sp, #68	; 0x44
 800256c:	af00      	add	r7, sp, #0
 800256e:	eeb0 5a40 	vmov.f32	s10, s0
 8002572:	eef0 5a60 	vmov.f32	s11, s1
 8002576:	eeb0 6a41 	vmov.f32	s12, s2
 800257a:	eef0 6a61 	vmov.f32	s13, s3
 800257e:	eeb0 7a42 	vmov.f32	s14, s4
 8002582:	eef0 7a62 	vmov.f32	s15, s5
 8002586:	ed87 5a07 	vstr	s10, [r7, #28]
 800258a:	edc7 5a08 	vstr	s11, [r7, #32]
 800258e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002592:	edc7 6a04 	vstr	s13, [r7, #16]
 8002596:	ed87 7a05 	vstr	s14, [r7, #20]
 800259a:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800259e:	ed97 7a08 	vldr	s14, [r7, #32]
 80025a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025aa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80025ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80025ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80025be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80025ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80025d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80025da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80025de:	ed97 7a07 	vldr	s14, [r7, #28]
 80025e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80025ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80025fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80025fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002606:	ca07      	ldmia	r2, {r0, r1, r2}
 8002608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800260c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800260e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	ee06 1a90 	vmov	s13, r1
 8002616:	ee07 2a10 	vmov	s14, r2
 800261a:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800261e:	eeb0 0a66 	vmov.f32	s0, s13
 8002622:	eef0 0a47 	vmov.f32	s1, s14
 8002626:	eeb0 1a67 	vmov.f32	s2, s15
 800262a:	3744      	adds	r7, #68	; 0x44
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	eef0 6a40 	vmov.f32	s13, s0
 800263e:	eeb0 7a60 	vmov.f32	s14, s1
 8002642:	eef0 7a41 	vmov.f32	s15, s2
 8002646:	edc7 6a01 	vstr	s13, [r7, #4]
 800264a:	ed87 7a02 	vstr	s14, [r7, #8]
 800264e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8002652:	ed97 5a01 	vldr	s10, [r7, #4]
 8002656:	edd7 5a02 	vldr	s11, [r7, #8]
 800265a:	ed97 6a03 	vldr	s12, [r7, #12]
 800265e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002662:	ed97 7a02 	vldr	s14, [r7, #8]
 8002666:	edd7 7a03 	vldr	s15, [r7, #12]
 800266a:	eef0 1a45 	vmov.f32	s3, s10
 800266e:	eeb0 2a65 	vmov.f32	s4, s11
 8002672:	eef0 2a46 	vmov.f32	s5, s12
 8002676:	eeb0 0a66 	vmov.f32	s0, s13
 800267a:	eef0 0a47 	vmov.f32	s1, s14
 800267e:	eeb0 1a67 	vmov.f32	s2, s15
 8002682:	f7ff ff23 	bl	80024cc <FusionVectorHadamardProduct>
 8002686:	eef0 6a40 	vmov.f32	s13, s0
 800268a:	eeb0 7a60 	vmov.f32	s14, s1
 800268e:	eef0 7a41 	vmov.f32	s15, s2
 8002692:	edc7 6a05 	vstr	s13, [r7, #20]
 8002696:	ed87 7a06 	vstr	s14, [r7, #24]
 800269a:	edc7 7a07 	vstr	s15, [r7, #28]
 800269e:	edd7 6a05 	vldr	s13, [r7, #20]
 80026a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80026a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80026aa:	eeb0 0a66 	vmov.f32	s0, s13
 80026ae:	eef0 0a47 	vmov.f32	s1, s14
 80026b2:	eeb0 1a67 	vmov.f32	s2, s15
 80026b6:	f7ff fea5 	bl	8002404 <FusionVectorSum>
 80026ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	eef0 6a40 	vmov.f32	s13, s0
 80026d2:	eeb0 7a60 	vmov.f32	s14, s1
 80026d6:	eef0 7a41 	vmov.f32	s15, s2
 80026da:	edc7 6a05 	vstr	s13, [r7, #20]
 80026de:	ed87 7a06 	vstr	s14, [r7, #24]
 80026e2:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80026e6:	edd7 6a05 	vldr	s13, [r7, #20]
 80026ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80026ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80026f2:	eeb0 0a66 	vmov.f32	s0, s13
 80026f6:	eef0 0a47 	vmov.f32	s1, s14
 80026fa:	eeb0 1a67 	vmov.f32	s2, s15
 80026fe:	f7ff ff99 	bl	8002634 <FusionVectorMagnitudeSquared>
 8002702:	eef0 7a40 	vmov.f32	s15, s0
 8002706:	eeb0 0a67 	vmov.f32	s0, s15
 800270a:	f7ff fdcd 	bl	80022a8 <FusionFastInverseSqrt>
 800270e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8002712:	edd7 6a05 	vldr	s13, [r7, #20]
 8002716:	ed97 7a06 	vldr	s14, [r7, #24]
 800271a:	edd7 7a07 	vldr	s15, [r7, #28]
 800271e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8002722:	eeb0 0a66 	vmov.f32	s0, s13
 8002726:	eef0 0a47 	vmov.f32	s1, s14
 800272a:	eeb0 1a67 	vmov.f32	s2, s15
 800272e:	f7ff fe89 	bl	8002444 <FusionVectorMultiplyScalar>
 8002732:	eef0 6a40 	vmov.f32	s13, s0
 8002736:	eeb0 7a60 	vmov.f32	s14, s1
 800273a:	eef0 7a41 	vmov.f32	s15, s2
 800273e:	edc7 6a08 	vstr	s13, [r7, #32]
 8002742:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8002746:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800274a:	6a39      	ldr	r1, [r7, #32]
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	ee06 1a90 	vmov	s13, r1
 8002754:	ee07 2a10 	vmov	s14, r2
 8002758:	ee07 3a90 	vmov	s15, r3
}
 800275c:	eeb0 0a66 	vmov.f32	s0, s13
 8002760:	eef0 0a47 	vmov.f32	s1, s14
 8002764:	eeb0 1a67 	vmov.f32	s2, s15
 8002768:	3730      	adds	r7, #48	; 0x30
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800276e:	b490      	push	{r4, r7}
 8002770:	b094      	sub	sp, #80	; 0x50
 8002772:	af00      	add	r7, sp, #0
 8002774:	eeb0 4a40 	vmov.f32	s8, s0
 8002778:	eef0 4a60 	vmov.f32	s9, s1
 800277c:	eeb0 5a41 	vmov.f32	s10, s2
 8002780:	eef0 5a61 	vmov.f32	s11, s3
 8002784:	eeb0 6a42 	vmov.f32	s12, s4
 8002788:	eef0 6a62 	vmov.f32	s13, s5
 800278c:	eeb0 7a43 	vmov.f32	s14, s6
 8002790:	eef0 7a63 	vmov.f32	s15, s7
 8002794:	ed87 4a08 	vstr	s8, [r7, #32]
 8002798:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800279c:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80027a0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80027a4:	ed87 6a04 	vstr	s12, [r7, #16]
 80027a8:	edc7 6a05 	vstr	s13, [r7, #20]
 80027ac:	ed87 7a06 	vstr	s14, [r7, #24]
 80027b0:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 80027b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80027b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80027c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 80027c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80027d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 80027d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80027e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 80027e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80027e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80027ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80027f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 80027f4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80027f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002802:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002804:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280a:	ee06 0a10 	vmov	s12, r0
 800280e:	ee06 1a90 	vmov	s13, r1
 8002812:	ee07 2a10 	vmov	s14, r2
 8002816:	ee07 3a90 	vmov	s15, r3
}
 800281a:	eeb0 0a46 	vmov.f32	s0, s12
 800281e:	eef0 0a66 	vmov.f32	s1, s13
 8002822:	eeb0 1a47 	vmov.f32	s2, s14
 8002826:	eef0 1a67 	vmov.f32	s3, s15
 800282a:	3750      	adds	r7, #80	; 0x50
 800282c:	46bd      	mov	sp, r7
 800282e:	bc90      	pop	{r4, r7}
 8002830:	4770      	bx	lr

08002832 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8002832:	b490      	push	{r4, r7}
 8002834:	b094      	sub	sp, #80	; 0x50
 8002836:	af00      	add	r7, sp, #0
 8002838:	eeb0 4a40 	vmov.f32	s8, s0
 800283c:	eef0 4a60 	vmov.f32	s9, s1
 8002840:	eeb0 5a41 	vmov.f32	s10, s2
 8002844:	eef0 5a61 	vmov.f32	s11, s3
 8002848:	eeb0 6a42 	vmov.f32	s12, s4
 800284c:	eef0 6a62 	vmov.f32	s13, s5
 8002850:	eeb0 7a43 	vmov.f32	s14, s6
 8002854:	eef0 7a63 	vmov.f32	s15, s7
 8002858:	ed87 4a08 	vstr	s8, [r7, #32]
 800285c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8002860:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8002864:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8002868:	ed87 6a04 	vstr	s12, [r7, #16]
 800286c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002870:	ed87 7a06 	vstr	s14, [r7, #24]
 8002874:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8002878:	ed97 7a08 	vldr	s14, [r7, #32]
 800287c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002884:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002888:	edd7 7a05 	vldr	s15, [r7, #20]
 800288c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002894:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002898:	edd7 7a06 	vldr	s15, [r7, #24]
 800289c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80028a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80028b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 80028b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80028bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80028c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80028d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80028e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80028f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 80028f8:	ed97 7a08 	vldr	s14, [r7, #32]
 80028fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002904:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002908:	edd7 7a07 	vldr	s15, [r7, #28]
 800290c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002914:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002918:	edd7 7a04 	vldr	s15, [r7, #16]
 800291c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002924:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002928:	edd7 7a05 	vldr	s15, [r7, #20]
 800292c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002934:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8002938:	ed97 7a08 	vldr	s14, [r7, #32]
 800293c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002948:	edd7 7a06 	vldr	s15, [r7, #24]
 800294c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002958:	edd7 7a05 	vldr	s15, [r7, #20]
 800295c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002964:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002968:	edd7 7a04 	vldr	s15, [r7, #16]
 800296c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002970:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002974:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 8002978:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800297c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002986:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002988:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800298a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800298c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298e:	ee06 0a10 	vmov	s12, r0
 8002992:	ee06 1a90 	vmov	s13, r1
 8002996:	ee07 2a10 	vmov	s14, r2
 800299a:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800299e:	eeb0 0a46 	vmov.f32	s0, s12
 80029a2:	eef0 0a66 	vmov.f32	s1, s13
 80029a6:	eeb0 1a47 	vmov.f32	s2, s14
 80029aa:	eef0 1a67 	vmov.f32	s3, s15
 80029ae:	3750      	adds	r7, #80	; 0x50
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc90      	pop	{r4, r7}
 80029b4:	4770      	bx	lr

080029b6 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 80029b6:	b490      	push	{r4, r7}
 80029b8:	b094      	sub	sp, #80	; 0x50
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	eef0 4a40 	vmov.f32	s9, s0
 80029c0:	eeb0 5a60 	vmov.f32	s10, s1
 80029c4:	eef0 5a41 	vmov.f32	s11, s2
 80029c8:	eeb0 6a61 	vmov.f32	s12, s3
 80029cc:	eef0 6a42 	vmov.f32	s13, s4
 80029d0:	eeb0 7a62 	vmov.f32	s14, s5
 80029d4:	eef0 7a43 	vmov.f32	s15, s6
 80029d8:	edc7 4a08 	vstr	s9, [r7, #32]
 80029dc:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 80029e0:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 80029e4:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 80029e8:	edc7 6a05 	vstr	s13, [r7, #20]
 80029ec:	ed87 7a06 	vstr	s14, [r7, #24]
 80029f0:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 80029f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029f8:	eeb1 7a67 	vneg.f32	s14, s15
 80029fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a04:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002a08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a14:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a20:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002a24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8002a28:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a34:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002a38:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a50:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002a54:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8002a58:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a64:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a68:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a74:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002a84:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8002a88:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002aa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002ab4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 8002ab8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ac6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ace:	ee06 0a10 	vmov	s12, r0
 8002ad2:	ee06 1a90 	vmov	s13, r1
 8002ad6:	ee07 2a10 	vmov	s14, r2
 8002ada:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 8002ade:	eeb0 0a46 	vmov.f32	s0, s12
 8002ae2:	eef0 0a66 	vmov.f32	s1, s13
 8002ae6:	eeb0 1a47 	vmov.f32	s2, s14
 8002aea:	eef0 1a67 	vmov.f32	s3, s15
 8002aee:	3750      	adds	r7, #80	; 0x50
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc90      	pop	{r4, r7}
 8002af4:	4770      	bx	lr

08002af6 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b093      	sub	sp, #76	; 0x4c
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	eeb0 6a40 	vmov.f32	s12, s0
 8002b00:	eef0 6a60 	vmov.f32	s13, s1
 8002b04:	eeb0 7a41 	vmov.f32	s14, s2
 8002b08:	eef0 7a61 	vmov.f32	s15, s3
 8002b0c:	ed87 6a04 	vstr	s12, [r7, #16]
 8002b10:	edc7 6a05 	vstr	s13, [r7, #20]
 8002b14:	ed87 7a06 	vstr	s14, [r7, #24]
 8002b18:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002b1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b28:	edd7 6a05 	vldr	s13, [r7, #20]
 8002b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b38:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5c:	f7ff fba4 	bl	80022a8 <FusionFastInverseSqrt>
 8002b60:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 8002b64:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002b70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8002b74:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002b80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8002b84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002b90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8002b94:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002ba0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8002ba4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bba:	ee06 0a10 	vmov	s12, r0
 8002bbe:	ee06 1a90 	vmov	s13, r1
 8002bc2:	ee07 2a10 	vmov	s14, r2
 8002bc6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8002bca:	eeb0 0a46 	vmov.f32	s0, s12
 8002bce:	eef0 0a66 	vmov.f32	s1, s13
 8002bd2:	eeb0 1a47 	vmov.f32	s2, s14
 8002bd6:	eef0 1a67 	vmov.f32	s3, s15
 8002bda:	374c      	adds	r7, #76	; 0x4c
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <FusionAhrsInitialise+0x34>)
 8002bea:	f107 040c 	add.w	r4, r7, #12
 8002bee:	461d      	mov	r5, r3
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f868 	bl	8002cd4 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f807 	bl	8002c18 <FusionAhrsReset>
}
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bdb0      	pop	{r4, r5, r7, pc}
 8002c12:	bf00      	nop
 8002c14:	0800e780 	.word	0x0800e780

08002c18 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8002c18:	b480      	push	{r7}
 8002c1a:	b091      	sub	sp, #68	; 0x44
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	61da      	str	r2, [r3, #28]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <FusionAhrsReset+0xb8>)
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	649a      	str	r2, [r3, #72]	; 0x48
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8002cc2:	bf00      	nop
 8002cc4:	3744      	adds	r7, #68	; 0x44
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	41200000 	.word	0x41200000

08002cd4 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfc:	d003      	beq.n	8002d06 <FusionAhrsSetSettings+0x32>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a38      	ldr	r2, [pc, #224]	; (8002dec <FusionAhrsSetSettings+0x118>)
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e01d      	b.n	8002d4a <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d14:	eeb0 0a67 	vmov.f32	s0, s15
 8002d18:	f7ff fab2 	bl	8002280 <FusionDegreesToRadians>
 8002d1c:	eef0 7a40 	vmov.f32	s15, s0
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	f005 fcec 	bl	8008700 <sinf>
 8002d28:	eef0 7a40 	vmov.f32	s15, s0
 8002d2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d34:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002d38:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3c:	f005 fd54 	bl	80087e8 <powf>
 8002d40:	eef0 7a40 	vmov.f32	s15, s0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	d003      	beq.n	8002d62 <FusionAhrsSetSettings+0x8e>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <FusionAhrsSetSettings+0x118>)
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e01d      	b.n	8002da6 <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d70:	eeb0 0a67 	vmov.f32	s0, s15
 8002d74:	f7ff fa84 	bl	8002280 <FusionDegreesToRadians>
 8002d78:	eef0 7a40 	vmov.f32	s15, s0
 8002d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d80:	f005 fcbe 	bl	8008700 <sinf>
 8002d84:	eef0 7a40 	vmov.f32	s15, s0
 8002d88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d90:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	f005 fd26 	bl	80087e8 <powf>
 8002d9c:	eef0 7a40 	vmov.f32	s15, s0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dd4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	7f7fffff 	.word	0x7f7fffff

08002df0 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b0bf      	sub	sp, #252	; 0xfc
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002df8:	eeb0 5a61 	vmov.f32	s10, s3
 8002dfc:	eef0 5a42 	vmov.f32	s11, s4
 8002e00:	eeb0 6a62 	vmov.f32	s12, s5
 8002e04:	eef0 6a43 	vmov.f32	s13, s6
 8002e08:	eeb0 7a63 	vmov.f32	s14, s7
 8002e0c:	eef0 7a44 	vmov.f32	s15, s8
 8002e10:	edc7 4a01 	vstr	s9, [r7, #4]
 8002e14:	ed87 0a08 	vstr	s0, [r7, #32]
 8002e18:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002e1c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002e20:	ed87 5a05 	vstr	s10, [r7, #20]
 8002e24:	edc7 5a06 	vstr	s11, [r7, #24]
 8002e28:	ed87 6a07 	vstr	s12, [r7, #28]
 8002e2c:	edc7 6a02 	vstr	s13, [r7, #8]
 8002e30:	ed87 7a03 	vstr	s14, [r7, #12]
 8002e34:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	3324      	adds	r3, #36	; 0x24
 8002e3c:	f107 0214 	add.w	r2, r7, #20
 8002e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d025      	beq.n	8002e9c <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d50b      	bpl.n	8002e9c <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8002e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e9e:	f000 fb08 	bl	80034b2 <HalfGravity>
 8002ea2:	eef0 6a40 	vmov.f32	s13, s0
 8002ea6:	eeb0 7a60 	vmov.f32	s14, s1
 8002eaa:	eef0 7a41 	vmov.f32	s15, s2
 8002eae:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8002eb2:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8002eb6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 8002eda:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ede:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ee2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ee6:	eeb0 0a66 	vmov.f32	s0, s13
 8002eea:	eef0 0a47 	vmov.f32	s1, s14
 8002eee:	eeb0 1a67 	vmov.f32	s2, s15
 8002ef2:	f7ff fa09 	bl	8002308 <FusionVectorIsZero>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 809b 	beq.w	800303a <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d918      	bls.n	8002f42 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002f16:	3314      	adds	r3, #20
 8002f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f20:	f7ff fe7a 	bl	8002c18 <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	f103 0414 	add.w	r4, r3, #20
 8002f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2200      	movs	r2, #0
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002f42:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f46:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f4e:	eeb0 0a66 	vmov.f32	s0, s13
 8002f52:	eef0 0a47 	vmov.f32	s1, s14
 8002f56:	eeb0 1a67 	vmov.f32	s2, s15
 8002f5a:	f7ff fbb5 	bl	80026c8 <FusionVectorNormalise>
 8002f5e:	eef0 6a40 	vmov.f32	s13, s0
 8002f62:	eeb0 7a60 	vmov.f32	s14, s1
 8002f66:	eef0 7a41 	vmov.f32	s15, s2
 8002f6a:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8002f6e:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8002f72:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8002f76:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002f78:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8002f7c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002f80:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8002f84:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8002f88:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002f8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f90:	eef0 1a45 	vmov.f32	s3, s10
 8002f94:	eeb0 2a65 	vmov.f32	s4, s11
 8002f98:	eef0 2a46 	vmov.f32	s5, s12
 8002f9c:	eeb0 0a66 	vmov.f32	s0, s13
 8002fa0:	eef0 0a47 	vmov.f32	s1, s14
 8002fa4:	eeb0 1a67 	vmov.f32	s2, s15
 8002fa8:	f7ff fade 	bl	8002568 <FusionVectorCrossProduct>
 8002fac:	eef0 6a40 	vmov.f32	s13, s0
 8002fb0:	eeb0 7a60 	vmov.f32	s14, s1
 8002fb4:	eef0 7a41 	vmov.f32	s15, s2
 8002fb8:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 8002fbc:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8002fc0:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <FusionAhrsUpdate+0x210>
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002fd4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002fd8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002fdc:	eeb0 0a66 	vmov.f32	s0, s13
 8002fe0:	eef0 0a47 	vmov.f32	s1, s14
 8002fe4:	eeb0 1a67 	vmov.f32	s2, s15
 8002fe8:	f7ff fb24 	bl	8002634 <FusionVectorMagnitudeSquared>
 8002fec:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	d817      	bhi.n	8003030 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8003000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003002:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003006:	323c      	adds	r2, #60	; 0x3c
 8003008:	ca07      	ldmia	r2, {r0, r1, r2}
 800300a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	2b09      	cmp	r3, #9
 8003020:	d901      	bls.n	8003026 <FusionAhrsUpdate+0x236>
 8003022:	230a      	movs	r3, #10
 8003024:	e000      	b.n	8003028 <FusionAhrsUpdate+0x238>
 8003026:	2300      	movs	r3, #0
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	659a      	str	r2, [r3, #88]	; 0x58
 800302e:	e004      	b.n	800303a <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	673b      	str	r3, [r7, #112]	; 0x70
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	677b      	str	r3, [r7, #116]	; 0x74
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8003054:	edd7 6a02 	vldr	s13, [r7, #8]
 8003058:	ed97 7a03 	vldr	s14, [r7, #12]
 800305c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003060:	eeb0 0a66 	vmov.f32	s0, s13
 8003064:	eef0 0a47 	vmov.f32	s1, s14
 8003068:	eeb0 1a67 	vmov.f32	s2, s15
 800306c:	f7ff f94c 	bl	8002308 <FusionVectorIsZero>
 8003070:	4603      	mov	r3, r0
 8003072:	f083 0301 	eor.w	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80e6 	beq.w	800324a <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	429a      	cmp	r2, r3
 8003090:	d92a      	bls.n	80030e8 <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	ed97 5a02 	vldr	s10, [r7, #8]
 800309a:	edd7 5a03 	vldr	s11, [r7, #12]
 800309e:	ed97 6a04 	vldr	s12, [r7, #16]
 80030a2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80030a6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80030aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80030ae:	eef0 1a45 	vmov.f32	s3, s10
 80030b2:	eeb0 2a65 	vmov.f32	s4, s11
 80030b6:	eef0 2a46 	vmov.f32	s5, s12
 80030ba:	eeb0 0a66 	vmov.f32	s0, s13
 80030be:	eef0 0a47 	vmov.f32	s1, s14
 80030c2:	eeb0 1a67 	vmov.f32	s2, s15
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fed0 	bl	8003e6c <FusionCompassCalculateHeading>
 80030cc:	eef0 7a40 	vmov.f32	s15, s0
 80030d0:	eeb0 0a67 	vmov.f32	s0, s15
 80030d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d6:	f000 fc38 	bl	800394a <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	2200      	movs	r2, #0
 80030de:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 80030e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ea:	f000 fa9f 	bl	800362c <HalfMagnetic>
 80030ee:	eef0 6a40 	vmov.f32	s13, s0
 80030f2:	eeb0 7a60 	vmov.f32	s14, s1
 80030f6:	eef0 7a41 	vmov.f32	s15, s2
 80030fa:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 80030fe:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8003102:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8003106:	ed97 5a02 	vldr	s10, [r7, #8]
 800310a:	edd7 5a03 	vldr	s11, [r7, #12]
 800310e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003112:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8003116:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800311a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800311e:	eef0 1a45 	vmov.f32	s3, s10
 8003122:	eeb0 2a65 	vmov.f32	s4, s11
 8003126:	eef0 2a46 	vmov.f32	s5, s12
 800312a:	eeb0 0a66 	vmov.f32	s0, s13
 800312e:	eef0 0a47 	vmov.f32	s1, s14
 8003132:	eeb0 1a67 	vmov.f32	s2, s15
 8003136:	f7ff fa17 	bl	8002568 <FusionVectorCrossProduct>
 800313a:	eef0 6a40 	vmov.f32	s13, s0
 800313e:	eeb0 7a60 	vmov.f32	s14, s1
 8003142:	eef0 7a41 	vmov.f32	s15, s2
 8003146:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800314a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800314e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8003152:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8003156:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800315a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800315e:	eeb0 0a66 	vmov.f32	s0, s13
 8003162:	eef0 0a47 	vmov.f32	s1, s14
 8003166:	eeb0 1a67 	vmov.f32	s2, s15
 800316a:	f7ff faad 	bl	80026c8 <FusionVectorNormalise>
 800316e:	eef0 6a40 	vmov.f32	s13, s0
 8003172:	eeb0 7a60 	vmov.f32	s14, s1
 8003176:	eef0 7a41 	vmov.f32	s15, s2
 800317a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800317e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8003182:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8003186:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003188:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800318c:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8003190:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8003194:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8003198:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800319c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80031a0:	eef0 1a45 	vmov.f32	s3, s10
 80031a4:	eeb0 2a65 	vmov.f32	s4, s11
 80031a8:	eef0 2a46 	vmov.f32	s5, s12
 80031ac:	eeb0 0a66 	vmov.f32	s0, s13
 80031b0:	eef0 0a47 	vmov.f32	s1, s14
 80031b4:	eeb0 1a67 	vmov.f32	s2, s15
 80031b8:	f7ff f9d6 	bl	8002568 <FusionVectorCrossProduct>
 80031bc:	eef0 6a40 	vmov.f32	s13, s0
 80031c0:	eeb0 7a60 	vmov.f32	s14, s1
 80031c4:	eef0 7a41 	vmov.f32	s15, s2
 80031c8:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 80031cc:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 80031d0:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <FusionAhrsUpdate+0x420>
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80031e4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80031e8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80031ec:	eeb0 0a66 	vmov.f32	s0, s13
 80031f0:	eef0 0a47 	vmov.f32	s1, s14
 80031f4:	eeb0 1a67 	vmov.f32	s2, s15
 80031f8:	f7ff fa1c 	bl	8002634 <FusionVectorMagnitudeSquared>
 80031fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	edd3 7a03 	vldr	s15, [r3, #12]
 8003206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320e:	d817      	bhi.n	8003240 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8003210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003212:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003216:	3248      	adds	r2, #72	; 0x48
 8003218:	ca07      	ldmia	r2, {r0, r1, r2}
 800321a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	2200      	movs	r2, #0
 8003222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	2b09      	cmp	r3, #9
 8003230:	d901      	bls.n	8003236 <FusionAhrsUpdate+0x446>
 8003232:	230a      	movs	r3, #10
 8003234:	e000      	b.n	8003238 <FusionAhrsUpdate+0x448>
 8003236:	2300      	movs	r3, #0
 8003238:	1ad2      	subs	r2, r2, r3
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
 800323e:	e004      	b.n	800324a <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800324a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800324e:	f7ff f817 	bl	8002280 <FusionDegreesToRadians>
 8003252:	eeb0 6a40 	vmov.f32	s12, s0
 8003256:	edd7 6a08 	vldr	s13, [r7, #32]
 800325a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800325e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003262:	eef0 1a46 	vmov.f32	s3, s12
 8003266:	eeb0 0a66 	vmov.f32	s0, s13
 800326a:	eef0 0a47 	vmov.f32	s1, s14
 800326e:	eeb0 1a67 	vmov.f32	s2, s15
 8003272:	f7ff f8e7 	bl	8002444 <FusionVectorMultiplyScalar>
 8003276:	eef0 6a40 	vmov.f32	s13, s0
 800327a:	eeb0 7a60 	vmov.f32	s14, s1
 800327e:	eef0 7a41 	vmov.f32	s15, s2
 8003282:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8003286:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800328a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800328e:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8003292:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003296:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800329a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800329e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80032a2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80032a6:	eef0 1a45 	vmov.f32	s3, s10
 80032aa:	eeb0 2a65 	vmov.f32	s4, s11
 80032ae:	eef0 2a46 	vmov.f32	s5, s12
 80032b2:	eeb0 0a66 	vmov.f32	s0, s13
 80032b6:	eef0 0a47 	vmov.f32	s1, s14
 80032ba:	eeb0 1a67 	vmov.f32	s2, s15
 80032be:	f7ff f853 	bl	8002368 <FusionVectorAdd>
 80032c2:	eef0 6a40 	vmov.f32	s13, s0
 80032c6:	eeb0 7a60 	vmov.f32	s14, s1
 80032ca:	eef0 7a41 	vmov.f32	s15, s2
 80032ce:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 80032d2:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 80032d6:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80032e0:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 80032e4:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80032e8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80032ec:	eef0 1a46 	vmov.f32	s3, s12
 80032f0:	eeb0 0a66 	vmov.f32	s0, s13
 80032f4:	eef0 0a47 	vmov.f32	s1, s14
 80032f8:	eeb0 1a67 	vmov.f32	s2, s15
 80032fc:	f7ff f8a2 	bl	8002444 <FusionVectorMultiplyScalar>
 8003300:	eef0 6a40 	vmov.f32	s13, s0
 8003304:	eeb0 7a60 	vmov.f32	s14, s1
 8003308:	eef0 7a41 	vmov.f32	s15, s2
 800330c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8003310:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8003314:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8003318:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800331c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8003320:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8003324:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003328:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800332c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003330:	eef0 1a45 	vmov.f32	s3, s10
 8003334:	eeb0 2a65 	vmov.f32	s4, s11
 8003338:	eef0 2a46 	vmov.f32	s5, s12
 800333c:	eeb0 0a66 	vmov.f32	s0, s13
 8003340:	eef0 0a47 	vmov.f32	s1, s14
 8003344:	eeb0 1a67 	vmov.f32	s2, s15
 8003348:	f7ff f80e 	bl	8002368 <FusionVectorAdd>
 800334c:	eef0 6a40 	vmov.f32	s13, s0
 8003350:	eeb0 7a60 	vmov.f32	s14, s1
 8003354:	eef0 7a41 	vmov.f32	s15, s2
 8003358:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800335c:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8003360:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8003364:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003368:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800336c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003370:	edd7 1a01 	vldr	s3, [r7, #4]
 8003374:	eeb0 0a66 	vmov.f32	s0, s13
 8003378:	eef0 0a47 	vmov.f32	s1, s14
 800337c:	eeb0 1a67 	vmov.f32	s2, s15
 8003380:	f7ff f860 	bl	8002444 <FusionVectorMultiplyScalar>
 8003384:	eef0 6a40 	vmov.f32	s13, s0
 8003388:	eeb0 7a60 	vmov.f32	s14, s1
 800338c:	eef0 7a41 	vmov.f32	s15, s2
 8003390:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8003394:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8003398:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800339c:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80033a0:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80033a4:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	ed93 6a05 	vldr	s12, [r3, #20]
 80033ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80033b2:	ed93 7a07 	vldr	s14, [r3, #28]
 80033b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80033ba:	eeb0 2a64 	vmov.f32	s4, s9
 80033be:	eef0 2a45 	vmov.f32	s5, s10
 80033c2:	eeb0 3a65 	vmov.f32	s6, s11
 80033c6:	eeb0 0a46 	vmov.f32	s0, s12
 80033ca:	eef0 0a66 	vmov.f32	s1, s13
 80033ce:	eeb0 1a47 	vmov.f32	s2, s14
 80033d2:	eef0 1a67 	vmov.f32	s3, s15
 80033d6:	f7ff faee 	bl	80029b6 <FusionQuaternionMultiplyVector>
 80033da:	eeb0 6a40 	vmov.f32	s12, s0
 80033de:	eef0 6a60 	vmov.f32	s13, s1
 80033e2:	eeb0 7a41 	vmov.f32	s14, s2
 80033e6:	eef0 7a61 	vmov.f32	s15, s3
 80033ea:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 80033ee:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 80033f2:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 80033f6:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 80033fa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80033fc:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8003400:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8003404:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8003408:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	ed93 6a05 	vldr	s12, [r3, #20]
 8003412:	edd3 6a06 	vldr	s13, [r3, #24]
 8003416:	ed93 7a07 	vldr	s14, [r3, #28]
 800341a:	edd3 7a08 	vldr	s15, [r3, #32]
 800341e:	eeb0 2a44 	vmov.f32	s4, s8
 8003422:	eef0 2a64 	vmov.f32	s5, s9
 8003426:	eeb0 3a45 	vmov.f32	s6, s10
 800342a:	eef0 3a65 	vmov.f32	s7, s11
 800342e:	eeb0 0a46 	vmov.f32	s0, s12
 8003432:	eef0 0a66 	vmov.f32	s1, s13
 8003436:	eeb0 1a47 	vmov.f32	s2, s14
 800343a:	eef0 1a67 	vmov.f32	s3, s15
 800343e:	f7ff f996 	bl	800276e <FusionQuaternionAdd>
 8003442:	eeb0 6a40 	vmov.f32	s12, s0
 8003446:	eef0 6a60 	vmov.f32	s13, s1
 800344a:	eeb0 7a41 	vmov.f32	s14, s2
 800344e:	eef0 7a61 	vmov.f32	s15, s3
 8003452:	ed84 6a05 	vstr	s12, [r4, #20]
 8003456:	edc4 6a06 	vstr	s13, [r4, #24]
 800345a:	ed84 7a07 	vstr	s14, [r4, #28]
 800345e:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8003462:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	ed93 6a05 	vldr	s12, [r3, #20]
 800346a:	edd3 6a06 	vldr	s13, [r3, #24]
 800346e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003472:	edd3 7a08 	vldr	s15, [r3, #32]
 8003476:	eeb0 0a46 	vmov.f32	s0, s12
 800347a:	eef0 0a66 	vmov.f32	s1, s13
 800347e:	eeb0 1a47 	vmov.f32	s2, s14
 8003482:	eef0 1a67 	vmov.f32	s3, s15
 8003486:	f7ff fb36 	bl	8002af6 <FusionQuaternionNormalise>
 800348a:	eeb0 6a40 	vmov.f32	s12, s0
 800348e:	eef0 6a60 	vmov.f32	s13, s1
 8003492:	eeb0 7a41 	vmov.f32	s14, s2
 8003496:	eef0 7a61 	vmov.f32	s15, s3
 800349a:	ed84 6a05 	vstr	s12, [r4, #20]
 800349e:	edc4 6a06 	vstr	s13, [r4, #24]
 80034a2:	ed84 7a07 	vstr	s14, [r4, #28]
 80034a6:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80034aa:	bf00      	nop
 80034ac:	37fc      	adds	r7, #252	; 0xfc
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}

080034b2 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80034b2:	b480      	push	{r7}
 80034b4:	b093      	sub	sp, #76	; 0x4c
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	dc02      	bgt.n	80034c8 <HalfGravity+0x16>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da03      	bge.n	80034ce <HalfGravity+0x1c>
 80034c6:	e094      	b.n	80035f2 <HalfGravity+0x140>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d048      	beq.n	800355e <HalfGravity+0xac>
 80034cc:	e091      	b.n	80035f2 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80034da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	edd3 6a05 	vldr	s13, [r3, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80034ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80034f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	ed93 7a07 	vldr	s14, [r3, #28]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8003502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	edd3 6a05 	vldr	s13, [r3, #20]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003516:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800351a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	ed93 7a05 	vldr	s14, [r3, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	edd3 7a05 	vldr	s15, [r3, #20]
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003532:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	edd3 6a08 	vldr	s13, [r3, #32]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003546:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800354a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800354e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003552:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003556:	ca07      	ldmia	r2, {r0, r1, r2}
 8003558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800355c:	e052      	b.n	8003604 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	ed93 7a05 	vldr	s14, [r3, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	edd3 7a07 	vldr	s15, [r3, #28]
 800356a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	edd3 6a06 	vldr	s13, [r3, #24]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	edd3 7a08 	vldr	s15, [r3, #32]
 800357a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8003582:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	ed93 7a07 	vldr	s14, [r3, #28]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	edd3 6a05 	vldr	s13, [r3, #20]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	edd3 7a06 	vldr	s15, [r3, #24]
 80035a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035aa:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	ed93 7a05 	vldr	s14, [r3, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	edd3 6a08 	vldr	s13, [r3, #32]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80035d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035da:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80035de:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80035e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035e6:	f107 0218 	add.w	r2, r7, #24
 80035ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80035ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035f0:	e008      	b.n	8003604 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8003604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	ee06 1a90 	vmov	s13, r1
 800360e:	ee07 2a10 	vmov	s14, r2
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eeb0 0a66 	vmov.f32	s0, s13
 800361a:	eef0 0a47 	vmov.f32	s1, s14
 800361e:	eeb0 1a67 	vmov.f32	s2, s15
 8003622:	374c      	adds	r7, #76	; 0x4c
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800362c:	b480      	push	{r7}
 800362e:	b097      	sub	sp, #92	; 0x5c
 8003630:	af00      	add	r7, sp, #0
 8003632:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	f000 809a 	beq.w	8003772 <HalfMagnetic+0x146>
 800363e:	2b02      	cmp	r3, #2
 8003640:	f300 80e1 	bgt.w	8003806 <HalfMagnetic+0x1da>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HalfMagnetic+0x22>
 8003648:	2b01      	cmp	r3, #1
 800364a:	d048      	beq.n	80036de <HalfMagnetic+0xb2>
 800364c:	e0db      	b.n	8003806 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	ed93 7a06 	vldr	s14, [r3, #24]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	edd3 7a07 	vldr	s15, [r3, #28]
 800365a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	edd3 6a05 	vldr	s13, [r3, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	edd3 7a08 	vldr	s15, [r3, #32]
 800366a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8003672:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	ed93 7a05 	vldr	s14, [r3, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800368a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	edd3 6a07 	vldr	s13, [r3, #28]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	edd3 7a07 	vldr	s15, [r3, #28]
 800369a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800369e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80036a2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80036b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	edd3 7a06 	vldr	s15, [r3, #24]
 80036c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80036ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 80036ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80036d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036dc:	e09c      	b.n	8003818 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8003702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003706:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800370a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	ed93 7a05 	vldr	s14, [r3, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	edd3 7a08 	vldr	s15, [r3, #32]
 800371a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	edd3 6a06 	vldr	s13, [r3, #24]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	edd3 7a07 	vldr	s15, [r3, #28]
 800372a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8003732:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	ed93 7a06 	vldr	s14, [r3, #24]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	edd3 6a05 	vldr	s13, [r3, #20]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800375e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8003762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800376a:	ca07      	ldmia	r2, {r0, r1, r2}
 800376c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003770:	e052      	b.n	8003818 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	ed93 7a06 	vldr	s14, [r3, #24]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	edd3 7a07 	vldr	s15, [r3, #28]
 800377e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	edd3 6a05 	vldr	s13, [r3, #20]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	edd3 7a08 	vldr	s15, [r3, #32]
 800378e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003796:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	edd3 6a07 	vldr	s13, [r3, #28]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	edd3 7a07 	vldr	s15, [r3, #28]
 80037c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80037ca:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	ed93 7a05 	vldr	s14, [r3, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80037da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80037ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80037f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80037f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037fa:	f107 021c 	add.w	r2, r7, #28
 80037fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003804:	e008      	b.n	8003818 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	653b      	str	r3, [r7, #80]	; 0x50
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8003818:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800381a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800381c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381e:	ee06 1a90 	vmov	s13, r1
 8003822:	ee07 2a10 	vmov	s14, r2
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eeb0 0a66 	vmov.f32	s0, s13
 800382e:	eef0 0a47 	vmov.f32	s1, s14
 8003832:	eeb0 1a67 	vmov.f32	s2, s15
 8003836:	375c      	adds	r7, #92	; 0x5c
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0
 8003846:	61f8      	str	r0, [r7, #28]
 8003848:	eeb0 5a40 	vmov.f32	s10, s0
 800384c:	eef0 5a60 	vmov.f32	s11, s1
 8003850:	eeb0 6a41 	vmov.f32	s12, s2
 8003854:	eef0 6a61 	vmov.f32	s13, s3
 8003858:	eeb0 7a42 	vmov.f32	s14, s4
 800385c:	eef0 7a62 	vmov.f32	s15, s5
 8003860:	ed87 3a00 	vstr	s6, [r7]
 8003864:	ed87 5a04 	vstr	s10, [r7, #16]
 8003868:	edc7 5a05 	vstr	s11, [r7, #20]
 800386c:	ed87 6a06 	vstr	s12, [r7, #24]
 8003870:	edc7 6a01 	vstr	s13, [r7, #4]
 8003874:	ed87 7a02 	vstr	s14, [r7, #8]
 8003878:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388e:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8003892:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8003896:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800389a:	ed97 5a01 	vldr	s10, [r7, #4]
 800389e:	edd7 5a02 	vldr	s11, [r7, #8]
 80038a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038a6:	edd7 6a04 	vldr	s13, [r7, #16]
 80038aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80038ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b2:	edd7 4a00 	vldr	s9, [r7]
 80038b6:	eef0 1a45 	vmov.f32	s3, s10
 80038ba:	eeb0 2a65 	vmov.f32	s4, s11
 80038be:	eef0 2a46 	vmov.f32	s5, s12
 80038c2:	eeb0 0a66 	vmov.f32	s0, s13
 80038c6:	eef0 0a47 	vmov.f32	s1, s14
 80038ca:	eeb0 1a67 	vmov.f32	s2, s15
 80038ce:	69f8      	ldr	r0, [r7, #28]
 80038d0:	f7ff fa8e 	bl	8002df0 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <FusionAhrsUpdateNoMagnetometer+0xb8>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <FusionAhrsUpdateNoMagnetometer+0xb8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 80038ee:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003900 <FusionAhrsUpdateNoMagnetometer+0xc0>
 80038f2:	69f8      	ldr	r0, [r7, #28]
 80038f4:	f000 f829 	bl	800394a <FusionAhrsSetHeading>
    }
}
 80038f8:	bf00      	nop
 80038fa:	3730      	adds	r7, #48	; 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	00000000 	.word	0x00000000

08003904 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8003904:	b490      	push	{r4, r7}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f107 0418 	add.w	r4, r7, #24
 8003912:	3314      	adds	r3, #20
 8003914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800391a:	69b8      	ldr	r0, [r7, #24]
 800391c:	69f9      	ldr	r1, [r7, #28]
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	ee06 0a10 	vmov	s12, r0
 8003926:	ee06 1a90 	vmov	s13, r1
 800392a:	ee07 2a10 	vmov	s14, r2
 800392e:	ee07 3a90 	vmov	s15, r3
}
 8003932:	eeb0 0a46 	vmov.f32	s0, s12
 8003936:	eef0 0a66 	vmov.f32	s1, s13
 800393a:	eeb0 1a47 	vmov.f32	s2, s14
 800393e:	eef0 1a67 	vmov.f32	s3, s15
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc90      	pop	{r4, r7}
 8003948:	4770      	bx	lr

0800394a <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800394a:	b590      	push	{r4, r7, lr}
 800394c:	b089      	sub	sp, #36	; 0x24
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	ed93 7a05 	vldr	s14, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	edd3 6a06 	vldr	s13, [r3, #24]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003976:	ee37 6a27 	vadd.f32	s12, s14, s15
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	edd3 7a07 	vldr	s15, [r3, #28]
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800398e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	edd3 6a08 	vldr	s13, [r3, #32]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	edd3 7a08 	vldr	s15, [r3, #32]
 800399e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a6:	eef0 0a67 	vmov.f32	s1, s15
 80039aa:	eeb0 0a46 	vmov.f32	s0, s12
 80039ae:	f004 ff19 	bl	80087e4 <atan2f>
 80039b2:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 80039b6:	ed97 0a00 	vldr	s0, [r7]
 80039ba:	f7fe fc61 	bl	8002280 <FusionDegreesToRadians>
 80039be:	eeb0 7a40 	vmov.f32	s14, s0
 80039c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80039c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80039ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 80039d6:	ed97 0a06 	vldr	s0, [r7, #24]
 80039da:	f004 fe4d 	bl	8008678 <cosf>
 80039de:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 80039e2:	edc7 7a02 	vstr	s15, [r7, #8]
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 80039f2:	ed97 0a06 	vldr	s0, [r7, #24]
 80039f6:	f004 fe83 	bl	8008700 <sinf>
 80039fa:	eef0 7a40 	vmov.f32	s15, s0
 80039fe:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8003a02:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8003a06:	687c      	ldr	r4, [r7, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	ed93 4a05 	vldr	s8, [r3, #20]
 8003a0e:	edd3 4a06 	vldr	s9, [r3, #24]
 8003a12:	ed93 5a07 	vldr	s10, [r3, #28]
 8003a16:	edd3 5a08 	vldr	s11, [r3, #32]
 8003a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003a22:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a26:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a2a:	eeb0 2a44 	vmov.f32	s4, s8
 8003a2e:	eef0 2a64 	vmov.f32	s5, s9
 8003a32:	eeb0 3a45 	vmov.f32	s6, s10
 8003a36:	eef0 3a65 	vmov.f32	s7, s11
 8003a3a:	eeb0 0a46 	vmov.f32	s0, s12
 8003a3e:	eef0 0a66 	vmov.f32	s1, s13
 8003a42:	eeb0 1a47 	vmov.f32	s2, s14
 8003a46:	eef0 1a67 	vmov.f32	s3, s15
 8003a4a:	f7fe fef2 	bl	8002832 <FusionQuaternionMultiply>
 8003a4e:	eeb0 6a40 	vmov.f32	s12, s0
 8003a52:	eef0 6a60 	vmov.f32	s13, s1
 8003a56:	eeb0 7a41 	vmov.f32	s14, s2
 8003a5a:	eef0 7a61 	vmov.f32	s15, s3
 8003a5e:	ed84 6a05 	vstr	s12, [r4, #20]
 8003a62:	edc4 6a06 	vstr	s13, [r4, #24]
 8003a66:	ed84 7a07 	vstr	s14, [r4, #28]
 8003a6a:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8003a6e:	bf00      	nop
 8003a70:	3724      	adds	r7, #36	; 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
	...

08003a78 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8003a82:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a86:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003a9c <FusionRadiansToDegrees+0x24>
 8003a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	42652ee0 	.word	0x42652ee0

08003aa0 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	105a      	asrs	r2, r3, #1
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <FusionFastInverseSqrt+0x54>)
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8003ab8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003abc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ac0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003af8 <FusionFastInverseSqrt+0x58>
 8003ac4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003acc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003afc <FusionFastInverseSqrt+0x5c>
 8003adc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	5f1f1412 	.word	0x5f1f1412
 8003af8:	3f36d312 	.word	0x3f36d312
 8003afc:	3fd851ff 	.word	0x3fd851ff

08003b00 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	eef0 6a40 	vmov.f32	s13, s0
 8003b0a:	eeb0 7a60 	vmov.f32	s14, s1
 8003b0e:	eef0 7a41 	vmov.f32	s15, s2
 8003b12:	edc7 6a01 	vstr	s13, [r7, #4]
 8003b16:	ed87 7a02 	vstr	s14, [r7, #8]
 8003b1a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8003b1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003b32:	eeb0 0a67 	vmov.f32	s0, s15
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8003b40:	b480      	push	{r7}
 8003b42:	b08f      	sub	sp, #60	; 0x3c
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	eef0 6a40 	vmov.f32	s13, s0
 8003b4a:	eeb0 7a60 	vmov.f32	s14, s1
 8003b4e:	eef0 7a41 	vmov.f32	s15, s2
 8003b52:	edc7 1a04 	vstr	s3, [r7, #16]
 8003b56:	edc7 6a05 	vstr	s13, [r7, #20]
 8003b5a:	ed87 7a06 	vstr	s14, [r7, #24]
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8003b62:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b66:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003b6e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8003b72:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003b7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8003b82:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003b8e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8003b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b96:	f107 0220 	add.w	r2, r7, #32
 8003b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	ee06 1a90 	vmov	s13, r1
 8003baa:	ee07 2a10 	vmov	s14, r2
 8003bae:	ee07 3a90 	vmov	s15, r3
}
 8003bb2:	eeb0 0a66 	vmov.f32	s0, s13
 8003bb6:	eef0 0a47 	vmov.f32	s1, s14
 8003bba:	eeb0 1a67 	vmov.f32	s2, s15
 8003bbe:	373c      	adds	r7, #60	; 0x3c
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003bc8:	b480      	push	{r7}
 8003bca:	b091      	sub	sp, #68	; 0x44
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	eeb0 5a40 	vmov.f32	s10, s0
 8003bd2:	eef0 5a60 	vmov.f32	s11, s1
 8003bd6:	eeb0 6a41 	vmov.f32	s12, s2
 8003bda:	eef0 6a61 	vmov.f32	s13, s3
 8003bde:	eeb0 7a42 	vmov.f32	s14, s4
 8003be2:	eef0 7a62 	vmov.f32	s15, s5
 8003be6:	ed87 5a07 	vstr	s10, [r7, #28]
 8003bea:	edc7 5a08 	vstr	s11, [r7, #32]
 8003bee:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003bf2:	edc7 6a04 	vstr	s13, [r7, #16]
 8003bf6:	ed87 7a05 	vstr	s14, [r7, #20]
 8003bfa:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8003bfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003c0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8003c0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003c12:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c16:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003c1a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8003c1e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c22:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c26:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003c2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c42:	ee06 1a90 	vmov	s13, r1
 8003c46:	ee07 2a10 	vmov	s14, r2
 8003c4a:	ee07 3a90 	vmov	s15, r3
}
 8003c4e:	eeb0 0a66 	vmov.f32	s0, s13
 8003c52:	eef0 0a47 	vmov.f32	s1, s14
 8003c56:	eeb0 1a67 	vmov.f32	s2, s15
 8003c5a:	3744      	adds	r7, #68	; 0x44
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003c64:	b480      	push	{r7}
 8003c66:	b091      	sub	sp, #68	; 0x44
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	eeb0 5a40 	vmov.f32	s10, s0
 8003c6e:	eef0 5a60 	vmov.f32	s11, s1
 8003c72:	eeb0 6a41 	vmov.f32	s12, s2
 8003c76:	eef0 6a61 	vmov.f32	s13, s3
 8003c7a:	eeb0 7a42 	vmov.f32	s14, s4
 8003c7e:	eef0 7a62 	vmov.f32	s15, s5
 8003c82:	ed87 5a07 	vstr	s10, [r7, #28]
 8003c86:	edc7 5a08 	vstr	s11, [r7, #32]
 8003c8a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003c8e:	edc7 6a04 	vstr	s13, [r7, #16]
 8003c92:	ed87 7a05 	vstr	s14, [r7, #20]
 8003c96:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8003c9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8003c9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003cb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8003cba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003cd6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8003cda:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cde:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce6:	edd7 6a08 	vldr	s13, [r7, #32]
 8003cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003cf6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0e:	ee06 1a90 	vmov	s13, r1
 8003d12:	ee07 2a10 	vmov	s14, r2
 8003d16:	ee07 3a90 	vmov	s15, r3
}
 8003d1a:	eeb0 0a66 	vmov.f32	s0, s13
 8003d1e:	eef0 0a47 	vmov.f32	s1, s14
 8003d22:	eeb0 1a67 	vmov.f32	s2, s15
 8003d26:	3744      	adds	r7, #68	; 0x44
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	eef0 6a40 	vmov.f32	s13, s0
 8003d3a:	eeb0 7a60 	vmov.f32	s14, s1
 8003d3e:	eef0 7a41 	vmov.f32	s15, s2
 8003d42:	edc7 6a01 	vstr	s13, [r7, #4]
 8003d46:	ed87 7a02 	vstr	s14, [r7, #8]
 8003d4a:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8003d4e:	ed97 5a01 	vldr	s10, [r7, #4]
 8003d52:	edd7 5a02 	vldr	s11, [r7, #8]
 8003d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5a:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d66:	eef0 1a45 	vmov.f32	s3, s10
 8003d6a:	eeb0 2a65 	vmov.f32	s4, s11
 8003d6e:	eef0 2a46 	vmov.f32	s5, s12
 8003d72:	eeb0 0a66 	vmov.f32	s0, s13
 8003d76:	eef0 0a47 	vmov.f32	s1, s14
 8003d7a:	eeb0 1a67 	vmov.f32	s2, s15
 8003d7e:	f7ff ff23 	bl	8003bc8 <FusionVectorHadamardProduct>
 8003d82:	eef0 6a40 	vmov.f32	s13, s0
 8003d86:	eeb0 7a60 	vmov.f32	s14, s1
 8003d8a:	eef0 7a41 	vmov.f32	s15, s2
 8003d8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8003d92:	ed87 7a06 	vstr	s14, [r7, #24]
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
 8003d9a:	edd7 6a05 	vldr	s13, [r7, #20]
 8003d9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003da2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003da6:	eeb0 0a66 	vmov.f32	s0, s13
 8003daa:	eef0 0a47 	vmov.f32	s1, s14
 8003dae:	eeb0 1a67 	vmov.f32	s2, s15
 8003db2:	f7ff fea5 	bl	8003b00 <FusionVectorSum>
 8003db6:	eef0 7a40 	vmov.f32	s15, s0
}
 8003dba:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	eef0 6a40 	vmov.f32	s13, s0
 8003dce:	eeb0 7a60 	vmov.f32	s14, s1
 8003dd2:	eef0 7a41 	vmov.f32	s15, s2
 8003dd6:	edc7 6a05 	vstr	s13, [r7, #20]
 8003dda:	ed87 7a06 	vstr	s14, [r7, #24]
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003de2:	edd7 6a05 	vldr	s13, [r7, #20]
 8003de6:	ed97 7a06 	vldr	s14, [r7, #24]
 8003dea:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dee:	eeb0 0a66 	vmov.f32	s0, s13
 8003df2:	eef0 0a47 	vmov.f32	s1, s14
 8003df6:	eeb0 1a67 	vmov.f32	s2, s15
 8003dfa:	f7ff ff99 	bl	8003d30 <FusionVectorMagnitudeSquared>
 8003dfe:	eef0 7a40 	vmov.f32	s15, s0
 8003e02:	eeb0 0a67 	vmov.f32	s0, s15
 8003e06:	f7ff fe4b 	bl	8003aa0 <FusionFastInverseSqrt>
 8003e0a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8003e0e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003e12:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e1a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8003e1e:	eeb0 0a66 	vmov.f32	s0, s13
 8003e22:	eef0 0a47 	vmov.f32	s1, s14
 8003e26:	eeb0 1a67 	vmov.f32	s2, s15
 8003e2a:	f7ff fe89 	bl	8003b40 <FusionVectorMultiplyScalar>
 8003e2e:	eef0 6a40 	vmov.f32	s13, s0
 8003e32:	eeb0 7a60 	vmov.f32	s14, s1
 8003e36:	eef0 7a41 	vmov.f32	s15, s2
 8003e3a:	edc7 6a08 	vstr	s13, [r7, #32]
 8003e3e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003e42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8003e46:	6a39      	ldr	r1, [r7, #32]
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	ee06 1a90 	vmov	s13, r1
 8003e50:	ee07 2a10 	vmov	s14, r2
 8003e54:	ee07 3a90 	vmov	s15, r3
}
 8003e58:	eeb0 0a66 	vmov.f32	s0, s13
 8003e5c:	eef0 0a47 	vmov.f32	s1, s14
 8003e60:	eeb0 1a67 	vmov.f32	s2, s15
 8003e64:	3730      	adds	r7, #48	; 0x30
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b0b2      	sub	sp, #200	; 0xc8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	eeb0 5a40 	vmov.f32	s10, s0
 8003e78:	eef0 5a60 	vmov.f32	s11, s1
 8003e7c:	eeb0 6a41 	vmov.f32	s12, s2
 8003e80:	eef0 6a61 	vmov.f32	s13, s3
 8003e84:	eeb0 7a42 	vmov.f32	s14, s4
 8003e88:	eef0 7a62 	vmov.f32	s15, s5
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	ed87 5a04 	vstr	s10, [r7, #16]
 8003e92:	edc7 5a05 	vstr	s11, [r7, #20]
 8003e96:	ed87 6a06 	vstr	s12, [r7, #24]
 8003e9a:	edc7 6a01 	vstr	s13, [r7, #4]
 8003e9e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003ea2:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f000 814b 	beq.w	8004144 <FusionCompassCalculateHeading+0x2d8>
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	f300 81f7 	bgt.w	80042a2 <FusionCompassCalculateHeading+0x436>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <FusionCompassCalculateHeading+0x54>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f000 8094 	beq.w	8003fe6 <FusionCompassCalculateHeading+0x17a>
 8003ebe:	e1f0      	b.n	80042a2 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003ec0:	ed97 5a01 	vldr	s10, [r7, #4]
 8003ec4:	edd7 5a02 	vldr	s11, [r7, #8]
 8003ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ecc:	edd7 6a04 	vldr	s13, [r7, #16]
 8003ed0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ed4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ed8:	eef0 1a45 	vmov.f32	s3, s10
 8003edc:	eeb0 2a65 	vmov.f32	s4, s11
 8003ee0:	eef0 2a46 	vmov.f32	s5, s12
 8003ee4:	eeb0 0a66 	vmov.f32	s0, s13
 8003ee8:	eef0 0a47 	vmov.f32	s1, s14
 8003eec:	eeb0 1a67 	vmov.f32	s2, s15
 8003ef0:	f7ff feb8 	bl	8003c64 <FusionVectorCrossProduct>
 8003ef4:	eef0 6a40 	vmov.f32	s13, s0
 8003ef8:	eeb0 7a60 	vmov.f32	s14, s1
 8003efc:	eef0 7a41 	vmov.f32	s15, s2
 8003f00:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003f04:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003f08:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8003f0c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003f10:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003f14:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003f18:	eeb0 0a66 	vmov.f32	s0, s13
 8003f1c:	eef0 0a47 	vmov.f32	s1, s14
 8003f20:	eeb0 1a67 	vmov.f32	s2, s15
 8003f24:	f7ff ff4e 	bl	8003dc4 <FusionVectorNormalise>
 8003f28:	eef0 6a40 	vmov.f32	s13, s0
 8003f2c:	eeb0 7a60 	vmov.f32	s14, s1
 8003f30:	eef0 7a41 	vmov.f32	s15, s2
 8003f34:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8003f38:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 8003f3c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003f40:	ed97 5a04 	vldr	s10, [r7, #16]
 8003f44:	edd7 5a05 	vldr	s11, [r7, #20]
 8003f48:	ed97 6a06 	vldr	s12, [r7, #24]
 8003f4c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8003f50:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003f54:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003f58:	eef0 1a45 	vmov.f32	s3, s10
 8003f5c:	eeb0 2a65 	vmov.f32	s4, s11
 8003f60:	eef0 2a46 	vmov.f32	s5, s12
 8003f64:	eeb0 0a66 	vmov.f32	s0, s13
 8003f68:	eef0 0a47 	vmov.f32	s1, s14
 8003f6c:	eeb0 1a67 	vmov.f32	s2, s15
 8003f70:	f7ff fe78 	bl	8003c64 <FusionVectorCrossProduct>
 8003f74:	eef0 6a40 	vmov.f32	s13, s0
 8003f78:	eeb0 7a60 	vmov.f32	s14, s1
 8003f7c:	eef0 7a41 	vmov.f32	s15, s2
 8003f80:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 8003f84:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 8003f88:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8003f8c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003f90:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003f94:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003f98:	eeb0 0a66 	vmov.f32	s0, s13
 8003f9c:	eef0 0a47 	vmov.f32	s1, s14
 8003fa0:	eeb0 1a67 	vmov.f32	s2, s15
 8003fa4:	f7ff ff0e 	bl	8003dc4 <FusionVectorNormalise>
 8003fa8:	eef0 6a40 	vmov.f32	s13, s0
 8003fac:	eeb0 7a60 	vmov.f32	s14, s1
 8003fb0:	eef0 7a41 	vmov.f32	s15, s2
 8003fb4:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8003fb8:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8003fbc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003fc0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fc4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003fc8:	eef0 0a47 	vmov.f32	s1, s14
 8003fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd0:	f004 fc08 	bl	80087e4 <atan2f>
 8003fd4:	eef0 7a40 	vmov.f32	s15, s0
 8003fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fdc:	f7ff fd4c 	bl	8003a78 <FusionRadiansToDegrees>
 8003fe0:	eef0 7a40 	vmov.f32	s15, s0
 8003fe4:	e15f      	b.n	80042a6 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003fe6:	ed97 5a01 	vldr	s10, [r7, #4]
 8003fea:	edd7 5a02 	vldr	s11, [r7, #8]
 8003fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff2:	edd7 6a04 	vldr	s13, [r7, #16]
 8003ff6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ffe:	eef0 1a45 	vmov.f32	s3, s10
 8004002:	eeb0 2a65 	vmov.f32	s4, s11
 8004006:	eef0 2a46 	vmov.f32	s5, s12
 800400a:	eeb0 0a66 	vmov.f32	s0, s13
 800400e:	eef0 0a47 	vmov.f32	s1, s14
 8004012:	eeb0 1a67 	vmov.f32	s2, s15
 8004016:	f7ff fe25 	bl	8003c64 <FusionVectorCrossProduct>
 800401a:	eef0 6a40 	vmov.f32	s13, s0
 800401e:	eeb0 7a60 	vmov.f32	s14, s1
 8004022:	eef0 7a41 	vmov.f32	s15, s2
 8004026:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800402a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800402e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8004032:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8004036:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800403a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800403e:	eeb0 0a66 	vmov.f32	s0, s13
 8004042:	eef0 0a47 	vmov.f32	s1, s14
 8004046:	eeb0 1a67 	vmov.f32	s2, s15
 800404a:	f7ff febb 	bl	8003dc4 <FusionVectorNormalise>
 800404e:	eef0 6a40 	vmov.f32	s13, s0
 8004052:	eeb0 7a60 	vmov.f32	s14, s1
 8004056:	eef0 7a41 	vmov.f32	s15, s2
 800405a:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800405e:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8004062:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8004066:	ed97 5a04 	vldr	s10, [r7, #16]
 800406a:	edd7 5a05 	vldr	s11, [r7, #20]
 800406e:	ed97 6a06 	vldr	s12, [r7, #24]
 8004072:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8004076:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800407a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800407e:	eef0 1a45 	vmov.f32	s3, s10
 8004082:	eeb0 2a65 	vmov.f32	s4, s11
 8004086:	eef0 2a46 	vmov.f32	s5, s12
 800408a:	eeb0 0a66 	vmov.f32	s0, s13
 800408e:	eef0 0a47 	vmov.f32	s1, s14
 8004092:	eeb0 1a67 	vmov.f32	s2, s15
 8004096:	f7ff fde5 	bl	8003c64 <FusionVectorCrossProduct>
 800409a:	eef0 6a40 	vmov.f32	s13, s0
 800409e:	eeb0 7a60 	vmov.f32	s14, s1
 80040a2:	eef0 7a41 	vmov.f32	s15, s2
 80040a6:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 80040aa:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 80040ae:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 80040b2:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80040b6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80040ba:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80040be:	eeb0 0a66 	vmov.f32	s0, s13
 80040c2:	eef0 0a47 	vmov.f32	s1, s14
 80040c6:	eeb0 1a67 	vmov.f32	s2, s15
 80040ca:	f7ff fe7b 	bl	8003dc4 <FusionVectorNormalise>
 80040ce:	eef0 6a40 	vmov.f32	s13, s0
 80040d2:	eeb0 7a60 	vmov.f32	s14, s1
 80040d6:	eef0 7a41 	vmov.f32	s15, s2
 80040da:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 80040de:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 80040e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 80040e6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80040ea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80040ee:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80040f2:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80040f6:	eeb0 0a66 	vmov.f32	s0, s13
 80040fa:	eef0 0a47 	vmov.f32	s1, s14
 80040fe:	eeb0 1a67 	vmov.f32	s2, s15
 8004102:	f7ff fd1d 	bl	8003b40 <FusionVectorMultiplyScalar>
 8004106:	eef0 6a40 	vmov.f32	s13, s0
 800410a:	eeb0 7a60 	vmov.f32	s14, s1
 800410e:	eef0 7a41 	vmov.f32	s15, s2
 8004112:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8004116:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800411a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800411e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004122:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004126:	eef0 0a47 	vmov.f32	s1, s14
 800412a:	eeb0 0a67 	vmov.f32	s0, s15
 800412e:	f004 fb59 	bl	80087e4 <atan2f>
 8004132:	eef0 7a40 	vmov.f32	s15, s0
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	f7ff fc9d 	bl	8003a78 <FusionRadiansToDegrees>
 800413e:	eef0 7a40 	vmov.f32	s15, s0
 8004142:	e0b0      	b.n	80042a6 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8004144:	edd7 6a04 	vldr	s13, [r7, #16]
 8004148:	ed97 7a05 	vldr	s14, [r7, #20]
 800414c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004150:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8004154:	eeb0 0a66 	vmov.f32	s0, s13
 8004158:	eef0 0a47 	vmov.f32	s1, s14
 800415c:	eeb0 1a67 	vmov.f32	s2, s15
 8004160:	f7ff fcee 	bl	8003b40 <FusionVectorMultiplyScalar>
 8004164:	eef0 6a40 	vmov.f32	s13, s0
 8004168:	eeb0 7a60 	vmov.f32	s14, s1
 800416c:	eef0 7a41 	vmov.f32	s15, s2
 8004170:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8004174:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8004178:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 800417c:	ed97 5a01 	vldr	s10, [r7, #4]
 8004180:	edd7 5a02 	vldr	s11, [r7, #8]
 8004184:	ed97 6a03 	vldr	s12, [r7, #12]
 8004188:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800418c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004190:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004194:	eef0 1a45 	vmov.f32	s3, s10
 8004198:	eeb0 2a65 	vmov.f32	s4, s11
 800419c:	eef0 2a46 	vmov.f32	s5, s12
 80041a0:	eeb0 0a66 	vmov.f32	s0, s13
 80041a4:	eef0 0a47 	vmov.f32	s1, s14
 80041a8:	eeb0 1a67 	vmov.f32	s2, s15
 80041ac:	f7ff fd5a 	bl	8003c64 <FusionVectorCrossProduct>
 80041b0:	eef0 6a40 	vmov.f32	s13, s0
 80041b4:	eeb0 7a60 	vmov.f32	s14, s1
 80041b8:	eef0 7a41 	vmov.f32	s15, s2
 80041bc:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 80041c0:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 80041c4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 80041c8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80041cc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80041d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80041d4:	eeb0 0a66 	vmov.f32	s0, s13
 80041d8:	eef0 0a47 	vmov.f32	s1, s14
 80041dc:	eeb0 1a67 	vmov.f32	s2, s15
 80041e0:	f7ff fdf0 	bl	8003dc4 <FusionVectorNormalise>
 80041e4:	eef0 6a40 	vmov.f32	s13, s0
 80041e8:	eeb0 7a60 	vmov.f32	s14, s1
 80041ec:	eef0 7a41 	vmov.f32	s15, s2
 80041f0:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80041f4:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80041f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 80041fc:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8004200:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8004204:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8004208:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800420c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004210:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004214:	eef0 1a45 	vmov.f32	s3, s10
 8004218:	eeb0 2a65 	vmov.f32	s4, s11
 800421c:	eef0 2a46 	vmov.f32	s5, s12
 8004220:	eeb0 0a66 	vmov.f32	s0, s13
 8004224:	eef0 0a47 	vmov.f32	s1, s14
 8004228:	eeb0 1a67 	vmov.f32	s2, s15
 800422c:	f7ff fd1a 	bl	8003c64 <FusionVectorCrossProduct>
 8004230:	eef0 6a40 	vmov.f32	s13, s0
 8004234:	eeb0 7a60 	vmov.f32	s14, s1
 8004238:	eef0 7a41 	vmov.f32	s15, s2
 800423c:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8004240:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8004244:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8004248:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800424c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004250:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004254:	eeb0 0a66 	vmov.f32	s0, s13
 8004258:	eef0 0a47 	vmov.f32	s1, s14
 800425c:	eeb0 1a67 	vmov.f32	s2, s15
 8004260:	f7ff fdb0 	bl	8003dc4 <FusionVectorNormalise>
 8004264:	eef0 6a40 	vmov.f32	s13, s0
 8004268:	eeb0 7a60 	vmov.f32	s14, s1
 800426c:	eef0 7a41 	vmov.f32	s15, s2
 8004270:	edc7 6a08 	vstr	s13, [r7, #32]
 8004274:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8004278:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 800427c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004280:	ed97 7a08 	vldr	s14, [r7, #32]
 8004284:	eef0 0a47 	vmov.f32	s1, s14
 8004288:	eeb0 0a67 	vmov.f32	s0, s15
 800428c:	f004 faaa 	bl	80087e4 <atan2f>
 8004290:	eef0 7a40 	vmov.f32	s15, s0
 8004294:	eeb0 0a67 	vmov.f32	s0, s15
 8004298:	f7ff fbee 	bl	8003a78 <FusionRadiansToDegrees>
 800429c:	eef0 7a40 	vmov.f32	s15, s0
 80042a0:	e001      	b.n	80042a6 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 80042a2:	eddf 7a03 	vldr	s15, [pc, #12]	; 80042b0 <FusionCompassCalculateHeading+0x444>
}
 80042a6:	eeb0 0a67 	vmov.f32	s0, s15
 80042aa:	37c8      	adds	r7, #200	; 0xc8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00000000 	.word	0x00000000

080042b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_Init+0x40>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <HAL_Init+0x40>)
 80042be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_Init+0x40>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_Init+0x40>)
 80042ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_Init+0x40>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <HAL_Init+0x40>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042dc:	2003      	movs	r0, #3
 80042de:	f000 f94f 	bl	8004580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f000 f808 	bl	80042f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e8:	f7fd fdd4 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023c00 	.word	0x40023c00

080042f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_InitTick+0x54>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_InitTick+0x58>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	4619      	mov	r1, r3
 800430a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f967 	bl	80045ea <HAL_SYSTICK_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e00e      	b.n	8004344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d80a      	bhi.n	8004342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800432c:	2200      	movs	r2, #0
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	f000 f92f 	bl	8004596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004338:	4a06      	ldr	r2, [pc, #24]	; (8004354 <HAL_InitTick+0x5c>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000004 	.word	0x20000004
 8004350:	2000000c 	.word	0x2000000c
 8004354:	20000008 	.word	0x20000008

08004358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_IncTick+0x20>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_IncTick+0x24>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4413      	add	r3, r2
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_IncTick+0x24>)
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	2000000c 	.word	0x2000000c
 800437c:	2000029c 	.word	0x2000029c

08004380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return uwTick;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_GetTick+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	2000029c 	.word	0x2000029c

08004398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7ff ffee 	bl	8004380 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d005      	beq.n	80043be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_Delay+0x44>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043be:	bf00      	nop
 80043c0:	f7ff ffde 	bl	8004380 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d8f7      	bhi.n	80043c0 <HAL_Delay+0x28>
  {
  }
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <__NVIC_SetPriorityGrouping+0x44>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800440c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004412:	4a04      	ldr	r2, [pc, #16]	; (8004424 <__NVIC_SetPriorityGrouping+0x44>)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	60d3      	str	r3, [r2, #12]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <__NVIC_GetPriorityGrouping+0x18>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	f003 0307 	and.w	r3, r3, #7
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	2b00      	cmp	r3, #0
 8004454:	db0b      	blt.n	800446e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	f003 021f 	and.w	r2, r3, #31
 800445c:	4907      	ldr	r1, [pc, #28]	; (800447c <__NVIC_EnableIRQ+0x38>)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2001      	movs	r0, #1
 8004466:	fa00 f202 	lsl.w	r2, r0, r2
 800446a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e100 	.word	0xe000e100

08004480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800448c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004490:	2b00      	cmp	r3, #0
 8004492:	db0a      	blt.n	80044aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	490c      	ldr	r1, [pc, #48]	; (80044cc <__NVIC_SetPriority+0x4c>)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	0112      	lsls	r2, r2, #4
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	440b      	add	r3, r1
 80044a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a8:	e00a      	b.n	80044c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	4908      	ldr	r1, [pc, #32]	; (80044d0 <__NVIC_SetPriority+0x50>)
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	3b04      	subs	r3, #4
 80044b8:	0112      	lsls	r2, r2, #4
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	440b      	add	r3, r1
 80044be:	761a      	strb	r2, [r3, #24]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000e100 	.word	0xe000e100
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f1c3 0307 	rsb	r3, r3, #7
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	bf28      	it	cs
 80044f2:	2304      	movcs	r3, #4
 80044f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3304      	adds	r3, #4
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d902      	bls.n	8004504 <NVIC_EncodePriority+0x30>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3b03      	subs	r3, #3
 8004502:	e000      	b.n	8004506 <NVIC_EncodePriority+0x32>
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004508:	f04f 32ff 	mov.w	r2, #4294967295
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	401a      	ands	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800451c:	f04f 31ff 	mov.w	r1, #4294967295
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	fa01 f303 	lsl.w	r3, r1, r3
 8004526:	43d9      	mvns	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	4313      	orrs	r3, r2
         );
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800454c:	d301      	bcc.n	8004552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800454e:	2301      	movs	r3, #1
 8004550:	e00f      	b.n	8004572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <SysTick_Config+0x40>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3b01      	subs	r3, #1
 8004558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800455a:	210f      	movs	r1, #15
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	f7ff ff8e 	bl	8004480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <SysTick_Config+0x40>)
 8004566:	2200      	movs	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <SysTick_Config+0x40>)
 800456c:	2207      	movs	r2, #7
 800456e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	e000e010 	.word	0xe000e010

08004580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff29 	bl	80043e0 <__NVIC_SetPriorityGrouping>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	4603      	mov	r3, r0
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045a8:	f7ff ff3e 	bl	8004428 <__NVIC_GetPriorityGrouping>
 80045ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	6978      	ldr	r0, [r7, #20]
 80045b4:	f7ff ff8e 	bl	80044d4 <NVIC_EncodePriority>
 80045b8:	4602      	mov	r2, r0
 80045ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff5d 	bl	8004480 <__NVIC_SetPriority>
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4603      	mov	r3, r0
 80045d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff31 	bl	8004444 <__NVIC_EnableIRQ>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ffa2 	bl	800453c <SysTick_Config>
 80045f8:	4603      	mov	r3, r0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d004      	beq.n	8004620 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e00c      	b.n	800463a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2205      	movs	r2, #5
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004654:	b2db      	uxtb	r3, r3
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	e165      	b.n	800494c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004680:	2201      	movs	r2, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	429a      	cmp	r2, r3
 800469a:	f040 8154 	bne.w	8004946 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d005      	beq.n	80046b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d130      	bne.n	8004718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	2203      	movs	r2, #3
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046ec:	2201      	movs	r2, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 0201 	and.w	r2, r3, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b03      	cmp	r3, #3
 8004722:	d017      	beq.n	8004754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d123      	bne.n	80047a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	08da      	lsrs	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3208      	adds	r2, #8
 8004768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	220f      	movs	r2, #15
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	08da      	lsrs	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3208      	adds	r2, #8
 80047a2:	69b9      	ldr	r1, [r7, #24]
 80047a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	2203      	movs	r2, #3
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4013      	ands	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0203 	and.w	r2, r3, #3
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80ae 	beq.w	8004946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <HAL_GPIO_Init+0x300>)
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	4a5c      	ldr	r2, [pc, #368]	; (8004964 <HAL_GPIO_Init+0x300>)
 80047f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f8:	6453      	str	r3, [r2, #68]	; 0x44
 80047fa:	4b5a      	ldr	r3, [pc, #360]	; (8004964 <HAL_GPIO_Init+0x300>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004806:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_GPIO_Init+0x304>)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	3302      	adds	r3, #2
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	220f      	movs	r2, #15
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a4f      	ldr	r2, [pc, #316]	; (800496c <HAL_GPIO_Init+0x308>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d025      	beq.n	800487e <HAL_GPIO_Init+0x21a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <HAL_GPIO_Init+0x30c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <HAL_GPIO_Init+0x216>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a4d      	ldr	r2, [pc, #308]	; (8004974 <HAL_GPIO_Init+0x310>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <HAL_GPIO_Init+0x212>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a4c      	ldr	r2, [pc, #304]	; (8004978 <HAL_GPIO_Init+0x314>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x20e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a4b      	ldr	r2, [pc, #300]	; (800497c <HAL_GPIO_Init+0x318>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x20a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a4a      	ldr	r2, [pc, #296]	; (8004980 <HAL_GPIO_Init+0x31c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x206>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a49      	ldr	r2, [pc, #292]	; (8004984 <HAL_GPIO_Init+0x320>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x202>
 8004862:	2306      	movs	r3, #6
 8004864:	e00c      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 8004866:	2307      	movs	r3, #7
 8004868:	e00a      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 800486a:	2305      	movs	r3, #5
 800486c:	e008      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 800486e:	2304      	movs	r3, #4
 8004870:	e006      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 8004872:	2303      	movs	r3, #3
 8004874:	e004      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 8004876:	2302      	movs	r3, #2
 8004878:	e002      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_GPIO_Init+0x21c>
 800487e:	2300      	movs	r3, #0
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f002 0203 	and.w	r2, r2, #3
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	4093      	lsls	r3, r2
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004890:	4935      	ldr	r1, [pc, #212]	; (8004968 <HAL_GPIO_Init+0x304>)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800489e:	4b3a      	ldr	r3, [pc, #232]	; (8004988 <HAL_GPIO_Init+0x324>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048c2:	4a31      	ldr	r2, [pc, #196]	; (8004988 <HAL_GPIO_Init+0x324>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c8:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_GPIO_Init+0x324>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048ec:	4a26      	ldr	r2, [pc, #152]	; (8004988 <HAL_GPIO_Init+0x324>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048f2:	4b25      	ldr	r3, [pc, #148]	; (8004988 <HAL_GPIO_Init+0x324>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004916:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <HAL_GPIO_Init+0x324>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_GPIO_Init+0x324>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004940:	4a11      	ldr	r2, [pc, #68]	; (8004988 <HAL_GPIO_Init+0x324>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	f67f ae96 	bls.w	8004680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	40013800 	.word	0x40013800
 800496c:	40020000 	.word	0x40020000
 8004970:	40020400 	.word	0x40020400
 8004974:	40020800 	.word	0x40020800
 8004978:	40020c00 	.word	0x40020c00
 800497c:	40021000 	.word	0x40021000
 8004980:	40021400 	.word	0x40021400
 8004984:	40021800 	.word	0x40021800
 8004988:	40013c00 	.word	0x40013c00

0800498c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
 8004998:	4613      	mov	r3, r2
 800499a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800499c:	787b      	ldrb	r3, [r7, #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049a8:	e003      	b.n	80049b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	041a      	lsls	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e12b      	b.n	8004c2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd fa7c 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a24:	f002 fd70 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 8004a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4a81      	ldr	r2, [pc, #516]	; (8004c34 <HAL_I2C_Init+0x274>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d807      	bhi.n	8004a44 <HAL_I2C_Init+0x84>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a80      	ldr	r2, [pc, #512]	; (8004c38 <HAL_I2C_Init+0x278>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	bf94      	ite	ls
 8004a3c:	2301      	movls	r3, #1
 8004a3e:	2300      	movhi	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e006      	b.n	8004a52 <HAL_I2C_Init+0x92>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a7d      	ldr	r2, [pc, #500]	; (8004c3c <HAL_I2C_Init+0x27c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	bf94      	ite	ls
 8004a4c:	2301      	movls	r3, #1
 8004a4e:	2300      	movhi	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0e7      	b.n	8004c2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a78      	ldr	r2, [pc, #480]	; (8004c40 <HAL_I2C_Init+0x280>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0c9b      	lsrs	r3, r3, #18
 8004a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a6a      	ldr	r2, [pc, #424]	; (8004c34 <HAL_I2C_Init+0x274>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d802      	bhi.n	8004a94 <HAL_I2C_Init+0xd4>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3301      	adds	r3, #1
 8004a92:	e009      	b.n	8004aa8 <HAL_I2C_Init+0xe8>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_I2C_Init+0x284>)
 8004aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	495c      	ldr	r1, [pc, #368]	; (8004c34 <HAL_I2C_Init+0x274>)
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	d819      	bhi.n	8004afc <HAL_I2C_Init+0x13c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1e59      	subs	r1, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004adc:	400b      	ands	r3, r1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_I2C_Init+0x138>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1e59      	subs	r1, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	e051      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004af8:	2304      	movs	r3, #4
 8004afa:	e04f      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d111      	bne.n	8004b28 <HAL_I2C_Init+0x168>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1e58      	subs	r0, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	440b      	add	r3, r1
 8004b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e012      	b.n	8004b4e <HAL_I2C_Init+0x18e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	0099      	lsls	r1, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Init+0x196>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e022      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10e      	bne.n	8004b7c <HAL_I2C_Init+0x1bc>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1e58      	subs	r0, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	440b      	add	r3, r1
 8004b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7a:	e00f      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1e58      	subs	r0, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	0099      	lsls	r1, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	6809      	ldr	r1, [r1, #0]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6911      	ldr	r1, [r2, #16]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68d2      	ldr	r2, [r2, #12]
 8004bd6:	4311      	orrs	r1, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	000186a0 	.word	0x000186a0
 8004c38:	001e847f 	.word	0x001e847f
 8004c3c:	003d08ff 	.word	0x003d08ff
 8004c40:	431bde83 	.word	0x431bde83
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	817b      	strh	r3, [r7, #10]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	813b      	strh	r3, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c62:	f7ff fb8d 	bl	8004380 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	f040 80d9 	bne.w	8004e28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2319      	movs	r3, #25
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	496d      	ldr	r1, [pc, #436]	; (8004e34 <HAL_I2C_Mem_Write+0x1ec>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f002 f925 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e0cc      	b.n	8004e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Mem_Write+0x56>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0c5      	b.n	8004e2a <HAL_I2C_Mem_Write+0x1e2>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d007      	beq.n	8004cc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2221      	movs	r2, #33	; 0x21
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a4d      	ldr	r2, [pc, #308]	; (8004e38 <HAL_I2C_Mem_Write+0x1f0>)
 8004d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d06:	88f8      	ldrh	r0, [r7, #6]
 8004d08:	893a      	ldrh	r2, [r7, #8]
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f001 feb4 	bl	8006a84 <I2C_RequestMemoryWrite>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d052      	beq.n	8004dc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e081      	b.n	8004e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f002 f9a6 	bl	800707c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d107      	bne.n	8004d4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06b      	b.n	8004e2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_I2C_Mem_Write+0x180>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d017      	beq.n	8004dc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	781a      	ldrb	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1aa      	bne.n	8004d26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f002 f992 	bl	80070fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d107      	bne.n	8004df8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e016      	b.n	8004e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	00100002 	.word	0x00100002
 8004e38:	ffff0000 	.word	0xffff0000

08004e3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	817b      	strh	r3, [r7, #10]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	813b      	strh	r3, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e56:	f7ff fa93 	bl	8004380 <HAL_GetTick>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	f040 8208 	bne.w	800527a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2319      	movs	r3, #25
 8004e70:	2201      	movs	r2, #1
 8004e72:	497b      	ldr	r1, [pc, #492]	; (8005060 <HAL_I2C_Mem_Read+0x224>)
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f002 f82b 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
 8004e82:	e1fb      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2C_Mem_Read+0x56>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e1f4      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d007      	beq.n	8004eb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2222      	movs	r2, #34	; 0x22
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2240      	movs	r2, #64	; 0x40
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a5b      	ldr	r2, [pc, #364]	; (8005064 <HAL_I2C_Mem_Read+0x228>)
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004efa:	88f8      	ldrh	r0, [r7, #6]
 8004efc:	893a      	ldrh	r2, [r7, #8]
 8004efe:	8979      	ldrh	r1, [r7, #10]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	4603      	mov	r3, r0
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f001 fe50 	bl	8006bb0 <I2C_RequestMemoryRead>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e1b0      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d113      	bne.n	8004f4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e184      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d11b      	bne.n	8004f8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e164      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d11b      	bne.n	8004fca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	e144      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fe0:	e138      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	f200 80f1 	bhi.w	80051ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d123      	bne.n	800503c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f002 f8f3 	bl	80071e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e139      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
 800503a:	e10b      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	2b02      	cmp	r3, #2
 8005042:	d14e      	bne.n	80050e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	2200      	movs	r2, #0
 800504c:	4906      	ldr	r1, [pc, #24]	; (8005068 <HAL_I2C_Mem_Read+0x22c>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f001 ff3e 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e10e      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
 800505e:	bf00      	nop
 8005060:	00100002 	.word	0x00100002
 8005064:	ffff0000 	.word	0xffff0000
 8005068:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050e0:	e0b8      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2200      	movs	r2, #0
 80050ea:	4966      	ldr	r1, [pc, #408]	; (8005284 <HAL_I2C_Mem_Read+0x448>)
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f001 feef 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0bf      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2200      	movs	r2, #0
 8005146:	494f      	ldr	r1, [pc, #316]	; (8005284 <HAL_I2C_Mem_Read+0x448>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f001 fec1 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e091      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051cc:	e042      	b.n	8005254 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f002 f806 	bl	80071e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e04c      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b04      	cmp	r3, #4
 8005220:	d118      	bne.n	8005254 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	f47f aec2 	bne.w	8004fe2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	00010004 	.word	0x00010004

08005288 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	460b      	mov	r3, r1
 8005296:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005298:	f7ff f872 	bl	8004380 <HAL_GetTick>
 800529c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	f040 8111 	bne.w	80054d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2319      	movs	r3, #25
 80052b6:	2201      	movs	r2, #1
 80052b8:	4988      	ldr	r1, [pc, #544]	; (80054dc <HAL_I2C_IsDeviceReady+0x254>)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f001 fe08 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
 80052c8:	e104      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_I2C_IsDeviceReady+0x50>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e0fd      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d007      	beq.n	80052fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2224      	movs	r2, #36	; 0x24
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a70      	ldr	r2, [pc, #448]	; (80054e0 <HAL_I2C_IsDeviceReady+0x258>)
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005330:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f001 fdc6 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005358:	d103      	bne.n	8005362 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0b6      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005366:	897b      	ldrh	r3, [r7, #10]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005374:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005376:	f7ff f803 	bl	8004380 <HAL_GetTick>
 800537a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a0:	bf0c      	ite	eq
 80053a2:	2301      	moveq	r3, #1
 80053a4:	2300      	movne	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80053aa:	e025      	b.n	80053f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ac:	f7fe ffe8 	bl	8004380 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <HAL_I2C_IsDeviceReady+0x13a>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22a0      	movs	r2, #160	; 0xa0
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2ba0      	cmp	r3, #160	; 0xa0
 8005402:	d005      	beq.n	8005410 <HAL_I2C_IsDeviceReady+0x188>
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <HAL_I2C_IsDeviceReady+0x188>
 800540a:	7dbb      	ldrb	r3, [r7, #22]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0cd      	beq.n	80053ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d129      	bne.n	800547a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2319      	movs	r3, #25
 8005452:	2201      	movs	r2, #1
 8005454:	4921      	ldr	r1, [pc, #132]	; (80054dc <HAL_I2C_IsDeviceReady+0x254>)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f001 fd3a 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e036      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e02c      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005488:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005492:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	2319      	movs	r3, #25
 800549a:	2201      	movs	r2, #1
 800549c:	490f      	ldr	r1, [pc, #60]	; (80054dc <HAL_I2C_IsDeviceReady+0x254>)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f001 fd16 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e012      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	3301      	adds	r3, #1
 80054b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f4ff af32 	bcc.w	8005322 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	00100002 	.word	0x00100002
 80054e0:	ffff0000 	.word	0xffff0000

080054e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005504:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d003      	beq.n	800551c <HAL_I2C_EV_IRQHandler+0x38>
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	f040 80c1 	bne.w	800569e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <HAL_I2C_EV_IRQHandler+0x6e>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800553c:	d003      	beq.n	8005546 <HAL_I2C_EV_IRQHandler+0x62>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005544:	d101      	bne.n	800554a <HAL_I2C_EV_IRQHandler+0x66>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <HAL_I2C_EV_IRQHandler+0x68>
 800554a:	2300      	movs	r3, #0
 800554c:	2b01      	cmp	r3, #1
 800554e:	f000 8132 	beq.w	80057b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_I2C_EV_IRQHandler+0x92>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	0a5b      	lsrs	r3, r3, #9
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fec0 	bl	80072ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fcdc 	bl	8005f2c <I2C_Master_SB>
 8005574:	e092      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0xb2>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	0a5b      	lsrs	r3, r3, #9
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fd52 	bl	8006038 <I2C_Master_ADD10>
 8005594:	e082      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	0a5b      	lsrs	r3, r3, #9
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fd6c 	bl	800608c <I2C_Master_ADDR>
 80055b4:	e072      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d03b      	beq.n	800563a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	f000 80f3 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	09db      	lsrs	r3, r3, #7
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00f      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0x11c>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0x11c>
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f94c 	bl	8005896 <I2C_MasterTransmit_TXE>
 80055fe:	e04d      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	089b      	lsrs	r3, r3, #2
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80d6 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	0a5b      	lsrs	r3, r3, #9
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80cf 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b21      	cmp	r3, #33	; 0x21
 8005620:	d103      	bne.n	800562a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9d3 	bl	80059ce <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005628:	e0c7      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	f040 80c4 	bne.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fa41 	bl	8005aba <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005638:	e0bf      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005648:	f000 80b7 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	099b      	lsrs	r3, r3, #6
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <HAL_I2C_EV_IRQHandler+0x194>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	0a9b      	lsrs	r3, r3, #10
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <HAL_I2C_EV_IRQHandler+0x194>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fab6 	bl	8005be2 <I2C_MasterReceive_RXNE>
 8005676:	e011      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 809a 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8093 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fb5f 	bl	8005d58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800569a:	e08e      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800569c:	e08d      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	e007      	b.n	80056c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	0a5b      	lsrs	r3, r3, #9
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 ff1d 	bl	800652a <I2C_Slave_ADDR>
 80056f0:	e066      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x22e>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	0a5b      	lsrs	r3, r3, #9
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 ff58 	bl	80065c0 <I2C_Slave_STOPF>
 8005710:	e056      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	2b21      	cmp	r3, #33	; 0x21
 8005716:	d002      	beq.n	800571e <HAL_I2C_EV_IRQHandler+0x23a>
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	2b29      	cmp	r3, #41	; 0x29
 800571c:	d125      	bne.n	800576a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	09db      	lsrs	r3, r3, #7
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00f      	beq.n	800574a <HAL_I2C_EV_IRQHandler+0x266>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	0a9b      	lsrs	r3, r3, #10
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_I2C_EV_IRQHandler+0x266>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fe33 	bl	80063ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005748:	e039      	b.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	089b      	lsrs	r3, r3, #2
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d033      	beq.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	0a5b      	lsrs	r3, r3, #9
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d02d      	beq.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fe60 	bl	8006428 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005768:	e029      	b.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	099b      	lsrs	r3, r3, #6
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00f      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	0a9b      	lsrs	r3, r3, #10
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fe6b 	bl	800646a <I2C_SlaveReceive_RXNE>
 8005794:	e014      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	0a5b      	lsrs	r3, r3, #9
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fe99 	bl	80064e6 <I2C_SlaveReceive_BTF>
 80057b4:	e004      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80057b6:	bf00      	nop
 80057b8:	e002      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
 8005822:	4613      	mov	r3, r2
 8005824:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ac:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d150      	bne.n	800595e <I2C_MasterTransmit_TXE+0xc8>
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b21      	cmp	r3, #33	; 0x21
 80058c0:	d14d      	bne.n	800595e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d01d      	beq.n	8005904 <I2C_MasterTransmit_TXE+0x6e>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d01a      	beq.n	8005904 <I2C_MasterTransmit_TXE+0x6e>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d4:	d016      	beq.n	8005904 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2211      	movs	r2, #17
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff62 	bl	80057c6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005902:	e060      	b.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005912:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005922:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d107      	bne.n	800594e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff ff7d 	bl	8005846 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800594c:	e03b      	b.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff ff35 	bl	80057c6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800595c:	e033      	b.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b21      	cmp	r3, #33	; 0x21
 8005962:	d005      	beq.n	8005970 <I2C_MasterTransmit_TXE+0xda>
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d12d      	bne.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b22      	cmp	r3, #34	; 0x22
 800596e:	d12a      	bne.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d108      	bne.n	800598c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005988:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800598a:	e01c      	b.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d103      	bne.n	80059a0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f88e 	bl	8005aba <I2C_MemoryTransmit_TXE_BTF>
}
 800599e:	e012      	b.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059c4:	e7ff      	b.n	80059c6 <I2C_MasterTransmit_TXE+0x130>
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b21      	cmp	r3, #33	; 0x21
 80059e6:	d164      	bne.n	8005ab2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d012      	beq.n	8005a18 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005a16:	e04c      	b.n	8005ab2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d01d      	beq.n	8005a5a <I2C_MasterTransmit_BTF+0x8c>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d01a      	beq.n	8005a5a <I2C_MasterTransmit_BTF+0x8c>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a2a:	d016      	beq.n	8005a5a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a3a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2211      	movs	r2, #17
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff feb7 	bl	80057c6 <HAL_I2C_MasterTxCpltCallback>
}
 8005a58:	e02b      	b.n	8005ab2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a68:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a78:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d107      	bne.n	8005aa4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fed2 	bl	8005846 <HAL_I2C_MemTxCpltCallback>
}
 8005aa2:	e006      	b.n	8005ab2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fe8a 	bl	80057c6 <HAL_I2C_MasterTxCpltCallback>
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11d      	bne.n	8005b0e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10b      	bne.n	8005af2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005af0:	e073      	b.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	121b      	asrs	r3, r3, #8
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b0c:	e065      	b.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10b      	bne.n	8005b2e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b2c:	e055      	b.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d151      	bne.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b22      	cmp	r3, #34	; 0x22
 8005b3a:	d10d      	bne.n	8005b58 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b56:	e040      	b.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b21      	cmp	r3, #33	; 0x21
 8005b66:	d112      	bne.n	8005b8e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b8c:	e025      	b.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d120      	bne.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b21      	cmp	r3, #33	; 0x21
 8005b9c:	d11d      	bne.n	8005bda <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fe36 	bl	8005846 <HAL_I2C_MemTxCpltCallback>
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b22      	cmp	r3, #34	; 0x22
 8005bf4:	f040 80ac 	bne.w	8005d50 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d921      	bls.n	8005c4a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	f040 808c 	bne.w	8005d50 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c46:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005c48:	e082      	b.n	8005d50 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d075      	beq.n	8005d3e <I2C_MasterReceive_RXNE+0x15c>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d002      	beq.n	8005c5e <I2C_MasterReceive_RXNE+0x7c>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d16f      	bne.n	8005d3e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fa8e 	bl	8007180 <I2C_WaitOnSTOPRequestThroughIT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d142      	bne.n	8005cf0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d10a      	bne.n	8005cda <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fdc1 	bl	800585a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cd8:	e03a      	b.n	8005d50 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2212      	movs	r2, #18
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff fd76 	bl	80057da <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cee:	e02f      	b.n	8005d50 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cfe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fd99 	bl	800586e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d3c:	e008      	b.n	8005d50 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4c:	605a      	str	r2, [r3, #4]
}
 8005d4e:	e7ff      	b.n	8005d50 <I2C_MasterReceive_RXNE+0x16e>
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d11b      	bne.n	8005da8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005da6:	e0bd      	b.n	8005f24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d129      	bne.n	8005e06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d00a      	beq.n	8005dde <I2C_MasterReceive_BTF+0x86>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d007      	beq.n	8005dde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ddc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e04:	e08e      	b.n	8005f24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d176      	bne.n	8005efe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d002      	beq.n	8005e1c <I2C_MasterReceive_BTF+0xc4>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d108      	bne.n	8005e2e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e019      	b.n	8005e62 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d002      	beq.n	8005e3a <I2C_MasterReceive_BTF+0xe2>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d108      	bne.n	8005e4c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e00a      	b.n	8005e62 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d007      	beq.n	8005e62 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ebc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d10a      	bne.n	8005ee8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff fcba 	bl	800585a <HAL_I2C_MemRxCpltCallback>
}
 8005ee6:	e01d      	b.n	8005f24 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2212      	movs	r2, #18
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fc6f 	bl	80057da <HAL_I2C_MasterRxCpltCallback>
}
 8005efc:	e012      	b.n	8005f24 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d117      	bne.n	8005f70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005f5a:	e067      	b.n	800602c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	611a      	str	r2, [r3, #16]
}
 8005f6e:	e05d      	b.n	800602c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f78:	d133      	bne.n	8005fe2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b21      	cmp	r3, #33	; 0x21
 8005f84:	d109      	bne.n	8005f9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f96:	611a      	str	r2, [r3, #16]
 8005f98:	e008      	b.n	8005fac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <I2C_Master_SB+0x92>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d108      	bne.n	8005fd0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d032      	beq.n	800602c <I2C_Master_SB+0x100>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02d      	beq.n	800602c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fde:	605a      	str	r2, [r3, #4]
}
 8005fe0:	e024      	b.n	800602c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10e      	bne.n	8006008 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	11db      	asrs	r3, r3, #7
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0306 	and.w	r3, r3, #6
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f063 030f 	orn	r3, r3, #15
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	611a      	str	r2, [r3, #16]
}
 8006006:	e011      	b.n	800602c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10d      	bne.n	800602c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006014:	b29b      	uxth	r3, r3
 8006016:	11db      	asrs	r3, r3, #7
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 0306 	and.w	r3, r3, #6
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f063 030e 	orn	r3, r3, #14
 8006024:	b2da      	uxtb	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	611a      	str	r2, [r3, #16]
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	b2da      	uxtb	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <I2C_Master_ADD10+0x26>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d108      	bne.n	8006070 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <I2C_Master_ADD10+0x48>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607e:	605a      	str	r2, [r3, #4]
  }
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800608c:	b480      	push	{r7}
 800608e:	b091      	sub	sp, #68	; 0x44
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b22      	cmp	r3, #34	; 0x22
 80060b4:	f040 8169 	bne.w	800638a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <I2C_Master_ADDR+0x54>
 80060c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d10b      	bne.n	80060e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c8:	2300      	movs	r3, #0
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	633b      	str	r3, [r7, #48]	; 0x30
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	e160      	b.n	80063a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11d      	bne.n	8006124 <I2C_Master_ADDR+0x98>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060f0:	d118      	bne.n	8006124 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f2:	2300      	movs	r3, #0
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006116:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	651a      	str	r2, [r3, #80]	; 0x50
 8006122:	e13e      	b.n	80063a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d113      	bne.n	8006156 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612e:	2300      	movs	r3, #0
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e115      	b.n	8006382 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	f040 808a 	bne.w	8006276 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006168:	d137      	bne.n	80061da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006178:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006188:	d113      	bne.n	80061b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619a:	2300      	movs	r3, #0
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	e0e7      	b.n	8006382 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b2:	2300      	movs	r3, #0
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e0d3      	b.n	8006382 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d02e      	beq.n	800623e <I2C_Master_ADDR+0x1b2>
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d02b      	beq.n	800623e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	2b12      	cmp	r3, #18
 80061ea:	d102      	bne.n	80061f2 <I2C_Master_ADDR+0x166>
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d125      	bne.n	800623e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d00e      	beq.n	8006216 <I2C_Master_ADDR+0x18a>
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d00b      	beq.n	8006216 <I2C_Master_ADDR+0x18a>
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	2b10      	cmp	r3, #16
 8006202:	d008      	beq.n	8006216 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e007      	b.n	8006226 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006224:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	e0a1      	b.n	8006382 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e085      	b.n	8006382 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d14d      	bne.n	800631c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	2b04      	cmp	r3, #4
 8006284:	d016      	beq.n	80062b4 <I2C_Master_ADDR+0x228>
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	2b02      	cmp	r3, #2
 800628a:	d013      	beq.n	80062b4 <I2C_Master_ADDR+0x228>
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	2b10      	cmp	r3, #16
 8006290:	d010      	beq.n	80062b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e007      	b.n	80062c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d2:	d117      	bne.n	8006304 <I2C_Master_ADDR+0x278>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062da:	d00b      	beq.n	80062f4 <I2C_Master_ADDR+0x268>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d008      	beq.n	80062f4 <I2C_Master_ADDR+0x268>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d005      	beq.n	80062f4 <I2C_Master_ADDR+0x268>
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d002      	beq.n	80062f4 <I2C_Master_ADDR+0x268>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d107      	bne.n	8006304 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006302:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	e032      	b.n	8006382 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800632a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633a:	d117      	bne.n	800636c <I2C_Master_ADDR+0x2e0>
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006342:	d00b      	beq.n	800635c <I2C_Master_ADDR+0x2d0>
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b01      	cmp	r3, #1
 8006348:	d008      	beq.n	800635c <I2C_Master_ADDR+0x2d0>
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	2b08      	cmp	r3, #8
 800634e:	d005      	beq.n	800635c <I2C_Master_ADDR+0x2d0>
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	2b10      	cmp	r3, #16
 8006354:	d002      	beq.n	800635c <I2C_Master_ADDR+0x2d0>
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	2b20      	cmp	r3, #32
 800635a:	d107      	bne.n	800636c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800636a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006388:	e00b      	b.n	80063a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	e7ff      	b.n	80063a2 <I2C_Master_ADDR+0x316>
 80063a2:	bf00      	nop
 80063a4:	3744      	adds	r7, #68	; 0x44
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02b      	beq.n	8006420 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	781a      	ldrb	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d114      	bne.n	8006420 <I2C_SlaveTransmit_TXE+0x72>
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b29      	cmp	r3, #41	; 0x29
 80063fa:	d111      	bne.n	8006420 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2221      	movs	r2, #33	; 0x21
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2228      	movs	r2, #40	; 0x28
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff f9e7 	bl	80057ee <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d011      	beq.n	800645e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d02c      	beq.n	80064de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d114      	bne.n	80064de <I2C_SlaveReceive_RXNE+0x74>
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b2a      	cmp	r3, #42	; 0x2a
 80064b8:	d111      	bne.n	80064de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2222      	movs	r2, #34	; 0x22
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2228      	movs	r2, #40	; 0x28
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff f992 	bl	8005802 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d012      	beq.n	800651e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006544:	2b28      	cmp	r3, #40	; 0x28
 8006546:	d127      	bne.n	8006598 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006556:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	81bb      	strh	r3, [r7, #12]
 800657a:	e002      	b.n	8006582 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800658a:	89ba      	ldrh	r2, [r7, #12]
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff f940 	bl	8005816 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006596:	e00e      	b.n	80065b6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	60bb      	str	r3, [r7, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661c:	d172      	bne.n	8006704 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b22      	cmp	r3, #34	; 0x22
 8006622:	d002      	beq.n	800662a <I2C_Slave_STOPF+0x6a>
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b2a      	cmp	r3, #42	; 0x2a
 8006628:	d135      	bne.n	8006696 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b29a      	uxth	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	4618      	mov	r0, r3
 8006664:	f7fd ffef 	bl	8004646 <HAL_DMA_GetState>
 8006668:	4603      	mov	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d049      	beq.n	8006702 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	4a69      	ldr	r2, [pc, #420]	; (8006818 <I2C_Slave_STOPF+0x258>)
 8006674:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd ffc1 	bl	8004602 <HAL_DMA_Abort_IT>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d03d      	beq.n	8006702 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006694:	e035      	b.n	8006702 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0204 	orr.w	r2, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd ffb9 	bl	8004646 <HAL_DMA_GetState>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d014      	beq.n	8006704 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066de:	4a4e      	ldr	r2, [pc, #312]	; (8006818 <I2C_Slave_STOPF+0x258>)
 80066e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd ff8b 	bl	8004602 <HAL_DMA_Abort_IT>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	e000      	b.n	8006704 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006702:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d03e      	beq.n	800678c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d112      	bne.n	8006742 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d112      	bne.n	8006776 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	f043 0204 	orr.w	r2, r3, #4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f843 	bl	8006820 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800679a:	e039      	b.n	8006810 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b2a      	cmp	r3, #42	; 0x2a
 80067a0:	d109      	bne.n	80067b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2228      	movs	r2, #40	; 0x28
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f826 	bl	8005802 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b28      	cmp	r3, #40	; 0x28
 80067c0:	d111      	bne.n	80067e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <I2C_Slave_STOPF+0x25c>)
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff f827 	bl	8005832 <HAL_I2C_ListenCpltCallback>
}
 80067e4:	e014      	b.n	8006810 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	2b22      	cmp	r3, #34	; 0x22
 80067ec:	d002      	beq.n	80067f4 <I2C_Slave_STOPF+0x234>
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b22      	cmp	r3, #34	; 0x22
 80067f2:	d10d      	bne.n	8006810 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fe fff9 	bl	8005802 <HAL_I2C_SlaveRxCpltCallback>
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	08006d81 	.word	0x08006d81
 800681c:	ffff0000 	.word	0xffff0000

08006820 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006836:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	2b10      	cmp	r3, #16
 800683c:	d002      	beq.n	8006844 <I2C_ITError+0x24>
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d10a      	bne.n	800685a <I2C_ITError+0x3a>
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b22      	cmp	r3, #34	; 0x22
 8006848:	d107      	bne.n	800685a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006858:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006860:	2b28      	cmp	r3, #40	; 0x28
 8006862:	d107      	bne.n	8006874 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2228      	movs	r2, #40	; 0x28
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006872:	e015      	b.n	80068a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800687e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006882:	d00a      	beq.n	800689a <I2C_ITError+0x7a>
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b60      	cmp	r3, #96	; 0x60
 8006888:	d007      	beq.n	800689a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ae:	d162      	bne.n	8006976 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d020      	beq.n	8006910 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	4a6a      	ldr	r2, [pc, #424]	; (8006a7c <I2C_ITError+0x25c>)
 80068d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd fe91 	bl	8004602 <HAL_DMA_Abort_IT>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8089 	beq.w	80069fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800690a:	4610      	mov	r0, r2
 800690c:	4798      	blx	r3
 800690e:	e074      	b.n	80069fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	4a59      	ldr	r2, [pc, #356]	; (8006a7c <I2C_ITError+0x25c>)
 8006916:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fe70 	bl	8004602 <HAL_DMA_Abort_IT>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d068      	beq.n	80069fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d10b      	bne.n	800694e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	e041      	b.n	80069fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b60      	cmp	r3, #96	; 0x60
 8006980:	d125      	bne.n	80069ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d10b      	bne.n	80069b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fe ff5b 	bl	8005882 <HAL_I2C_AbortCpltCallback>
 80069cc:	e015      	b.n	80069fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d10b      	bne.n	80069f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fe ff3a 	bl	800586e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10e      	bne.n	8006a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d113      	bne.n	8006a74 <I2C_ITError+0x254>
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b28      	cmp	r3, #40	; 0x28
 8006a50:	d110      	bne.n	8006a74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <I2C_ITError+0x260>)
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fe fedf 	bl	8005832 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	08006d81 	.word	0x08006d81
 8006a80:	ffff0000 	.word	0xffff0000

08006a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	817b      	strh	r3, [r7, #10]
 8006a96:	460b      	mov	r3, r1
 8006a98:	813b      	strh	r3, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fa08 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad4:	d103      	bne.n	8006ade <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e05f      	b.n	8006ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	6a3a      	ldr	r2, [r7, #32]
 8006af6:	492d      	ldr	r1, [pc, #180]	; (8006bac <I2C_RequestMemoryWrite+0x128>)
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fa40 	bl	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e04c      	b.n	8006ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b20:	6a39      	ldr	r1, [r7, #32]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 faaa 	bl	800707c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d107      	bne.n	8006b46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e02b      	b.n	8006ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d105      	bne.n	8006b5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b50:	893b      	ldrh	r3, [r7, #8]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	611a      	str	r2, [r3, #16]
 8006b5a:	e021      	b.n	8006ba0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b5c:	893b      	ldrh	r3, [r7, #8]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	6a39      	ldr	r1, [r7, #32]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 fa84 	bl	800707c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00d      	beq.n	8006b96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d107      	bne.n	8006b92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e005      	b.n	8006ba2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b96:	893b      	ldrh	r3, [r7, #8]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	00010002 	.word	0x00010002

08006bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	817b      	strh	r3, [r7, #10]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	813b      	strh	r3, [r7, #8]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f96a 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c10:	d103      	bne.n	8006c1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e0aa      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	6a3a      	ldr	r2, [r7, #32]
 8006c32:	4952      	ldr	r1, [pc, #328]	; (8006d7c <I2C_RequestMemoryRead+0x1cc>)
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f9a2 	bl	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e097      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5c:	6a39      	ldr	r1, [r7, #32]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fa0c 	bl	800707c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d107      	bne.n	8006c82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e076      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d105      	bne.n	8006c98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c8c:	893b      	ldrh	r3, [r7, #8]
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	611a      	str	r2, [r3, #16]
 8006c96:	e021      	b.n	8006cdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c98:	893b      	ldrh	r3, [r7, #8]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca8:	6a39      	ldr	r1, [r7, #32]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f9e6 	bl	800707c <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d107      	bne.n	8006cce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e050      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd2:	893b      	ldrh	r3, [r7, #8]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	6a39      	ldr	r1, [r7, #32]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f9cb 	bl	800707c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d107      	bne.n	8006d04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e035      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f8d3 	bl	8006ed0 <I2C_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00d      	beq.n	8006d4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3e:	d103      	bne.n	8006d48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e013      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d4c:	897b      	ldrh	r3, [r7, #10]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	6a3a      	ldr	r2, [r7, #32]
 8006d60:	4906      	ldr	r1, [pc, #24]	; (8006d7c <I2C_RequestMemoryRead+0x1cc>)
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f90b 	bl	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	00010002 	.word	0x00010002

08006d80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d9a:	4b4b      	ldr	r3, [pc, #300]	; (8006ec8 <I2C_DMAAbort+0x148>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	08db      	lsrs	r3, r3, #3
 8006da0:	4a4a      	ldr	r2, [pc, #296]	; (8006ecc <I2C_DMAAbort+0x14c>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	0a1a      	lsrs	r2, r3, #8
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	00da      	lsls	r2, r3, #3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006dc6:	e00a      	b.n	8006dde <I2C_DMAAbort+0x5e>
    }
    count--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ddc:	d0ea      	beq.n	8006db4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	2200      	movs	r2, #0
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2200      	movs	r2, #0
 8006e12:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	2200      	movs	r2, #0
 8006e22:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	2200      	movs	r2, #0
 8006e32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b60      	cmp	r3, #96	; 0x60
 8006e4e:	d10e      	bne.n	8006e6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2200      	movs	r2, #0
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f7fe fd0b 	bl	8005882 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e6c:	e027      	b.n	8006ebe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e6e:	7cfb      	ldrb	r3, [r7, #19]
 8006e70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e74:	2b28      	cmp	r3, #40	; 0x28
 8006e76:	d117      	bne.n	8006ea8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2228      	movs	r2, #40	; 0x28
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ea6:	e007      	b.n	8006eb8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006eb8:	6978      	ldr	r0, [r7, #20]
 8006eba:	f7fe fcd8 	bl	800586e <HAL_I2C_ErrorCallback>
}
 8006ebe:	bf00      	nop
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000004 	.word	0x20000004
 8006ecc:	14f8b589 	.word	0x14f8b589

08006ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ee0:	e025      	b.n	8006f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d021      	beq.n	8006f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eea:	f7fd fa49 	bl	8004380 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d116      	bne.n	8006f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f043 0220 	orr.w	r2, r3, #32
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e023      	b.n	8006f76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	0c1b      	lsrs	r3, r3, #16
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10d      	bne.n	8006f54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	43da      	mvns	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4013      	ands	r3, r2
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bf0c      	ite	eq
 8006f4a:	2301      	moveq	r3, #1
 8006f4c:	2300      	movne	r3, #0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	e00c      	b.n	8006f6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	43da      	mvns	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d0b6      	beq.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f8c:	e051      	b.n	8007032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9c:	d123      	bne.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e046      	b.n	8007074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d021      	beq.n	8007032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fee:	f7fd f9c7 	bl	8004380 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d302      	bcc.n	8007004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d116      	bne.n	8007032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e020      	b.n	8007074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d10c      	bne.n	8007056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	43da      	mvns	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4013      	ands	r3, r2
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	e00b      	b.n	800706e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	43da      	mvns	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	4013      	ands	r3, r2
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	bf14      	ite	ne
 8007068:	2301      	movne	r3, #1
 800706a:	2300      	moveq	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d18d      	bne.n	8006f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007088:	e02d      	b.n	80070e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f900 	bl	8007290 <I2C_IsAcknowledgeFailed>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e02d      	b.n	80070f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d021      	beq.n	80070e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a2:	f7fd f96d 	bl	8004380 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d116      	bne.n	80070e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f043 0220 	orr.w	r2, r3, #32
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e007      	b.n	80070f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f0:	2b80      	cmp	r3, #128	; 0x80
 80070f2:	d1ca      	bne.n	800708a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800710a:	e02d      	b.n	8007168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f8bf 	bl	8007290 <I2C_IsAcknowledgeFailed>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e02d      	b.n	8007178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d021      	beq.n	8007168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007124:	f7fd f92c 	bl	8004380 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d116      	bne.n	8007168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e007      	b.n	8007178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d1ca      	bne.n	800710c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800718c:	4b13      	ldr	r3, [pc, #76]	; (80071dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	08db      	lsrs	r3, r3, #3
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	0a1a      	lsrs	r2, r3, #8
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d107      	bne.n	80071be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f043 0220 	orr.w	r2, r3, #32
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e008      	b.n	80071d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071cc:	d0e9      	beq.n	80071a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000004 	.word	0x20000004
 80071e0:	14f8b589 	.word	0x14f8b589

080071e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071f0:	e042      	b.n	8007278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d119      	bne.n	8007234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0210 	mvn.w	r2, #16
 8007208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e029      	b.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007234:	f7fd f8a4 	bl	8004380 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	d302      	bcc.n	800724a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d116      	bne.n	8007278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e007      	b.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d1b5      	bne.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a6:	d11b      	bne.n	80072e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f043 0204 	orr.w	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80072fe:	d103      	bne.n	8007308 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007306:	e007      	b.n	8007318 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007310:	d102      	bne.n	8007318 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2208      	movs	r2, #8
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e0cc      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007338:	4b68      	ldr	r3, [pc, #416]	; (80074dc <HAL_RCC_ClockConfig+0x1b8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d90c      	bls.n	8007360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b65      	ldr	r3, [pc, #404]	; (80074dc <HAL_RCC_ClockConfig+0x1b8>)
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734e:	4b63      	ldr	r3, [pc, #396]	; (80074dc <HAL_RCC_ClockConfig+0x1b8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d001      	beq.n	8007360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e0b8      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d020      	beq.n	80073ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007378:	4b59      	ldr	r3, [pc, #356]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4a58      	ldr	r2, [pc, #352]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007390:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	4a52      	ldr	r2, [pc, #328]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800739a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800739c:	4b50      	ldr	r3, [pc, #320]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	494d      	ldr	r1, [pc, #308]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d044      	beq.n	8007444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d107      	bne.n	80073d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073c2:	4b47      	ldr	r3, [pc, #284]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d119      	bne.n	8007402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e07f      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d003      	beq.n	80073e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d107      	bne.n	80073f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e2:	4b3f      	ldr	r3, [pc, #252]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e06f      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f2:	4b3b      	ldr	r3, [pc, #236]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e067      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007402:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f023 0203 	bic.w	r2, r3, #3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4934      	ldr	r1, [pc, #208]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007410:	4313      	orrs	r3, r2
 8007412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007414:	f7fc ffb4 	bl	8004380 <HAL_GetTick>
 8007418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741a:	e00a      	b.n	8007432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800741c:	f7fc ffb0 	bl	8004380 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	f241 3288 	movw	r2, #5000	; 0x1388
 800742a:	4293      	cmp	r3, r2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e04f      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007432:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 020c 	and.w	r2, r3, #12
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	429a      	cmp	r2, r3
 8007442:	d1eb      	bne.n	800741c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007444:	4b25      	ldr	r3, [pc, #148]	; (80074dc <HAL_RCC_ClockConfig+0x1b8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 030f 	and.w	r3, r3, #15
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	d20c      	bcs.n	800746c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007452:	4b22      	ldr	r3, [pc, #136]	; (80074dc <HAL_RCC_ClockConfig+0x1b8>)
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <HAL_RCC_ClockConfig+0x1b8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d001      	beq.n	800746c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e032      	b.n	80074d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d008      	beq.n	800748a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007478:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4916      	ldr	r1, [pc, #88]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	4313      	orrs	r3, r2
 8007488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	490e      	ldr	r1, [pc, #56]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074aa:	f000 f855 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	490a      	ldr	r1, [pc, #40]	; (80074e4 <HAL_RCC_ClockConfig+0x1c0>)
 80074bc:	5ccb      	ldrb	r3, [r1, r3]
 80074be:	fa22 f303 	lsr.w	r3, r2, r3
 80074c2:	4a09      	ldr	r2, [pc, #36]	; (80074e8 <HAL_RCC_ClockConfig+0x1c4>)
 80074c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074c6:	4b09      	ldr	r3, [pc, #36]	; (80074ec <HAL_RCC_ClockConfig+0x1c8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fc ff14 	bl	80042f8 <HAL_InitTick>

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	40023c00 	.word	0x40023c00
 80074e0:	40023800 	.word	0x40023800
 80074e4:	0800e794 	.word	0x0800e794
 80074e8:	20000004 	.word	0x20000004
 80074ec:	20000008 	.word	0x20000008

080074f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074f4:	4b03      	ldr	r3, [pc, #12]	; (8007504 <HAL_RCC_GetHCLKFreq+0x14>)
 80074f6:	681b      	ldr	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000004 	.word	0x20000004

08007508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800750c:	f7ff fff0 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007510:	4602      	mov	r2, r0
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	0a9b      	lsrs	r3, r3, #10
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	4903      	ldr	r1, [pc, #12]	; (800752c <HAL_RCC_GetPCLK1Freq+0x24>)
 800751e:	5ccb      	ldrb	r3, [r1, r3]
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007524:	4618      	mov	r0, r3
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40023800 	.word	0x40023800
 800752c:	0800e7a4 	.word	0x0800e7a4

08007530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007534:	f7ff ffdc 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007538:	4602      	mov	r2, r0
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	0b5b      	lsrs	r3, r3, #13
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	4903      	ldr	r1, [pc, #12]	; (8007554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007546:	5ccb      	ldrb	r3, [r1, r3]
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800754c:	4618      	mov	r0, r3
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40023800 	.word	0x40023800
 8007554:	0800e7a4 	.word	0x0800e7a4

08007558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800755c:	b0ae      	sub	sp, #184	; 0xb8
 800755e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800757e:	4bcb      	ldr	r3, [pc, #812]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b0c      	cmp	r3, #12
 8007588:	f200 8206 	bhi.w	8007998 <HAL_RCC_GetSysClockFreq+0x440>
 800758c:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <HAL_RCC_GetSysClockFreq+0x3c>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075c9 	.word	0x080075c9
 8007598:	08007999 	.word	0x08007999
 800759c:	08007999 	.word	0x08007999
 80075a0:	08007999 	.word	0x08007999
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	08007999 	.word	0x08007999
 80075ac:	08007999 	.word	0x08007999
 80075b0:	08007999 	.word	0x08007999
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	08007999 	.word	0x08007999
 80075bc:	08007999 	.word	0x08007999
 80075c0:	08007999 	.word	0x08007999
 80075c4:	080077c9 	.word	0x080077c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075c8:	4bb9      	ldr	r3, [pc, #740]	; (80078b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80075ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80075ce:	e1e7      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075d0:	4bb8      	ldr	r3, [pc, #736]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80075d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80075d6:	e1e3      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075d8:	4bb4      	ldr	r3, [pc, #720]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075e4:	4bb1      	ldr	r3, [pc, #708]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d071      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075f0:	4bae      	ldr	r3, [pc, #696]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	099b      	lsrs	r3, r3, #6
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800760c:	2300      	movs	r3, #0
 800760e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007616:	4622      	mov	r2, r4
 8007618:	462b      	mov	r3, r5
 800761a:	f04f 0000 	mov.w	r0, #0
 800761e:	f04f 0100 	mov.w	r1, #0
 8007622:	0159      	lsls	r1, r3, #5
 8007624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007628:	0150      	lsls	r0, r2, #5
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4621      	mov	r1, r4
 8007630:	1a51      	subs	r1, r2, r1
 8007632:	6439      	str	r1, [r7, #64]	; 0x40
 8007634:	4629      	mov	r1, r5
 8007636:	eb63 0301 	sbc.w	r3, r3, r1
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007648:	4649      	mov	r1, r9
 800764a:	018b      	lsls	r3, r1, #6
 800764c:	4641      	mov	r1, r8
 800764e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007652:	4641      	mov	r1, r8
 8007654:	018a      	lsls	r2, r1, #6
 8007656:	4641      	mov	r1, r8
 8007658:	1a51      	subs	r1, r2, r1
 800765a:	63b9      	str	r1, [r7, #56]	; 0x38
 800765c:	4649      	mov	r1, r9
 800765e:	eb63 0301 	sbc.w	r3, r3, r1
 8007662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007670:	4649      	mov	r1, r9
 8007672:	00cb      	lsls	r3, r1, #3
 8007674:	4641      	mov	r1, r8
 8007676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767a:	4641      	mov	r1, r8
 800767c:	00ca      	lsls	r2, r1, #3
 800767e:	4610      	mov	r0, r2
 8007680:	4619      	mov	r1, r3
 8007682:	4603      	mov	r3, r0
 8007684:	4622      	mov	r2, r4
 8007686:	189b      	adds	r3, r3, r2
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
 800768a:	462b      	mov	r3, r5
 800768c:	460a      	mov	r2, r1
 800768e:	eb42 0303 	adc.w	r3, r2, r3
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80076a0:	4629      	mov	r1, r5
 80076a2:	024b      	lsls	r3, r1, #9
 80076a4:	4621      	mov	r1, r4
 80076a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076aa:	4621      	mov	r1, r4
 80076ac:	024a      	lsls	r2, r1, #9
 80076ae:	4610      	mov	r0, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80076c4:	f7f9 fb00 	bl	8000cc8 <__aeabi_uldivmod>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4613      	mov	r3, r2
 80076ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076d2:	e067      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076d4:	4b75      	ldr	r3, [pc, #468]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	099b      	lsrs	r3, r3, #6
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80076e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80076ee:	2300      	movs	r3, #0
 80076f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80076f6:	4622      	mov	r2, r4
 80076f8:	462b      	mov	r3, r5
 80076fa:	f04f 0000 	mov.w	r0, #0
 80076fe:	f04f 0100 	mov.w	r1, #0
 8007702:	0159      	lsls	r1, r3, #5
 8007704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007708:	0150      	lsls	r0, r2, #5
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4621      	mov	r1, r4
 8007710:	1a51      	subs	r1, r2, r1
 8007712:	62b9      	str	r1, [r7, #40]	; 0x28
 8007714:	4629      	mov	r1, r5
 8007716:	eb63 0301 	sbc.w	r3, r3, r1
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007728:	4649      	mov	r1, r9
 800772a:	018b      	lsls	r3, r1, #6
 800772c:	4641      	mov	r1, r8
 800772e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007732:	4641      	mov	r1, r8
 8007734:	018a      	lsls	r2, r1, #6
 8007736:	4641      	mov	r1, r8
 8007738:	ebb2 0a01 	subs.w	sl, r2, r1
 800773c:	4649      	mov	r1, r9
 800773e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f04f 0300 	mov.w	r3, #0
 800774a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800774e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007756:	4692      	mov	sl, r2
 8007758:	469b      	mov	fp, r3
 800775a:	4623      	mov	r3, r4
 800775c:	eb1a 0303 	adds.w	r3, sl, r3
 8007760:	623b      	str	r3, [r7, #32]
 8007762:	462b      	mov	r3, r5
 8007764:	eb4b 0303 	adc.w	r3, fp, r3
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007776:	4629      	mov	r1, r5
 8007778:	028b      	lsls	r3, r1, #10
 800777a:	4621      	mov	r1, r4
 800777c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007780:	4621      	mov	r1, r4
 8007782:	028a      	lsls	r2, r1, #10
 8007784:	4610      	mov	r0, r2
 8007786:	4619      	mov	r1, r3
 8007788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800778c:	2200      	movs	r2, #0
 800778e:	673b      	str	r3, [r7, #112]	; 0x70
 8007790:	677a      	str	r2, [r7, #116]	; 0x74
 8007792:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007796:	f7f9 fa97 	bl	8000cc8 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4613      	mov	r3, r2
 80077a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077a4:	4b41      	ldr	r3, [pc, #260]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	3301      	adds	r3, #1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80077b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077be:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80077c6:	e0eb      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c8:	4b38      	ldr	r3, [pc, #224]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077d4:	4b35      	ldr	r3, [pc, #212]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d06b      	beq.n	80078b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077e0:	4b32      	ldr	r3, [pc, #200]	; (80078ac <HAL_RCC_GetSysClockFreq+0x354>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	099b      	lsrs	r3, r3, #6
 80077e6:	2200      	movs	r2, #0
 80077e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	663b      	str	r3, [r7, #96]	; 0x60
 80077f4:	2300      	movs	r3, #0
 80077f6:	667b      	str	r3, [r7, #100]	; 0x64
 80077f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80077fc:	4622      	mov	r2, r4
 80077fe:	462b      	mov	r3, r5
 8007800:	f04f 0000 	mov.w	r0, #0
 8007804:	f04f 0100 	mov.w	r1, #0
 8007808:	0159      	lsls	r1, r3, #5
 800780a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800780e:	0150      	lsls	r0, r2, #5
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4621      	mov	r1, r4
 8007816:	1a51      	subs	r1, r2, r1
 8007818:	61b9      	str	r1, [r7, #24]
 800781a:	4629      	mov	r1, r5
 800781c:	eb63 0301 	sbc.w	r3, r3, r1
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800782e:	4659      	mov	r1, fp
 8007830:	018b      	lsls	r3, r1, #6
 8007832:	4651      	mov	r1, sl
 8007834:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007838:	4651      	mov	r1, sl
 800783a:	018a      	lsls	r2, r1, #6
 800783c:	4651      	mov	r1, sl
 800783e:	ebb2 0801 	subs.w	r8, r2, r1
 8007842:	4659      	mov	r1, fp
 8007844:	eb63 0901 	sbc.w	r9, r3, r1
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800785c:	4690      	mov	r8, r2
 800785e:	4699      	mov	r9, r3
 8007860:	4623      	mov	r3, r4
 8007862:	eb18 0303 	adds.w	r3, r8, r3
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	462b      	mov	r3, r5
 800786a:	eb49 0303 	adc.w	r3, r9, r3
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800787c:	4629      	mov	r1, r5
 800787e:	024b      	lsls	r3, r1, #9
 8007880:	4621      	mov	r1, r4
 8007882:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007886:	4621      	mov	r1, r4
 8007888:	024a      	lsls	r2, r1, #9
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007892:	2200      	movs	r2, #0
 8007894:	65bb      	str	r3, [r7, #88]	; 0x58
 8007896:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007898:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800789c:	f7f9 fa14 	bl	8000cc8 <__aeabi_uldivmod>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4613      	mov	r3, r2
 80078a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078aa:	e065      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x420>
 80078ac:	40023800 	.word	0x40023800
 80078b0:	00f42400 	.word	0x00f42400
 80078b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078b8:	4b3d      	ldr	r3, [pc, #244]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	099b      	lsrs	r3, r3, #6
 80078be:	2200      	movs	r2, #0
 80078c0:	4618      	mov	r0, r3
 80078c2:	4611      	mov	r1, r2
 80078c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078c8:	653b      	str	r3, [r7, #80]	; 0x50
 80078ca:	2300      	movs	r3, #0
 80078cc:	657b      	str	r3, [r7, #84]	; 0x54
 80078ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80078d2:	4642      	mov	r2, r8
 80078d4:	464b      	mov	r3, r9
 80078d6:	f04f 0000 	mov.w	r0, #0
 80078da:	f04f 0100 	mov.w	r1, #0
 80078de:	0159      	lsls	r1, r3, #5
 80078e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078e4:	0150      	lsls	r0, r2, #5
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4641      	mov	r1, r8
 80078ec:	1a51      	subs	r1, r2, r1
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	4649      	mov	r1, r9
 80078f2:	eb63 0301 	sbc.w	r3, r3, r1
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007904:	4659      	mov	r1, fp
 8007906:	018b      	lsls	r3, r1, #6
 8007908:	4651      	mov	r1, sl
 800790a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800790e:	4651      	mov	r1, sl
 8007910:	018a      	lsls	r2, r1, #6
 8007912:	4651      	mov	r1, sl
 8007914:	1a54      	subs	r4, r2, r1
 8007916:	4659      	mov	r1, fp
 8007918:	eb63 0501 	sbc.w	r5, r3, r1
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	00eb      	lsls	r3, r5, #3
 8007926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800792a:	00e2      	lsls	r2, r4, #3
 800792c:	4614      	mov	r4, r2
 800792e:	461d      	mov	r5, r3
 8007930:	4643      	mov	r3, r8
 8007932:	18e3      	adds	r3, r4, r3
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	464b      	mov	r3, r9
 8007938:	eb45 0303 	adc.w	r3, r5, r3
 800793c:	607b      	str	r3, [r7, #4]
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800794a:	4629      	mov	r1, r5
 800794c:	028b      	lsls	r3, r1, #10
 800794e:	4621      	mov	r1, r4
 8007950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007954:	4621      	mov	r1, r4
 8007956:	028a      	lsls	r2, r1, #10
 8007958:	4610      	mov	r0, r2
 800795a:	4619      	mov	r1, r3
 800795c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007960:	2200      	movs	r2, #0
 8007962:	64bb      	str	r3, [r7, #72]	; 0x48
 8007964:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800796a:	f7f9 f9ad 	bl	8000cc8 <__aeabi_uldivmod>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4613      	mov	r3, r2
 8007974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007978:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	0f1b      	lsrs	r3, r3, #28
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800798a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800798e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007996:	e003      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800799a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800799e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	37b8      	adds	r7, #184	; 0xb8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	00f42400 	.word	0x00f42400

080079b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e28d      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8083 	beq.w	8007ade <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079d8:	4b94      	ldr	r3, [pc, #592]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 030c 	and.w	r3, r3, #12
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d019      	beq.n	8007a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079e4:	4b91      	ldr	r3, [pc, #580]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d106      	bne.n	80079fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079f0:	4b8e      	ldr	r3, [pc, #568]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079fc:	d00c      	beq.n	8007a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079fe:	4b8b      	ldr	r3, [pc, #556]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007a06:	2b0c      	cmp	r3, #12
 8007a08:	d112      	bne.n	8007a30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a0a:	4b88      	ldr	r3, [pc, #544]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a16:	d10b      	bne.n	8007a30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a18:	4b84      	ldr	r3, [pc, #528]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05b      	beq.n	8007adc <HAL_RCC_OscConfig+0x124>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d157      	bne.n	8007adc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e25a      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a38:	d106      	bne.n	8007a48 <HAL_RCC_OscConfig+0x90>
 8007a3a:	4b7c      	ldr	r3, [pc, #496]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a7b      	ldr	r2, [pc, #492]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	e01d      	b.n	8007a84 <HAL_RCC_OscConfig+0xcc>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a50:	d10c      	bne.n	8007a6c <HAL_RCC_OscConfig+0xb4>
 8007a52:	4b76      	ldr	r3, [pc, #472]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a75      	ldr	r2, [pc, #468]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	4b73      	ldr	r3, [pc, #460]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a72      	ldr	r2, [pc, #456]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	e00b      	b.n	8007a84 <HAL_RCC_OscConfig+0xcc>
 8007a6c:	4b6f      	ldr	r3, [pc, #444]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a6e      	ldr	r2, [pc, #440]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	4b6c      	ldr	r3, [pc, #432]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a6b      	ldr	r2, [pc, #428]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d013      	beq.n	8007ab4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fc fc78 	bl	8004380 <HAL_GetTick>
 8007a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a94:	f7fc fc74 	bl	8004380 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b64      	cmp	r3, #100	; 0x64
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e21f      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa6:	4b61      	ldr	r3, [pc, #388]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f0      	beq.n	8007a94 <HAL_RCC_OscConfig+0xdc>
 8007ab2:	e014      	b.n	8007ade <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab4:	f7fc fc64 	bl	8004380 <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007abc:	f7fc fc60 	bl	8004380 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b64      	cmp	r3, #100	; 0x64
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e20b      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ace:	4b57      	ldr	r3, [pc, #348]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f0      	bne.n	8007abc <HAL_RCC_OscConfig+0x104>
 8007ada:	e000      	b.n	8007ade <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d06f      	beq.n	8007bca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007aea:	4b50      	ldr	r3, [pc, #320]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 030c 	and.w	r3, r3, #12
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d017      	beq.n	8007b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007af6:	4b4d      	ldr	r3, [pc, #308]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d105      	bne.n	8007b0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007b02:	4b4a      	ldr	r3, [pc, #296]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b0e:	4b47      	ldr	r3, [pc, #284]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007b16:	2b0c      	cmp	r3, #12
 8007b18:	d11c      	bne.n	8007b54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b1a:	4b44      	ldr	r3, [pc, #272]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d116      	bne.n	8007b54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b26:	4b41      	ldr	r3, [pc, #260]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_RCC_OscConfig+0x186>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d001      	beq.n	8007b3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e1d3      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3e:	4b3b      	ldr	r3, [pc, #236]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	4937      	ldr	r1, [pc, #220]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b52:	e03a      	b.n	8007bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d020      	beq.n	8007b9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b5c:	4b34      	ldr	r3, [pc, #208]	; (8007c30 <HAL_RCC_OscConfig+0x278>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b62:	f7fc fc0d 	bl	8004380 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6a:	f7fc fc09 	bl	8004380 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e1b4      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b7c:	4b2b      	ldr	r3, [pc, #172]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0f0      	beq.n	8007b6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b88:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4925      	ldr	r1, [pc, #148]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	600b      	str	r3, [r1, #0]
 8007b9c:	e015      	b.n	8007bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b9e:	4b24      	ldr	r3, [pc, #144]	; (8007c30 <HAL_RCC_OscConfig+0x278>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba4:	f7fc fbec 	bl	8004380 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bac:	f7fc fbe8 	bl	8004380 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e193      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bbe:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1f0      	bne.n	8007bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d036      	beq.n	8007c44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bde:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <HAL_RCC_OscConfig+0x27c>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be4:	f7fc fbcc 	bl	8004380 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bec:	f7fc fbc8 	bl	8004380 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e173      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0x234>
 8007c0a:	e01b      	b.n	8007c44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <HAL_RCC_OscConfig+0x27c>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c12:	f7fc fbb5 	bl	8004380 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c18:	e00e      	b.n	8007c38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1a:	f7fc fbb1 	bl	8004380 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d907      	bls.n	8007c38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e15c      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	42470000 	.word	0x42470000
 8007c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c38:	4b8a      	ldr	r3, [pc, #552]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1ea      	bne.n	8007c1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8097 	beq.w	8007d80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c56:	4b83      	ldr	r3, [pc, #524]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10f      	bne.n	8007c82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	4b7f      	ldr	r3, [pc, #508]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	4a7e      	ldr	r2, [pc, #504]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c70:	6413      	str	r3, [r2, #64]	; 0x40
 8007c72:	4b7c      	ldr	r3, [pc, #496]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c82:	4b79      	ldr	r3, [pc, #484]	; (8007e68 <HAL_RCC_OscConfig+0x4b0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d118      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c8e:	4b76      	ldr	r3, [pc, #472]	; (8007e68 <HAL_RCC_OscConfig+0x4b0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a75      	ldr	r2, [pc, #468]	; (8007e68 <HAL_RCC_OscConfig+0x4b0>)
 8007c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c9a:	f7fc fb71 	bl	8004380 <HAL_GetTick>
 8007c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ca2:	f7fc fb6d 	bl	8004380 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e118      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cb4:	4b6c      	ldr	r3, [pc, #432]	; (8007e68 <HAL_RCC_OscConfig+0x4b0>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0f0      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x31e>
 8007cc8:	4b66      	ldr	r3, [pc, #408]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ccc:	4a65      	ldr	r2, [pc, #404]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd4:	e01c      	b.n	8007d10 <HAL_RCC_OscConfig+0x358>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x340>
 8007cde:	4b61      	ldr	r3, [pc, #388]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	4a60      	ldr	r2, [pc, #384]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007ce4:	f043 0304 	orr.w	r3, r3, #4
 8007ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cea:	4b5e      	ldr	r3, [pc, #376]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	4a5d      	ldr	r2, [pc, #372]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007cf0:	f043 0301 	orr.w	r3, r3, #1
 8007cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf6:	e00b      	b.n	8007d10 <HAL_RCC_OscConfig+0x358>
 8007cf8:	4b5a      	ldr	r3, [pc, #360]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	4a59      	ldr	r2, [pc, #356]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	6713      	str	r3, [r2, #112]	; 0x70
 8007d04:	4b57      	ldr	r3, [pc, #348]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	4a56      	ldr	r2, [pc, #344]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d0a:	f023 0304 	bic.w	r3, r3, #4
 8007d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d015      	beq.n	8007d44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d18:	f7fc fb32 	bl	8004380 <HAL_GetTick>
 8007d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d1e:	e00a      	b.n	8007d36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d20:	f7fc fb2e 	bl	8004380 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e0d7      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d36:	4b4b      	ldr	r3, [pc, #300]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0ee      	beq.n	8007d20 <HAL_RCC_OscConfig+0x368>
 8007d42:	e014      	b.n	8007d6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d44:	f7fc fb1c 	bl	8004380 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d4c:	f7fc fb18 	bl	8004380 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e0c1      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d62:	4b40      	ldr	r3, [pc, #256]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1ee      	bne.n	8007d4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d105      	bne.n	8007d80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d74:	4b3b      	ldr	r3, [pc, #236]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	4a3a      	ldr	r2, [pc, #232]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80ad 	beq.w	8007ee4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d8a:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 030c 	and.w	r3, r3, #12
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d060      	beq.n	8007e58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d145      	bne.n	8007e2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d9e:	4b33      	ldr	r3, [pc, #204]	; (8007e6c <HAL_RCC_OscConfig+0x4b4>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fc faec 	bl	8004380 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dac:	f7fc fae8 	bl	8004380 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e093      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dbe:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69da      	ldr	r2, [r3, #28]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	019b      	lsls	r3, r3, #6
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	3b01      	subs	r3, #1
 8007de4:	041b      	lsls	r3, r3, #16
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	071b      	lsls	r3, r3, #28
 8007df6:	491b      	ldr	r1, [pc, #108]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dfc:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <HAL_RCC_OscConfig+0x4b4>)
 8007dfe:	2201      	movs	r2, #1
 8007e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e02:	f7fc fabd 	bl	8004380 <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e08:	e008      	b.n	8007e1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e0a:	f7fc fab9 	bl	8004380 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e064      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e1c:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0f0      	beq.n	8007e0a <HAL_RCC_OscConfig+0x452>
 8007e28:	e05c      	b.n	8007ee4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <HAL_RCC_OscConfig+0x4b4>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fc faa6 	bl	8004380 <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e38:	f7fc faa2 	bl	8004380 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e04d      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4a:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <HAL_RCC_OscConfig+0x4ac>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f0      	bne.n	8007e38 <HAL_RCC_OscConfig+0x480>
 8007e56:	e045      	b.n	8007ee4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e040      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
 8007e64:	40023800 	.word	0x40023800
 8007e68:	40007000 	.word	0x40007000
 8007e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e70:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <HAL_RCC_OscConfig+0x538>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d030      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d129      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d122      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d119      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d10f      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d107      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d001      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40023800 	.word	0x40023800

08007ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e03f      	b.n	8007f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fa f832 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2224      	movs	r2, #36	; 0x24
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f929 	bl	8008190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b08a      	sub	sp, #40	; 0x28
 8007f92:	af02      	add	r7, sp, #8
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	603b      	str	r3, [r7, #0]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d17c      	bne.n	80080a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Transmit+0x2c>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e075      	b.n	80080aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_UART_Transmit+0x3e>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e06e      	b.n	80080aa <HAL_UART_Transmit+0x11c>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2221      	movs	r2, #33	; 0x21
 8007fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fe2:	f7fc f9cd 	bl	8004380 <HAL_GetTick>
 8007fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	88fa      	ldrh	r2, [r7, #6]
 8007fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	88fa      	ldrh	r2, [r7, #6]
 8007ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffc:	d108      	bne.n	8008010 <HAL_UART_Transmit+0x82>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d104      	bne.n	8008010 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	e003      	b.n	8008018 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008020:	e02a      	b.n	8008078 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2200      	movs	r2, #0
 800802a:	2180      	movs	r1, #128	; 0x80
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f840 	bl	80080b2 <UART_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e036      	b.n	80080aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10b      	bne.n	800805a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	3302      	adds	r3, #2
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	e007      	b.n	800806a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	3301      	adds	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1cf      	bne.n	8008022 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2200      	movs	r2, #0
 800808a:	2140      	movs	r1, #64	; 0x40
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f810 	bl	80080b2 <UART_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e006      	b.n	80080aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	e000      	b.n	80080aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080a8:	2302      	movs	r3, #2
  }
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b090      	sub	sp, #64	; 0x40
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c2:	e050      	b.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d04c      	beq.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80080d2:	f7fc f955 	bl	8004380 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080de:	429a      	cmp	r2, r3
 80080e0:	d241      	bcs.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	330c      	adds	r3, #12
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	330c      	adds	r3, #12
 8008100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008102:	637a      	str	r2, [r7, #52]	; 0x34
 8008104:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e5      	bne.n	80080e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3314      	adds	r3, #20
 800811c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	613b      	str	r3, [r7, #16]
   return(result);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3314      	adds	r3, #20
 8008134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008136:	623a      	str	r2, [r7, #32]
 8008138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	69f9      	ldr	r1, [r7, #28]
 800813c:	6a3a      	ldr	r2, [r7, #32]
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	61bb      	str	r3, [r7, #24]
   return(result);
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e5      	bne.n	8008116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e00f      	b.n	8008186 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4013      	ands	r3, r2
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	bf0c      	ite	eq
 8008176:	2301      	moveq	r3, #1
 8008178:	2300      	movne	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d09f      	beq.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3740      	adds	r7, #64	; 0x40
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008194:	b0c0      	sub	sp, #256	; 0x100
 8008196:	af00      	add	r7, sp, #0
 8008198:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800819c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ac:	68d9      	ldr	r1, [r3, #12]
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	ea40 0301 	orr.w	r3, r0, r1
 80081b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	431a      	orrs	r2, r3
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081e8:	f021 010c 	bic.w	r1, r1, #12
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081f6:	430b      	orrs	r3, r1
 80081f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	6999      	ldr	r1, [r3, #24]
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	ea40 0301 	orr.w	r3, r0, r1
 8008216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b8f      	ldr	r3, [pc, #572]	; (800845c <UART_SetConfig+0x2cc>)
 8008220:	429a      	cmp	r2, r3
 8008222:	d005      	beq.n	8008230 <UART_SetConfig+0xa0>
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b8d      	ldr	r3, [pc, #564]	; (8008460 <UART_SetConfig+0x2d0>)
 800822c:	429a      	cmp	r2, r3
 800822e:	d104      	bne.n	800823a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008230:	f7ff f97e 	bl	8007530 <HAL_RCC_GetPCLK2Freq>
 8008234:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008238:	e003      	b.n	8008242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800823a:	f7ff f965 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 800823e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824c:	f040 810c 	bne.w	8008468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008254:	2200      	movs	r2, #0
 8008256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800825a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800825e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008262:	4622      	mov	r2, r4
 8008264:	462b      	mov	r3, r5
 8008266:	1891      	adds	r1, r2, r2
 8008268:	65b9      	str	r1, [r7, #88]	; 0x58
 800826a:	415b      	adcs	r3, r3
 800826c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800826e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008272:	4621      	mov	r1, r4
 8008274:	eb12 0801 	adds.w	r8, r2, r1
 8008278:	4629      	mov	r1, r5
 800827a:	eb43 0901 	adc.w	r9, r3, r1
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800828a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800828e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008292:	4690      	mov	r8, r2
 8008294:	4699      	mov	r9, r3
 8008296:	4623      	mov	r3, r4
 8008298:	eb18 0303 	adds.w	r3, r8, r3
 800829c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082a0:	462b      	mov	r3, r5
 80082a2:	eb49 0303 	adc.w	r3, r9, r3
 80082a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082be:	460b      	mov	r3, r1
 80082c0:	18db      	adds	r3, r3, r3
 80082c2:	653b      	str	r3, [r7, #80]	; 0x50
 80082c4:	4613      	mov	r3, r2
 80082c6:	eb42 0303 	adc.w	r3, r2, r3
 80082ca:	657b      	str	r3, [r7, #84]	; 0x54
 80082cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082d4:	f7f8 fcf8 	bl	8000cc8 <__aeabi_uldivmod>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4b61      	ldr	r3, [pc, #388]	; (8008464 <UART_SetConfig+0x2d4>)
 80082de:	fba3 2302 	umull	r2, r3, r3, r2
 80082e2:	095b      	lsrs	r3, r3, #5
 80082e4:	011c      	lsls	r4, r3, #4
 80082e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	1891      	adds	r1, r2, r2
 80082fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008300:	415b      	adcs	r3, r3
 8008302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008308:	4641      	mov	r1, r8
 800830a:	eb12 0a01 	adds.w	sl, r2, r1
 800830e:	4649      	mov	r1, r9
 8008310:	eb43 0b01 	adc.w	fp, r3, r1
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008328:	4692      	mov	sl, r2
 800832a:	469b      	mov	fp, r3
 800832c:	4643      	mov	r3, r8
 800832e:	eb1a 0303 	adds.w	r3, sl, r3
 8008332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008336:	464b      	mov	r3, r9
 8008338:	eb4b 0303 	adc.w	r3, fp, r3
 800833c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800834c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008354:	460b      	mov	r3, r1
 8008356:	18db      	adds	r3, r3, r3
 8008358:	643b      	str	r3, [r7, #64]	; 0x40
 800835a:	4613      	mov	r3, r2
 800835c:	eb42 0303 	adc.w	r3, r2, r3
 8008360:	647b      	str	r3, [r7, #68]	; 0x44
 8008362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800836a:	f7f8 fcad 	bl	8000cc8 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4611      	mov	r1, r2
 8008374:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <UART_SetConfig+0x2d4>)
 8008376:	fba3 2301 	umull	r2, r3, r3, r1
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	2264      	movs	r2, #100	; 0x64
 800837e:	fb02 f303 	mul.w	r3, r2, r3
 8008382:	1acb      	subs	r3, r1, r3
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800838a:	4b36      	ldr	r3, [pc, #216]	; (8008464 <UART_SetConfig+0x2d4>)
 800838c:	fba3 2302 	umull	r2, r3, r3, r2
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008398:	441c      	add	r4, r3
 800839a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083ac:	4642      	mov	r2, r8
 80083ae:	464b      	mov	r3, r9
 80083b0:	1891      	adds	r1, r2, r2
 80083b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083b4:	415b      	adcs	r3, r3
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083bc:	4641      	mov	r1, r8
 80083be:	1851      	adds	r1, r2, r1
 80083c0:	6339      	str	r1, [r7, #48]	; 0x30
 80083c2:	4649      	mov	r1, r9
 80083c4:	414b      	adcs	r3, r1
 80083c6:	637b      	str	r3, [r7, #52]	; 0x34
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083d4:	4659      	mov	r1, fp
 80083d6:	00cb      	lsls	r3, r1, #3
 80083d8:	4651      	mov	r1, sl
 80083da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083de:	4651      	mov	r1, sl
 80083e0:	00ca      	lsls	r2, r1, #3
 80083e2:	4610      	mov	r0, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	4603      	mov	r3, r0
 80083e8:	4642      	mov	r2, r8
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083f0:	464b      	mov	r3, r9
 80083f2:	460a      	mov	r2, r1
 80083f4:	eb42 0303 	adc.w	r3, r2, r3
 80083f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008408:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800840c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008410:	460b      	mov	r3, r1
 8008412:	18db      	adds	r3, r3, r3
 8008414:	62bb      	str	r3, [r7, #40]	; 0x28
 8008416:	4613      	mov	r3, r2
 8008418:	eb42 0303 	adc.w	r3, r2, r3
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008426:	f7f8 fc4f 	bl	8000cc8 <__aeabi_uldivmod>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <UART_SetConfig+0x2d4>)
 8008430:	fba3 1302 	umull	r1, r3, r3, r2
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	2164      	movs	r1, #100	; 0x64
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	3332      	adds	r3, #50	; 0x32
 8008442:	4a08      	ldr	r2, [pc, #32]	; (8008464 <UART_SetConfig+0x2d4>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	f003 0207 	and.w	r2, r3, #7
 800844e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4422      	add	r2, r4
 8008456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008458:	e105      	b.n	8008666 <UART_SetConfig+0x4d6>
 800845a:	bf00      	nop
 800845c:	40011000 	.word	0x40011000
 8008460:	40011400 	.word	0x40011400
 8008464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800846c:	2200      	movs	r2, #0
 800846e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008472:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800847a:	4642      	mov	r2, r8
 800847c:	464b      	mov	r3, r9
 800847e:	1891      	adds	r1, r2, r2
 8008480:	6239      	str	r1, [r7, #32]
 8008482:	415b      	adcs	r3, r3
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
 8008486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800848a:	4641      	mov	r1, r8
 800848c:	1854      	adds	r4, r2, r1
 800848e:	4649      	mov	r1, r9
 8008490:	eb43 0501 	adc.w	r5, r3, r1
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	00eb      	lsls	r3, r5, #3
 800849e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084a2:	00e2      	lsls	r2, r4, #3
 80084a4:	4614      	mov	r4, r2
 80084a6:	461d      	mov	r5, r3
 80084a8:	4643      	mov	r3, r8
 80084aa:	18e3      	adds	r3, r4, r3
 80084ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084b0:	464b      	mov	r3, r9
 80084b2:	eb45 0303 	adc.w	r3, r5, r3
 80084b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	f04f 0300 	mov.w	r3, #0
 80084d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084d6:	4629      	mov	r1, r5
 80084d8:	008b      	lsls	r3, r1, #2
 80084da:	4621      	mov	r1, r4
 80084dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084e0:	4621      	mov	r1, r4
 80084e2:	008a      	lsls	r2, r1, #2
 80084e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80084e8:	f7f8 fbee 	bl	8000cc8 <__aeabi_uldivmod>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4b60      	ldr	r3, [pc, #384]	; (8008674 <UART_SetConfig+0x4e4>)
 80084f2:	fba3 2302 	umull	r2, r3, r3, r2
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	011c      	lsls	r4, r3, #4
 80084fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800850c:	4642      	mov	r2, r8
 800850e:	464b      	mov	r3, r9
 8008510:	1891      	adds	r1, r2, r2
 8008512:	61b9      	str	r1, [r7, #24]
 8008514:	415b      	adcs	r3, r3
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800851c:	4641      	mov	r1, r8
 800851e:	1851      	adds	r1, r2, r1
 8008520:	6139      	str	r1, [r7, #16]
 8008522:	4649      	mov	r1, r9
 8008524:	414b      	adcs	r3, r1
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008534:	4659      	mov	r1, fp
 8008536:	00cb      	lsls	r3, r1, #3
 8008538:	4651      	mov	r1, sl
 800853a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800853e:	4651      	mov	r1, sl
 8008540:	00ca      	lsls	r2, r1, #3
 8008542:	4610      	mov	r0, r2
 8008544:	4619      	mov	r1, r3
 8008546:	4603      	mov	r3, r0
 8008548:	4642      	mov	r2, r8
 800854a:	189b      	adds	r3, r3, r2
 800854c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008550:	464b      	mov	r3, r9
 8008552:	460a      	mov	r2, r1
 8008554:	eb42 0303 	adc.w	r3, r2, r3
 8008558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	67bb      	str	r3, [r7, #120]	; 0x78
 8008566:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008574:	4649      	mov	r1, r9
 8008576:	008b      	lsls	r3, r1, #2
 8008578:	4641      	mov	r1, r8
 800857a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800857e:	4641      	mov	r1, r8
 8008580:	008a      	lsls	r2, r1, #2
 8008582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008586:	f7f8 fb9f 	bl	8000cc8 <__aeabi_uldivmod>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4b39      	ldr	r3, [pc, #228]	; (8008674 <UART_SetConfig+0x4e4>)
 8008590:	fba3 1302 	umull	r1, r3, r3, r2
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	2164      	movs	r1, #100	; 0x64
 8008598:	fb01 f303 	mul.w	r3, r1, r3
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	3332      	adds	r3, #50	; 0x32
 80085a2:	4a34      	ldr	r2, [pc, #208]	; (8008674 <UART_SetConfig+0x4e4>)
 80085a4:	fba2 2303 	umull	r2, r3, r2, r3
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ae:	441c      	add	r4, r3
 80085b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b4:	2200      	movs	r2, #0
 80085b6:	673b      	str	r3, [r7, #112]	; 0x70
 80085b8:	677a      	str	r2, [r7, #116]	; 0x74
 80085ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085be:	4642      	mov	r2, r8
 80085c0:	464b      	mov	r3, r9
 80085c2:	1891      	adds	r1, r2, r2
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	415b      	adcs	r3, r3
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085ce:	4641      	mov	r1, r8
 80085d0:	1851      	adds	r1, r2, r1
 80085d2:	6039      	str	r1, [r7, #0]
 80085d4:	4649      	mov	r1, r9
 80085d6:	414b      	adcs	r3, r1
 80085d8:	607b      	str	r3, [r7, #4]
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085e6:	4659      	mov	r1, fp
 80085e8:	00cb      	lsls	r3, r1, #3
 80085ea:	4651      	mov	r1, sl
 80085ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085f0:	4651      	mov	r1, sl
 80085f2:	00ca      	lsls	r2, r1, #3
 80085f4:	4610      	mov	r0, r2
 80085f6:	4619      	mov	r1, r3
 80085f8:	4603      	mov	r3, r0
 80085fa:	4642      	mov	r2, r8
 80085fc:	189b      	adds	r3, r3, r2
 80085fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008600:	464b      	mov	r3, r9
 8008602:	460a      	mov	r2, r1
 8008604:	eb42 0303 	adc.w	r3, r2, r3
 8008608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800860a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	663b      	str	r3, [r7, #96]	; 0x60
 8008614:	667a      	str	r2, [r7, #100]	; 0x64
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008622:	4649      	mov	r1, r9
 8008624:	008b      	lsls	r3, r1, #2
 8008626:	4641      	mov	r1, r8
 8008628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800862c:	4641      	mov	r1, r8
 800862e:	008a      	lsls	r2, r1, #2
 8008630:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008634:	f7f8 fb48 	bl	8000cc8 <__aeabi_uldivmod>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <UART_SetConfig+0x4e4>)
 800863e:	fba3 1302 	umull	r1, r3, r3, r2
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	2164      	movs	r1, #100	; 0x64
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	3332      	adds	r3, #50	; 0x32
 8008650:	4a08      	ldr	r2, [pc, #32]	; (8008674 <UART_SetConfig+0x4e4>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4422      	add	r2, r4
 8008664:	609a      	str	r2, [r3, #8]
}
 8008666:	bf00      	nop
 8008668:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800866c:	46bd      	mov	sp, r7
 800866e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008672:	bf00      	nop
 8008674:	51eb851f 	.word	0x51eb851f

08008678 <cosf>:
 8008678:	ee10 3a10 	vmov	r3, s0
 800867c:	b507      	push	{r0, r1, r2, lr}
 800867e:	4a1e      	ldr	r2, [pc, #120]	; (80086f8 <cosf+0x80>)
 8008680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008684:	4293      	cmp	r3, r2
 8008686:	dc06      	bgt.n	8008696 <cosf+0x1e>
 8008688:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80086fc <cosf+0x84>
 800868c:	b003      	add	sp, #12
 800868e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008692:	f000 be95 	b.w	80093c0 <__kernel_cosf>
 8008696:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800869a:	db04      	blt.n	80086a6 <cosf+0x2e>
 800869c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80086a0:	b003      	add	sp, #12
 80086a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80086a6:	4668      	mov	r0, sp
 80086a8:	f000 fd4a 	bl	8009140 <__ieee754_rem_pio2f>
 80086ac:	f000 0003 	and.w	r0, r0, #3
 80086b0:	2801      	cmp	r0, #1
 80086b2:	d009      	beq.n	80086c8 <cosf+0x50>
 80086b4:	2802      	cmp	r0, #2
 80086b6:	d010      	beq.n	80086da <cosf+0x62>
 80086b8:	b9b0      	cbnz	r0, 80086e8 <cosf+0x70>
 80086ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80086be:	ed9d 0a00 	vldr	s0, [sp]
 80086c2:	f000 fe7d 	bl	80093c0 <__kernel_cosf>
 80086c6:	e7eb      	b.n	80086a0 <cosf+0x28>
 80086c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80086cc:	ed9d 0a00 	vldr	s0, [sp]
 80086d0:	f001 f94c 	bl	800996c <__kernel_sinf>
 80086d4:	eeb1 0a40 	vneg.f32	s0, s0
 80086d8:	e7e2      	b.n	80086a0 <cosf+0x28>
 80086da:	eddd 0a01 	vldr	s1, [sp, #4]
 80086de:	ed9d 0a00 	vldr	s0, [sp]
 80086e2:	f000 fe6d 	bl	80093c0 <__kernel_cosf>
 80086e6:	e7f5      	b.n	80086d4 <cosf+0x5c>
 80086e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80086ec:	ed9d 0a00 	vldr	s0, [sp]
 80086f0:	2001      	movs	r0, #1
 80086f2:	f001 f93b 	bl	800996c <__kernel_sinf>
 80086f6:	e7d3      	b.n	80086a0 <cosf+0x28>
 80086f8:	3f490fd8 	.word	0x3f490fd8
 80086fc:	00000000 	.word	0x00000000

08008700 <sinf>:
 8008700:	ee10 3a10 	vmov	r3, s0
 8008704:	b507      	push	{r0, r1, r2, lr}
 8008706:	4a1f      	ldr	r2, [pc, #124]	; (8008784 <sinf+0x84>)
 8008708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800870c:	4293      	cmp	r3, r2
 800870e:	dc07      	bgt.n	8008720 <sinf+0x20>
 8008710:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008788 <sinf+0x88>
 8008714:	2000      	movs	r0, #0
 8008716:	b003      	add	sp, #12
 8008718:	f85d eb04 	ldr.w	lr, [sp], #4
 800871c:	f001 b926 	b.w	800996c <__kernel_sinf>
 8008720:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008724:	db04      	blt.n	8008730 <sinf+0x30>
 8008726:	ee30 0a40 	vsub.f32	s0, s0, s0
 800872a:	b003      	add	sp, #12
 800872c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008730:	4668      	mov	r0, sp
 8008732:	f000 fd05 	bl	8009140 <__ieee754_rem_pio2f>
 8008736:	f000 0003 	and.w	r0, r0, #3
 800873a:	2801      	cmp	r0, #1
 800873c:	d00a      	beq.n	8008754 <sinf+0x54>
 800873e:	2802      	cmp	r0, #2
 8008740:	d00f      	beq.n	8008762 <sinf+0x62>
 8008742:	b9c0      	cbnz	r0, 8008776 <sinf+0x76>
 8008744:	eddd 0a01 	vldr	s1, [sp, #4]
 8008748:	ed9d 0a00 	vldr	s0, [sp]
 800874c:	2001      	movs	r0, #1
 800874e:	f001 f90d 	bl	800996c <__kernel_sinf>
 8008752:	e7ea      	b.n	800872a <sinf+0x2a>
 8008754:	eddd 0a01 	vldr	s1, [sp, #4]
 8008758:	ed9d 0a00 	vldr	s0, [sp]
 800875c:	f000 fe30 	bl	80093c0 <__kernel_cosf>
 8008760:	e7e3      	b.n	800872a <sinf+0x2a>
 8008762:	eddd 0a01 	vldr	s1, [sp, #4]
 8008766:	ed9d 0a00 	vldr	s0, [sp]
 800876a:	2001      	movs	r0, #1
 800876c:	f001 f8fe 	bl	800996c <__kernel_sinf>
 8008770:	eeb1 0a40 	vneg.f32	s0, s0
 8008774:	e7d9      	b.n	800872a <sinf+0x2a>
 8008776:	eddd 0a01 	vldr	s1, [sp, #4]
 800877a:	ed9d 0a00 	vldr	s0, [sp]
 800877e:	f000 fe1f 	bl	80093c0 <__kernel_cosf>
 8008782:	e7f5      	b.n	8008770 <sinf+0x70>
 8008784:	3f490fd8 	.word	0x3f490fd8
 8008788:	00000000 	.word	0x00000000

0800878c <asinf>:
 800878c:	b508      	push	{r3, lr}
 800878e:	ed2d 8b02 	vpush	{d8}
 8008792:	eeb0 8a40 	vmov.f32	s16, s0
 8008796:	f000 f87f 	bl	8008898 <__ieee754_asinf>
 800879a:	eeb4 8a48 	vcmp.f32	s16, s16
 800879e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a2:	eef0 8a40 	vmov.f32	s17, s0
 80087a6:	d615      	bvs.n	80087d4 <asinf+0x48>
 80087a8:	eeb0 0a48 	vmov.f32	s0, s16
 80087ac:	f001 fa1c 	bl	8009be8 <fabsf>
 80087b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80087b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80087b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087bc:	dd0a      	ble.n	80087d4 <asinf+0x48>
 80087be:	f001 fae1 	bl	8009d84 <__errno>
 80087c2:	ecbd 8b02 	vpop	{d8}
 80087c6:	2321      	movs	r3, #33	; 0x21
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087ce:	4804      	ldr	r0, [pc, #16]	; (80087e0 <asinf+0x54>)
 80087d0:	f001 ba60 	b.w	8009c94 <nanf>
 80087d4:	eeb0 0a68 	vmov.f32	s0, s17
 80087d8:	ecbd 8b02 	vpop	{d8}
 80087dc:	bd08      	pop	{r3, pc}
 80087de:	bf00      	nop
 80087e0:	0800f010 	.word	0x0800f010

080087e4 <atan2f>:
 80087e4:	f000 b93e 	b.w	8008a64 <__ieee754_atan2f>

080087e8 <powf>:
 80087e8:	b508      	push	{r3, lr}
 80087ea:	ed2d 8b04 	vpush	{d8-d9}
 80087ee:	eeb0 8a60 	vmov.f32	s16, s1
 80087f2:	eeb0 9a40 	vmov.f32	s18, s0
 80087f6:	f000 f9d5 	bl	8008ba4 <__ieee754_powf>
 80087fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	eef0 8a40 	vmov.f32	s17, s0
 8008806:	d63e      	bvs.n	8008886 <powf+0x9e>
 8008808:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800880c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008810:	d112      	bne.n	8008838 <powf+0x50>
 8008812:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881a:	d039      	beq.n	8008890 <powf+0xa8>
 800881c:	eeb0 0a48 	vmov.f32	s0, s16
 8008820:	f001 f9e9 	bl	8009bf6 <finitef>
 8008824:	b378      	cbz	r0, 8008886 <powf+0x9e>
 8008826:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800882a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882e:	d52a      	bpl.n	8008886 <powf+0x9e>
 8008830:	f001 faa8 	bl	8009d84 <__errno>
 8008834:	2322      	movs	r3, #34	; 0x22
 8008836:	e014      	b.n	8008862 <powf+0x7a>
 8008838:	f001 f9dd 	bl	8009bf6 <finitef>
 800883c:	b998      	cbnz	r0, 8008866 <powf+0x7e>
 800883e:	eeb0 0a49 	vmov.f32	s0, s18
 8008842:	f001 f9d8 	bl	8009bf6 <finitef>
 8008846:	b170      	cbz	r0, 8008866 <powf+0x7e>
 8008848:	eeb0 0a48 	vmov.f32	s0, s16
 800884c:	f001 f9d3 	bl	8009bf6 <finitef>
 8008850:	b148      	cbz	r0, 8008866 <powf+0x7e>
 8008852:	eef4 8a68 	vcmp.f32	s17, s17
 8008856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885a:	d7e9      	bvc.n	8008830 <powf+0x48>
 800885c:	f001 fa92 	bl	8009d84 <__errno>
 8008860:	2321      	movs	r3, #33	; 0x21
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	e00f      	b.n	8008886 <powf+0x9e>
 8008866:	eef5 8a40 	vcmp.f32	s17, #0.0
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d10a      	bne.n	8008886 <powf+0x9e>
 8008870:	eeb0 0a49 	vmov.f32	s0, s18
 8008874:	f001 f9bf 	bl	8009bf6 <finitef>
 8008878:	b128      	cbz	r0, 8008886 <powf+0x9e>
 800887a:	eeb0 0a48 	vmov.f32	s0, s16
 800887e:	f001 f9ba 	bl	8009bf6 <finitef>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1d4      	bne.n	8008830 <powf+0x48>
 8008886:	eeb0 0a68 	vmov.f32	s0, s17
 800888a:	ecbd 8b04 	vpop	{d8-d9}
 800888e:	bd08      	pop	{r3, pc}
 8008890:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008894:	e7f7      	b.n	8008886 <powf+0x9e>
	...

08008898 <__ieee754_asinf>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	ee10 5a10 	vmov	r5, s0
 800889e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80088a2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80088a6:	ed2d 8b04 	vpush	{d8-d9}
 80088aa:	d10c      	bne.n	80088c6 <__ieee754_asinf+0x2e>
 80088ac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008a24 <__ieee754_asinf+0x18c>
 80088b0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008a28 <__ieee754_asinf+0x190>
 80088b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80088b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80088bc:	eeb0 0a67 	vmov.f32	s0, s15
 80088c0:	ecbd 8b04 	vpop	{d8-d9}
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	dd04      	ble.n	80088d2 <__ieee754_asinf+0x3a>
 80088c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80088cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80088d0:	e7f6      	b.n	80088c0 <__ieee754_asinf+0x28>
 80088d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80088d6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80088da:	da0b      	bge.n	80088f4 <__ieee754_asinf+0x5c>
 80088dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80088e0:	da52      	bge.n	8008988 <__ieee754_asinf+0xf0>
 80088e2:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008a2c <__ieee754_asinf+0x194>
 80088e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80088ea:	eef4 7ae8 	vcmpe.f32	s15, s17
 80088ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f2:	dce5      	bgt.n	80088c0 <__ieee754_asinf+0x28>
 80088f4:	f001 f978 	bl	8009be8 <fabsf>
 80088f8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80088fc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008900:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008904:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008a30 <__ieee754_asinf+0x198>
 8008908:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008a34 <__ieee754_asinf+0x19c>
 800890c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008a38 <__ieee754_asinf+0x1a0>
 8008910:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008914:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008a3c <__ieee754_asinf+0x1a4>
 8008918:	eee7 7a08 	vfma.f32	s15, s14, s16
 800891c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008a40 <__ieee754_asinf+0x1a8>
 8008920:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008924:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008a44 <__ieee754_asinf+0x1ac>
 8008928:	eee7 7a08 	vfma.f32	s15, s14, s16
 800892c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008a48 <__ieee754_asinf+0x1b0>
 8008930:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008934:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008a4c <__ieee754_asinf+0x1b4>
 8008938:	eee8 7a07 	vfma.f32	s15, s16, s14
 800893c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008a50 <__ieee754_asinf+0x1b8>
 8008940:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008944:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008a54 <__ieee754_asinf+0x1bc>
 8008948:	eee7 7a08 	vfma.f32	s15, s14, s16
 800894c:	eeb0 0a48 	vmov.f32	s0, s16
 8008950:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008954:	f000 fd30 	bl	80093b8 <__ieee754_sqrtf>
 8008958:	4b3f      	ldr	r3, [pc, #252]	; (8008a58 <__ieee754_asinf+0x1c0>)
 800895a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800895e:	429c      	cmp	r4, r3
 8008960:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008964:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008968:	dd3d      	ble.n	80089e6 <__ieee754_asinf+0x14e>
 800896a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800896e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008a5c <__ieee754_asinf+0x1c4>
 8008972:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008976:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008a28 <__ieee754_asinf+0x190>
 800897a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800897e:	2d00      	cmp	r5, #0
 8008980:	bfd8      	it	le
 8008982:	eeb1 0a40 	vnegle.f32	s0, s0
 8008986:	e79b      	b.n	80088c0 <__ieee754_asinf+0x28>
 8008988:	ee60 7a00 	vmul.f32	s15, s0, s0
 800898c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008a30 <__ieee754_asinf+0x198>
 8008990:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008a34 <__ieee754_asinf+0x19c>
 8008994:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008a48 <__ieee754_asinf+0x1b0>
 8008998:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800899c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008a3c <__ieee754_asinf+0x1a4>
 80089a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008a40 <__ieee754_asinf+0x1a8>
 80089a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008a44 <__ieee754_asinf+0x1ac>
 80089b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089b4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008a38 <__ieee754_asinf+0x1a0>
 80089b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089bc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008a4c <__ieee754_asinf+0x1b4>
 80089c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80089c4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008a50 <__ieee754_asinf+0x1b8>
 80089c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80089cc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008a54 <__ieee754_asinf+0x1bc>
 80089d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80089dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80089e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80089e4:	e76c      	b.n	80088c0 <__ieee754_asinf+0x28>
 80089e6:	ee10 3a10 	vmov	r3, s0
 80089ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80089ee:	f023 030f 	bic.w	r3, r3, #15
 80089f2:	ee07 3a10 	vmov	s14, r3
 80089f6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80089fa:	ee70 7a07 	vadd.f32	s15, s0, s14
 80089fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a02:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8008a06:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008a24 <__ieee754_asinf+0x18c>
 8008a0a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8008a0e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8008a12:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008a60 <__ieee754_asinf+0x1c8>
 8008a16:	eeb0 6a40 	vmov.f32	s12, s0
 8008a1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008a1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008a22:	e7aa      	b.n	800897a <__ieee754_asinf+0xe2>
 8008a24:	b33bbd2e 	.word	0xb33bbd2e
 8008a28:	3fc90fdb 	.word	0x3fc90fdb
 8008a2c:	7149f2ca 	.word	0x7149f2ca
 8008a30:	3811ef08 	.word	0x3811ef08
 8008a34:	3a4f7f04 	.word	0x3a4f7f04
 8008a38:	3e2aaaab 	.word	0x3e2aaaab
 8008a3c:	bd241146 	.word	0xbd241146
 8008a40:	3e4e0aa8 	.word	0x3e4e0aa8
 8008a44:	bea6b090 	.word	0xbea6b090
 8008a48:	3d9dc62e 	.word	0x3d9dc62e
 8008a4c:	bf303361 	.word	0xbf303361
 8008a50:	4001572d 	.word	0x4001572d
 8008a54:	c019d139 	.word	0xc019d139
 8008a58:	3f799999 	.word	0x3f799999
 8008a5c:	333bbd2e 	.word	0x333bbd2e
 8008a60:	3f490fdb 	.word	0x3f490fdb

08008a64 <__ieee754_atan2f>:
 8008a64:	ee10 2a90 	vmov	r2, s1
 8008a68:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008a6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a70:	b510      	push	{r4, lr}
 8008a72:	eef0 7a40 	vmov.f32	s15, s0
 8008a76:	dc06      	bgt.n	8008a86 <__ieee754_atan2f+0x22>
 8008a78:	ee10 0a10 	vmov	r0, s0
 8008a7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008a80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a84:	dd04      	ble.n	8008a90 <__ieee754_atan2f+0x2c>
 8008a86:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a8e:	bd10      	pop	{r4, pc}
 8008a90:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008a94:	d103      	bne.n	8008a9e <__ieee754_atan2f+0x3a>
 8008a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9a:	f000 bfd1 	b.w	8009a40 <atanf>
 8008a9e:	1794      	asrs	r4, r2, #30
 8008aa0:	f004 0402 	and.w	r4, r4, #2
 8008aa4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008aa8:	b943      	cbnz	r3, 8008abc <__ieee754_atan2f+0x58>
 8008aaa:	2c02      	cmp	r4, #2
 8008aac:	d05e      	beq.n	8008b6c <__ieee754_atan2f+0x108>
 8008aae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008b80 <__ieee754_atan2f+0x11c>
 8008ab2:	2c03      	cmp	r4, #3
 8008ab4:	bf08      	it	eq
 8008ab6:	eef0 7a47 	vmoveq.f32	s15, s14
 8008aba:	e7e6      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008abc:	b941      	cbnz	r1, 8008ad0 <__ieee754_atan2f+0x6c>
 8008abe:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008b84 <__ieee754_atan2f+0x120>
 8008ac2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008b88 <__ieee754_atan2f+0x124>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	bfb8      	it	lt
 8008aca:	eef0 7a40 	vmovlt.f32	s15, s0
 8008ace:	e7dc      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008ad0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008ad4:	d110      	bne.n	8008af8 <__ieee754_atan2f+0x94>
 8008ad6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ada:	f104 34ff 	add.w	r4, r4, #4294967295
 8008ade:	d107      	bne.n	8008af0 <__ieee754_atan2f+0x8c>
 8008ae0:	2c02      	cmp	r4, #2
 8008ae2:	d846      	bhi.n	8008b72 <__ieee754_atan2f+0x10e>
 8008ae4:	4b29      	ldr	r3, [pc, #164]	; (8008b8c <__ieee754_atan2f+0x128>)
 8008ae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008aea:	edd4 7a00 	vldr	s15, [r4]
 8008aee:	e7cc      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008af0:	2c02      	cmp	r4, #2
 8008af2:	d841      	bhi.n	8008b78 <__ieee754_atan2f+0x114>
 8008af4:	4b26      	ldr	r3, [pc, #152]	; (8008b90 <__ieee754_atan2f+0x12c>)
 8008af6:	e7f6      	b.n	8008ae6 <__ieee754_atan2f+0x82>
 8008af8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008afc:	d0df      	beq.n	8008abe <__ieee754_atan2f+0x5a>
 8008afe:	1a5b      	subs	r3, r3, r1
 8008b00:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008b04:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008b08:	da1a      	bge.n	8008b40 <__ieee754_atan2f+0xdc>
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	da01      	bge.n	8008b12 <__ieee754_atan2f+0xae>
 8008b0e:	313c      	adds	r1, #60	; 0x3c
 8008b10:	db19      	blt.n	8008b46 <__ieee754_atan2f+0xe2>
 8008b12:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008b16:	f001 f867 	bl	8009be8 <fabsf>
 8008b1a:	f000 ff91 	bl	8009a40 <atanf>
 8008b1e:	eef0 7a40 	vmov.f32	s15, s0
 8008b22:	2c01      	cmp	r4, #1
 8008b24:	d012      	beq.n	8008b4c <__ieee754_atan2f+0xe8>
 8008b26:	2c02      	cmp	r4, #2
 8008b28:	d017      	beq.n	8008b5a <__ieee754_atan2f+0xf6>
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	d0ad      	beq.n	8008a8a <__ieee754_atan2f+0x26>
 8008b2e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008b94 <__ieee754_atan2f+0x130>
 8008b32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b36:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008b98 <__ieee754_atan2f+0x134>
 8008b3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b3e:	e7a4      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008b40:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008b84 <__ieee754_atan2f+0x120>
 8008b44:	e7ed      	b.n	8008b22 <__ieee754_atan2f+0xbe>
 8008b46:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b9c <__ieee754_atan2f+0x138>
 8008b4a:	e7ea      	b.n	8008b22 <__ieee754_atan2f+0xbe>
 8008b4c:	ee17 3a90 	vmov	r3, s15
 8008b50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	e797      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008b5a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008b94 <__ieee754_atan2f+0x130>
 8008b5e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b62:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008b98 <__ieee754_atan2f+0x134>
 8008b66:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008b6a:	e78e      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008b6c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008b98 <__ieee754_atan2f+0x134>
 8008b70:	e78b      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008b72:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008ba0 <__ieee754_atan2f+0x13c>
 8008b76:	e788      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008b78:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b9c <__ieee754_atan2f+0x138>
 8008b7c:	e785      	b.n	8008a8a <__ieee754_atan2f+0x26>
 8008b7e:	bf00      	nop
 8008b80:	c0490fdb 	.word	0xc0490fdb
 8008b84:	3fc90fdb 	.word	0x3fc90fdb
 8008b88:	bfc90fdb 	.word	0xbfc90fdb
 8008b8c:	0800e7ac 	.word	0x0800e7ac
 8008b90:	0800e7b8 	.word	0x0800e7b8
 8008b94:	33bbbd2e 	.word	0x33bbbd2e
 8008b98:	40490fdb 	.word	0x40490fdb
 8008b9c:	00000000 	.word	0x00000000
 8008ba0:	3f490fdb 	.word	0x3f490fdb

08008ba4 <__ieee754_powf>:
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	ee10 4a90 	vmov	r4, s1
 8008bac:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8008bb0:	ed2d 8b02 	vpush	{d8}
 8008bb4:	ee10 6a10 	vmov	r6, s0
 8008bb8:	eeb0 8a40 	vmov.f32	s16, s0
 8008bbc:	eef0 8a60 	vmov.f32	s17, s1
 8008bc0:	d10c      	bne.n	8008bdc <__ieee754_powf+0x38>
 8008bc2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8008bc6:	0076      	lsls	r6, r6, #1
 8008bc8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8008bcc:	f240 8296 	bls.w	80090fc <__ieee754_powf+0x558>
 8008bd0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008bd4:	ecbd 8b02 	vpop	{d8}
 8008bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bdc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008be0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008be4:	dcf4      	bgt.n	8008bd0 <__ieee754_powf+0x2c>
 8008be6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8008bea:	dd08      	ble.n	8008bfe <__ieee754_powf+0x5a>
 8008bec:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8008bf0:	d1ee      	bne.n	8008bd0 <__ieee754_powf+0x2c>
 8008bf2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8008bf6:	0064      	lsls	r4, r4, #1
 8008bf8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8008bfc:	e7e6      	b.n	8008bcc <__ieee754_powf+0x28>
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	da20      	bge.n	8008c44 <__ieee754_powf+0xa0>
 8008c02:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8008c06:	da2d      	bge.n	8008c64 <__ieee754_powf+0xc0>
 8008c08:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008c0c:	f2c0 827f 	blt.w	800910e <__ieee754_powf+0x56a>
 8008c10:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8008c14:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008c18:	fa48 f703 	asr.w	r7, r8, r3
 8008c1c:	fa07 f303 	lsl.w	r3, r7, r3
 8008c20:	4543      	cmp	r3, r8
 8008c22:	f040 8274 	bne.w	800910e <__ieee754_powf+0x56a>
 8008c26:	f007 0701 	and.w	r7, r7, #1
 8008c2a:	f1c7 0702 	rsb	r7, r7, #2
 8008c2e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008c32:	d11f      	bne.n	8008c74 <__ieee754_powf+0xd0>
 8008c34:	2c00      	cmp	r4, #0
 8008c36:	f280 8267 	bge.w	8009108 <__ieee754_powf+0x564>
 8008c3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008c3e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008c42:	e7c7      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008c44:	2700      	movs	r7, #0
 8008c46:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8008c4a:	d1f0      	bne.n	8008c2e <__ieee754_powf+0x8a>
 8008c4c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8008c50:	f000 8254 	beq.w	80090fc <__ieee754_powf+0x558>
 8008c54:	dd08      	ble.n	8008c68 <__ieee754_powf+0xc4>
 8008c56:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8008f60 <__ieee754_powf+0x3bc>
 8008c5a:	2c00      	cmp	r4, #0
 8008c5c:	bfa8      	it	ge
 8008c5e:	eeb0 0a68 	vmovge.f32	s0, s17
 8008c62:	e7b7      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008c64:	2702      	movs	r7, #2
 8008c66:	e7ee      	b.n	8008c46 <__ieee754_powf+0xa2>
 8008c68:	2c00      	cmp	r4, #0
 8008c6a:	f280 824a 	bge.w	8009102 <__ieee754_powf+0x55e>
 8008c6e:	eeb1 0a68 	vneg.f32	s0, s17
 8008c72:	e7af      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008c74:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8008c78:	d102      	bne.n	8008c80 <__ieee754_powf+0xdc>
 8008c7a:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008c7e:	e7a9      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008c80:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008c84:	eeb0 0a48 	vmov.f32	s0, s16
 8008c88:	d107      	bne.n	8008c9a <__ieee754_powf+0xf6>
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	db05      	blt.n	8008c9a <__ieee754_powf+0xf6>
 8008c8e:	ecbd 8b02 	vpop	{d8}
 8008c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	f000 bb8f 	b.w	80093b8 <__ieee754_sqrtf>
 8008c9a:	f000 ffa5 	bl	8009be8 <fabsf>
 8008c9e:	b125      	cbz	r5, 8008caa <__ieee754_powf+0x106>
 8008ca0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8008ca4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008ca8:	d116      	bne.n	8008cd8 <__ieee754_powf+0x134>
 8008caa:	2c00      	cmp	r4, #0
 8008cac:	bfbc      	itt	lt
 8008cae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8008cb2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	da8c      	bge.n	8008bd4 <__ieee754_powf+0x30>
 8008cba:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8008cbe:	ea55 0307 	orrs.w	r3, r5, r7
 8008cc2:	d104      	bne.n	8008cce <__ieee754_powf+0x12a>
 8008cc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008cc8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008ccc:	e782      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008cce:	2f01      	cmp	r7, #1
 8008cd0:	d180      	bne.n	8008bd4 <__ieee754_powf+0x30>
 8008cd2:	eeb1 0a40 	vneg.f32	s0, s0
 8008cd6:	e77d      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008cd8:	0ff0      	lsrs	r0, r6, #31
 8008cda:	3801      	subs	r0, #1
 8008cdc:	ea57 0300 	orrs.w	r3, r7, r0
 8008ce0:	d104      	bne.n	8008cec <__ieee754_powf+0x148>
 8008ce2:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008ce6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008cea:	e773      	b.n	8008bd4 <__ieee754_powf+0x30>
 8008cec:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8008cf0:	dd74      	ble.n	8008ddc <__ieee754_powf+0x238>
 8008cf2:	4b9c      	ldr	r3, [pc, #624]	; (8008f64 <__ieee754_powf+0x3c0>)
 8008cf4:	429d      	cmp	r5, r3
 8008cf6:	dc08      	bgt.n	8008d0a <__ieee754_powf+0x166>
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	da0b      	bge.n	8008d14 <__ieee754_powf+0x170>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	ecbd 8b02 	vpop	{d8}
 8008d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d06:	f000 be95 	b.w	8009a34 <__math_oflowf>
 8008d0a:	4b97      	ldr	r3, [pc, #604]	; (8008f68 <__ieee754_powf+0x3c4>)
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	dd08      	ble.n	8008d22 <__ieee754_powf+0x17e>
 8008d10:	2c00      	cmp	r4, #0
 8008d12:	dcf3      	bgt.n	8008cfc <__ieee754_powf+0x158>
 8008d14:	2000      	movs	r0, #0
 8008d16:	ecbd 8b02 	vpop	{d8}
 8008d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	f000 be83 	b.w	8009a28 <__math_uflowf>
 8008d22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008d26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d2a:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008f6c <__ieee754_powf+0x3c8>
 8008d2e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008d32:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008d36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008d3a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008d3e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d46:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008f70 <__ieee754_powf+0x3cc>
 8008d4a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008d4e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8008f74 <__ieee754_powf+0x3d0>
 8008d52:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008d56:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8008f78 <__ieee754_powf+0x3d4>
 8008d5a:	eef0 6a67 	vmov.f32	s13, s15
 8008d5e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008d62:	ee16 3a90 	vmov	r3, s13
 8008d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d6a:	f023 030f 	bic.w	r3, r3, #15
 8008d6e:	ee00 3a90 	vmov	s1, r3
 8008d72:	eee0 0a47 	vfms.f32	s1, s0, s14
 8008d76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008d7a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008d7e:	f024 040f 	bic.w	r4, r4, #15
 8008d82:	ee07 4a10 	vmov	s14, r4
 8008d86:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008d8a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008d96:	3f01      	subs	r7, #1
 8008d98:	ea57 0200 	orrs.w	r2, r7, r0
 8008d9c:	ee07 4a10 	vmov	s14, r4
 8008da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008da4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008da8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008dac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008db0:	ee17 4a10 	vmov	r4, s14
 8008db4:	bf08      	it	eq
 8008db6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8008dba:	2c00      	cmp	r4, #0
 8008dbc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008dc0:	f340 817e 	ble.w	80090c0 <__ieee754_powf+0x51c>
 8008dc4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008dc8:	f340 80f8 	ble.w	8008fbc <__ieee754_powf+0x418>
 8008dcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	bf4c      	ite	mi
 8008dd6:	2001      	movmi	r0, #1
 8008dd8:	2000      	movpl	r0, #0
 8008dda:	e790      	b.n	8008cfe <__ieee754_powf+0x15a>
 8008ddc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8008de0:	bf01      	itttt	eq
 8008de2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8008f7c <__ieee754_powf+0x3d8>
 8008de6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008dea:	f06f 0217 	mvneq.w	r2, #23
 8008dee:	ee17 5a90 	vmoveq	r5, s15
 8008df2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008df6:	bf18      	it	ne
 8008df8:	2200      	movne	r2, #0
 8008dfa:	3b7f      	subs	r3, #127	; 0x7f
 8008dfc:	4413      	add	r3, r2
 8008dfe:	4a60      	ldr	r2, [pc, #384]	; (8008f80 <__ieee754_powf+0x3dc>)
 8008e00:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8008e04:	4295      	cmp	r5, r2
 8008e06:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8008e0a:	dd06      	ble.n	8008e1a <__ieee754_powf+0x276>
 8008e0c:	4a5d      	ldr	r2, [pc, #372]	; (8008f84 <__ieee754_powf+0x3e0>)
 8008e0e:	4295      	cmp	r5, r2
 8008e10:	f340 80a4 	ble.w	8008f5c <__ieee754_powf+0x3b8>
 8008e14:	3301      	adds	r3, #1
 8008e16:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008e1a:	2500      	movs	r5, #0
 8008e1c:	4a5a      	ldr	r2, [pc, #360]	; (8008f88 <__ieee754_powf+0x3e4>)
 8008e1e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008e22:	ee07 1a90 	vmov	s15, r1
 8008e26:	ed92 7a00 	vldr	s14, [r2]
 8008e2a:	4a58      	ldr	r2, [pc, #352]	; (8008f8c <__ieee754_powf+0x3e8>)
 8008e2c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008e30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008e34:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008e38:	1049      	asrs	r1, r1, #1
 8008e3a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008e3e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8008e42:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8008e46:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8008e4a:	ee06 1a10 	vmov	s12, r1
 8008e4e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8008e52:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008e56:	ee14 6a90 	vmov	r6, s9
 8008e5a:	4016      	ands	r6, r2
 8008e5c:	ee05 6a90 	vmov	s11, r6
 8008e60:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8008e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e68:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008f90 <__ieee754_powf+0x3ec>
 8008e6c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8008e70:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8008e74:	ee25 6a26 	vmul.f32	s12, s10, s13
 8008e78:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008f94 <__ieee754_powf+0x3f0>
 8008e7c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008e80:	eddf 6a45 	vldr	s13, [pc, #276]	; 8008f98 <__ieee754_powf+0x3f4>
 8008e84:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e88:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008f6c <__ieee754_powf+0x3c8>
 8008e8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e90:	eddf 6a42 	vldr	s13, [pc, #264]	; 8008f9c <__ieee754_powf+0x3f8>
 8008e94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e98:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8008fa0 <__ieee754_powf+0x3fc>
 8008e9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ea0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8008ea4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8008ea8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008eac:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008eb0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8008eb4:	eef0 7a45 	vmov.f32	s15, s10
 8008eb8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8008ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec0:	ee17 1a90 	vmov	r1, s15
 8008ec4:	4011      	ands	r1, r2
 8008ec6:	ee07 1a90 	vmov	s15, r1
 8008eca:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8008ece:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8008ed2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008ed6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008eda:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008ede:	eeb0 6a47 	vmov.f32	s12, s14
 8008ee2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008ee6:	ee16 1a10 	vmov	r1, s12
 8008eea:	4011      	ands	r1, r2
 8008eec:	ee06 1a90 	vmov	s13, r1
 8008ef0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8008ef4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008fa4 <__ieee754_powf+0x400>
 8008ef8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8008fa8 <__ieee754_powf+0x404>
 8008efc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008f00:	ee06 1a10 	vmov	s12, r1
 8008f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f08:	eddf 7a28 	vldr	s15, [pc, #160]	; 8008fac <__ieee754_powf+0x408>
 8008f0c:	4928      	ldr	r1, [pc, #160]	; (8008fb0 <__ieee754_powf+0x40c>)
 8008f0e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008f12:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008f16:	edd1 7a00 	vldr	s15, [r1]
 8008f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <__ieee754_powf+0x410>)
 8008f24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008f28:	eef0 7a47 	vmov.f32	s15, s14
 8008f2c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008f30:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008f34:	edd5 0a00 	vldr	s1, [r5]
 8008f38:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f40:	ee17 3a90 	vmov	r3, s15
 8008f44:	4013      	ands	r3, r2
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008f4e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8008f52:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008f56:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008f5a:	e70e      	b.n	8008d7a <__ieee754_powf+0x1d6>
 8008f5c:	2501      	movs	r5, #1
 8008f5e:	e75d      	b.n	8008e1c <__ieee754_powf+0x278>
 8008f60:	00000000 	.word	0x00000000
 8008f64:	3f7ffff3 	.word	0x3f7ffff3
 8008f68:	3f800007 	.word	0x3f800007
 8008f6c:	3eaaaaab 	.word	0x3eaaaaab
 8008f70:	3fb8aa3b 	.word	0x3fb8aa3b
 8008f74:	36eca570 	.word	0x36eca570
 8008f78:	3fb8aa00 	.word	0x3fb8aa00
 8008f7c:	4b800000 	.word	0x4b800000
 8008f80:	001cc471 	.word	0x001cc471
 8008f84:	005db3d6 	.word	0x005db3d6
 8008f88:	0800e7c4 	.word	0x0800e7c4
 8008f8c:	fffff000 	.word	0xfffff000
 8008f90:	3e6c3255 	.word	0x3e6c3255
 8008f94:	3e53f142 	.word	0x3e53f142
 8008f98:	3e8ba305 	.word	0x3e8ba305
 8008f9c:	3edb6db7 	.word	0x3edb6db7
 8008fa0:	3f19999a 	.word	0x3f19999a
 8008fa4:	3f76384f 	.word	0x3f76384f
 8008fa8:	3f763800 	.word	0x3f763800
 8008fac:	369dc3a0 	.word	0x369dc3a0
 8008fb0:	0800e7d4 	.word	0x0800e7d4
 8008fb4:	0800e7cc 	.word	0x0800e7cc
 8008fb8:	3338aa3c 	.word	0x3338aa3c
 8008fbc:	f040 8095 	bne.w	80090ea <__ieee754_powf+0x546>
 8008fc0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008fb8 <__ieee754_powf+0x414>
 8008fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fc8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008fcc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd4:	f73f aefa 	bgt.w	8008dcc <__ieee754_powf+0x228>
 8008fd8:	15db      	asrs	r3, r3, #23
 8008fda:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008fde:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008fe2:	4103      	asrs	r3, r0
 8008fe4:	4423      	add	r3, r4
 8008fe6:	494b      	ldr	r1, [pc, #300]	; (8009114 <__ieee754_powf+0x570>)
 8008fe8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008fec:	3a7f      	subs	r2, #127	; 0x7f
 8008fee:	4111      	asrs	r1, r2
 8008ff0:	ea23 0101 	bic.w	r1, r3, r1
 8008ff4:	ee07 1a10 	vmov	s14, r1
 8008ff8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008ffc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009000:	f1c2 0217 	rsb	r2, r2, #23
 8009004:	4110      	asrs	r0, r2
 8009006:	2c00      	cmp	r4, #0
 8009008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800900c:	bfb8      	it	lt
 800900e:	4240      	neglt	r0, r0
 8009010:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009014:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8009118 <__ieee754_powf+0x574>
 8009018:	eddf 6a40 	vldr	s13, [pc, #256]	; 800911c <__ieee754_powf+0x578>
 800901c:	ee17 3a10 	vmov	r3, s14
 8009020:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009024:	f023 030f 	bic.w	r3, r3, #15
 8009028:	ee07 3a10 	vmov	s14, r3
 800902c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009030:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009034:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009038:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009120 <__ieee754_powf+0x57c>
 800903c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8009040:	eef0 7a40 	vmov.f32	s15, s0
 8009044:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009048:	eeb0 6a67 	vmov.f32	s12, s15
 800904c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009050:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009054:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009058:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009124 <__ieee754_powf+0x580>
 800905c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8009128 <__ieee754_powf+0x584>
 8009060:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009064:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800912c <__ieee754_powf+0x588>
 8009068:	eea6 6a87 	vfma.f32	s12, s13, s14
 800906c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009130 <__ieee754_powf+0x58c>
 8009070:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009074:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009134 <__ieee754_powf+0x590>
 8009078:	eea6 6a87 	vfma.f32	s12, s13, s14
 800907c:	eef0 6a67 	vmov.f32	s13, s15
 8009080:	eee6 6a47 	vfms.f32	s13, s12, s14
 8009084:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009088:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800908c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009090:	eea7 0a80 	vfma.f32	s0, s15, s0
 8009094:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009098:	ee37 0a40 	vsub.f32	s0, s14, s0
 800909c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80090a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80090a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80090a8:	ee10 3a10 	vmov	r3, s0
 80090ac:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80090b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090b4:	da1f      	bge.n	80090f6 <__ieee754_powf+0x552>
 80090b6:	f000 fdf3 	bl	8009ca0 <scalbnf>
 80090ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80090be:	e589      	b.n	8008bd4 <__ieee754_powf+0x30>
 80090c0:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <__ieee754_powf+0x594>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	dd07      	ble.n	80090d6 <__ieee754_powf+0x532>
 80090c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80090ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ce:	bf4c      	ite	mi
 80090d0:	2001      	movmi	r0, #1
 80090d2:	2000      	movpl	r0, #0
 80090d4:	e61f      	b.n	8008d16 <__ieee754_powf+0x172>
 80090d6:	d108      	bne.n	80090ea <__ieee754_powf+0x546>
 80090d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090dc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	f6ff af78 	blt.w	8008fd8 <__ieee754_powf+0x434>
 80090e8:	e7ed      	b.n	80090c6 <__ieee754_powf+0x522>
 80090ea:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80090ee:	f73f af73 	bgt.w	8008fd8 <__ieee754_powf+0x434>
 80090f2:	2000      	movs	r0, #0
 80090f4:	e78c      	b.n	8009010 <__ieee754_powf+0x46c>
 80090f6:	ee00 3a10 	vmov	s0, r3
 80090fa:	e7de      	b.n	80090ba <__ieee754_powf+0x516>
 80090fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009100:	e568      	b.n	8008bd4 <__ieee754_powf+0x30>
 8009102:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800913c <__ieee754_powf+0x598>
 8009106:	e565      	b.n	8008bd4 <__ieee754_powf+0x30>
 8009108:	eeb0 0a48 	vmov.f32	s0, s16
 800910c:	e562      	b.n	8008bd4 <__ieee754_powf+0x30>
 800910e:	2700      	movs	r7, #0
 8009110:	e58d      	b.n	8008c2e <__ieee754_powf+0x8a>
 8009112:	bf00      	nop
 8009114:	007fffff 	.word	0x007fffff
 8009118:	35bfbe8c 	.word	0x35bfbe8c
 800911c:	3f317200 	.word	0x3f317200
 8009120:	3f317218 	.word	0x3f317218
 8009124:	b5ddea0e 	.word	0xb5ddea0e
 8009128:	3331bb4c 	.word	0x3331bb4c
 800912c:	388ab355 	.word	0x388ab355
 8009130:	bb360b61 	.word	0xbb360b61
 8009134:	3e2aaaab 	.word	0x3e2aaaab
 8009138:	43160000 	.word	0x43160000
 800913c:	00000000 	.word	0x00000000

08009140 <__ieee754_rem_pio2f>:
 8009140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009142:	ee10 6a10 	vmov	r6, s0
 8009146:	4b8e      	ldr	r3, [pc, #568]	; (8009380 <__ieee754_rem_pio2f+0x240>)
 8009148:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800914c:	429d      	cmp	r5, r3
 800914e:	b087      	sub	sp, #28
 8009150:	eef0 7a40 	vmov.f32	s15, s0
 8009154:	4604      	mov	r4, r0
 8009156:	dc05      	bgt.n	8009164 <__ieee754_rem_pio2f+0x24>
 8009158:	2300      	movs	r3, #0
 800915a:	ed80 0a00 	vstr	s0, [r0]
 800915e:	6043      	str	r3, [r0, #4]
 8009160:	2000      	movs	r0, #0
 8009162:	e01a      	b.n	800919a <__ieee754_rem_pio2f+0x5a>
 8009164:	4b87      	ldr	r3, [pc, #540]	; (8009384 <__ieee754_rem_pio2f+0x244>)
 8009166:	429d      	cmp	r5, r3
 8009168:	dc46      	bgt.n	80091f8 <__ieee754_rem_pio2f+0xb8>
 800916a:	2e00      	cmp	r6, #0
 800916c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009388 <__ieee754_rem_pio2f+0x248>
 8009170:	4b86      	ldr	r3, [pc, #536]	; (800938c <__ieee754_rem_pio2f+0x24c>)
 8009172:	f025 050f 	bic.w	r5, r5, #15
 8009176:	dd1f      	ble.n	80091b8 <__ieee754_rem_pio2f+0x78>
 8009178:	429d      	cmp	r5, r3
 800917a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800917e:	d00e      	beq.n	800919e <__ieee754_rem_pio2f+0x5e>
 8009180:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009390 <__ieee754_rem_pio2f+0x250>
 8009184:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009188:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800918c:	ed80 0a00 	vstr	s0, [r0]
 8009190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009194:	2001      	movs	r0, #1
 8009196:	edc4 7a01 	vstr	s15, [r4, #4]
 800919a:	b007      	add	sp, #28
 800919c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800919e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009394 <__ieee754_rem_pio2f+0x254>
 80091a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009398 <__ieee754_rem_pio2f+0x258>
 80091a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80091aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80091ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091b2:	edc0 6a00 	vstr	s13, [r0]
 80091b6:	e7eb      	b.n	8009190 <__ieee754_rem_pio2f+0x50>
 80091b8:	429d      	cmp	r5, r3
 80091ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80091be:	d00e      	beq.n	80091de <__ieee754_rem_pio2f+0x9e>
 80091c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009390 <__ieee754_rem_pio2f+0x250>
 80091c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80091c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80091cc:	ed80 0a00 	vstr	s0, [r0]
 80091d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80091dc:	e7dd      	b.n	800919a <__ieee754_rem_pio2f+0x5a>
 80091de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009394 <__ieee754_rem_pio2f+0x254>
 80091e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009398 <__ieee754_rem_pio2f+0x258>
 80091e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80091ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80091ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091f2:	edc0 6a00 	vstr	s13, [r0]
 80091f6:	e7eb      	b.n	80091d0 <__ieee754_rem_pio2f+0x90>
 80091f8:	4b68      	ldr	r3, [pc, #416]	; (800939c <__ieee754_rem_pio2f+0x25c>)
 80091fa:	429d      	cmp	r5, r3
 80091fc:	dc72      	bgt.n	80092e4 <__ieee754_rem_pio2f+0x1a4>
 80091fe:	f000 fcf3 	bl	8009be8 <fabsf>
 8009202:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80093a0 <__ieee754_rem_pio2f+0x260>
 8009206:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800920a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800920e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009216:	ee17 0a90 	vmov	r0, s15
 800921a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009388 <__ieee754_rem_pio2f+0x248>
 800921e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009222:	281f      	cmp	r0, #31
 8009224:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009390 <__ieee754_rem_pio2f+0x250>
 8009228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922c:	eeb1 6a47 	vneg.f32	s12, s14
 8009230:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009234:	ee16 2a90 	vmov	r2, s13
 8009238:	dc1c      	bgt.n	8009274 <__ieee754_rem_pio2f+0x134>
 800923a:	495a      	ldr	r1, [pc, #360]	; (80093a4 <__ieee754_rem_pio2f+0x264>)
 800923c:	1e47      	subs	r7, r0, #1
 800923e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8009242:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009246:	428b      	cmp	r3, r1
 8009248:	d014      	beq.n	8009274 <__ieee754_rem_pio2f+0x134>
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	ed94 7a00 	vldr	s14, [r4]
 8009250:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009254:	2e00      	cmp	r6, #0
 8009256:	ee30 0a67 	vsub.f32	s0, s0, s15
 800925a:	ed84 0a01 	vstr	s0, [r4, #4]
 800925e:	da9c      	bge.n	800919a <__ieee754_rem_pio2f+0x5a>
 8009260:	eeb1 7a47 	vneg.f32	s14, s14
 8009264:	eeb1 0a40 	vneg.f32	s0, s0
 8009268:	ed84 7a00 	vstr	s14, [r4]
 800926c:	ed84 0a01 	vstr	s0, [r4, #4]
 8009270:	4240      	negs	r0, r0
 8009272:	e792      	b.n	800919a <__ieee754_rem_pio2f+0x5a>
 8009274:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009278:	15eb      	asrs	r3, r5, #23
 800927a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800927e:	2d08      	cmp	r5, #8
 8009280:	dde3      	ble.n	800924a <__ieee754_rem_pio2f+0x10a>
 8009282:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009394 <__ieee754_rem_pio2f+0x254>
 8009286:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009398 <__ieee754_rem_pio2f+0x258>
 800928a:	eef0 6a40 	vmov.f32	s13, s0
 800928e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009292:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009296:	eea6 0a27 	vfma.f32	s0, s12, s15
 800929a:	eef0 7a40 	vmov.f32	s15, s0
 800929e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80092a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80092a6:	ee15 2a90 	vmov	r2, s11
 80092aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80092ae:	1a5b      	subs	r3, r3, r1
 80092b0:	2b19      	cmp	r3, #25
 80092b2:	dc04      	bgt.n	80092be <__ieee754_rem_pio2f+0x17e>
 80092b4:	edc4 5a00 	vstr	s11, [r4]
 80092b8:	eeb0 0a66 	vmov.f32	s0, s13
 80092bc:	e7c6      	b.n	800924c <__ieee754_rem_pio2f+0x10c>
 80092be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80093a8 <__ieee754_rem_pio2f+0x268>
 80092c2:	eeb0 0a66 	vmov.f32	s0, s13
 80092c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80092ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80092ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80093ac <__ieee754_rem_pio2f+0x26c>
 80092d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80092d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80092da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80092de:	ed84 7a00 	vstr	s14, [r4]
 80092e2:	e7b3      	b.n	800924c <__ieee754_rem_pio2f+0x10c>
 80092e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80092e8:	db06      	blt.n	80092f8 <__ieee754_rem_pio2f+0x1b8>
 80092ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80092ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80092f2:	edc0 7a00 	vstr	s15, [r0]
 80092f6:	e733      	b.n	8009160 <__ieee754_rem_pio2f+0x20>
 80092f8:	15ea      	asrs	r2, r5, #23
 80092fa:	3a86      	subs	r2, #134	; 0x86
 80092fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009308:	eddf 6a29 	vldr	s13, [pc, #164]	; 80093b0 <__ieee754_rem_pio2f+0x270>
 800930c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009314:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009318:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800931c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009320:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009328:	ed8d 7a04 	vstr	s14, [sp, #16]
 800932c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009330:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009338:	edcd 7a05 	vstr	s15, [sp, #20]
 800933c:	d11e      	bne.n	800937c <__ieee754_rem_pio2f+0x23c>
 800933e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009346:	bf14      	ite	ne
 8009348:	2302      	movne	r3, #2
 800934a:	2301      	moveq	r3, #1
 800934c:	4919      	ldr	r1, [pc, #100]	; (80093b4 <__ieee754_rem_pio2f+0x274>)
 800934e:	9101      	str	r1, [sp, #4]
 8009350:	2102      	movs	r1, #2
 8009352:	9100      	str	r1, [sp, #0]
 8009354:	a803      	add	r0, sp, #12
 8009356:	4621      	mov	r1, r4
 8009358:	f000 f892 	bl	8009480 <__kernel_rem_pio2f>
 800935c:	2e00      	cmp	r6, #0
 800935e:	f6bf af1c 	bge.w	800919a <__ieee754_rem_pio2f+0x5a>
 8009362:	edd4 7a00 	vldr	s15, [r4]
 8009366:	eef1 7a67 	vneg.f32	s15, s15
 800936a:	edc4 7a00 	vstr	s15, [r4]
 800936e:	edd4 7a01 	vldr	s15, [r4, #4]
 8009372:	eef1 7a67 	vneg.f32	s15, s15
 8009376:	edc4 7a01 	vstr	s15, [r4, #4]
 800937a:	e779      	b.n	8009270 <__ieee754_rem_pio2f+0x130>
 800937c:	2303      	movs	r3, #3
 800937e:	e7e5      	b.n	800934c <__ieee754_rem_pio2f+0x20c>
 8009380:	3f490fd8 	.word	0x3f490fd8
 8009384:	4016cbe3 	.word	0x4016cbe3
 8009388:	3fc90f80 	.word	0x3fc90f80
 800938c:	3fc90fd0 	.word	0x3fc90fd0
 8009390:	37354443 	.word	0x37354443
 8009394:	37354400 	.word	0x37354400
 8009398:	2e85a308 	.word	0x2e85a308
 800939c:	43490f80 	.word	0x43490f80
 80093a0:	3f22f984 	.word	0x3f22f984
 80093a4:	0800e7dc 	.word	0x0800e7dc
 80093a8:	2e85a300 	.word	0x2e85a300
 80093ac:	248d3132 	.word	0x248d3132
 80093b0:	43800000 	.word	0x43800000
 80093b4:	0800e85c 	.word	0x0800e85c

080093b8 <__ieee754_sqrtf>:
 80093b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80093bc:	4770      	bx	lr
	...

080093c0 <__kernel_cosf>:
 80093c0:	ee10 3a10 	vmov	r3, s0
 80093c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80093cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80093d0:	da05      	bge.n	80093de <__kernel_cosf+0x1e>
 80093d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80093d6:	ee17 2a90 	vmov	r2, s15
 80093da:	2a00      	cmp	r2, #0
 80093dc:	d03d      	beq.n	800945a <__kernel_cosf+0x9a>
 80093de:	ee60 5a00 	vmul.f32	s11, s0, s0
 80093e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009460 <__kernel_cosf+0xa0>
 80093e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009464 <__kernel_cosf+0xa4>
 80093ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009468 <__kernel_cosf+0xa8>
 80093ee:	4a1f      	ldr	r2, [pc, #124]	; (800946c <__kernel_cosf+0xac>)
 80093f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80093f4:	4293      	cmp	r3, r2
 80093f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009470 <__kernel_cosf+0xb0>
 80093fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80093fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009474 <__kernel_cosf+0xb4>
 8009402:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009406:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009478 <__kernel_cosf+0xb8>
 800940a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800940e:	eeb0 7a66 	vmov.f32	s14, s13
 8009412:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009416:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800941a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800941e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009422:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009426:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800942a:	dc04      	bgt.n	8009436 <__kernel_cosf+0x76>
 800942c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009430:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009434:	4770      	bx	lr
 8009436:	4a11      	ldr	r2, [pc, #68]	; (800947c <__kernel_cosf+0xbc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	bfda      	itte	le
 800943c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009440:	ee06 3a90 	vmovle	s13, r3
 8009444:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009448:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800944c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009454:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009458:	4770      	bx	lr
 800945a:	eeb0 0a46 	vmov.f32	s0, s12
 800945e:	4770      	bx	lr
 8009460:	ad47d74e 	.word	0xad47d74e
 8009464:	310f74f6 	.word	0x310f74f6
 8009468:	3d2aaaab 	.word	0x3d2aaaab
 800946c:	3e999999 	.word	0x3e999999
 8009470:	b493f27c 	.word	0xb493f27c
 8009474:	37d00d01 	.word	0x37d00d01
 8009478:	bab60b61 	.word	0xbab60b61
 800947c:	3f480000 	.word	0x3f480000

08009480 <__kernel_rem_pio2f>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	ed2d 8b04 	vpush	{d8-d9}
 8009488:	b0d9      	sub	sp, #356	; 0x164
 800948a:	4688      	mov	r8, r1
 800948c:	9002      	str	r0, [sp, #8]
 800948e:	49bb      	ldr	r1, [pc, #748]	; (800977c <__kernel_rem_pio2f+0x2fc>)
 8009490:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009498:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800949c:	1e59      	subs	r1, r3, #1
 800949e:	1d13      	adds	r3, r2, #4
 80094a0:	db27      	blt.n	80094f2 <__kernel_rem_pio2f+0x72>
 80094a2:	f1b2 0b03 	subs.w	fp, r2, #3
 80094a6:	bf48      	it	mi
 80094a8:	f102 0b04 	addmi.w	fp, r2, #4
 80094ac:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80094b0:	1c45      	adds	r5, r0, #1
 80094b2:	00ec      	lsls	r4, r5, #3
 80094b4:	1a47      	subs	r7, r0, r1
 80094b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800978c <__kernel_rem_pio2f+0x30c>
 80094ba:	9403      	str	r4, [sp, #12]
 80094bc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80094c0:	eb0a 0c01 	add.w	ip, sl, r1
 80094c4:	ae1c      	add	r6, sp, #112	; 0x70
 80094c6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80094ca:	2400      	movs	r4, #0
 80094cc:	4564      	cmp	r4, ip
 80094ce:	dd12      	ble.n	80094f6 <__kernel_rem_pio2f+0x76>
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	ac1c      	add	r4, sp, #112	; 0x70
 80094d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80094d8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80094dc:	f04f 0c00 	mov.w	ip, #0
 80094e0:	45d4      	cmp	ip, sl
 80094e2:	dc27      	bgt.n	8009534 <__kernel_rem_pio2f+0xb4>
 80094e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80094e8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800978c <__kernel_rem_pio2f+0x30c>
 80094ec:	4627      	mov	r7, r4
 80094ee:	2600      	movs	r6, #0
 80094f0:	e016      	b.n	8009520 <__kernel_rem_pio2f+0xa0>
 80094f2:	2000      	movs	r0, #0
 80094f4:	e7dc      	b.n	80094b0 <__kernel_rem_pio2f+0x30>
 80094f6:	42e7      	cmn	r7, r4
 80094f8:	bf5d      	ittte	pl
 80094fa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80094fe:	ee07 3a90 	vmovpl	s15, r3
 8009502:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009506:	eef0 7a47 	vmovmi.f32	s15, s14
 800950a:	ece6 7a01 	vstmia	r6!, {s15}
 800950e:	3401      	adds	r4, #1
 8009510:	e7dc      	b.n	80094cc <__kernel_rem_pio2f+0x4c>
 8009512:	ecf9 6a01 	vldmia	r9!, {s13}
 8009516:	ed97 7a00 	vldr	s14, [r7]
 800951a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800951e:	3601      	adds	r6, #1
 8009520:	428e      	cmp	r6, r1
 8009522:	f1a7 0704 	sub.w	r7, r7, #4
 8009526:	ddf4      	ble.n	8009512 <__kernel_rem_pio2f+0x92>
 8009528:	eceb 7a01 	vstmia	fp!, {s15}
 800952c:	f10c 0c01 	add.w	ip, ip, #1
 8009530:	3404      	adds	r4, #4
 8009532:	e7d5      	b.n	80094e0 <__kernel_rem_pio2f+0x60>
 8009534:	ab08      	add	r3, sp, #32
 8009536:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800953a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009788 <__kernel_rem_pio2f+0x308>
 800953e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009784 <__kernel_rem_pio2f+0x304>
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009548:	4656      	mov	r6, sl
 800954a:	00b3      	lsls	r3, r6, #2
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	ab58      	add	r3, sp, #352	; 0x160
 8009550:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009554:	ac08      	add	r4, sp, #32
 8009556:	ab44      	add	r3, sp, #272	; 0x110
 8009558:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800955c:	46a4      	mov	ip, r4
 800955e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009562:	4637      	mov	r7, r6
 8009564:	2f00      	cmp	r7, #0
 8009566:	f1a0 0004 	sub.w	r0, r0, #4
 800956a:	dc4f      	bgt.n	800960c <__kernel_rem_pio2f+0x18c>
 800956c:	4628      	mov	r0, r5
 800956e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009572:	f000 fb95 	bl	8009ca0 <scalbnf>
 8009576:	eeb0 8a40 	vmov.f32	s16, s0
 800957a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800957e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009582:	f000 fb45 	bl	8009c10 <floorf>
 8009586:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800958a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800958e:	2d00      	cmp	r5, #0
 8009590:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009594:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009598:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800959c:	ee17 9a90 	vmov	r9, s15
 80095a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80095a4:	dd44      	ble.n	8009630 <__kernel_rem_pio2f+0x1b0>
 80095a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80095aa:	ab08      	add	r3, sp, #32
 80095ac:	f1c5 0e08 	rsb	lr, r5, #8
 80095b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80095b4:	fa47 f00e 	asr.w	r0, r7, lr
 80095b8:	4481      	add	r9, r0
 80095ba:	fa00 f00e 	lsl.w	r0, r0, lr
 80095be:	1a3f      	subs	r7, r7, r0
 80095c0:	f1c5 0007 	rsb	r0, r5, #7
 80095c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80095c8:	4107      	asrs	r7, r0
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	dd3f      	ble.n	800964e <__kernel_rem_pio2f+0x1ce>
 80095ce:	f04f 0e00 	mov.w	lr, #0
 80095d2:	f109 0901 	add.w	r9, r9, #1
 80095d6:	4673      	mov	r3, lr
 80095d8:	4576      	cmp	r6, lr
 80095da:	dc6b      	bgt.n	80096b4 <__kernel_rem_pio2f+0x234>
 80095dc:	2d00      	cmp	r5, #0
 80095de:	dd04      	ble.n	80095ea <__kernel_rem_pio2f+0x16a>
 80095e0:	2d01      	cmp	r5, #1
 80095e2:	d078      	beq.n	80096d6 <__kernel_rem_pio2f+0x256>
 80095e4:	2d02      	cmp	r5, #2
 80095e6:	f000 8081 	beq.w	80096ec <__kernel_rem_pio2f+0x26c>
 80095ea:	2f02      	cmp	r7, #2
 80095ec:	d12f      	bne.n	800964e <__kernel_rem_pio2f+0x1ce>
 80095ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80095f6:	b353      	cbz	r3, 800964e <__kernel_rem_pio2f+0x1ce>
 80095f8:	4628      	mov	r0, r5
 80095fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80095fe:	f000 fb4f 	bl	8009ca0 <scalbnf>
 8009602:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009606:	ee38 8a40 	vsub.f32	s16, s16, s0
 800960a:	e020      	b.n	800964e <__kernel_rem_pio2f+0x1ce>
 800960c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009610:	3f01      	subs	r7, #1
 8009612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800961a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800961e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009622:	ecac 0a01 	vstmia	ip!, {s0}
 8009626:	ed90 0a00 	vldr	s0, [r0]
 800962a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800962e:	e799      	b.n	8009564 <__kernel_rem_pio2f+0xe4>
 8009630:	d105      	bne.n	800963e <__kernel_rem_pio2f+0x1be>
 8009632:	1e70      	subs	r0, r6, #1
 8009634:	ab08      	add	r3, sp, #32
 8009636:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800963a:	11ff      	asrs	r7, r7, #7
 800963c:	e7c5      	b.n	80095ca <__kernel_rem_pio2f+0x14a>
 800963e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009642:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964a:	da31      	bge.n	80096b0 <__kernel_rem_pio2f+0x230>
 800964c:	2700      	movs	r7, #0
 800964e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009656:	f040 809b 	bne.w	8009790 <__kernel_rem_pio2f+0x310>
 800965a:	1e74      	subs	r4, r6, #1
 800965c:	46a4      	mov	ip, r4
 800965e:	2000      	movs	r0, #0
 8009660:	45d4      	cmp	ip, sl
 8009662:	da4a      	bge.n	80096fa <__kernel_rem_pio2f+0x27a>
 8009664:	2800      	cmp	r0, #0
 8009666:	d07a      	beq.n	800975e <__kernel_rem_pio2f+0x2de>
 8009668:	ab08      	add	r3, sp, #32
 800966a:	3d08      	subs	r5, #8
 800966c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 8081 	beq.w	8009778 <__kernel_rem_pio2f+0x2f8>
 8009676:	4628      	mov	r0, r5
 8009678:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800967c:	00a5      	lsls	r5, r4, #2
 800967e:	f000 fb0f 	bl	8009ca0 <scalbnf>
 8009682:	aa44      	add	r2, sp, #272	; 0x110
 8009684:	1d2b      	adds	r3, r5, #4
 8009686:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009788 <__kernel_rem_pio2f+0x308>
 800968a:	18d1      	adds	r1, r2, r3
 800968c:	4622      	mov	r2, r4
 800968e:	2a00      	cmp	r2, #0
 8009690:	f280 80ae 	bge.w	80097f0 <__kernel_rem_pio2f+0x370>
 8009694:	4622      	mov	r2, r4
 8009696:	2a00      	cmp	r2, #0
 8009698:	f2c0 80cc 	blt.w	8009834 <__kernel_rem_pio2f+0x3b4>
 800969c:	a944      	add	r1, sp, #272	; 0x110
 800969e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80096a2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009780 <__kernel_rem_pio2f+0x300>
 80096a6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800978c <__kernel_rem_pio2f+0x30c>
 80096aa:	2000      	movs	r0, #0
 80096ac:	1aa1      	subs	r1, r4, r2
 80096ae:	e0b6      	b.n	800981e <__kernel_rem_pio2f+0x39e>
 80096b0:	2702      	movs	r7, #2
 80096b2:	e78c      	b.n	80095ce <__kernel_rem_pio2f+0x14e>
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	b94b      	cbnz	r3, 80096cc <__kernel_rem_pio2f+0x24c>
 80096b8:	b118      	cbz	r0, 80096c2 <__kernel_rem_pio2f+0x242>
 80096ba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80096be:	6020      	str	r0, [r4, #0]
 80096c0:	2001      	movs	r0, #1
 80096c2:	f10e 0e01 	add.w	lr, lr, #1
 80096c6:	3404      	adds	r4, #4
 80096c8:	4603      	mov	r3, r0
 80096ca:	e785      	b.n	80095d8 <__kernel_rem_pio2f+0x158>
 80096cc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80096d0:	6020      	str	r0, [r4, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	e7f5      	b.n	80096c2 <__kernel_rem_pio2f+0x242>
 80096d6:	1e74      	subs	r4, r6, #1
 80096d8:	a808      	add	r0, sp, #32
 80096da:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80096de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80096e2:	f10d 0c20 	add.w	ip, sp, #32
 80096e6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80096ea:	e77e      	b.n	80095ea <__kernel_rem_pio2f+0x16a>
 80096ec:	1e74      	subs	r4, r6, #1
 80096ee:	a808      	add	r0, sp, #32
 80096f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80096f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80096f8:	e7f3      	b.n	80096e2 <__kernel_rem_pio2f+0x262>
 80096fa:	ab08      	add	r3, sp, #32
 80096fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009700:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009704:	4318      	orrs	r0, r3
 8009706:	e7ab      	b.n	8009660 <__kernel_rem_pio2f+0x1e0>
 8009708:	f10c 0c01 	add.w	ip, ip, #1
 800970c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8009710:	2c00      	cmp	r4, #0
 8009712:	d0f9      	beq.n	8009708 <__kernel_rem_pio2f+0x288>
 8009714:	9b05      	ldr	r3, [sp, #20]
 8009716:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800971a:	eb0d 0003 	add.w	r0, sp, r3
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	18f4      	adds	r4, r6, r3
 8009722:	ab1c      	add	r3, sp, #112	; 0x70
 8009724:	1c77      	adds	r7, r6, #1
 8009726:	384c      	subs	r0, #76	; 0x4c
 8009728:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800972c:	4466      	add	r6, ip
 800972e:	42be      	cmp	r6, r7
 8009730:	f6ff af0b 	blt.w	800954a <__kernel_rem_pio2f+0xca>
 8009734:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009738:	f8dd e008 	ldr.w	lr, [sp, #8]
 800973c:	ee07 3a90 	vmov	s15, r3
 8009740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009744:	f04f 0c00 	mov.w	ip, #0
 8009748:	ece4 7a01 	vstmia	r4!, {s15}
 800974c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800978c <__kernel_rem_pio2f+0x30c>
 8009750:	46a1      	mov	r9, r4
 8009752:	458c      	cmp	ip, r1
 8009754:	dd07      	ble.n	8009766 <__kernel_rem_pio2f+0x2e6>
 8009756:	ece0 7a01 	vstmia	r0!, {s15}
 800975a:	3701      	adds	r7, #1
 800975c:	e7e7      	b.n	800972e <__kernel_rem_pio2f+0x2ae>
 800975e:	9804      	ldr	r0, [sp, #16]
 8009760:	f04f 0c01 	mov.w	ip, #1
 8009764:	e7d2      	b.n	800970c <__kernel_rem_pio2f+0x28c>
 8009766:	ecfe 6a01 	vldmia	lr!, {s13}
 800976a:	ed39 7a01 	vldmdb	r9!, {s14}
 800976e:	f10c 0c01 	add.w	ip, ip, #1
 8009772:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009776:	e7ec      	b.n	8009752 <__kernel_rem_pio2f+0x2d2>
 8009778:	3c01      	subs	r4, #1
 800977a:	e775      	b.n	8009668 <__kernel_rem_pio2f+0x1e8>
 800977c:	0800eba0 	.word	0x0800eba0
 8009780:	0800eb74 	.word	0x0800eb74
 8009784:	43800000 	.word	0x43800000
 8009788:	3b800000 	.word	0x3b800000
 800978c:	00000000 	.word	0x00000000
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	eeb0 0a48 	vmov.f32	s0, s16
 8009796:	1a98      	subs	r0, r3, r2
 8009798:	f000 fa82 	bl	8009ca0 <scalbnf>
 800979c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009784 <__kernel_rem_pio2f+0x304>
 80097a0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80097a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a8:	db19      	blt.n	80097de <__kernel_rem_pio2f+0x35e>
 80097aa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009788 <__kernel_rem_pio2f+0x308>
 80097ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 80097b2:	aa08      	add	r2, sp, #32
 80097b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097b8:	1c74      	adds	r4, r6, #1
 80097ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097be:	3508      	adds	r5, #8
 80097c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80097c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80097cc:	ee10 3a10 	vmov	r3, s0
 80097d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80097d4:	ee17 3a90 	vmov	r3, s15
 80097d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80097dc:	e74b      	b.n	8009676 <__kernel_rem_pio2f+0x1f6>
 80097de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80097e2:	aa08      	add	r2, sp, #32
 80097e4:	ee10 3a10 	vmov	r3, s0
 80097e8:	4634      	mov	r4, r6
 80097ea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80097ee:	e742      	b.n	8009676 <__kernel_rem_pio2f+0x1f6>
 80097f0:	a808      	add	r0, sp, #32
 80097f2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80097f6:	9001      	str	r0, [sp, #4]
 80097f8:	ee07 0a90 	vmov	s15, r0
 80097fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009800:	3a01      	subs	r2, #1
 8009802:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009806:	ee20 0a07 	vmul.f32	s0, s0, s14
 800980a:	ed61 7a01 	vstmdb	r1!, {s15}
 800980e:	e73e      	b.n	800968e <__kernel_rem_pio2f+0x20e>
 8009810:	ecfc 6a01 	vldmia	ip!, {s13}
 8009814:	ecb6 7a01 	vldmia	r6!, {s14}
 8009818:	eee6 7a87 	vfma.f32	s15, s13, s14
 800981c:	3001      	adds	r0, #1
 800981e:	4550      	cmp	r0, sl
 8009820:	dc01      	bgt.n	8009826 <__kernel_rem_pio2f+0x3a6>
 8009822:	4288      	cmp	r0, r1
 8009824:	ddf4      	ble.n	8009810 <__kernel_rem_pio2f+0x390>
 8009826:	a858      	add	r0, sp, #352	; 0x160
 8009828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800982c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009830:	3a01      	subs	r2, #1
 8009832:	e730      	b.n	8009696 <__kernel_rem_pio2f+0x216>
 8009834:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009836:	2a02      	cmp	r2, #2
 8009838:	dc09      	bgt.n	800984e <__kernel_rem_pio2f+0x3ce>
 800983a:	2a00      	cmp	r2, #0
 800983c:	dc2a      	bgt.n	8009894 <__kernel_rem_pio2f+0x414>
 800983e:	d043      	beq.n	80098c8 <__kernel_rem_pio2f+0x448>
 8009840:	f009 0007 	and.w	r0, r9, #7
 8009844:	b059      	add	sp, #356	; 0x164
 8009846:	ecbd 8b04 	vpop	{d8-d9}
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009850:	2b03      	cmp	r3, #3
 8009852:	d1f5      	bne.n	8009840 <__kernel_rem_pio2f+0x3c0>
 8009854:	ab30      	add	r3, sp, #192	; 0xc0
 8009856:	442b      	add	r3, r5
 8009858:	461a      	mov	r2, r3
 800985a:	4619      	mov	r1, r3
 800985c:	4620      	mov	r0, r4
 800985e:	2800      	cmp	r0, #0
 8009860:	f1a1 0104 	sub.w	r1, r1, #4
 8009864:	dc51      	bgt.n	800990a <__kernel_rem_pio2f+0x48a>
 8009866:	4621      	mov	r1, r4
 8009868:	2901      	cmp	r1, #1
 800986a:	f1a2 0204 	sub.w	r2, r2, #4
 800986e:	dc5c      	bgt.n	800992a <__kernel_rem_pio2f+0x4aa>
 8009870:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800978c <__kernel_rem_pio2f+0x30c>
 8009874:	3304      	adds	r3, #4
 8009876:	2c01      	cmp	r4, #1
 8009878:	dc67      	bgt.n	800994a <__kernel_rem_pio2f+0x4ca>
 800987a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800987e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009882:	2f00      	cmp	r7, #0
 8009884:	d167      	bne.n	8009956 <__kernel_rem_pio2f+0x4d6>
 8009886:	edc8 6a00 	vstr	s13, [r8]
 800988a:	ed88 7a01 	vstr	s14, [r8, #4]
 800988e:	edc8 7a02 	vstr	s15, [r8, #8]
 8009892:	e7d5      	b.n	8009840 <__kernel_rem_pio2f+0x3c0>
 8009894:	aa30      	add	r2, sp, #192	; 0xc0
 8009896:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800978c <__kernel_rem_pio2f+0x30c>
 800989a:	4413      	add	r3, r2
 800989c:	4622      	mov	r2, r4
 800989e:	2a00      	cmp	r2, #0
 80098a0:	da24      	bge.n	80098ec <__kernel_rem_pio2f+0x46c>
 80098a2:	b34f      	cbz	r7, 80098f8 <__kernel_rem_pio2f+0x478>
 80098a4:	eef1 7a47 	vneg.f32	s15, s14
 80098a8:	edc8 7a00 	vstr	s15, [r8]
 80098ac:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80098b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098b4:	aa31      	add	r2, sp, #196	; 0xc4
 80098b6:	2301      	movs	r3, #1
 80098b8:	429c      	cmp	r4, r3
 80098ba:	da20      	bge.n	80098fe <__kernel_rem_pio2f+0x47e>
 80098bc:	b10f      	cbz	r7, 80098c2 <__kernel_rem_pio2f+0x442>
 80098be:	eef1 7a67 	vneg.f32	s15, s15
 80098c2:	edc8 7a01 	vstr	s15, [r8, #4]
 80098c6:	e7bb      	b.n	8009840 <__kernel_rem_pio2f+0x3c0>
 80098c8:	aa30      	add	r2, sp, #192	; 0xc0
 80098ca:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800978c <__kernel_rem_pio2f+0x30c>
 80098ce:	4413      	add	r3, r2
 80098d0:	2c00      	cmp	r4, #0
 80098d2:	da05      	bge.n	80098e0 <__kernel_rem_pio2f+0x460>
 80098d4:	b10f      	cbz	r7, 80098da <__kernel_rem_pio2f+0x45a>
 80098d6:	eef1 7a67 	vneg.f32	s15, s15
 80098da:	edc8 7a00 	vstr	s15, [r8]
 80098de:	e7af      	b.n	8009840 <__kernel_rem_pio2f+0x3c0>
 80098e0:	ed33 7a01 	vldmdb	r3!, {s14}
 80098e4:	3c01      	subs	r4, #1
 80098e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098ea:	e7f1      	b.n	80098d0 <__kernel_rem_pio2f+0x450>
 80098ec:	ed73 7a01 	vldmdb	r3!, {s15}
 80098f0:	3a01      	subs	r2, #1
 80098f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098f6:	e7d2      	b.n	800989e <__kernel_rem_pio2f+0x41e>
 80098f8:	eef0 7a47 	vmov.f32	s15, s14
 80098fc:	e7d4      	b.n	80098a8 <__kernel_rem_pio2f+0x428>
 80098fe:	ecb2 7a01 	vldmia	r2!, {s14}
 8009902:	3301      	adds	r3, #1
 8009904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009908:	e7d6      	b.n	80098b8 <__kernel_rem_pio2f+0x438>
 800990a:	edd1 7a00 	vldr	s15, [r1]
 800990e:	edd1 6a01 	vldr	s13, [r1, #4]
 8009912:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009916:	3801      	subs	r0, #1
 8009918:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800991c:	ed81 7a00 	vstr	s14, [r1]
 8009920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009924:	edc1 7a01 	vstr	s15, [r1, #4]
 8009928:	e799      	b.n	800985e <__kernel_rem_pio2f+0x3de>
 800992a:	edd2 7a00 	vldr	s15, [r2]
 800992e:	edd2 6a01 	vldr	s13, [r2, #4]
 8009932:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009936:	3901      	subs	r1, #1
 8009938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800993c:	ed82 7a00 	vstr	s14, [r2]
 8009940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009944:	edc2 7a01 	vstr	s15, [r2, #4]
 8009948:	e78e      	b.n	8009868 <__kernel_rem_pio2f+0x3e8>
 800994a:	ed33 7a01 	vldmdb	r3!, {s14}
 800994e:	3c01      	subs	r4, #1
 8009950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009954:	e78f      	b.n	8009876 <__kernel_rem_pio2f+0x3f6>
 8009956:	eef1 6a66 	vneg.f32	s13, s13
 800995a:	eeb1 7a47 	vneg.f32	s14, s14
 800995e:	edc8 6a00 	vstr	s13, [r8]
 8009962:	ed88 7a01 	vstr	s14, [r8, #4]
 8009966:	eef1 7a67 	vneg.f32	s15, s15
 800996a:	e790      	b.n	800988e <__kernel_rem_pio2f+0x40e>

0800996c <__kernel_sinf>:
 800996c:	ee10 3a10 	vmov	r3, s0
 8009970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009974:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009978:	da04      	bge.n	8009984 <__kernel_sinf+0x18>
 800997a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800997e:	ee17 3a90 	vmov	r3, s15
 8009982:	b35b      	cbz	r3, 80099dc <__kernel_sinf+0x70>
 8009984:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009988:	eddf 7a15 	vldr	s15, [pc, #84]	; 80099e0 <__kernel_sinf+0x74>
 800998c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80099e4 <__kernel_sinf+0x78>
 8009990:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009994:	eddf 7a14 	vldr	s15, [pc, #80]	; 80099e8 <__kernel_sinf+0x7c>
 8009998:	eee6 7a07 	vfma.f32	s15, s12, s14
 800999c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80099ec <__kernel_sinf+0x80>
 80099a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80099a4:	eddf 7a12 	vldr	s15, [pc, #72]	; 80099f0 <__kernel_sinf+0x84>
 80099a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80099ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80099b0:	b930      	cbnz	r0, 80099c0 <__kernel_sinf+0x54>
 80099b2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80099f4 <__kernel_sinf+0x88>
 80099b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80099ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 80099be:	4770      	bx	lr
 80099c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80099c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80099c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80099cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80099d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80099f8 <__kernel_sinf+0x8c>
 80099d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80099d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	2f2ec9d3 	.word	0x2f2ec9d3
 80099e4:	b2d72f34 	.word	0xb2d72f34
 80099e8:	3638ef1b 	.word	0x3638ef1b
 80099ec:	b9500d01 	.word	0xb9500d01
 80099f0:	3c088889 	.word	0x3c088889
 80099f4:	be2aaaab 	.word	0xbe2aaaab
 80099f8:	3e2aaaab 	.word	0x3e2aaaab

080099fc <with_errnof>:
 80099fc:	b513      	push	{r0, r1, r4, lr}
 80099fe:	4604      	mov	r4, r0
 8009a00:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009a04:	f000 f9be 	bl	8009d84 <__errno>
 8009a08:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009a0c:	6004      	str	r4, [r0, #0]
 8009a0e:	b002      	add	sp, #8
 8009a10:	bd10      	pop	{r4, pc}

08009a12 <xflowf>:
 8009a12:	b130      	cbz	r0, 8009a22 <xflowf+0x10>
 8009a14:	eef1 7a40 	vneg.f32	s15, s0
 8009a18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009a1c:	2022      	movs	r0, #34	; 0x22
 8009a1e:	f7ff bfed 	b.w	80099fc <with_errnof>
 8009a22:	eef0 7a40 	vmov.f32	s15, s0
 8009a26:	e7f7      	b.n	8009a18 <xflowf+0x6>

08009a28 <__math_uflowf>:
 8009a28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a30 <__math_uflowf+0x8>
 8009a2c:	f7ff bff1 	b.w	8009a12 <xflowf>
 8009a30:	10000000 	.word	0x10000000

08009a34 <__math_oflowf>:
 8009a34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a3c <__math_oflowf+0x8>
 8009a38:	f7ff bfeb 	b.w	8009a12 <xflowf>
 8009a3c:	70000000 	.word	0x70000000

08009a40 <atanf>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	ee10 5a10 	vmov	r5, s0
 8009a46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009a4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009a4e:	eef0 7a40 	vmov.f32	s15, s0
 8009a52:	db10      	blt.n	8009a76 <atanf+0x36>
 8009a54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009a58:	dd04      	ble.n	8009a64 <atanf+0x24>
 8009a5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009b9c <atanf+0x15c>
 8009a68:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009ba0 <atanf+0x160>
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	bfd8      	it	le
 8009a70:	eef0 7a40 	vmovle.f32	s15, s0
 8009a74:	e7f3      	b.n	8009a5e <atanf+0x1e>
 8009a76:	4b4b      	ldr	r3, [pc, #300]	; (8009ba4 <atanf+0x164>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	dc10      	bgt.n	8009a9e <atanf+0x5e>
 8009a7c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009a80:	da0a      	bge.n	8009a98 <atanf+0x58>
 8009a82:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009ba8 <atanf+0x168>
 8009a86:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a8e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	dce2      	bgt.n	8009a5e <atanf+0x1e>
 8009a98:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9c:	e013      	b.n	8009ac6 <atanf+0x86>
 8009a9e:	f000 f8a3 	bl	8009be8 <fabsf>
 8009aa2:	4b42      	ldr	r3, [pc, #264]	; (8009bac <atanf+0x16c>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	dc4f      	bgt.n	8009b48 <atanf+0x108>
 8009aa8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009aac:	429c      	cmp	r4, r3
 8009aae:	dc41      	bgt.n	8009b34 <atanf+0xf4>
 8009ab0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009ab4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009ab8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009abc:	2300      	movs	r3, #0
 8009abe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ac2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009acc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009bb0 <atanf+0x170>
 8009ad0:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009bb4 <atanf+0x174>
 8009ad4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009bb8 <atanf+0x178>
 8009ad8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009adc:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009ae0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009bbc <atanf+0x17c>
 8009ae4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009ae8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009bc0 <atanf+0x180>
 8009aec:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009af0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009bc4 <atanf+0x184>
 8009af4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009af8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009bc8 <atanf+0x188>
 8009afc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009b00:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009bcc <atanf+0x18c>
 8009b04:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009b08:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009bd0 <atanf+0x190>
 8009b0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009b10:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009bd4 <atanf+0x194>
 8009b14:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009b18:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009bd8 <atanf+0x198>
 8009b1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009b20:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009b24:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009b28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b2c:	d121      	bne.n	8009b72 <atanf+0x132>
 8009b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b32:	e794      	b.n	8009a5e <atanf+0x1e>
 8009b34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009b38:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009b3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b40:	2301      	movs	r3, #1
 8009b42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009b46:	e7be      	b.n	8009ac6 <atanf+0x86>
 8009b48:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <atanf+0x19c>)
 8009b4a:	429c      	cmp	r4, r3
 8009b4c:	dc0b      	bgt.n	8009b66 <atanf+0x126>
 8009b4e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b56:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b64:	e7af      	b.n	8009ac6 <atanf+0x86>
 8009b66:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009b6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e7a9      	b.n	8009ac6 <atanf+0x86>
 8009b72:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <atanf+0x1a0>)
 8009b74:	491b      	ldr	r1, [pc, #108]	; (8009be4 <atanf+0x1a4>)
 8009b76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009b7a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009b7e:	ed93 0a00 	vldr	s0, [r3]
 8009b82:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009b86:	ed92 0a00 	vldr	s0, [r2]
 8009b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009b94:	bfb8      	it	lt
 8009b96:	eef1 7a67 	vneglt.f32	s15, s15
 8009b9a:	e760      	b.n	8009a5e <atanf+0x1e>
 8009b9c:	3fc90fdb 	.word	0x3fc90fdb
 8009ba0:	bfc90fdb 	.word	0xbfc90fdb
 8009ba4:	3edfffff 	.word	0x3edfffff
 8009ba8:	7149f2ca 	.word	0x7149f2ca
 8009bac:	3f97ffff 	.word	0x3f97ffff
 8009bb0:	3c8569d7 	.word	0x3c8569d7
 8009bb4:	3d4bda59 	.word	0x3d4bda59
 8009bb8:	bd6ef16b 	.word	0xbd6ef16b
 8009bbc:	3d886b35 	.word	0x3d886b35
 8009bc0:	3dba2e6e 	.word	0x3dba2e6e
 8009bc4:	3e124925 	.word	0x3e124925
 8009bc8:	3eaaaaab 	.word	0x3eaaaaab
 8009bcc:	bd15a221 	.word	0xbd15a221
 8009bd0:	bd9d8795 	.word	0xbd9d8795
 8009bd4:	bde38e38 	.word	0xbde38e38
 8009bd8:	be4ccccd 	.word	0xbe4ccccd
 8009bdc:	401bffff 	.word	0x401bffff
 8009be0:	0800ebac 	.word	0x0800ebac
 8009be4:	0800ebbc 	.word	0x0800ebbc

08009be8 <fabsf>:
 8009be8:	ee10 3a10 	vmov	r3, s0
 8009bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bf0:	ee00 3a10 	vmov	s0, r3
 8009bf4:	4770      	bx	lr

08009bf6 <finitef>:
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009bfc:	9801      	ldr	r0, [sp, #4]
 8009bfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009c02:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009c06:	bfac      	ite	ge
 8009c08:	2000      	movge	r0, #0
 8009c0a:	2001      	movlt	r0, #1
 8009c0c:	b002      	add	sp, #8
 8009c0e:	4770      	bx	lr

08009c10 <floorf>:
 8009c10:	ee10 3a10 	vmov	r3, s0
 8009c14:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c18:	3a7f      	subs	r2, #127	; 0x7f
 8009c1a:	2a16      	cmp	r2, #22
 8009c1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c20:	dc2a      	bgt.n	8009c78 <floorf+0x68>
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	da11      	bge.n	8009c4a <floorf+0x3a>
 8009c26:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009c88 <floorf+0x78>
 8009c2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c36:	dd05      	ble.n	8009c44 <floorf+0x34>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da23      	bge.n	8009c84 <floorf+0x74>
 8009c3c:	4a13      	ldr	r2, [pc, #76]	; (8009c8c <floorf+0x7c>)
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	bf18      	it	ne
 8009c42:	4613      	movne	r3, r2
 8009c44:	ee00 3a10 	vmov	s0, r3
 8009c48:	4770      	bx	lr
 8009c4a:	4911      	ldr	r1, [pc, #68]	; (8009c90 <floorf+0x80>)
 8009c4c:	4111      	asrs	r1, r2
 8009c4e:	420b      	tst	r3, r1
 8009c50:	d0fa      	beq.n	8009c48 <floorf+0x38>
 8009c52:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009c88 <floorf+0x78>
 8009c56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c62:	ddef      	ble.n	8009c44 <floorf+0x34>
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbe      	ittt	lt
 8009c68:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009c6c:	fa40 f202 	asrlt.w	r2, r0, r2
 8009c70:	189b      	addlt	r3, r3, r2
 8009c72:	ea23 0301 	bic.w	r3, r3, r1
 8009c76:	e7e5      	b.n	8009c44 <floorf+0x34>
 8009c78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009c7c:	d3e4      	bcc.n	8009c48 <floorf+0x38>
 8009c7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c82:	4770      	bx	lr
 8009c84:	2300      	movs	r3, #0
 8009c86:	e7dd      	b.n	8009c44 <floorf+0x34>
 8009c88:	7149f2ca 	.word	0x7149f2ca
 8009c8c:	bf800000 	.word	0xbf800000
 8009c90:	007fffff 	.word	0x007fffff

08009c94 <nanf>:
 8009c94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c9c <nanf+0x8>
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	7fc00000 	.word	0x7fc00000

08009ca0 <scalbnf>:
 8009ca0:	ee10 3a10 	vmov	r3, s0
 8009ca4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009ca8:	d025      	beq.n	8009cf6 <scalbnf+0x56>
 8009caa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009cae:	d302      	bcc.n	8009cb6 <scalbnf+0x16>
 8009cb0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009cb4:	4770      	bx	lr
 8009cb6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009cba:	d122      	bne.n	8009d02 <scalbnf+0x62>
 8009cbc:	4b2a      	ldr	r3, [pc, #168]	; (8009d68 <scalbnf+0xc8>)
 8009cbe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009d6c <scalbnf+0xcc>
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009cc8:	db16      	blt.n	8009cf8 <scalbnf+0x58>
 8009cca:	ee10 3a10 	vmov	r3, s0
 8009cce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009cd2:	3a19      	subs	r2, #25
 8009cd4:	4402      	add	r2, r0
 8009cd6:	2afe      	cmp	r2, #254	; 0xfe
 8009cd8:	dd15      	ble.n	8009d06 <scalbnf+0x66>
 8009cda:	ee10 3a10 	vmov	r3, s0
 8009cde:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009d70 <scalbnf+0xd0>
 8009ce2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009d74 <scalbnf+0xd4>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	eeb0 7a67 	vmov.f32	s14, s15
 8009cec:	bfb8      	it	lt
 8009cee:	eef0 7a66 	vmovlt.f32	s15, s13
 8009cf2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009cf6:	4770      	bx	lr
 8009cf8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009d78 <scalbnf+0xd8>
 8009cfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d00:	4770      	bx	lr
 8009d02:	0dd2      	lsrs	r2, r2, #23
 8009d04:	e7e6      	b.n	8009cd4 <scalbnf+0x34>
 8009d06:	2a00      	cmp	r2, #0
 8009d08:	dd06      	ble.n	8009d18 <scalbnf+0x78>
 8009d0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d0e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009d12:	ee00 3a10 	vmov	s0, r3
 8009d16:	4770      	bx	lr
 8009d18:	f112 0f16 	cmn.w	r2, #22
 8009d1c:	da1a      	bge.n	8009d54 <scalbnf+0xb4>
 8009d1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009d22:	4298      	cmp	r0, r3
 8009d24:	ee10 3a10 	vmov	r3, s0
 8009d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d2c:	dd0a      	ble.n	8009d44 <scalbnf+0xa4>
 8009d2e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009d70 <scalbnf+0xd0>
 8009d32:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009d74 <scalbnf+0xd4>
 8009d36:	eef0 7a40 	vmov.f32	s15, s0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bf18      	it	ne
 8009d3e:	eeb0 0a47 	vmovne.f32	s0, s14
 8009d42:	e7db      	b.n	8009cfc <scalbnf+0x5c>
 8009d44:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009d78 <scalbnf+0xd8>
 8009d48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009d7c <scalbnf+0xdc>
 8009d4c:	eef0 7a40 	vmov.f32	s15, s0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	e7f3      	b.n	8009d3c <scalbnf+0x9c>
 8009d54:	3219      	adds	r2, #25
 8009d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d5a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009d5e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009d80 <scalbnf+0xe0>
 8009d62:	ee07 3a10 	vmov	s14, r3
 8009d66:	e7c4      	b.n	8009cf2 <scalbnf+0x52>
 8009d68:	ffff3cb0 	.word	0xffff3cb0
 8009d6c:	4c000000 	.word	0x4c000000
 8009d70:	7149f2ca 	.word	0x7149f2ca
 8009d74:	f149f2ca 	.word	0xf149f2ca
 8009d78:	0da24260 	.word	0x0da24260
 8009d7c:	8da24260 	.word	0x8da24260
 8009d80:	33000000 	.word	0x33000000

08009d84 <__errno>:
 8009d84:	4b01      	ldr	r3, [pc, #4]	; (8009d8c <__errno+0x8>)
 8009d86:	6818      	ldr	r0, [r3, #0]
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000010 	.word	0x20000010

08009d90 <__libc_init_array>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	4d0d      	ldr	r5, [pc, #52]	; (8009dc8 <__libc_init_array+0x38>)
 8009d94:	4c0d      	ldr	r4, [pc, #52]	; (8009dcc <__libc_init_array+0x3c>)
 8009d96:	1b64      	subs	r4, r4, r5
 8009d98:	10a4      	asrs	r4, r4, #2
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	42a6      	cmp	r6, r4
 8009d9e:	d109      	bne.n	8009db4 <__libc_init_array+0x24>
 8009da0:	4d0b      	ldr	r5, [pc, #44]	; (8009dd0 <__libc_init_array+0x40>)
 8009da2:	4c0c      	ldr	r4, [pc, #48]	; (8009dd4 <__libc_init_array+0x44>)
 8009da4:	f004 fc88 	bl	800e6b8 <_init>
 8009da8:	1b64      	subs	r4, r4, r5
 8009daa:	10a4      	asrs	r4, r4, #2
 8009dac:	2600      	movs	r6, #0
 8009dae:	42a6      	cmp	r6, r4
 8009db0:	d105      	bne.n	8009dbe <__libc_init_array+0x2e>
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db8:	4798      	blx	r3
 8009dba:	3601      	adds	r6, #1
 8009dbc:	e7ee      	b.n	8009d9c <__libc_init_array+0xc>
 8009dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dc2:	4798      	blx	r3
 8009dc4:	3601      	adds	r6, #1
 8009dc6:	e7f2      	b.n	8009dae <__libc_init_array+0x1e>
 8009dc8:	0800f07c 	.word	0x0800f07c
 8009dcc:	0800f07c 	.word	0x0800f07c
 8009dd0:	0800f07c 	.word	0x0800f07c
 8009dd4:	0800f080 	.word	0x0800f080

08009dd8 <memcpy>:
 8009dd8:	440a      	add	r2, r1
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009de0:	d100      	bne.n	8009de4 <memcpy+0xc>
 8009de2:	4770      	bx	lr
 8009de4:	b510      	push	{r4, lr}
 8009de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dee:	4291      	cmp	r1, r2
 8009df0:	d1f9      	bne.n	8009de6 <memcpy+0xe>
 8009df2:	bd10      	pop	{r4, pc}

08009df4 <memset>:
 8009df4:	4402      	add	r2, r0
 8009df6:	4603      	mov	r3, r0
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d100      	bne.n	8009dfe <memset+0xa>
 8009dfc:	4770      	bx	lr
 8009dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009e02:	e7f9      	b.n	8009df8 <memset+0x4>

08009e04 <__cvt>:
 8009e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	ec55 4b10 	vmov	r4, r5, d0
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4619      	mov	r1, r3
 8009e12:	462b      	mov	r3, r5
 8009e14:	bfbb      	ittet	lt
 8009e16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e1a:	461d      	movlt	r5, r3
 8009e1c:	2300      	movge	r3, #0
 8009e1e:	232d      	movlt	r3, #45	; 0x2d
 8009e20:	700b      	strb	r3, [r1, #0]
 8009e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e28:	4691      	mov	r9, r2
 8009e2a:	f023 0820 	bic.w	r8, r3, #32
 8009e2e:	bfbc      	itt	lt
 8009e30:	4622      	movlt	r2, r4
 8009e32:	4614      	movlt	r4, r2
 8009e34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e38:	d005      	beq.n	8009e46 <__cvt+0x42>
 8009e3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e3e:	d100      	bne.n	8009e42 <__cvt+0x3e>
 8009e40:	3601      	adds	r6, #1
 8009e42:	2102      	movs	r1, #2
 8009e44:	e000      	b.n	8009e48 <__cvt+0x44>
 8009e46:	2103      	movs	r1, #3
 8009e48:	ab03      	add	r3, sp, #12
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	ab02      	add	r3, sp, #8
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	ec45 4b10 	vmov	d0, r4, r5
 8009e54:	4653      	mov	r3, sl
 8009e56:	4632      	mov	r2, r6
 8009e58:	f001 fda6 	bl	800b9a8 <_dtoa_r>
 8009e5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e60:	4607      	mov	r7, r0
 8009e62:	d102      	bne.n	8009e6a <__cvt+0x66>
 8009e64:	f019 0f01 	tst.w	r9, #1
 8009e68:	d022      	beq.n	8009eb0 <__cvt+0xac>
 8009e6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e6e:	eb07 0906 	add.w	r9, r7, r6
 8009e72:	d110      	bne.n	8009e96 <__cvt+0x92>
 8009e74:	783b      	ldrb	r3, [r7, #0]
 8009e76:	2b30      	cmp	r3, #48	; 0x30
 8009e78:	d10a      	bne.n	8009e90 <__cvt+0x8c>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fe41 	bl	8000b08 <__aeabi_dcmpeq>
 8009e86:	b918      	cbnz	r0, 8009e90 <__cvt+0x8c>
 8009e88:	f1c6 0601 	rsb	r6, r6, #1
 8009e8c:	f8ca 6000 	str.w	r6, [sl]
 8009e90:	f8da 3000 	ldr.w	r3, [sl]
 8009e94:	4499      	add	r9, r3
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	f7f6 fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8009ea2:	b108      	cbz	r0, 8009ea8 <__cvt+0xa4>
 8009ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ea8:	2230      	movs	r2, #48	; 0x30
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	454b      	cmp	r3, r9
 8009eae:	d307      	bcc.n	8009ec0 <__cvt+0xbc>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eb4:	1bdb      	subs	r3, r3, r7
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	b004      	add	sp, #16
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	1c59      	adds	r1, r3, #1
 8009ec2:	9103      	str	r1, [sp, #12]
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	e7f0      	b.n	8009eaa <__cvt+0xa6>

08009ec8 <__exponent>:
 8009ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	bfb8      	it	lt
 8009ed0:	4249      	neglt	r1, r1
 8009ed2:	f803 2b02 	strb.w	r2, [r3], #2
 8009ed6:	bfb4      	ite	lt
 8009ed8:	222d      	movlt	r2, #45	; 0x2d
 8009eda:	222b      	movge	r2, #43	; 0x2b
 8009edc:	2909      	cmp	r1, #9
 8009ede:	7042      	strb	r2, [r0, #1]
 8009ee0:	dd2a      	ble.n	8009f38 <__exponent+0x70>
 8009ee2:	f10d 0407 	add.w	r4, sp, #7
 8009ee6:	46a4      	mov	ip, r4
 8009ee8:	270a      	movs	r7, #10
 8009eea:	46a6      	mov	lr, r4
 8009eec:	460a      	mov	r2, r1
 8009eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ef2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ef6:	3530      	adds	r5, #48	; 0x30
 8009ef8:	2a63      	cmp	r2, #99	; 0x63
 8009efa:	f104 34ff 	add.w	r4, r4, #4294967295
 8009efe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009f02:	4631      	mov	r1, r6
 8009f04:	dcf1      	bgt.n	8009eea <__exponent+0x22>
 8009f06:	3130      	adds	r1, #48	; 0x30
 8009f08:	f1ae 0502 	sub.w	r5, lr, #2
 8009f0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009f10:	1c44      	adds	r4, r0, #1
 8009f12:	4629      	mov	r1, r5
 8009f14:	4561      	cmp	r1, ip
 8009f16:	d30a      	bcc.n	8009f2e <__exponent+0x66>
 8009f18:	f10d 0209 	add.w	r2, sp, #9
 8009f1c:	eba2 020e 	sub.w	r2, r2, lr
 8009f20:	4565      	cmp	r5, ip
 8009f22:	bf88      	it	hi
 8009f24:	2200      	movhi	r2, #0
 8009f26:	4413      	add	r3, r2
 8009f28:	1a18      	subs	r0, r3, r0
 8009f2a:	b003      	add	sp, #12
 8009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f36:	e7ed      	b.n	8009f14 <__exponent+0x4c>
 8009f38:	2330      	movs	r3, #48	; 0x30
 8009f3a:	3130      	adds	r1, #48	; 0x30
 8009f3c:	7083      	strb	r3, [r0, #2]
 8009f3e:	70c1      	strb	r1, [r0, #3]
 8009f40:	1d03      	adds	r3, r0, #4
 8009f42:	e7f1      	b.n	8009f28 <__exponent+0x60>

08009f44 <_printf_float>:
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	ed2d 8b02 	vpush	{d8}
 8009f4c:	b08d      	sub	sp, #52	; 0x34
 8009f4e:	460c      	mov	r4, r1
 8009f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f54:	4616      	mov	r6, r2
 8009f56:	461f      	mov	r7, r3
 8009f58:	4605      	mov	r5, r0
 8009f5a:	f002 fe83 	bl	800cc64 <_localeconv_r>
 8009f5e:	f8d0 a000 	ldr.w	sl, [r0]
 8009f62:	4650      	mov	r0, sl
 8009f64:	f7f6 f954 	bl	8000210 <strlen>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	9305      	str	r3, [sp, #20]
 8009f70:	f8d8 3000 	ldr.w	r3, [r8]
 8009f74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f78:	3307      	adds	r3, #7
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	f103 0208 	add.w	r2, r3, #8
 8009f82:	f8c8 2000 	str.w	r2, [r8]
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f9c:	ee08 0a10 	vmov	s16, r0
 8009fa0:	4b9f      	ldr	r3, [pc, #636]	; (800a220 <_printf_float+0x2dc>)
 8009fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009faa:	f7f6 fddf 	bl	8000b6c <__aeabi_dcmpun>
 8009fae:	bb88      	cbnz	r0, 800a014 <_printf_float+0xd0>
 8009fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fb4:	4b9a      	ldr	r3, [pc, #616]	; (800a220 <_printf_float+0x2dc>)
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	f7f6 fdb9 	bl	8000b30 <__aeabi_dcmple>
 8009fbe:	bb48      	cbnz	r0, 800a014 <_printf_float+0xd0>
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8009fcc:	b110      	cbz	r0, 8009fd4 <_printf_float+0x90>
 8009fce:	232d      	movs	r3, #45	; 0x2d
 8009fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd4:	4b93      	ldr	r3, [pc, #588]	; (800a224 <_printf_float+0x2e0>)
 8009fd6:	4894      	ldr	r0, [pc, #592]	; (800a228 <_printf_float+0x2e4>)
 8009fd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009fdc:	bf94      	ite	ls
 8009fde:	4698      	movls	r8, r3
 8009fe0:	4680      	movhi	r8, r0
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	9b05      	ldr	r3, [sp, #20]
 8009fe8:	f023 0204 	bic.w	r2, r3, #4
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	f04f 0900 	mov.w	r9, #0
 8009ff2:	9700      	str	r7, [sp, #0]
 8009ff4:	4633      	mov	r3, r6
 8009ff6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 f9d8 	bl	800a3b0 <_printf_common>
 800a000:	3001      	adds	r0, #1
 800a002:	f040 8090 	bne.w	800a126 <_printf_float+0x1e2>
 800a006:	f04f 30ff 	mov.w	r0, #4294967295
 800a00a:	b00d      	add	sp, #52	; 0x34
 800a00c:	ecbd 8b02 	vpop	{d8}
 800a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 fda6 	bl	8000b6c <__aeabi_dcmpun>
 800a020:	b140      	cbz	r0, 800a034 <_printf_float+0xf0>
 800a022:	464b      	mov	r3, r9
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfbc      	itt	lt
 800a028:	232d      	movlt	r3, #45	; 0x2d
 800a02a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a02e:	487f      	ldr	r0, [pc, #508]	; (800a22c <_printf_float+0x2e8>)
 800a030:	4b7f      	ldr	r3, [pc, #508]	; (800a230 <_printf_float+0x2ec>)
 800a032:	e7d1      	b.n	8009fd8 <_printf_float+0x94>
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a03a:	9206      	str	r2, [sp, #24]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	d13f      	bne.n	800a0c0 <_printf_float+0x17c>
 800a040:	2306      	movs	r3, #6
 800a042:	6063      	str	r3, [r4, #4]
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	6861      	ldr	r1, [r4, #4]
 800a048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a04c:	2300      	movs	r3, #0
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	ab0a      	add	r3, sp, #40	; 0x28
 800a052:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a056:	ab09      	add	r3, sp, #36	; 0x24
 800a058:	ec49 8b10 	vmov	d0, r8, r9
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6022      	str	r2, [r4, #0]
 800a060:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a064:	4628      	mov	r0, r5
 800a066:	f7ff fecd 	bl	8009e04 <__cvt>
 800a06a:	9b06      	ldr	r3, [sp, #24]
 800a06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a06e:	2b47      	cmp	r3, #71	; 0x47
 800a070:	4680      	mov	r8, r0
 800a072:	d108      	bne.n	800a086 <_printf_float+0x142>
 800a074:	1cc8      	adds	r0, r1, #3
 800a076:	db02      	blt.n	800a07e <_printf_float+0x13a>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	4299      	cmp	r1, r3
 800a07c:	dd41      	ble.n	800a102 <_printf_float+0x1be>
 800a07e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a082:	fa5f fb8b 	uxtb.w	fp, fp
 800a086:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a08a:	d820      	bhi.n	800a0ce <_printf_float+0x18a>
 800a08c:	3901      	subs	r1, #1
 800a08e:	465a      	mov	r2, fp
 800a090:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a094:	9109      	str	r1, [sp, #36]	; 0x24
 800a096:	f7ff ff17 	bl	8009ec8 <__exponent>
 800a09a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a09c:	1813      	adds	r3, r2, r0
 800a09e:	2a01      	cmp	r2, #1
 800a0a0:	4681      	mov	r9, r0
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	dc02      	bgt.n	800a0ac <_printf_float+0x168>
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	07d2      	lsls	r2, r2, #31
 800a0aa:	d501      	bpl.n	800a0b0 <_printf_float+0x16c>
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d09c      	beq.n	8009ff2 <_printf_float+0xae>
 800a0b8:	232d      	movs	r3, #45	; 0x2d
 800a0ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0be:	e798      	b.n	8009ff2 <_printf_float+0xae>
 800a0c0:	9a06      	ldr	r2, [sp, #24]
 800a0c2:	2a47      	cmp	r2, #71	; 0x47
 800a0c4:	d1be      	bne.n	800a044 <_printf_float+0x100>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1bc      	bne.n	800a044 <_printf_float+0x100>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7b9      	b.n	800a042 <_printf_float+0xfe>
 800a0ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a0d2:	d118      	bne.n	800a106 <_printf_float+0x1c2>
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	dd0b      	ble.n	800a0f2 <_printf_float+0x1ae>
 800a0da:	6121      	str	r1, [r4, #16]
 800a0dc:	b913      	cbnz	r3, 800a0e4 <_printf_float+0x1a0>
 800a0de:	6822      	ldr	r2, [r4, #0]
 800a0e0:	07d0      	lsls	r0, r2, #31
 800a0e2:	d502      	bpl.n	800a0ea <_printf_float+0x1a6>
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	440b      	add	r3, r1
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0ec:	f04f 0900 	mov.w	r9, #0
 800a0f0:	e7de      	b.n	800a0b0 <_printf_float+0x16c>
 800a0f2:	b913      	cbnz	r3, 800a0fa <_printf_float+0x1b6>
 800a0f4:	6822      	ldr	r2, [r4, #0]
 800a0f6:	07d2      	lsls	r2, r2, #31
 800a0f8:	d501      	bpl.n	800a0fe <_printf_float+0x1ba>
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	e7f4      	b.n	800a0e8 <_printf_float+0x1a4>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7f2      	b.n	800a0e8 <_printf_float+0x1a4>
 800a102:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a108:	4299      	cmp	r1, r3
 800a10a:	db05      	blt.n	800a118 <_printf_float+0x1d4>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	6121      	str	r1, [r4, #16]
 800a110:	07d8      	lsls	r0, r3, #31
 800a112:	d5ea      	bpl.n	800a0ea <_printf_float+0x1a6>
 800a114:	1c4b      	adds	r3, r1, #1
 800a116:	e7e7      	b.n	800a0e8 <_printf_float+0x1a4>
 800a118:	2900      	cmp	r1, #0
 800a11a:	bfd4      	ite	le
 800a11c:	f1c1 0202 	rsble	r2, r1, #2
 800a120:	2201      	movgt	r2, #1
 800a122:	4413      	add	r3, r2
 800a124:	e7e0      	b.n	800a0e8 <_printf_float+0x1a4>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	055a      	lsls	r2, r3, #21
 800a12a:	d407      	bmi.n	800a13c <_printf_float+0x1f8>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	4642      	mov	r2, r8
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	d12c      	bne.n	800a194 <_printf_float+0x250>
 800a13a:	e764      	b.n	800a006 <_printf_float+0xc2>
 800a13c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a140:	f240 80e0 	bls.w	800a304 <_printf_float+0x3c0>
 800a144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a148:	2200      	movs	r2, #0
 800a14a:	2300      	movs	r3, #0
 800a14c:	f7f6 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 800a150:	2800      	cmp	r0, #0
 800a152:	d034      	beq.n	800a1be <_printf_float+0x27a>
 800a154:	4a37      	ldr	r2, [pc, #220]	; (800a234 <_printf_float+0x2f0>)
 800a156:	2301      	movs	r3, #1
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af51 	beq.w	800a006 <_printf_float+0xc2>
 800a164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a168:	429a      	cmp	r2, r3
 800a16a:	db02      	blt.n	800a172 <_printf_float+0x22e>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	07d8      	lsls	r0, r3, #31
 800a170:	d510      	bpl.n	800a194 <_printf_float+0x250>
 800a172:	ee18 3a10 	vmov	r3, s16
 800a176:	4652      	mov	r2, sl
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	f43f af41 	beq.w	800a006 <_printf_float+0xc2>
 800a184:	f04f 0800 	mov.w	r8, #0
 800a188:	f104 091a 	add.w	r9, r4, #26
 800a18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18e:	3b01      	subs	r3, #1
 800a190:	4543      	cmp	r3, r8
 800a192:	dc09      	bgt.n	800a1a8 <_printf_float+0x264>
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	079b      	lsls	r3, r3, #30
 800a198:	f100 8105 	bmi.w	800a3a6 <_printf_float+0x462>
 800a19c:	68e0      	ldr	r0, [r4, #12]
 800a19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a0:	4298      	cmp	r0, r3
 800a1a2:	bfb8      	it	lt
 800a1a4:	4618      	movlt	r0, r3
 800a1a6:	e730      	b.n	800a00a <_printf_float+0xc6>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	464a      	mov	r2, r9
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	47b8      	blx	r7
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f43f af27 	beq.w	800a006 <_printf_float+0xc2>
 800a1b8:	f108 0801 	add.w	r8, r8, #1
 800a1bc:	e7e6      	b.n	800a18c <_printf_float+0x248>
 800a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dc39      	bgt.n	800a238 <_printf_float+0x2f4>
 800a1c4:	4a1b      	ldr	r2, [pc, #108]	; (800a234 <_printf_float+0x2f0>)
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af19 	beq.w	800a006 <_printf_float+0xc2>
 800a1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	d102      	bne.n	800a1e2 <_printf_float+0x29e>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	07d9      	lsls	r1, r3, #31
 800a1e0:	d5d8      	bpl.n	800a194 <_printf_float+0x250>
 800a1e2:	ee18 3a10 	vmov	r3, s16
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b8      	blx	r7
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f43f af09 	beq.w	800a006 <_printf_float+0xc2>
 800a1f4:	f04f 0900 	mov.w	r9, #0
 800a1f8:	f104 0a1a 	add.w	sl, r4, #26
 800a1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fe:	425b      	negs	r3, r3
 800a200:	454b      	cmp	r3, r9
 800a202:	dc01      	bgt.n	800a208 <_printf_float+0x2c4>
 800a204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a206:	e792      	b.n	800a12e <_printf_float+0x1ea>
 800a208:	2301      	movs	r3, #1
 800a20a:	4652      	mov	r2, sl
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	f43f aef7 	beq.w	800a006 <_printf_float+0xc2>
 800a218:	f109 0901 	add.w	r9, r9, #1
 800a21c:	e7ee      	b.n	800a1fc <_printf_float+0x2b8>
 800a21e:	bf00      	nop
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	0800ebd0 	.word	0x0800ebd0
 800a228:	0800ebd4 	.word	0x0800ebd4
 800a22c:	0800ebdc 	.word	0x0800ebdc
 800a230:	0800ebd8 	.word	0x0800ebd8
 800a234:	0800ebe0 	.word	0x0800ebe0
 800a238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a23a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a23c:	429a      	cmp	r2, r3
 800a23e:	bfa8      	it	ge
 800a240:	461a      	movge	r2, r3
 800a242:	2a00      	cmp	r2, #0
 800a244:	4691      	mov	r9, r2
 800a246:	dc37      	bgt.n	800a2b8 <_printf_float+0x374>
 800a248:	f04f 0b00 	mov.w	fp, #0
 800a24c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a250:	f104 021a 	add.w	r2, r4, #26
 800a254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	eba3 0309 	sub.w	r3, r3, r9
 800a25c:	455b      	cmp	r3, fp
 800a25e:	dc33      	bgt.n	800a2c8 <_printf_float+0x384>
 800a260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a264:	429a      	cmp	r2, r3
 800a266:	db3b      	blt.n	800a2e0 <_printf_float+0x39c>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	07da      	lsls	r2, r3, #31
 800a26c:	d438      	bmi.n	800a2e0 <_printf_float+0x39c>
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	9a05      	ldr	r2, [sp, #20]
 800a272:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a274:	1a9a      	subs	r2, r3, r2
 800a276:	eba3 0901 	sub.w	r9, r3, r1
 800a27a:	4591      	cmp	r9, r2
 800a27c:	bfa8      	it	ge
 800a27e:	4691      	movge	r9, r2
 800a280:	f1b9 0f00 	cmp.w	r9, #0
 800a284:	dc35      	bgt.n	800a2f2 <_printf_float+0x3ae>
 800a286:	f04f 0800 	mov.w	r8, #0
 800a28a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a28e:	f104 0a1a 	add.w	sl, r4, #26
 800a292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	eba3 0309 	sub.w	r3, r3, r9
 800a29c:	4543      	cmp	r3, r8
 800a29e:	f77f af79 	ble.w	800a194 <_printf_float+0x250>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f aeaa 	beq.w	800a006 <_printf_float+0xc2>
 800a2b2:	f108 0801 	add.w	r8, r8, #1
 800a2b6:	e7ec      	b.n	800a292 <_printf_float+0x34e>
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4642      	mov	r2, r8
 800a2be:	4628      	mov	r0, r5
 800a2c0:	47b8      	blx	r7
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d1c0      	bne.n	800a248 <_printf_float+0x304>
 800a2c6:	e69e      	b.n	800a006 <_printf_float+0xc2>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	9205      	str	r2, [sp, #20]
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f ae97 	beq.w	800a006 <_printf_float+0xc2>
 800a2d8:	9a05      	ldr	r2, [sp, #20]
 800a2da:	f10b 0b01 	add.w	fp, fp, #1
 800a2de:	e7b9      	b.n	800a254 <_printf_float+0x310>
 800a2e0:	ee18 3a10 	vmov	r3, s16
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d1be      	bne.n	800a26e <_printf_float+0x32a>
 800a2f0:	e689      	b.n	800a006 <_printf_float+0xc2>
 800a2f2:	9a05      	ldr	r2, [sp, #20]
 800a2f4:	464b      	mov	r3, r9
 800a2f6:	4442      	add	r2, r8
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	d1c1      	bne.n	800a286 <_printf_float+0x342>
 800a302:	e680      	b.n	800a006 <_printf_float+0xc2>
 800a304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a306:	2a01      	cmp	r2, #1
 800a308:	dc01      	bgt.n	800a30e <_printf_float+0x3ca>
 800a30a:	07db      	lsls	r3, r3, #31
 800a30c:	d538      	bpl.n	800a380 <_printf_float+0x43c>
 800a30e:	2301      	movs	r3, #1
 800a310:	4642      	mov	r2, r8
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	f43f ae74 	beq.w	800a006 <_printf_float+0xc2>
 800a31e:	ee18 3a10 	vmov	r3, s16
 800a322:	4652      	mov	r2, sl
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	f43f ae6b 	beq.w	800a006 <_printf_float+0xc2>
 800a330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a334:	2200      	movs	r2, #0
 800a336:	2300      	movs	r3, #0
 800a338:	f7f6 fbe6 	bl	8000b08 <__aeabi_dcmpeq>
 800a33c:	b9d8      	cbnz	r0, 800a376 <_printf_float+0x432>
 800a33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a340:	f108 0201 	add.w	r2, r8, #1
 800a344:	3b01      	subs	r3, #1
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	d10e      	bne.n	800a36e <_printf_float+0x42a>
 800a350:	e659      	b.n	800a006 <_printf_float+0xc2>
 800a352:	2301      	movs	r3, #1
 800a354:	4652      	mov	r2, sl
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae52 	beq.w	800a006 <_printf_float+0xc2>
 800a362:	f108 0801 	add.w	r8, r8, #1
 800a366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a368:	3b01      	subs	r3, #1
 800a36a:	4543      	cmp	r3, r8
 800a36c:	dcf1      	bgt.n	800a352 <_printf_float+0x40e>
 800a36e:	464b      	mov	r3, r9
 800a370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a374:	e6dc      	b.n	800a130 <_printf_float+0x1ec>
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	f104 0a1a 	add.w	sl, r4, #26
 800a37e:	e7f2      	b.n	800a366 <_printf_float+0x422>
 800a380:	2301      	movs	r3, #1
 800a382:	4642      	mov	r2, r8
 800a384:	e7df      	b.n	800a346 <_printf_float+0x402>
 800a386:	2301      	movs	r3, #1
 800a388:	464a      	mov	r2, r9
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	f43f ae38 	beq.w	800a006 <_printf_float+0xc2>
 800a396:	f108 0801 	add.w	r8, r8, #1
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a39e:	1a5b      	subs	r3, r3, r1
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	dcf0      	bgt.n	800a386 <_printf_float+0x442>
 800a3a4:	e6fa      	b.n	800a19c <_printf_float+0x258>
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	f104 0919 	add.w	r9, r4, #25
 800a3ae:	e7f4      	b.n	800a39a <_printf_float+0x456>

0800a3b0 <_printf_common>:
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	4616      	mov	r6, r2
 800a3b6:	4699      	mov	r9, r3
 800a3b8:	688a      	ldr	r2, [r1, #8]
 800a3ba:	690b      	ldr	r3, [r1, #16]
 800a3bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	bfb8      	it	lt
 800a3c4:	4613      	movlt	r3, r2
 800a3c6:	6033      	str	r3, [r6, #0]
 800a3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	b10a      	cbz	r2, 800a3d6 <_printf_common+0x26>
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	6033      	str	r3, [r6, #0]
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	0699      	lsls	r1, r3, #26
 800a3da:	bf42      	ittt	mi
 800a3dc:	6833      	ldrmi	r3, [r6, #0]
 800a3de:	3302      	addmi	r3, #2
 800a3e0:	6033      	strmi	r3, [r6, #0]
 800a3e2:	6825      	ldr	r5, [r4, #0]
 800a3e4:	f015 0506 	ands.w	r5, r5, #6
 800a3e8:	d106      	bne.n	800a3f8 <_printf_common+0x48>
 800a3ea:	f104 0a19 	add.w	sl, r4, #25
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	6832      	ldr	r2, [r6, #0]
 800a3f2:	1a9b      	subs	r3, r3, r2
 800a3f4:	42ab      	cmp	r3, r5
 800a3f6:	dc26      	bgt.n	800a446 <_printf_common+0x96>
 800a3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3fc:	1e13      	subs	r3, r2, #0
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	bf18      	it	ne
 800a402:	2301      	movne	r3, #1
 800a404:	0692      	lsls	r2, r2, #26
 800a406:	d42b      	bmi.n	800a460 <_printf_common+0xb0>
 800a408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a40c:	4649      	mov	r1, r9
 800a40e:	4638      	mov	r0, r7
 800a410:	47c0      	blx	r8
 800a412:	3001      	adds	r0, #1
 800a414:	d01e      	beq.n	800a454 <_printf_common+0xa4>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	68e5      	ldr	r5, [r4, #12]
 800a41a:	6832      	ldr	r2, [r6, #0]
 800a41c:	f003 0306 	and.w	r3, r3, #6
 800a420:	2b04      	cmp	r3, #4
 800a422:	bf08      	it	eq
 800a424:	1aad      	subeq	r5, r5, r2
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	6922      	ldr	r2, [r4, #16]
 800a42a:	bf0c      	ite	eq
 800a42c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a430:	2500      	movne	r5, #0
 800a432:	4293      	cmp	r3, r2
 800a434:	bfc4      	itt	gt
 800a436:	1a9b      	subgt	r3, r3, r2
 800a438:	18ed      	addgt	r5, r5, r3
 800a43a:	2600      	movs	r6, #0
 800a43c:	341a      	adds	r4, #26
 800a43e:	42b5      	cmp	r5, r6
 800a440:	d11a      	bne.n	800a478 <_printf_common+0xc8>
 800a442:	2000      	movs	r0, #0
 800a444:	e008      	b.n	800a458 <_printf_common+0xa8>
 800a446:	2301      	movs	r3, #1
 800a448:	4652      	mov	r2, sl
 800a44a:	4649      	mov	r1, r9
 800a44c:	4638      	mov	r0, r7
 800a44e:	47c0      	blx	r8
 800a450:	3001      	adds	r0, #1
 800a452:	d103      	bne.n	800a45c <_printf_common+0xac>
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45c:	3501      	adds	r5, #1
 800a45e:	e7c6      	b.n	800a3ee <_printf_common+0x3e>
 800a460:	18e1      	adds	r1, r4, r3
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	2030      	movs	r0, #48	; 0x30
 800a466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a46a:	4422      	add	r2, r4
 800a46c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a474:	3302      	adds	r3, #2
 800a476:	e7c7      	b.n	800a408 <_printf_common+0x58>
 800a478:	2301      	movs	r3, #1
 800a47a:	4622      	mov	r2, r4
 800a47c:	4649      	mov	r1, r9
 800a47e:	4638      	mov	r0, r7
 800a480:	47c0      	blx	r8
 800a482:	3001      	adds	r0, #1
 800a484:	d0e6      	beq.n	800a454 <_printf_common+0xa4>
 800a486:	3601      	adds	r6, #1
 800a488:	e7d9      	b.n	800a43e <_printf_common+0x8e>
	...

0800a48c <_printf_i>:
 800a48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	7e0f      	ldrb	r7, [r1, #24]
 800a492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a494:	2f78      	cmp	r7, #120	; 0x78
 800a496:	4691      	mov	r9, r2
 800a498:	4680      	mov	r8, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	469a      	mov	sl, r3
 800a49e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4a2:	d807      	bhi.n	800a4b4 <_printf_i+0x28>
 800a4a4:	2f62      	cmp	r7, #98	; 0x62
 800a4a6:	d80a      	bhi.n	800a4be <_printf_i+0x32>
 800a4a8:	2f00      	cmp	r7, #0
 800a4aa:	f000 80d8 	beq.w	800a65e <_printf_i+0x1d2>
 800a4ae:	2f58      	cmp	r7, #88	; 0x58
 800a4b0:	f000 80a3 	beq.w	800a5fa <_printf_i+0x16e>
 800a4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4bc:	e03a      	b.n	800a534 <_printf_i+0xa8>
 800a4be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4c2:	2b15      	cmp	r3, #21
 800a4c4:	d8f6      	bhi.n	800a4b4 <_printf_i+0x28>
 800a4c6:	a101      	add	r1, pc, #4	; (adr r1, 800a4cc <_printf_i+0x40>)
 800a4c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4cc:	0800a525 	.word	0x0800a525
 800a4d0:	0800a539 	.word	0x0800a539
 800a4d4:	0800a4b5 	.word	0x0800a4b5
 800a4d8:	0800a4b5 	.word	0x0800a4b5
 800a4dc:	0800a4b5 	.word	0x0800a4b5
 800a4e0:	0800a4b5 	.word	0x0800a4b5
 800a4e4:	0800a539 	.word	0x0800a539
 800a4e8:	0800a4b5 	.word	0x0800a4b5
 800a4ec:	0800a4b5 	.word	0x0800a4b5
 800a4f0:	0800a4b5 	.word	0x0800a4b5
 800a4f4:	0800a4b5 	.word	0x0800a4b5
 800a4f8:	0800a645 	.word	0x0800a645
 800a4fc:	0800a569 	.word	0x0800a569
 800a500:	0800a627 	.word	0x0800a627
 800a504:	0800a4b5 	.word	0x0800a4b5
 800a508:	0800a4b5 	.word	0x0800a4b5
 800a50c:	0800a667 	.word	0x0800a667
 800a510:	0800a4b5 	.word	0x0800a4b5
 800a514:	0800a569 	.word	0x0800a569
 800a518:	0800a4b5 	.word	0x0800a4b5
 800a51c:	0800a4b5 	.word	0x0800a4b5
 800a520:	0800a62f 	.word	0x0800a62f
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	1d1a      	adds	r2, r3, #4
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	602a      	str	r2, [r5, #0]
 800a52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a534:	2301      	movs	r3, #1
 800a536:	e0a3      	b.n	800a680 <_printf_i+0x1f4>
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	6829      	ldr	r1, [r5, #0]
 800a53c:	0606      	lsls	r6, r0, #24
 800a53e:	f101 0304 	add.w	r3, r1, #4
 800a542:	d50a      	bpl.n	800a55a <_printf_i+0xce>
 800a544:	680e      	ldr	r6, [r1, #0]
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	2e00      	cmp	r6, #0
 800a54a:	da03      	bge.n	800a554 <_printf_i+0xc8>
 800a54c:	232d      	movs	r3, #45	; 0x2d
 800a54e:	4276      	negs	r6, r6
 800a550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a554:	485e      	ldr	r0, [pc, #376]	; (800a6d0 <_printf_i+0x244>)
 800a556:	230a      	movs	r3, #10
 800a558:	e019      	b.n	800a58e <_printf_i+0x102>
 800a55a:	680e      	ldr	r6, [r1, #0]
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a562:	bf18      	it	ne
 800a564:	b236      	sxthne	r6, r6
 800a566:	e7ef      	b.n	800a548 <_printf_i+0xbc>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	6820      	ldr	r0, [r4, #0]
 800a56c:	1d19      	adds	r1, r3, #4
 800a56e:	6029      	str	r1, [r5, #0]
 800a570:	0601      	lsls	r1, r0, #24
 800a572:	d501      	bpl.n	800a578 <_printf_i+0xec>
 800a574:	681e      	ldr	r6, [r3, #0]
 800a576:	e002      	b.n	800a57e <_printf_i+0xf2>
 800a578:	0646      	lsls	r6, r0, #25
 800a57a:	d5fb      	bpl.n	800a574 <_printf_i+0xe8>
 800a57c:	881e      	ldrh	r6, [r3, #0]
 800a57e:	4854      	ldr	r0, [pc, #336]	; (800a6d0 <_printf_i+0x244>)
 800a580:	2f6f      	cmp	r7, #111	; 0x6f
 800a582:	bf0c      	ite	eq
 800a584:	2308      	moveq	r3, #8
 800a586:	230a      	movne	r3, #10
 800a588:	2100      	movs	r1, #0
 800a58a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a58e:	6865      	ldr	r5, [r4, #4]
 800a590:	60a5      	str	r5, [r4, #8]
 800a592:	2d00      	cmp	r5, #0
 800a594:	bfa2      	ittt	ge
 800a596:	6821      	ldrge	r1, [r4, #0]
 800a598:	f021 0104 	bicge.w	r1, r1, #4
 800a59c:	6021      	strge	r1, [r4, #0]
 800a59e:	b90e      	cbnz	r6, 800a5a4 <_printf_i+0x118>
 800a5a0:	2d00      	cmp	r5, #0
 800a5a2:	d04d      	beq.n	800a640 <_printf_i+0x1b4>
 800a5a4:	4615      	mov	r5, r2
 800a5a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5aa:	fb03 6711 	mls	r7, r3, r1, r6
 800a5ae:	5dc7      	ldrb	r7, [r0, r7]
 800a5b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5b4:	4637      	mov	r7, r6
 800a5b6:	42bb      	cmp	r3, r7
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	d9f4      	bls.n	800a5a6 <_printf_i+0x11a>
 800a5bc:	2b08      	cmp	r3, #8
 800a5be:	d10b      	bne.n	800a5d8 <_printf_i+0x14c>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	07de      	lsls	r6, r3, #31
 800a5c4:	d508      	bpl.n	800a5d8 <_printf_i+0x14c>
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	6861      	ldr	r1, [r4, #4]
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	bfde      	ittt	le
 800a5ce:	2330      	movle	r3, #48	; 0x30
 800a5d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5d8:	1b52      	subs	r2, r2, r5
 800a5da:	6122      	str	r2, [r4, #16]
 800a5dc:	f8cd a000 	str.w	sl, [sp]
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	aa03      	add	r2, sp, #12
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f7ff fee2 	bl	800a3b0 <_printf_common>
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d14c      	bne.n	800a68a <_printf_i+0x1fe>
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	b004      	add	sp, #16
 800a5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fa:	4835      	ldr	r0, [pc, #212]	; (800a6d0 <_printf_i+0x244>)
 800a5fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a600:	6829      	ldr	r1, [r5, #0]
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f851 6b04 	ldr.w	r6, [r1], #4
 800a608:	6029      	str	r1, [r5, #0]
 800a60a:	061d      	lsls	r5, r3, #24
 800a60c:	d514      	bpl.n	800a638 <_printf_i+0x1ac>
 800a60e:	07df      	lsls	r7, r3, #31
 800a610:	bf44      	itt	mi
 800a612:	f043 0320 	orrmi.w	r3, r3, #32
 800a616:	6023      	strmi	r3, [r4, #0]
 800a618:	b91e      	cbnz	r6, 800a622 <_printf_i+0x196>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	f023 0320 	bic.w	r3, r3, #32
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	2310      	movs	r3, #16
 800a624:	e7b0      	b.n	800a588 <_printf_i+0xfc>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	f043 0320 	orr.w	r3, r3, #32
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	2378      	movs	r3, #120	; 0x78
 800a630:	4828      	ldr	r0, [pc, #160]	; (800a6d4 <_printf_i+0x248>)
 800a632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a636:	e7e3      	b.n	800a600 <_printf_i+0x174>
 800a638:	0659      	lsls	r1, r3, #25
 800a63a:	bf48      	it	mi
 800a63c:	b2b6      	uxthmi	r6, r6
 800a63e:	e7e6      	b.n	800a60e <_printf_i+0x182>
 800a640:	4615      	mov	r5, r2
 800a642:	e7bb      	b.n	800a5bc <_printf_i+0x130>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	6826      	ldr	r6, [r4, #0]
 800a648:	6961      	ldr	r1, [r4, #20]
 800a64a:	1d18      	adds	r0, r3, #4
 800a64c:	6028      	str	r0, [r5, #0]
 800a64e:	0635      	lsls	r5, r6, #24
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	d501      	bpl.n	800a658 <_printf_i+0x1cc>
 800a654:	6019      	str	r1, [r3, #0]
 800a656:	e002      	b.n	800a65e <_printf_i+0x1d2>
 800a658:	0670      	lsls	r0, r6, #25
 800a65a:	d5fb      	bpl.n	800a654 <_printf_i+0x1c8>
 800a65c:	8019      	strh	r1, [r3, #0]
 800a65e:	2300      	movs	r3, #0
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	4615      	mov	r5, r2
 800a664:	e7ba      	b.n	800a5dc <_printf_i+0x150>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	1d1a      	adds	r2, r3, #4
 800a66a:	602a      	str	r2, [r5, #0]
 800a66c:	681d      	ldr	r5, [r3, #0]
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	2100      	movs	r1, #0
 800a672:	4628      	mov	r0, r5
 800a674:	f7f5 fdd4 	bl	8000220 <memchr>
 800a678:	b108      	cbz	r0, 800a67e <_printf_i+0x1f2>
 800a67a:	1b40      	subs	r0, r0, r5
 800a67c:	6060      	str	r0, [r4, #4]
 800a67e:	6863      	ldr	r3, [r4, #4]
 800a680:	6123      	str	r3, [r4, #16]
 800a682:	2300      	movs	r3, #0
 800a684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a688:	e7a8      	b.n	800a5dc <_printf_i+0x150>
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	462a      	mov	r2, r5
 800a68e:	4649      	mov	r1, r9
 800a690:	4640      	mov	r0, r8
 800a692:	47d0      	blx	sl
 800a694:	3001      	adds	r0, #1
 800a696:	d0ab      	beq.n	800a5f0 <_printf_i+0x164>
 800a698:	6823      	ldr	r3, [r4, #0]
 800a69a:	079b      	lsls	r3, r3, #30
 800a69c:	d413      	bmi.n	800a6c6 <_printf_i+0x23a>
 800a69e:	68e0      	ldr	r0, [r4, #12]
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	4298      	cmp	r0, r3
 800a6a4:	bfb8      	it	lt
 800a6a6:	4618      	movlt	r0, r3
 800a6a8:	e7a4      	b.n	800a5f4 <_printf_i+0x168>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	47d0      	blx	sl
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d09b      	beq.n	800a5f0 <_printf_i+0x164>
 800a6b8:	3501      	adds	r5, #1
 800a6ba:	68e3      	ldr	r3, [r4, #12]
 800a6bc:	9903      	ldr	r1, [sp, #12]
 800a6be:	1a5b      	subs	r3, r3, r1
 800a6c0:	42ab      	cmp	r3, r5
 800a6c2:	dcf2      	bgt.n	800a6aa <_printf_i+0x21e>
 800a6c4:	e7eb      	b.n	800a69e <_printf_i+0x212>
 800a6c6:	2500      	movs	r5, #0
 800a6c8:	f104 0619 	add.w	r6, r4, #25
 800a6cc:	e7f5      	b.n	800a6ba <_printf_i+0x22e>
 800a6ce:	bf00      	nop
 800a6d0:	0800ebe2 	.word	0x0800ebe2
 800a6d4:	0800ebf3 	.word	0x0800ebf3

0800a6d8 <_scanf_float>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	b087      	sub	sp, #28
 800a6de:	4617      	mov	r7, r2
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	688b      	ldr	r3, [r1, #8]
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6ea:	bf83      	ittte	hi
 800a6ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6f0:	195b      	addhi	r3, r3, r5
 800a6f2:	9302      	strhi	r3, [sp, #8]
 800a6f4:	2300      	movls	r3, #0
 800a6f6:	bf86      	itte	hi
 800a6f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a6fc:	608b      	strhi	r3, [r1, #8]
 800a6fe:	9302      	strls	r3, [sp, #8]
 800a700:	680b      	ldr	r3, [r1, #0]
 800a702:	468b      	mov	fp, r1
 800a704:	2500      	movs	r5, #0
 800a706:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a70a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a70e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a712:	4680      	mov	r8, r0
 800a714:	460c      	mov	r4, r1
 800a716:	465e      	mov	r6, fp
 800a718:	46aa      	mov	sl, r5
 800a71a:	46a9      	mov	r9, r5
 800a71c:	9501      	str	r5, [sp, #4]
 800a71e:	68a2      	ldr	r2, [r4, #8]
 800a720:	b152      	cbz	r2, 800a738 <_scanf_float+0x60>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b4e      	cmp	r3, #78	; 0x4e
 800a728:	d864      	bhi.n	800a7f4 <_scanf_float+0x11c>
 800a72a:	2b40      	cmp	r3, #64	; 0x40
 800a72c:	d83c      	bhi.n	800a7a8 <_scanf_float+0xd0>
 800a72e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a732:	b2c8      	uxtb	r0, r1
 800a734:	280e      	cmp	r0, #14
 800a736:	d93a      	bls.n	800a7ae <_scanf_float+0xd6>
 800a738:	f1b9 0f00 	cmp.w	r9, #0
 800a73c:	d003      	beq.n	800a746 <_scanf_float+0x6e>
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a74a:	f1ba 0f01 	cmp.w	sl, #1
 800a74e:	f200 8113 	bhi.w	800a978 <_scanf_float+0x2a0>
 800a752:	455e      	cmp	r6, fp
 800a754:	f200 8105 	bhi.w	800a962 <_scanf_float+0x28a>
 800a758:	2501      	movs	r5, #1
 800a75a:	4628      	mov	r0, r5
 800a75c:	b007      	add	sp, #28
 800a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a762:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a766:	2a0d      	cmp	r2, #13
 800a768:	d8e6      	bhi.n	800a738 <_scanf_float+0x60>
 800a76a:	a101      	add	r1, pc, #4	; (adr r1, 800a770 <_scanf_float+0x98>)
 800a76c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a770:	0800a8af 	.word	0x0800a8af
 800a774:	0800a739 	.word	0x0800a739
 800a778:	0800a739 	.word	0x0800a739
 800a77c:	0800a739 	.word	0x0800a739
 800a780:	0800a90f 	.word	0x0800a90f
 800a784:	0800a8e7 	.word	0x0800a8e7
 800a788:	0800a739 	.word	0x0800a739
 800a78c:	0800a739 	.word	0x0800a739
 800a790:	0800a8bd 	.word	0x0800a8bd
 800a794:	0800a739 	.word	0x0800a739
 800a798:	0800a739 	.word	0x0800a739
 800a79c:	0800a739 	.word	0x0800a739
 800a7a0:	0800a739 	.word	0x0800a739
 800a7a4:	0800a875 	.word	0x0800a875
 800a7a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a7ac:	e7db      	b.n	800a766 <_scanf_float+0x8e>
 800a7ae:	290e      	cmp	r1, #14
 800a7b0:	d8c2      	bhi.n	800a738 <_scanf_float+0x60>
 800a7b2:	a001      	add	r0, pc, #4	; (adr r0, 800a7b8 <_scanf_float+0xe0>)
 800a7b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7b8:	0800a867 	.word	0x0800a867
 800a7bc:	0800a739 	.word	0x0800a739
 800a7c0:	0800a867 	.word	0x0800a867
 800a7c4:	0800a8fb 	.word	0x0800a8fb
 800a7c8:	0800a739 	.word	0x0800a739
 800a7cc:	0800a815 	.word	0x0800a815
 800a7d0:	0800a851 	.word	0x0800a851
 800a7d4:	0800a851 	.word	0x0800a851
 800a7d8:	0800a851 	.word	0x0800a851
 800a7dc:	0800a851 	.word	0x0800a851
 800a7e0:	0800a851 	.word	0x0800a851
 800a7e4:	0800a851 	.word	0x0800a851
 800a7e8:	0800a851 	.word	0x0800a851
 800a7ec:	0800a851 	.word	0x0800a851
 800a7f0:	0800a851 	.word	0x0800a851
 800a7f4:	2b6e      	cmp	r3, #110	; 0x6e
 800a7f6:	d809      	bhi.n	800a80c <_scanf_float+0x134>
 800a7f8:	2b60      	cmp	r3, #96	; 0x60
 800a7fa:	d8b2      	bhi.n	800a762 <_scanf_float+0x8a>
 800a7fc:	2b54      	cmp	r3, #84	; 0x54
 800a7fe:	d077      	beq.n	800a8f0 <_scanf_float+0x218>
 800a800:	2b59      	cmp	r3, #89	; 0x59
 800a802:	d199      	bne.n	800a738 <_scanf_float+0x60>
 800a804:	2d07      	cmp	r5, #7
 800a806:	d197      	bne.n	800a738 <_scanf_float+0x60>
 800a808:	2508      	movs	r5, #8
 800a80a:	e029      	b.n	800a860 <_scanf_float+0x188>
 800a80c:	2b74      	cmp	r3, #116	; 0x74
 800a80e:	d06f      	beq.n	800a8f0 <_scanf_float+0x218>
 800a810:	2b79      	cmp	r3, #121	; 0x79
 800a812:	e7f6      	b.n	800a802 <_scanf_float+0x12a>
 800a814:	6821      	ldr	r1, [r4, #0]
 800a816:	05c8      	lsls	r0, r1, #23
 800a818:	d51a      	bpl.n	800a850 <_scanf_float+0x178>
 800a81a:	9b02      	ldr	r3, [sp, #8]
 800a81c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a820:	6021      	str	r1, [r4, #0]
 800a822:	f109 0901 	add.w	r9, r9, #1
 800a826:	b11b      	cbz	r3, 800a830 <_scanf_float+0x158>
 800a828:	3b01      	subs	r3, #1
 800a82a:	3201      	adds	r2, #1
 800a82c:	9302      	str	r3, [sp, #8]
 800a82e:	60a2      	str	r2, [r4, #8]
 800a830:	68a3      	ldr	r3, [r4, #8]
 800a832:	3b01      	subs	r3, #1
 800a834:	60a3      	str	r3, [r4, #8]
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	3301      	adds	r3, #1
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3b01      	subs	r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	607b      	str	r3, [r7, #4]
 800a844:	f340 8084 	ble.w	800a950 <_scanf_float+0x278>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	3301      	adds	r3, #1
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	e766      	b.n	800a71e <_scanf_float+0x46>
 800a850:	eb1a 0f05 	cmn.w	sl, r5
 800a854:	f47f af70 	bne.w	800a738 <_scanf_float+0x60>
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a85e:	6022      	str	r2, [r4, #0]
 800a860:	f806 3b01 	strb.w	r3, [r6], #1
 800a864:	e7e4      	b.n	800a830 <_scanf_float+0x158>
 800a866:	6822      	ldr	r2, [r4, #0]
 800a868:	0610      	lsls	r0, r2, #24
 800a86a:	f57f af65 	bpl.w	800a738 <_scanf_float+0x60>
 800a86e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a872:	e7f4      	b.n	800a85e <_scanf_float+0x186>
 800a874:	f1ba 0f00 	cmp.w	sl, #0
 800a878:	d10e      	bne.n	800a898 <_scanf_float+0x1c0>
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	d10e      	bne.n	800a89e <_scanf_float+0x1c6>
 800a880:	6822      	ldr	r2, [r4, #0]
 800a882:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a886:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a88a:	d108      	bne.n	800a89e <_scanf_float+0x1c6>
 800a88c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a890:	6022      	str	r2, [r4, #0]
 800a892:	f04f 0a01 	mov.w	sl, #1
 800a896:	e7e3      	b.n	800a860 <_scanf_float+0x188>
 800a898:	f1ba 0f02 	cmp.w	sl, #2
 800a89c:	d055      	beq.n	800a94a <_scanf_float+0x272>
 800a89e:	2d01      	cmp	r5, #1
 800a8a0:	d002      	beq.n	800a8a8 <_scanf_float+0x1d0>
 800a8a2:	2d04      	cmp	r5, #4
 800a8a4:	f47f af48 	bne.w	800a738 <_scanf_float+0x60>
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	b2ed      	uxtb	r5, r5
 800a8ac:	e7d8      	b.n	800a860 <_scanf_float+0x188>
 800a8ae:	f1ba 0f01 	cmp.w	sl, #1
 800a8b2:	f47f af41 	bne.w	800a738 <_scanf_float+0x60>
 800a8b6:	f04f 0a02 	mov.w	sl, #2
 800a8ba:	e7d1      	b.n	800a860 <_scanf_float+0x188>
 800a8bc:	b97d      	cbnz	r5, 800a8de <_scanf_float+0x206>
 800a8be:	f1b9 0f00 	cmp.w	r9, #0
 800a8c2:	f47f af3c 	bne.w	800a73e <_scanf_float+0x66>
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a8cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a8d0:	f47f af39 	bne.w	800a746 <_scanf_float+0x6e>
 800a8d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8d8:	6022      	str	r2, [r4, #0]
 800a8da:	2501      	movs	r5, #1
 800a8dc:	e7c0      	b.n	800a860 <_scanf_float+0x188>
 800a8de:	2d03      	cmp	r5, #3
 800a8e0:	d0e2      	beq.n	800a8a8 <_scanf_float+0x1d0>
 800a8e2:	2d05      	cmp	r5, #5
 800a8e4:	e7de      	b.n	800a8a4 <_scanf_float+0x1cc>
 800a8e6:	2d02      	cmp	r5, #2
 800a8e8:	f47f af26 	bne.w	800a738 <_scanf_float+0x60>
 800a8ec:	2503      	movs	r5, #3
 800a8ee:	e7b7      	b.n	800a860 <_scanf_float+0x188>
 800a8f0:	2d06      	cmp	r5, #6
 800a8f2:	f47f af21 	bne.w	800a738 <_scanf_float+0x60>
 800a8f6:	2507      	movs	r5, #7
 800a8f8:	e7b2      	b.n	800a860 <_scanf_float+0x188>
 800a8fa:	6822      	ldr	r2, [r4, #0]
 800a8fc:	0591      	lsls	r1, r2, #22
 800a8fe:	f57f af1b 	bpl.w	800a738 <_scanf_float+0x60>
 800a902:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a906:	6022      	str	r2, [r4, #0]
 800a908:	f8cd 9004 	str.w	r9, [sp, #4]
 800a90c:	e7a8      	b.n	800a860 <_scanf_float+0x188>
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a914:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a918:	d006      	beq.n	800a928 <_scanf_float+0x250>
 800a91a:	0550      	lsls	r0, r2, #21
 800a91c:	f57f af0c 	bpl.w	800a738 <_scanf_float+0x60>
 800a920:	f1b9 0f00 	cmp.w	r9, #0
 800a924:	f43f af0f 	beq.w	800a746 <_scanf_float+0x6e>
 800a928:	0591      	lsls	r1, r2, #22
 800a92a:	bf58      	it	pl
 800a92c:	9901      	ldrpl	r1, [sp, #4]
 800a92e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a932:	bf58      	it	pl
 800a934:	eba9 0101 	subpl.w	r1, r9, r1
 800a938:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a93c:	bf58      	it	pl
 800a93e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a942:	6022      	str	r2, [r4, #0]
 800a944:	f04f 0900 	mov.w	r9, #0
 800a948:	e78a      	b.n	800a860 <_scanf_float+0x188>
 800a94a:	f04f 0a03 	mov.w	sl, #3
 800a94e:	e787      	b.n	800a860 <_scanf_float+0x188>
 800a950:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a954:	4639      	mov	r1, r7
 800a956:	4640      	mov	r0, r8
 800a958:	4798      	blx	r3
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f43f aedf 	beq.w	800a71e <_scanf_float+0x46>
 800a960:	e6ea      	b.n	800a738 <_scanf_float+0x60>
 800a962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a96a:	463a      	mov	r2, r7
 800a96c:	4640      	mov	r0, r8
 800a96e:	4798      	blx	r3
 800a970:	6923      	ldr	r3, [r4, #16]
 800a972:	3b01      	subs	r3, #1
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	e6ec      	b.n	800a752 <_scanf_float+0x7a>
 800a978:	1e6b      	subs	r3, r5, #1
 800a97a:	2b06      	cmp	r3, #6
 800a97c:	d825      	bhi.n	800a9ca <_scanf_float+0x2f2>
 800a97e:	2d02      	cmp	r5, #2
 800a980:	d836      	bhi.n	800a9f0 <_scanf_float+0x318>
 800a982:	455e      	cmp	r6, fp
 800a984:	f67f aee8 	bls.w	800a758 <_scanf_float+0x80>
 800a988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a98c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a990:	463a      	mov	r2, r7
 800a992:	4640      	mov	r0, r8
 800a994:	4798      	blx	r3
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	3b01      	subs	r3, #1
 800a99a:	6123      	str	r3, [r4, #16]
 800a99c:	e7f1      	b.n	800a982 <_scanf_float+0x2aa>
 800a99e:	9802      	ldr	r0, [sp, #8]
 800a9a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a9a8:	9002      	str	r0, [sp, #8]
 800a9aa:	463a      	mov	r2, r7
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4798      	blx	r3
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	6123      	str	r3, [r4, #16]
 800a9b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9ba:	fa5f fa8a 	uxtb.w	sl, sl
 800a9be:	f1ba 0f02 	cmp.w	sl, #2
 800a9c2:	d1ec      	bne.n	800a99e <_scanf_float+0x2c6>
 800a9c4:	3d03      	subs	r5, #3
 800a9c6:	b2ed      	uxtb	r5, r5
 800a9c8:	1b76      	subs	r6, r6, r5
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	05da      	lsls	r2, r3, #23
 800a9ce:	d52f      	bpl.n	800aa30 <_scanf_float+0x358>
 800a9d0:	055b      	lsls	r3, r3, #21
 800a9d2:	d510      	bpl.n	800a9f6 <_scanf_float+0x31e>
 800a9d4:	455e      	cmp	r6, fp
 800a9d6:	f67f aebf 	bls.w	800a758 <_scanf_float+0x80>
 800a9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9e2:	463a      	mov	r2, r7
 800a9e4:	4640      	mov	r0, r8
 800a9e6:	4798      	blx	r3
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	6123      	str	r3, [r4, #16]
 800a9ee:	e7f1      	b.n	800a9d4 <_scanf_float+0x2fc>
 800a9f0:	46aa      	mov	sl, r5
 800a9f2:	9602      	str	r6, [sp, #8]
 800a9f4:	e7df      	b.n	800a9b6 <_scanf_float+0x2de>
 800a9f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	2965      	cmp	r1, #101	; 0x65
 800a9fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa02:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa06:	6123      	str	r3, [r4, #16]
 800aa08:	d00c      	beq.n	800aa24 <_scanf_float+0x34c>
 800aa0a:	2945      	cmp	r1, #69	; 0x45
 800aa0c:	d00a      	beq.n	800aa24 <_scanf_float+0x34c>
 800aa0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa12:	463a      	mov	r2, r7
 800aa14:	4640      	mov	r0, r8
 800aa16:	4798      	blx	r3
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	1eb5      	subs	r5, r6, #2
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa28:	463a      	mov	r2, r7
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4798      	blx	r3
 800aa2e:	462e      	mov	r6, r5
 800aa30:	6825      	ldr	r5, [r4, #0]
 800aa32:	f015 0510 	ands.w	r5, r5, #16
 800aa36:	d159      	bne.n	800aaec <_scanf_float+0x414>
 800aa38:	7035      	strb	r5, [r6, #0]
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa44:	d11b      	bne.n	800aa7e <_scanf_float+0x3a6>
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	454b      	cmp	r3, r9
 800aa4a:	eba3 0209 	sub.w	r2, r3, r9
 800aa4e:	d123      	bne.n	800aa98 <_scanf_float+0x3c0>
 800aa50:	2200      	movs	r2, #0
 800aa52:	4659      	mov	r1, fp
 800aa54:	4640      	mov	r0, r8
 800aa56:	f000 fe91 	bl	800b77c <_strtod_r>
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	f012 0f02 	tst.w	r2, #2
 800aa62:	ec57 6b10 	vmov	r6, r7, d0
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	d021      	beq.n	800aaae <_scanf_float+0x3d6>
 800aa6a:	9903      	ldr	r1, [sp, #12]
 800aa6c:	1d1a      	adds	r2, r3, #4
 800aa6e:	600a      	str	r2, [r1, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	e9c3 6700 	strd	r6, r7, [r3]
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60e3      	str	r3, [r4, #12]
 800aa7c:	e66d      	b.n	800a75a <_scanf_float+0x82>
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0e5      	beq.n	800aa50 <_scanf_float+0x378>
 800aa84:	9905      	ldr	r1, [sp, #20]
 800aa86:	230a      	movs	r3, #10
 800aa88:	462a      	mov	r2, r5
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	f000 fefd 	bl	800b88c <_strtol_r>
 800aa92:	9b04      	ldr	r3, [sp, #16]
 800aa94:	9e05      	ldr	r6, [sp, #20]
 800aa96:	1ac2      	subs	r2, r0, r3
 800aa98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa9c:	429e      	cmp	r6, r3
 800aa9e:	bf28      	it	cs
 800aaa0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aaa4:	4912      	ldr	r1, [pc, #72]	; (800aaf0 <_scanf_float+0x418>)
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f000 f826 	bl	800aaf8 <siprintf>
 800aaac:	e7d0      	b.n	800aa50 <_scanf_float+0x378>
 800aaae:	9903      	ldr	r1, [sp, #12]
 800aab0:	f012 0f04 	tst.w	r2, #4
 800aab4:	f103 0204 	add.w	r2, r3, #4
 800aab8:	600a      	str	r2, [r1, #0]
 800aaba:	d1d9      	bne.n	800aa70 <_scanf_float+0x398>
 800aabc:	f8d3 8000 	ldr.w	r8, [r3]
 800aac0:	ee10 2a10 	vmov	r2, s0
 800aac4:	ee10 0a10 	vmov	r0, s0
 800aac8:	463b      	mov	r3, r7
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f6 f84e 	bl	8000b6c <__aeabi_dcmpun>
 800aad0:	b128      	cbz	r0, 800aade <_scanf_float+0x406>
 800aad2:	4808      	ldr	r0, [pc, #32]	; (800aaf4 <_scanf_float+0x41c>)
 800aad4:	f7ff f8de 	bl	8009c94 <nanf>
 800aad8:	ed88 0a00 	vstr	s0, [r8]
 800aadc:	e7cb      	b.n	800aa76 <_scanf_float+0x39e>
 800aade:	4630      	mov	r0, r6
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f6 f8a1 	bl	8000c28 <__aeabi_d2f>
 800aae6:	f8c8 0000 	str.w	r0, [r8]
 800aaea:	e7c4      	b.n	800aa76 <_scanf_float+0x39e>
 800aaec:	2500      	movs	r5, #0
 800aaee:	e634      	b.n	800a75a <_scanf_float+0x82>
 800aaf0:	0800ec04 	.word	0x0800ec04
 800aaf4:	0800f010 	.word	0x0800f010

0800aaf8 <siprintf>:
 800aaf8:	b40e      	push	{r1, r2, r3}
 800aafa:	b500      	push	{lr}
 800aafc:	b09c      	sub	sp, #112	; 0x70
 800aafe:	ab1d      	add	r3, sp, #116	; 0x74
 800ab00:	9002      	str	r0, [sp, #8]
 800ab02:	9006      	str	r0, [sp, #24]
 800ab04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab08:	4809      	ldr	r0, [pc, #36]	; (800ab30 <siprintf+0x38>)
 800ab0a:	9107      	str	r1, [sp, #28]
 800ab0c:	9104      	str	r1, [sp, #16]
 800ab0e:	4909      	ldr	r1, [pc, #36]	; (800ab34 <siprintf+0x3c>)
 800ab10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab14:	9105      	str	r1, [sp, #20]
 800ab16:	6800      	ldr	r0, [r0, #0]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	a902      	add	r1, sp, #8
 800ab1c:	f002 fed4 	bl	800d8c8 <_svfiprintf_r>
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	2200      	movs	r2, #0
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	b01c      	add	sp, #112	; 0x70
 800ab28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab2c:	b003      	add	sp, #12
 800ab2e:	4770      	bx	lr
 800ab30:	20000010 	.word	0x20000010
 800ab34:	ffff0208 	.word	0xffff0208

0800ab38 <sulp>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	460d      	mov	r5, r1
 800ab3e:	ec45 4b10 	vmov	d0, r4, r5
 800ab42:	4616      	mov	r6, r2
 800ab44:	f002 fc1e 	bl	800d384 <__ulp>
 800ab48:	ec51 0b10 	vmov	r0, r1, d0
 800ab4c:	b17e      	cbz	r6, 800ab6e <sulp+0x36>
 800ab4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd09      	ble.n	800ab6e <sulp+0x36>
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab60:	2400      	movs	r4, #0
 800ab62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab66:	4622      	mov	r2, r4
 800ab68:	462b      	mov	r3, r5
 800ab6a:	f7f5 fd65 	bl	8000638 <__aeabi_dmul>
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}

0800ab70 <_strtod_l>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	ed2d 8b02 	vpush	{d8}
 800ab78:	b09d      	sub	sp, #116	; 0x74
 800ab7a:	461f      	mov	r7, r3
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	9318      	str	r3, [sp, #96]	; 0x60
 800ab80:	4ba2      	ldr	r3, [pc, #648]	; (800ae0c <_strtod_l+0x29c>)
 800ab82:	9213      	str	r2, [sp, #76]	; 0x4c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	9305      	str	r3, [sp, #20]
 800ab88:	4604      	mov	r4, r0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	4688      	mov	r8, r1
 800ab8e:	f7f5 fb3f 	bl	8000210 <strlen>
 800ab92:	f04f 0a00 	mov.w	sl, #0
 800ab96:	4605      	mov	r5, r0
 800ab98:	f04f 0b00 	mov.w	fp, #0
 800ab9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aba2:	781a      	ldrb	r2, [r3, #0]
 800aba4:	2a2b      	cmp	r2, #43	; 0x2b
 800aba6:	d04e      	beq.n	800ac46 <_strtod_l+0xd6>
 800aba8:	d83b      	bhi.n	800ac22 <_strtod_l+0xb2>
 800abaa:	2a0d      	cmp	r2, #13
 800abac:	d834      	bhi.n	800ac18 <_strtod_l+0xa8>
 800abae:	2a08      	cmp	r2, #8
 800abb0:	d834      	bhi.n	800ac1c <_strtod_l+0xac>
 800abb2:	2a00      	cmp	r2, #0
 800abb4:	d03e      	beq.n	800ac34 <_strtod_l+0xc4>
 800abb6:	2300      	movs	r3, #0
 800abb8:	930a      	str	r3, [sp, #40]	; 0x28
 800abba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800abbc:	7833      	ldrb	r3, [r6, #0]
 800abbe:	2b30      	cmp	r3, #48	; 0x30
 800abc0:	f040 80b0 	bne.w	800ad24 <_strtod_l+0x1b4>
 800abc4:	7873      	ldrb	r3, [r6, #1]
 800abc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abca:	2b58      	cmp	r3, #88	; 0x58
 800abcc:	d168      	bne.n	800aca0 <_strtod_l+0x130>
 800abce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	ab18      	add	r3, sp, #96	; 0x60
 800abd4:	9702      	str	r7, [sp, #8]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	4a8d      	ldr	r2, [pc, #564]	; (800ae10 <_strtod_l+0x2a0>)
 800abda:	ab19      	add	r3, sp, #100	; 0x64
 800abdc:	a917      	add	r1, sp, #92	; 0x5c
 800abde:	4620      	mov	r0, r4
 800abe0:	f001 fd38 	bl	800c654 <__gethex>
 800abe4:	f010 0707 	ands.w	r7, r0, #7
 800abe8:	4605      	mov	r5, r0
 800abea:	d005      	beq.n	800abf8 <_strtod_l+0x88>
 800abec:	2f06      	cmp	r7, #6
 800abee:	d12c      	bne.n	800ac4a <_strtod_l+0xda>
 800abf0:	3601      	adds	r6, #1
 800abf2:	2300      	movs	r3, #0
 800abf4:	9617      	str	r6, [sp, #92]	; 0x5c
 800abf6:	930a      	str	r3, [sp, #40]	; 0x28
 800abf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f040 8590 	bne.w	800b720 <_strtod_l+0xbb0>
 800ac00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac02:	b1eb      	cbz	r3, 800ac40 <_strtod_l+0xd0>
 800ac04:	4652      	mov	r2, sl
 800ac06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ac0a:	ec43 2b10 	vmov	d0, r2, r3
 800ac0e:	b01d      	add	sp, #116	; 0x74
 800ac10:	ecbd 8b02 	vpop	{d8}
 800ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac18:	2a20      	cmp	r2, #32
 800ac1a:	d1cc      	bne.n	800abb6 <_strtod_l+0x46>
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac20:	e7be      	b.n	800aba0 <_strtod_l+0x30>
 800ac22:	2a2d      	cmp	r2, #45	; 0x2d
 800ac24:	d1c7      	bne.n	800abb6 <_strtod_l+0x46>
 800ac26:	2201      	movs	r2, #1
 800ac28:	920a      	str	r2, [sp, #40]	; 0x28
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac2e:	785b      	ldrb	r3, [r3, #1]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1c2      	bne.n	800abba <_strtod_l+0x4a>
 800ac34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f040 856e 	bne.w	800b71c <_strtod_l+0xbac>
 800ac40:	4652      	mov	r2, sl
 800ac42:	465b      	mov	r3, fp
 800ac44:	e7e1      	b.n	800ac0a <_strtod_l+0x9a>
 800ac46:	2200      	movs	r2, #0
 800ac48:	e7ee      	b.n	800ac28 <_strtod_l+0xb8>
 800ac4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac4c:	b13a      	cbz	r2, 800ac5e <_strtod_l+0xee>
 800ac4e:	2135      	movs	r1, #53	; 0x35
 800ac50:	a81a      	add	r0, sp, #104	; 0x68
 800ac52:	f002 fca2 	bl	800d59a <__copybits>
 800ac56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f002 f861 	bl	800cd20 <_Bfree>
 800ac5e:	3f01      	subs	r7, #1
 800ac60:	2f04      	cmp	r7, #4
 800ac62:	d806      	bhi.n	800ac72 <_strtod_l+0x102>
 800ac64:	e8df f007 	tbb	[pc, r7]
 800ac68:	1714030a 	.word	0x1714030a
 800ac6c:	0a          	.byte	0x0a
 800ac6d:	00          	.byte	0x00
 800ac6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ac72:	0728      	lsls	r0, r5, #28
 800ac74:	d5c0      	bpl.n	800abf8 <_strtod_l+0x88>
 800ac76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ac7a:	e7bd      	b.n	800abf8 <_strtod_l+0x88>
 800ac7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ac80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac8e:	e7f0      	b.n	800ac72 <_strtod_l+0x102>
 800ac90:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ae14 <_strtod_l+0x2a4>
 800ac94:	e7ed      	b.n	800ac72 <_strtod_l+0x102>
 800ac96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ac9a:	f04f 3aff 	mov.w	sl, #4294967295
 800ac9e:	e7e8      	b.n	800ac72 <_strtod_l+0x102>
 800aca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aca6:	785b      	ldrb	r3, [r3, #1]
 800aca8:	2b30      	cmp	r3, #48	; 0x30
 800acaa:	d0f9      	beq.n	800aca0 <_strtod_l+0x130>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0a3      	beq.n	800abf8 <_strtod_l+0x88>
 800acb0:	2301      	movs	r3, #1
 800acb2:	f04f 0900 	mov.w	r9, #0
 800acb6:	9304      	str	r3, [sp, #16]
 800acb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acba:	9308      	str	r3, [sp, #32]
 800acbc:	f8cd 901c 	str.w	r9, [sp, #28]
 800acc0:	464f      	mov	r7, r9
 800acc2:	220a      	movs	r2, #10
 800acc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800acc6:	7806      	ldrb	r6, [r0, #0]
 800acc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800accc:	b2d9      	uxtb	r1, r3
 800acce:	2909      	cmp	r1, #9
 800acd0:	d92a      	bls.n	800ad28 <_strtod_l+0x1b8>
 800acd2:	9905      	ldr	r1, [sp, #20]
 800acd4:	462a      	mov	r2, r5
 800acd6:	f002 ff0f 	bl	800daf8 <strncmp>
 800acda:	b398      	cbz	r0, 800ad44 <_strtod_l+0x1d4>
 800acdc:	2000      	movs	r0, #0
 800acde:	4632      	mov	r2, r6
 800ace0:	463d      	mov	r5, r7
 800ace2:	9005      	str	r0, [sp, #20]
 800ace4:	4603      	mov	r3, r0
 800ace6:	2a65      	cmp	r2, #101	; 0x65
 800ace8:	d001      	beq.n	800acee <_strtod_l+0x17e>
 800acea:	2a45      	cmp	r2, #69	; 0x45
 800acec:	d118      	bne.n	800ad20 <_strtod_l+0x1b0>
 800acee:	b91d      	cbnz	r5, 800acf8 <_strtod_l+0x188>
 800acf0:	9a04      	ldr	r2, [sp, #16]
 800acf2:	4302      	orrs	r2, r0
 800acf4:	d09e      	beq.n	800ac34 <_strtod_l+0xc4>
 800acf6:	2500      	movs	r5, #0
 800acf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800acfc:	f108 0201 	add.w	r2, r8, #1
 800ad00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad02:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ad06:	2a2b      	cmp	r2, #43	; 0x2b
 800ad08:	d075      	beq.n	800adf6 <_strtod_l+0x286>
 800ad0a:	2a2d      	cmp	r2, #45	; 0x2d
 800ad0c:	d07b      	beq.n	800ae06 <_strtod_l+0x296>
 800ad0e:	f04f 0c00 	mov.w	ip, #0
 800ad12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad16:	2909      	cmp	r1, #9
 800ad18:	f240 8082 	bls.w	800ae20 <_strtod_l+0x2b0>
 800ad1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad20:	2600      	movs	r6, #0
 800ad22:	e09d      	b.n	800ae60 <_strtod_l+0x2f0>
 800ad24:	2300      	movs	r3, #0
 800ad26:	e7c4      	b.n	800acb2 <_strtod_l+0x142>
 800ad28:	2f08      	cmp	r7, #8
 800ad2a:	bfd8      	it	le
 800ad2c:	9907      	ldrle	r1, [sp, #28]
 800ad2e:	f100 0001 	add.w	r0, r0, #1
 800ad32:	bfda      	itte	le
 800ad34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad38:	9307      	strle	r3, [sp, #28]
 800ad3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ad3e:	3701      	adds	r7, #1
 800ad40:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad42:	e7bf      	b.n	800acc4 <_strtod_l+0x154>
 800ad44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad46:	195a      	adds	r2, r3, r5
 800ad48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad4a:	5d5a      	ldrb	r2, [r3, r5]
 800ad4c:	2f00      	cmp	r7, #0
 800ad4e:	d037      	beq.n	800adc0 <_strtod_l+0x250>
 800ad50:	9005      	str	r0, [sp, #20]
 800ad52:	463d      	mov	r5, r7
 800ad54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	d912      	bls.n	800ad82 <_strtod_l+0x212>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e7c2      	b.n	800ace6 <_strtod_l+0x176>
 800ad60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad66:	785a      	ldrb	r2, [r3, #1]
 800ad68:	3001      	adds	r0, #1
 800ad6a:	2a30      	cmp	r2, #48	; 0x30
 800ad6c:	d0f8      	beq.n	800ad60 <_strtod_l+0x1f0>
 800ad6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ad72:	2b08      	cmp	r3, #8
 800ad74:	f200 84d9 	bhi.w	800b72a <_strtod_l+0xbba>
 800ad78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad7a:	9005      	str	r0, [sp, #20]
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	4605      	mov	r5, r0
 800ad82:	3a30      	subs	r2, #48	; 0x30
 800ad84:	f100 0301 	add.w	r3, r0, #1
 800ad88:	d014      	beq.n	800adb4 <_strtod_l+0x244>
 800ad8a:	9905      	ldr	r1, [sp, #20]
 800ad8c:	4419      	add	r1, r3
 800ad8e:	9105      	str	r1, [sp, #20]
 800ad90:	462b      	mov	r3, r5
 800ad92:	eb00 0e05 	add.w	lr, r0, r5
 800ad96:	210a      	movs	r1, #10
 800ad98:	4573      	cmp	r3, lr
 800ad9a:	d113      	bne.n	800adc4 <_strtod_l+0x254>
 800ad9c:	182b      	adds	r3, r5, r0
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	f105 0501 	add.w	r5, r5, #1
 800ada4:	4405      	add	r5, r0
 800ada6:	dc1c      	bgt.n	800ade2 <_strtod_l+0x272>
 800ada8:	9907      	ldr	r1, [sp, #28]
 800adaa:	230a      	movs	r3, #10
 800adac:	fb03 2301 	mla	r3, r3, r1, r2
 800adb0:	9307      	str	r3, [sp, #28]
 800adb2:	2300      	movs	r3, #0
 800adb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adb6:	1c51      	adds	r1, r2, #1
 800adb8:	9117      	str	r1, [sp, #92]	; 0x5c
 800adba:	7852      	ldrb	r2, [r2, #1]
 800adbc:	4618      	mov	r0, r3
 800adbe:	e7c9      	b.n	800ad54 <_strtod_l+0x1e4>
 800adc0:	4638      	mov	r0, r7
 800adc2:	e7d2      	b.n	800ad6a <_strtod_l+0x1fa>
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	dc04      	bgt.n	800add2 <_strtod_l+0x262>
 800adc8:	9e07      	ldr	r6, [sp, #28]
 800adca:	434e      	muls	r6, r1
 800adcc:	9607      	str	r6, [sp, #28]
 800adce:	3301      	adds	r3, #1
 800add0:	e7e2      	b.n	800ad98 <_strtod_l+0x228>
 800add2:	f103 0c01 	add.w	ip, r3, #1
 800add6:	f1bc 0f10 	cmp.w	ip, #16
 800adda:	bfd8      	it	le
 800addc:	fb01 f909 	mulle.w	r9, r1, r9
 800ade0:	e7f5      	b.n	800adce <_strtod_l+0x25e>
 800ade2:	2d10      	cmp	r5, #16
 800ade4:	bfdc      	itt	le
 800ade6:	230a      	movle	r3, #10
 800ade8:	fb03 2909 	mlale	r9, r3, r9, r2
 800adec:	e7e1      	b.n	800adb2 <_strtod_l+0x242>
 800adee:	2300      	movs	r3, #0
 800adf0:	9305      	str	r3, [sp, #20]
 800adf2:	2301      	movs	r3, #1
 800adf4:	e77c      	b.n	800acf0 <_strtod_l+0x180>
 800adf6:	f04f 0c00 	mov.w	ip, #0
 800adfa:	f108 0202 	add.w	r2, r8, #2
 800adfe:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae00:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ae04:	e785      	b.n	800ad12 <_strtod_l+0x1a2>
 800ae06:	f04f 0c01 	mov.w	ip, #1
 800ae0a:	e7f6      	b.n	800adfa <_strtod_l+0x28a>
 800ae0c:	0800ee58 	.word	0x0800ee58
 800ae10:	0800ec0c 	.word	0x0800ec0c
 800ae14:	7ff00000 	.word	0x7ff00000
 800ae18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae1a:	1c51      	adds	r1, r2, #1
 800ae1c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ae1e:	7852      	ldrb	r2, [r2, #1]
 800ae20:	2a30      	cmp	r2, #48	; 0x30
 800ae22:	d0f9      	beq.n	800ae18 <_strtod_l+0x2a8>
 800ae24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae28:	2908      	cmp	r1, #8
 800ae2a:	f63f af79 	bhi.w	800ad20 <_strtod_l+0x1b0>
 800ae2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ae32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae34:	9206      	str	r2, [sp, #24]
 800ae36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae38:	1c51      	adds	r1, r2, #1
 800ae3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800ae3c:	7852      	ldrb	r2, [r2, #1]
 800ae3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ae42:	2e09      	cmp	r6, #9
 800ae44:	d937      	bls.n	800aeb6 <_strtod_l+0x346>
 800ae46:	9e06      	ldr	r6, [sp, #24]
 800ae48:	1b89      	subs	r1, r1, r6
 800ae4a:	2908      	cmp	r1, #8
 800ae4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ae50:	dc02      	bgt.n	800ae58 <_strtod_l+0x2e8>
 800ae52:	4576      	cmp	r6, lr
 800ae54:	bfa8      	it	ge
 800ae56:	4676      	movge	r6, lr
 800ae58:	f1bc 0f00 	cmp.w	ip, #0
 800ae5c:	d000      	beq.n	800ae60 <_strtod_l+0x2f0>
 800ae5e:	4276      	negs	r6, r6
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	d14d      	bne.n	800af00 <_strtod_l+0x390>
 800ae64:	9904      	ldr	r1, [sp, #16]
 800ae66:	4301      	orrs	r1, r0
 800ae68:	f47f aec6 	bne.w	800abf8 <_strtod_l+0x88>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f47f aee1 	bne.w	800ac34 <_strtod_l+0xc4>
 800ae72:	2a69      	cmp	r2, #105	; 0x69
 800ae74:	d027      	beq.n	800aec6 <_strtod_l+0x356>
 800ae76:	dc24      	bgt.n	800aec2 <_strtod_l+0x352>
 800ae78:	2a49      	cmp	r2, #73	; 0x49
 800ae7a:	d024      	beq.n	800aec6 <_strtod_l+0x356>
 800ae7c:	2a4e      	cmp	r2, #78	; 0x4e
 800ae7e:	f47f aed9 	bne.w	800ac34 <_strtod_l+0xc4>
 800ae82:	499f      	ldr	r1, [pc, #636]	; (800b100 <_strtod_l+0x590>)
 800ae84:	a817      	add	r0, sp, #92	; 0x5c
 800ae86:	f001 fe3d 	bl	800cb04 <__match>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	f43f aed2 	beq.w	800ac34 <_strtod_l+0xc4>
 800ae90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b28      	cmp	r3, #40	; 0x28
 800ae96:	d12d      	bne.n	800aef4 <_strtod_l+0x384>
 800ae98:	499a      	ldr	r1, [pc, #616]	; (800b104 <_strtod_l+0x594>)
 800ae9a:	aa1a      	add	r2, sp, #104	; 0x68
 800ae9c:	a817      	add	r0, sp, #92	; 0x5c
 800ae9e:	f001 fe45 	bl	800cb2c <__hexnan>
 800aea2:	2805      	cmp	r0, #5
 800aea4:	d126      	bne.n	800aef4 <_strtod_l+0x384>
 800aea6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aea8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800aeac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aeb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aeb4:	e6a0      	b.n	800abf8 <_strtod_l+0x88>
 800aeb6:	210a      	movs	r1, #10
 800aeb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800aebc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aec0:	e7b9      	b.n	800ae36 <_strtod_l+0x2c6>
 800aec2:	2a6e      	cmp	r2, #110	; 0x6e
 800aec4:	e7db      	b.n	800ae7e <_strtod_l+0x30e>
 800aec6:	4990      	ldr	r1, [pc, #576]	; (800b108 <_strtod_l+0x598>)
 800aec8:	a817      	add	r0, sp, #92	; 0x5c
 800aeca:	f001 fe1b 	bl	800cb04 <__match>
 800aece:	2800      	cmp	r0, #0
 800aed0:	f43f aeb0 	beq.w	800ac34 <_strtod_l+0xc4>
 800aed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aed6:	498d      	ldr	r1, [pc, #564]	; (800b10c <_strtod_l+0x59c>)
 800aed8:	3b01      	subs	r3, #1
 800aeda:	a817      	add	r0, sp, #92	; 0x5c
 800aedc:	9317      	str	r3, [sp, #92]	; 0x5c
 800aede:	f001 fe11 	bl	800cb04 <__match>
 800aee2:	b910      	cbnz	r0, 800aeea <_strtod_l+0x37a>
 800aee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aee6:	3301      	adds	r3, #1
 800aee8:	9317      	str	r3, [sp, #92]	; 0x5c
 800aeea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b11c <_strtod_l+0x5ac>
 800aeee:	f04f 0a00 	mov.w	sl, #0
 800aef2:	e681      	b.n	800abf8 <_strtod_l+0x88>
 800aef4:	4886      	ldr	r0, [pc, #536]	; (800b110 <_strtod_l+0x5a0>)
 800aef6:	f002 fde7 	bl	800dac8 <nan>
 800aefa:	ec5b ab10 	vmov	sl, fp, d0
 800aefe:	e67b      	b.n	800abf8 <_strtod_l+0x88>
 800af00:	9b05      	ldr	r3, [sp, #20]
 800af02:	9807      	ldr	r0, [sp, #28]
 800af04:	1af3      	subs	r3, r6, r3
 800af06:	2f00      	cmp	r7, #0
 800af08:	bf08      	it	eq
 800af0a:	462f      	moveq	r7, r5
 800af0c:	2d10      	cmp	r5, #16
 800af0e:	9306      	str	r3, [sp, #24]
 800af10:	46a8      	mov	r8, r5
 800af12:	bfa8      	it	ge
 800af14:	f04f 0810 	movge.w	r8, #16
 800af18:	f7f5 fb14 	bl	8000544 <__aeabi_ui2d>
 800af1c:	2d09      	cmp	r5, #9
 800af1e:	4682      	mov	sl, r0
 800af20:	468b      	mov	fp, r1
 800af22:	dd13      	ble.n	800af4c <_strtod_l+0x3dc>
 800af24:	4b7b      	ldr	r3, [pc, #492]	; (800b114 <_strtod_l+0x5a4>)
 800af26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af2e:	f7f5 fb83 	bl	8000638 <__aeabi_dmul>
 800af32:	4682      	mov	sl, r0
 800af34:	4648      	mov	r0, r9
 800af36:	468b      	mov	fp, r1
 800af38:	f7f5 fb04 	bl	8000544 <__aeabi_ui2d>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4650      	mov	r0, sl
 800af42:	4659      	mov	r1, fp
 800af44:	f7f5 f9c2 	bl	80002cc <__adddf3>
 800af48:	4682      	mov	sl, r0
 800af4a:	468b      	mov	fp, r1
 800af4c:	2d0f      	cmp	r5, #15
 800af4e:	dc38      	bgt.n	800afc2 <_strtod_l+0x452>
 800af50:	9b06      	ldr	r3, [sp, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f43f ae50 	beq.w	800abf8 <_strtod_l+0x88>
 800af58:	dd24      	ble.n	800afa4 <_strtod_l+0x434>
 800af5a:	2b16      	cmp	r3, #22
 800af5c:	dc0b      	bgt.n	800af76 <_strtod_l+0x406>
 800af5e:	496d      	ldr	r1, [pc, #436]	; (800b114 <_strtod_l+0x5a4>)
 800af60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af68:	4652      	mov	r2, sl
 800af6a:	465b      	mov	r3, fp
 800af6c:	f7f5 fb64 	bl	8000638 <__aeabi_dmul>
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	e640      	b.n	800abf8 <_strtod_l+0x88>
 800af76:	9a06      	ldr	r2, [sp, #24]
 800af78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800af7c:	4293      	cmp	r3, r2
 800af7e:	db20      	blt.n	800afc2 <_strtod_l+0x452>
 800af80:	4c64      	ldr	r4, [pc, #400]	; (800b114 <_strtod_l+0x5a4>)
 800af82:	f1c5 050f 	rsb	r5, r5, #15
 800af86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af8a:	4652      	mov	r2, sl
 800af8c:	465b      	mov	r3, fp
 800af8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af92:	f7f5 fb51 	bl	8000638 <__aeabi_dmul>
 800af96:	9b06      	ldr	r3, [sp, #24]
 800af98:	1b5d      	subs	r5, r3, r5
 800af9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afa2:	e7e3      	b.n	800af6c <_strtod_l+0x3fc>
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	3316      	adds	r3, #22
 800afa8:	db0b      	blt.n	800afc2 <_strtod_l+0x452>
 800afaa:	9b05      	ldr	r3, [sp, #20]
 800afac:	1b9e      	subs	r6, r3, r6
 800afae:	4b59      	ldr	r3, [pc, #356]	; (800b114 <_strtod_l+0x5a4>)
 800afb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800afb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f7f5 fc66 	bl	800088c <__aeabi_ddiv>
 800afc0:	e7d6      	b.n	800af70 <_strtod_l+0x400>
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	eba5 0808 	sub.w	r8, r5, r8
 800afc8:	4498      	add	r8, r3
 800afca:	f1b8 0f00 	cmp.w	r8, #0
 800afce:	dd74      	ble.n	800b0ba <_strtod_l+0x54a>
 800afd0:	f018 030f 	ands.w	r3, r8, #15
 800afd4:	d00a      	beq.n	800afec <_strtod_l+0x47c>
 800afd6:	494f      	ldr	r1, [pc, #316]	; (800b114 <_strtod_l+0x5a4>)
 800afd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afdc:	4652      	mov	r2, sl
 800afde:	465b      	mov	r3, fp
 800afe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe4:	f7f5 fb28 	bl	8000638 <__aeabi_dmul>
 800afe8:	4682      	mov	sl, r0
 800afea:	468b      	mov	fp, r1
 800afec:	f038 080f 	bics.w	r8, r8, #15
 800aff0:	d04f      	beq.n	800b092 <_strtod_l+0x522>
 800aff2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aff6:	dd22      	ble.n	800b03e <_strtod_l+0x4ce>
 800aff8:	2500      	movs	r5, #0
 800affa:	462e      	mov	r6, r5
 800affc:	9507      	str	r5, [sp, #28]
 800affe:	9505      	str	r5, [sp, #20]
 800b000:	2322      	movs	r3, #34	; 0x22
 800b002:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b11c <_strtod_l+0x5ac>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	f04f 0a00 	mov.w	sl, #0
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f43f adf2 	beq.w	800abf8 <_strtod_l+0x88>
 800b014:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b016:	4620      	mov	r0, r4
 800b018:	f001 fe82 	bl	800cd20 <_Bfree>
 800b01c:	9905      	ldr	r1, [sp, #20]
 800b01e:	4620      	mov	r0, r4
 800b020:	f001 fe7e 	bl	800cd20 <_Bfree>
 800b024:	4631      	mov	r1, r6
 800b026:	4620      	mov	r0, r4
 800b028:	f001 fe7a 	bl	800cd20 <_Bfree>
 800b02c:	9907      	ldr	r1, [sp, #28]
 800b02e:	4620      	mov	r0, r4
 800b030:	f001 fe76 	bl	800cd20 <_Bfree>
 800b034:	4629      	mov	r1, r5
 800b036:	4620      	mov	r0, r4
 800b038:	f001 fe72 	bl	800cd20 <_Bfree>
 800b03c:	e5dc      	b.n	800abf8 <_strtod_l+0x88>
 800b03e:	4b36      	ldr	r3, [pc, #216]	; (800b118 <_strtod_l+0x5a8>)
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	2300      	movs	r3, #0
 800b044:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b048:	4650      	mov	r0, sl
 800b04a:	4659      	mov	r1, fp
 800b04c:	4699      	mov	r9, r3
 800b04e:	f1b8 0f01 	cmp.w	r8, #1
 800b052:	dc21      	bgt.n	800b098 <_strtod_l+0x528>
 800b054:	b10b      	cbz	r3, 800b05a <_strtod_l+0x4ea>
 800b056:	4682      	mov	sl, r0
 800b058:	468b      	mov	fp, r1
 800b05a:	4b2f      	ldr	r3, [pc, #188]	; (800b118 <_strtod_l+0x5a8>)
 800b05c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b060:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b064:	4652      	mov	r2, sl
 800b066:	465b      	mov	r3, fp
 800b068:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b06c:	f7f5 fae4 	bl	8000638 <__aeabi_dmul>
 800b070:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <_strtod_l+0x5ac>)
 800b072:	460a      	mov	r2, r1
 800b074:	400b      	ands	r3, r1
 800b076:	492a      	ldr	r1, [pc, #168]	; (800b120 <_strtod_l+0x5b0>)
 800b078:	428b      	cmp	r3, r1
 800b07a:	4682      	mov	sl, r0
 800b07c:	d8bc      	bhi.n	800aff8 <_strtod_l+0x488>
 800b07e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b082:	428b      	cmp	r3, r1
 800b084:	bf86      	itte	hi
 800b086:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b124 <_strtod_l+0x5b4>
 800b08a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b08e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b092:	2300      	movs	r3, #0
 800b094:	9304      	str	r3, [sp, #16]
 800b096:	e084      	b.n	800b1a2 <_strtod_l+0x632>
 800b098:	f018 0f01 	tst.w	r8, #1
 800b09c:	d005      	beq.n	800b0aa <_strtod_l+0x53a>
 800b09e:	9b04      	ldr	r3, [sp, #16]
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 fac8 	bl	8000638 <__aeabi_dmul>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	9a04      	ldr	r2, [sp, #16]
 800b0ac:	3208      	adds	r2, #8
 800b0ae:	f109 0901 	add.w	r9, r9, #1
 800b0b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0b6:	9204      	str	r2, [sp, #16]
 800b0b8:	e7c9      	b.n	800b04e <_strtod_l+0x4de>
 800b0ba:	d0ea      	beq.n	800b092 <_strtod_l+0x522>
 800b0bc:	f1c8 0800 	rsb	r8, r8, #0
 800b0c0:	f018 020f 	ands.w	r2, r8, #15
 800b0c4:	d00a      	beq.n	800b0dc <_strtod_l+0x56c>
 800b0c6:	4b13      	ldr	r3, [pc, #76]	; (800b114 <_strtod_l+0x5a4>)
 800b0c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f7f5 fbda 	bl	800088c <__aeabi_ddiv>
 800b0d8:	4682      	mov	sl, r0
 800b0da:	468b      	mov	fp, r1
 800b0dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b0e0:	d0d7      	beq.n	800b092 <_strtod_l+0x522>
 800b0e2:	f1b8 0f1f 	cmp.w	r8, #31
 800b0e6:	dd1f      	ble.n	800b128 <_strtod_l+0x5b8>
 800b0e8:	2500      	movs	r5, #0
 800b0ea:	462e      	mov	r6, r5
 800b0ec:	9507      	str	r5, [sp, #28]
 800b0ee:	9505      	str	r5, [sp, #20]
 800b0f0:	2322      	movs	r3, #34	; 0x22
 800b0f2:	f04f 0a00 	mov.w	sl, #0
 800b0f6:	f04f 0b00 	mov.w	fp, #0
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	e786      	b.n	800b00c <_strtod_l+0x49c>
 800b0fe:	bf00      	nop
 800b100:	0800ebdd 	.word	0x0800ebdd
 800b104:	0800ec20 	.word	0x0800ec20
 800b108:	0800ebd5 	.word	0x0800ebd5
 800b10c:	0800ed64 	.word	0x0800ed64
 800b110:	0800f010 	.word	0x0800f010
 800b114:	0800eef0 	.word	0x0800eef0
 800b118:	0800eec8 	.word	0x0800eec8
 800b11c:	7ff00000 	.word	0x7ff00000
 800b120:	7ca00000 	.word	0x7ca00000
 800b124:	7fefffff 	.word	0x7fefffff
 800b128:	f018 0310 	ands.w	r3, r8, #16
 800b12c:	bf18      	it	ne
 800b12e:	236a      	movne	r3, #106	; 0x6a
 800b130:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b4e0 <_strtod_l+0x970>
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	4650      	mov	r0, sl
 800b138:	4659      	mov	r1, fp
 800b13a:	2300      	movs	r3, #0
 800b13c:	f018 0f01 	tst.w	r8, #1
 800b140:	d004      	beq.n	800b14c <_strtod_l+0x5dc>
 800b142:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b146:	f7f5 fa77 	bl	8000638 <__aeabi_dmul>
 800b14a:	2301      	movs	r3, #1
 800b14c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b150:	f109 0908 	add.w	r9, r9, #8
 800b154:	d1f2      	bne.n	800b13c <_strtod_l+0x5cc>
 800b156:	b10b      	cbz	r3, 800b15c <_strtod_l+0x5ec>
 800b158:	4682      	mov	sl, r0
 800b15a:	468b      	mov	fp, r1
 800b15c:	9b04      	ldr	r3, [sp, #16]
 800b15e:	b1c3      	cbz	r3, 800b192 <_strtod_l+0x622>
 800b160:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b164:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b168:	2b00      	cmp	r3, #0
 800b16a:	4659      	mov	r1, fp
 800b16c:	dd11      	ble.n	800b192 <_strtod_l+0x622>
 800b16e:	2b1f      	cmp	r3, #31
 800b170:	f340 8124 	ble.w	800b3bc <_strtod_l+0x84c>
 800b174:	2b34      	cmp	r3, #52	; 0x34
 800b176:	bfde      	ittt	le
 800b178:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b17c:	f04f 33ff 	movle.w	r3, #4294967295
 800b180:	fa03 f202 	lslle.w	r2, r3, r2
 800b184:	f04f 0a00 	mov.w	sl, #0
 800b188:	bfcc      	ite	gt
 800b18a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b18e:	ea02 0b01 	andle.w	fp, r2, r1
 800b192:	2200      	movs	r2, #0
 800b194:	2300      	movs	r3, #0
 800b196:	4650      	mov	r0, sl
 800b198:	4659      	mov	r1, fp
 800b19a:	f7f5 fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1a2      	bne.n	800b0e8 <_strtod_l+0x578>
 800b1a2:	9b07      	ldr	r3, [sp, #28]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	9908      	ldr	r1, [sp, #32]
 800b1a8:	462b      	mov	r3, r5
 800b1aa:	463a      	mov	r2, r7
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f001 fe1f 	bl	800cdf0 <__s2b>
 800b1b2:	9007      	str	r0, [sp, #28]
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	f43f af1f 	beq.w	800aff8 <_strtod_l+0x488>
 800b1ba:	9b05      	ldr	r3, [sp, #20]
 800b1bc:	1b9e      	subs	r6, r3, r6
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bfb4      	ite	lt
 800b1c4:	4633      	movlt	r3, r6
 800b1c6:	2300      	movge	r3, #0
 800b1c8:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ca:	9b06      	ldr	r3, [sp, #24]
 800b1cc:	2500      	movs	r5, #0
 800b1ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b1d2:	9312      	str	r3, [sp, #72]	; 0x48
 800b1d4:	462e      	mov	r6, r5
 800b1d6:	9b07      	ldr	r3, [sp, #28]
 800b1d8:	4620      	mov	r0, r4
 800b1da:	6859      	ldr	r1, [r3, #4]
 800b1dc:	f001 fd60 	bl	800cca0 <_Balloc>
 800b1e0:	9005      	str	r0, [sp, #20]
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f43f af0c 	beq.w	800b000 <_strtod_l+0x490>
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	691a      	ldr	r2, [r3, #16]
 800b1ec:	3202      	adds	r2, #2
 800b1ee:	f103 010c 	add.w	r1, r3, #12
 800b1f2:	0092      	lsls	r2, r2, #2
 800b1f4:	300c      	adds	r0, #12
 800b1f6:	f7fe fdef 	bl	8009dd8 <memcpy>
 800b1fa:	ec4b ab10 	vmov	d0, sl, fp
 800b1fe:	aa1a      	add	r2, sp, #104	; 0x68
 800b200:	a919      	add	r1, sp, #100	; 0x64
 800b202:	4620      	mov	r0, r4
 800b204:	f002 f93a 	bl	800d47c <__d2b>
 800b208:	ec4b ab18 	vmov	d8, sl, fp
 800b20c:	9018      	str	r0, [sp, #96]	; 0x60
 800b20e:	2800      	cmp	r0, #0
 800b210:	f43f aef6 	beq.w	800b000 <_strtod_l+0x490>
 800b214:	2101      	movs	r1, #1
 800b216:	4620      	mov	r0, r4
 800b218:	f001 fe84 	bl	800cf24 <__i2b>
 800b21c:	4606      	mov	r6, r0
 800b21e:	2800      	cmp	r0, #0
 800b220:	f43f aeee 	beq.w	800b000 <_strtod_l+0x490>
 800b224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b226:	9904      	ldr	r1, [sp, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bfab      	itete	ge
 800b22c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b22e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b230:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b232:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b236:	bfac      	ite	ge
 800b238:	eb03 0902 	addge.w	r9, r3, r2
 800b23c:	1ad7      	sublt	r7, r2, r3
 800b23e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b240:	eba3 0801 	sub.w	r8, r3, r1
 800b244:	4490      	add	r8, r2
 800b246:	4ba1      	ldr	r3, [pc, #644]	; (800b4cc <_strtod_l+0x95c>)
 800b248:	f108 38ff 	add.w	r8, r8, #4294967295
 800b24c:	4598      	cmp	r8, r3
 800b24e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b252:	f280 80c7 	bge.w	800b3e4 <_strtod_l+0x874>
 800b256:	eba3 0308 	sub.w	r3, r3, r8
 800b25a:	2b1f      	cmp	r3, #31
 800b25c:	eba2 0203 	sub.w	r2, r2, r3
 800b260:	f04f 0101 	mov.w	r1, #1
 800b264:	f300 80b1 	bgt.w	800b3ca <_strtod_l+0x85a>
 800b268:	fa01 f303 	lsl.w	r3, r1, r3
 800b26c:	930d      	str	r3, [sp, #52]	; 0x34
 800b26e:	2300      	movs	r3, #0
 800b270:	9308      	str	r3, [sp, #32]
 800b272:	eb09 0802 	add.w	r8, r9, r2
 800b276:	9b04      	ldr	r3, [sp, #16]
 800b278:	45c1      	cmp	r9, r8
 800b27a:	4417      	add	r7, r2
 800b27c:	441f      	add	r7, r3
 800b27e:	464b      	mov	r3, r9
 800b280:	bfa8      	it	ge
 800b282:	4643      	movge	r3, r8
 800b284:	42bb      	cmp	r3, r7
 800b286:	bfa8      	it	ge
 800b288:	463b      	movge	r3, r7
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bfc2      	ittt	gt
 800b28e:	eba8 0803 	subgt.w	r8, r8, r3
 800b292:	1aff      	subgt	r7, r7, r3
 800b294:	eba9 0903 	subgt.w	r9, r9, r3
 800b298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dd17      	ble.n	800b2ce <_strtod_l+0x75e>
 800b29e:	4631      	mov	r1, r6
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f001 fefe 	bl	800d0a4 <__pow5mult>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	f43f aea8 	beq.w	800b000 <_strtod_l+0x490>
 800b2b0:	4601      	mov	r1, r0
 800b2b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f001 fe4b 	bl	800cf50 <__multiply>
 800b2ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f43f ae9f 	beq.w	800b000 <_strtod_l+0x490>
 800b2c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f001 fd2b 	bl	800cd20 <_Bfree>
 800b2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2cc:	9318      	str	r3, [sp, #96]	; 0x60
 800b2ce:	f1b8 0f00 	cmp.w	r8, #0
 800b2d2:	f300 808c 	bgt.w	800b3ee <_strtod_l+0x87e>
 800b2d6:	9b06      	ldr	r3, [sp, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	dd08      	ble.n	800b2ee <_strtod_l+0x77e>
 800b2dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2de:	9905      	ldr	r1, [sp, #20]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f001 fedf 	bl	800d0a4 <__pow5mult>
 800b2e6:	9005      	str	r0, [sp, #20]
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f43f ae89 	beq.w	800b000 <_strtod_l+0x490>
 800b2ee:	2f00      	cmp	r7, #0
 800b2f0:	dd08      	ble.n	800b304 <_strtod_l+0x794>
 800b2f2:	9905      	ldr	r1, [sp, #20]
 800b2f4:	463a      	mov	r2, r7
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f001 ff2e 	bl	800d158 <__lshift>
 800b2fc:	9005      	str	r0, [sp, #20]
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f43f ae7e 	beq.w	800b000 <_strtod_l+0x490>
 800b304:	f1b9 0f00 	cmp.w	r9, #0
 800b308:	dd08      	ble.n	800b31c <_strtod_l+0x7ac>
 800b30a:	4631      	mov	r1, r6
 800b30c:	464a      	mov	r2, r9
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 ff22 	bl	800d158 <__lshift>
 800b314:	4606      	mov	r6, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f ae72 	beq.w	800b000 <_strtod_l+0x490>
 800b31c:	9a05      	ldr	r2, [sp, #20]
 800b31e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b320:	4620      	mov	r0, r4
 800b322:	f001 ffa5 	bl	800d270 <__mdiff>
 800b326:	4605      	mov	r5, r0
 800b328:	2800      	cmp	r0, #0
 800b32a:	f43f ae69 	beq.w	800b000 <_strtod_l+0x490>
 800b32e:	68c3      	ldr	r3, [r0, #12]
 800b330:	930b      	str	r3, [sp, #44]	; 0x2c
 800b332:	2300      	movs	r3, #0
 800b334:	60c3      	str	r3, [r0, #12]
 800b336:	4631      	mov	r1, r6
 800b338:	f001 ff7e 	bl	800d238 <__mcmp>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	da60      	bge.n	800b402 <_strtod_l+0x892>
 800b340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b342:	ea53 030a 	orrs.w	r3, r3, sl
 800b346:	f040 8082 	bne.w	800b44e <_strtod_l+0x8de>
 800b34a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d17d      	bne.n	800b44e <_strtod_l+0x8de>
 800b352:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b356:	0d1b      	lsrs	r3, r3, #20
 800b358:	051b      	lsls	r3, r3, #20
 800b35a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b35e:	d976      	bls.n	800b44e <_strtod_l+0x8de>
 800b360:	696b      	ldr	r3, [r5, #20]
 800b362:	b913      	cbnz	r3, 800b36a <_strtod_l+0x7fa>
 800b364:	692b      	ldr	r3, [r5, #16]
 800b366:	2b01      	cmp	r3, #1
 800b368:	dd71      	ble.n	800b44e <_strtod_l+0x8de>
 800b36a:	4629      	mov	r1, r5
 800b36c:	2201      	movs	r2, #1
 800b36e:	4620      	mov	r0, r4
 800b370:	f001 fef2 	bl	800d158 <__lshift>
 800b374:	4631      	mov	r1, r6
 800b376:	4605      	mov	r5, r0
 800b378:	f001 ff5e 	bl	800d238 <__mcmp>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	dd66      	ble.n	800b44e <_strtod_l+0x8de>
 800b380:	9904      	ldr	r1, [sp, #16]
 800b382:	4a53      	ldr	r2, [pc, #332]	; (800b4d0 <_strtod_l+0x960>)
 800b384:	465b      	mov	r3, fp
 800b386:	2900      	cmp	r1, #0
 800b388:	f000 8081 	beq.w	800b48e <_strtod_l+0x91e>
 800b38c:	ea02 010b 	and.w	r1, r2, fp
 800b390:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b394:	dc7b      	bgt.n	800b48e <_strtod_l+0x91e>
 800b396:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b39a:	f77f aea9 	ble.w	800b0f0 <_strtod_l+0x580>
 800b39e:	4b4d      	ldr	r3, [pc, #308]	; (800b4d4 <_strtod_l+0x964>)
 800b3a0:	4650      	mov	r0, sl
 800b3a2:	4659      	mov	r1, fp
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f7f5 f947 	bl	8000638 <__aeabi_dmul>
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4303      	orrs	r3, r0
 800b3ae:	bf08      	it	eq
 800b3b0:	2322      	moveq	r3, #34	; 0x22
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	468b      	mov	fp, r1
 800b3b6:	bf08      	it	eq
 800b3b8:	6023      	streq	r3, [r4, #0]
 800b3ba:	e62b      	b.n	800b014 <_strtod_l+0x4a4>
 800b3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	ea03 0a0a 	and.w	sl, r3, sl
 800b3c8:	e6e3      	b.n	800b192 <_strtod_l+0x622>
 800b3ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b3ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b3d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b3d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b3da:	fa01 f308 	lsl.w	r3, r1, r8
 800b3de:	9308      	str	r3, [sp, #32]
 800b3e0:	910d      	str	r1, [sp, #52]	; 0x34
 800b3e2:	e746      	b.n	800b272 <_strtod_l+0x702>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9308      	str	r3, [sp, #32]
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b3ec:	e741      	b.n	800b272 <_strtod_l+0x702>
 800b3ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f001 feb0 	bl	800d158 <__lshift>
 800b3f8:	9018      	str	r0, [sp, #96]	; 0x60
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f47f af6b 	bne.w	800b2d6 <_strtod_l+0x766>
 800b400:	e5fe      	b.n	800b000 <_strtod_l+0x490>
 800b402:	465f      	mov	r7, fp
 800b404:	d16e      	bne.n	800b4e4 <_strtod_l+0x974>
 800b406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b408:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b40c:	b342      	cbz	r2, 800b460 <_strtod_l+0x8f0>
 800b40e:	4a32      	ldr	r2, [pc, #200]	; (800b4d8 <_strtod_l+0x968>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d128      	bne.n	800b466 <_strtod_l+0x8f6>
 800b414:	9b04      	ldr	r3, [sp, #16]
 800b416:	4651      	mov	r1, sl
 800b418:	b1eb      	cbz	r3, 800b456 <_strtod_l+0x8e6>
 800b41a:	4b2d      	ldr	r3, [pc, #180]	; (800b4d0 <_strtod_l+0x960>)
 800b41c:	403b      	ands	r3, r7
 800b41e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b422:	f04f 32ff 	mov.w	r2, #4294967295
 800b426:	d819      	bhi.n	800b45c <_strtod_l+0x8ec>
 800b428:	0d1b      	lsrs	r3, r3, #20
 800b42a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b42e:	fa02 f303 	lsl.w	r3, r2, r3
 800b432:	4299      	cmp	r1, r3
 800b434:	d117      	bne.n	800b466 <_strtod_l+0x8f6>
 800b436:	4b29      	ldr	r3, [pc, #164]	; (800b4dc <_strtod_l+0x96c>)
 800b438:	429f      	cmp	r7, r3
 800b43a:	d102      	bne.n	800b442 <_strtod_l+0x8d2>
 800b43c:	3101      	adds	r1, #1
 800b43e:	f43f addf 	beq.w	800b000 <_strtod_l+0x490>
 800b442:	4b23      	ldr	r3, [pc, #140]	; (800b4d0 <_strtod_l+0x960>)
 800b444:	403b      	ands	r3, r7
 800b446:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b44a:	f04f 0a00 	mov.w	sl, #0
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1a4      	bne.n	800b39e <_strtod_l+0x82e>
 800b454:	e5de      	b.n	800b014 <_strtod_l+0x4a4>
 800b456:	f04f 33ff 	mov.w	r3, #4294967295
 800b45a:	e7ea      	b.n	800b432 <_strtod_l+0x8c2>
 800b45c:	4613      	mov	r3, r2
 800b45e:	e7e8      	b.n	800b432 <_strtod_l+0x8c2>
 800b460:	ea53 030a 	orrs.w	r3, r3, sl
 800b464:	d08c      	beq.n	800b380 <_strtod_l+0x810>
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	b1db      	cbz	r3, 800b4a2 <_strtod_l+0x932>
 800b46a:	423b      	tst	r3, r7
 800b46c:	d0ef      	beq.n	800b44e <_strtod_l+0x8de>
 800b46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b470:	9a04      	ldr	r2, [sp, #16]
 800b472:	4650      	mov	r0, sl
 800b474:	4659      	mov	r1, fp
 800b476:	b1c3      	cbz	r3, 800b4aa <_strtod_l+0x93a>
 800b478:	f7ff fb5e 	bl	800ab38 <sulp>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	ec51 0b18 	vmov	r0, r1, d8
 800b484:	f7f4 ff22 	bl	80002cc <__adddf3>
 800b488:	4682      	mov	sl, r0
 800b48a:	468b      	mov	fp, r1
 800b48c:	e7df      	b.n	800b44e <_strtod_l+0x8de>
 800b48e:	4013      	ands	r3, r2
 800b490:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b494:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b498:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b49c:	f04f 3aff 	mov.w	sl, #4294967295
 800b4a0:	e7d5      	b.n	800b44e <_strtod_l+0x8de>
 800b4a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4a4:	ea13 0f0a 	tst.w	r3, sl
 800b4a8:	e7e0      	b.n	800b46c <_strtod_l+0x8fc>
 800b4aa:	f7ff fb45 	bl	800ab38 <sulp>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	ec51 0b18 	vmov	r0, r1, d8
 800b4b6:	f7f4 ff07 	bl	80002c8 <__aeabi_dsub>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4682      	mov	sl, r0
 800b4c0:	468b      	mov	fp, r1
 800b4c2:	f7f5 fb21 	bl	8000b08 <__aeabi_dcmpeq>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d0c1      	beq.n	800b44e <_strtod_l+0x8de>
 800b4ca:	e611      	b.n	800b0f0 <_strtod_l+0x580>
 800b4cc:	fffffc02 	.word	0xfffffc02
 800b4d0:	7ff00000 	.word	0x7ff00000
 800b4d4:	39500000 	.word	0x39500000
 800b4d8:	000fffff 	.word	0x000fffff
 800b4dc:	7fefffff 	.word	0x7fefffff
 800b4e0:	0800ec38 	.word	0x0800ec38
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f002 f824 	bl	800d534 <__ratio>
 800b4ec:	ec59 8b10 	vmov	r8, r9, d0
 800b4f0:	ee10 0a10 	vmov	r0, s0
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	f7f5 fb18 	bl	8000b30 <__aeabi_dcmple>
 800b500:	2800      	cmp	r0, #0
 800b502:	d07a      	beq.n	800b5fa <_strtod_l+0xa8a>
 800b504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b506:	2b00      	cmp	r3, #0
 800b508:	d04a      	beq.n	800b5a0 <_strtod_l+0xa30>
 800b50a:	4b95      	ldr	r3, [pc, #596]	; (800b760 <_strtod_l+0xbf0>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b512:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b760 <_strtod_l+0xbf0>
 800b516:	f04f 0800 	mov.w	r8, #0
 800b51a:	4b92      	ldr	r3, [pc, #584]	; (800b764 <_strtod_l+0xbf4>)
 800b51c:	403b      	ands	r3, r7
 800b51e:	930d      	str	r3, [sp, #52]	; 0x34
 800b520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b522:	4b91      	ldr	r3, [pc, #580]	; (800b768 <_strtod_l+0xbf8>)
 800b524:	429a      	cmp	r2, r3
 800b526:	f040 80b0 	bne.w	800b68a <_strtod_l+0xb1a>
 800b52a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b52e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b532:	ec4b ab10 	vmov	d0, sl, fp
 800b536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b53a:	f001 ff23 	bl	800d384 <__ulp>
 800b53e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b542:	ec53 2b10 	vmov	r2, r3, d0
 800b546:	f7f5 f877 	bl	8000638 <__aeabi_dmul>
 800b54a:	4652      	mov	r2, sl
 800b54c:	465b      	mov	r3, fp
 800b54e:	f7f4 febd 	bl	80002cc <__adddf3>
 800b552:	460b      	mov	r3, r1
 800b554:	4983      	ldr	r1, [pc, #524]	; (800b764 <_strtod_l+0xbf4>)
 800b556:	4a85      	ldr	r2, [pc, #532]	; (800b76c <_strtod_l+0xbfc>)
 800b558:	4019      	ands	r1, r3
 800b55a:	4291      	cmp	r1, r2
 800b55c:	4682      	mov	sl, r0
 800b55e:	d960      	bls.n	800b622 <_strtod_l+0xab2>
 800b560:	ee18 3a90 	vmov	r3, s17
 800b564:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b568:	4293      	cmp	r3, r2
 800b56a:	d104      	bne.n	800b576 <_strtod_l+0xa06>
 800b56c:	ee18 3a10 	vmov	r3, s16
 800b570:	3301      	adds	r3, #1
 800b572:	f43f ad45 	beq.w	800b000 <_strtod_l+0x490>
 800b576:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b778 <_strtod_l+0xc08>
 800b57a:	f04f 3aff 	mov.w	sl, #4294967295
 800b57e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b580:	4620      	mov	r0, r4
 800b582:	f001 fbcd 	bl	800cd20 <_Bfree>
 800b586:	9905      	ldr	r1, [sp, #20]
 800b588:	4620      	mov	r0, r4
 800b58a:	f001 fbc9 	bl	800cd20 <_Bfree>
 800b58e:	4631      	mov	r1, r6
 800b590:	4620      	mov	r0, r4
 800b592:	f001 fbc5 	bl	800cd20 <_Bfree>
 800b596:	4629      	mov	r1, r5
 800b598:	4620      	mov	r0, r4
 800b59a:	f001 fbc1 	bl	800cd20 <_Bfree>
 800b59e:	e61a      	b.n	800b1d6 <_strtod_l+0x666>
 800b5a0:	f1ba 0f00 	cmp.w	sl, #0
 800b5a4:	d11b      	bne.n	800b5de <_strtod_l+0xa6e>
 800b5a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5aa:	b9f3      	cbnz	r3, 800b5ea <_strtod_l+0xa7a>
 800b5ac:	4b6c      	ldr	r3, [pc, #432]	; (800b760 <_strtod_l+0xbf0>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	f7f5 fab2 	bl	8000b1c <__aeabi_dcmplt>
 800b5b8:	b9d0      	cbnz	r0, 800b5f0 <_strtod_l+0xa80>
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	4b6c      	ldr	r3, [pc, #432]	; (800b770 <_strtod_l+0xc00>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f7f5 f839 	bl	8000638 <__aeabi_dmul>
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b5ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b5d2:	9315      	str	r3, [sp, #84]	; 0x54
 800b5d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b5d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5dc:	e79d      	b.n	800b51a <_strtod_l+0x9aa>
 800b5de:	f1ba 0f01 	cmp.w	sl, #1
 800b5e2:	d102      	bne.n	800b5ea <_strtod_l+0xa7a>
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	f43f ad83 	beq.w	800b0f0 <_strtod_l+0x580>
 800b5ea:	4b62      	ldr	r3, [pc, #392]	; (800b774 <_strtod_l+0xc04>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	e78e      	b.n	800b50e <_strtod_l+0x99e>
 800b5f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b770 <_strtod_l+0xc00>
 800b5f4:	f04f 0800 	mov.w	r8, #0
 800b5f8:	e7e7      	b.n	800b5ca <_strtod_l+0xa5a>
 800b5fa:	4b5d      	ldr	r3, [pc, #372]	; (800b770 <_strtod_l+0xc00>)
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	4649      	mov	r1, r9
 800b600:	2200      	movs	r2, #0
 800b602:	f7f5 f819 	bl	8000638 <__aeabi_dmul>
 800b606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b608:	4680      	mov	r8, r0
 800b60a:	4689      	mov	r9, r1
 800b60c:	b933      	cbnz	r3, 800b61c <_strtod_l+0xaac>
 800b60e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b612:	900e      	str	r0, [sp, #56]	; 0x38
 800b614:	930f      	str	r3, [sp, #60]	; 0x3c
 800b616:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b61a:	e7dd      	b.n	800b5d8 <_strtod_l+0xa68>
 800b61c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b620:	e7f9      	b.n	800b616 <_strtod_l+0xaa6>
 800b622:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b626:	9b04      	ldr	r3, [sp, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1a8      	bne.n	800b57e <_strtod_l+0xa0e>
 800b62c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b632:	0d1b      	lsrs	r3, r3, #20
 800b634:	051b      	lsls	r3, r3, #20
 800b636:	429a      	cmp	r2, r3
 800b638:	d1a1      	bne.n	800b57e <_strtod_l+0xa0e>
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f5 fb5b 	bl	8000cf8 <__aeabi_d2lz>
 800b642:	f7f4 ffcb 	bl	80005dc <__aeabi_l2d>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f4 fe3b 	bl	80002c8 <__aeabi_dsub>
 800b652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b658:	ea43 030a 	orr.w	r3, r3, sl
 800b65c:	4313      	orrs	r3, r2
 800b65e:	4680      	mov	r8, r0
 800b660:	4689      	mov	r9, r1
 800b662:	d055      	beq.n	800b710 <_strtod_l+0xba0>
 800b664:	a336      	add	r3, pc, #216	; (adr r3, 800b740 <_strtod_l+0xbd0>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f7f5 fa57 	bl	8000b1c <__aeabi_dcmplt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f47f acd0 	bne.w	800b014 <_strtod_l+0x4a4>
 800b674:	a334      	add	r3, pc, #208	; (adr r3, 800b748 <_strtod_l+0xbd8>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	4640      	mov	r0, r8
 800b67c:	4649      	mov	r1, r9
 800b67e:	f7f5 fa6b 	bl	8000b58 <__aeabi_dcmpgt>
 800b682:	2800      	cmp	r0, #0
 800b684:	f43f af7b 	beq.w	800b57e <_strtod_l+0xa0e>
 800b688:	e4c4      	b.n	800b014 <_strtod_l+0x4a4>
 800b68a:	9b04      	ldr	r3, [sp, #16]
 800b68c:	b333      	cbz	r3, 800b6dc <_strtod_l+0xb6c>
 800b68e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b690:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b694:	d822      	bhi.n	800b6dc <_strtod_l+0xb6c>
 800b696:	a32e      	add	r3, pc, #184	; (adr r3, 800b750 <_strtod_l+0xbe0>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	4640      	mov	r0, r8
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f5 fa46 	bl	8000b30 <__aeabi_dcmple>
 800b6a4:	b1a0      	cbz	r0, 800b6d0 <_strtod_l+0xb60>
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	f7f5 fa9d 	bl	8000be8 <__aeabi_d2uiz>
 800b6ae:	2801      	cmp	r0, #1
 800b6b0:	bf38      	it	cc
 800b6b2:	2001      	movcc	r0, #1
 800b6b4:	f7f4 ff46 	bl	8000544 <__aeabi_ui2d>
 800b6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ba:	4680      	mov	r8, r0
 800b6bc:	4689      	mov	r9, r1
 800b6be:	bb23      	cbnz	r3, 800b70a <_strtod_l+0xb9a>
 800b6c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6c4:	9010      	str	r0, [sp, #64]	; 0x40
 800b6c6:	9311      	str	r3, [sp, #68]	; 0x44
 800b6c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	9309      	str	r3, [sp, #36]	; 0x24
 800b6dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6e0:	eeb0 0a48 	vmov.f32	s0, s16
 800b6e4:	eef0 0a68 	vmov.f32	s1, s17
 800b6e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6ec:	f001 fe4a 	bl	800d384 <__ulp>
 800b6f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6f4:	ec53 2b10 	vmov	r2, r3, d0
 800b6f8:	f7f4 ff9e 	bl	8000638 <__aeabi_dmul>
 800b6fc:	ec53 2b18 	vmov	r2, r3, d8
 800b700:	f7f4 fde4 	bl	80002cc <__adddf3>
 800b704:	4682      	mov	sl, r0
 800b706:	468b      	mov	fp, r1
 800b708:	e78d      	b.n	800b626 <_strtod_l+0xab6>
 800b70a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b70e:	e7db      	b.n	800b6c8 <_strtod_l+0xb58>
 800b710:	a311      	add	r3, pc, #68	; (adr r3, 800b758 <_strtod_l+0xbe8>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f5 fa01 	bl	8000b1c <__aeabi_dcmplt>
 800b71a:	e7b2      	b.n	800b682 <_strtod_l+0xb12>
 800b71c:	2300      	movs	r3, #0
 800b71e:	930a      	str	r3, [sp, #40]	; 0x28
 800b720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b724:	6013      	str	r3, [r2, #0]
 800b726:	f7ff ba6b 	b.w	800ac00 <_strtod_l+0x90>
 800b72a:	2a65      	cmp	r2, #101	; 0x65
 800b72c:	f43f ab5f 	beq.w	800adee <_strtod_l+0x27e>
 800b730:	2a45      	cmp	r2, #69	; 0x45
 800b732:	f43f ab5c 	beq.w	800adee <_strtod_l+0x27e>
 800b736:	2301      	movs	r3, #1
 800b738:	f7ff bb94 	b.w	800ae64 <_strtod_l+0x2f4>
 800b73c:	f3af 8000 	nop.w
 800b740:	94a03595 	.word	0x94a03595
 800b744:	3fdfffff 	.word	0x3fdfffff
 800b748:	35afe535 	.word	0x35afe535
 800b74c:	3fe00000 	.word	0x3fe00000
 800b750:	ffc00000 	.word	0xffc00000
 800b754:	41dfffff 	.word	0x41dfffff
 800b758:	94a03595 	.word	0x94a03595
 800b75c:	3fcfffff 	.word	0x3fcfffff
 800b760:	3ff00000 	.word	0x3ff00000
 800b764:	7ff00000 	.word	0x7ff00000
 800b768:	7fe00000 	.word	0x7fe00000
 800b76c:	7c9fffff 	.word	0x7c9fffff
 800b770:	3fe00000 	.word	0x3fe00000
 800b774:	bff00000 	.word	0xbff00000
 800b778:	7fefffff 	.word	0x7fefffff

0800b77c <_strtod_r>:
 800b77c:	4b01      	ldr	r3, [pc, #4]	; (800b784 <_strtod_r+0x8>)
 800b77e:	f7ff b9f7 	b.w	800ab70 <_strtod_l>
 800b782:	bf00      	nop
 800b784:	20000078 	.word	0x20000078

0800b788 <_strtol_l.constprop.0>:
 800b788:	2b01      	cmp	r3, #1
 800b78a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78e:	d001      	beq.n	800b794 <_strtol_l.constprop.0+0xc>
 800b790:	2b24      	cmp	r3, #36	; 0x24
 800b792:	d906      	bls.n	800b7a2 <_strtol_l.constprop.0+0x1a>
 800b794:	f7fe faf6 	bl	8009d84 <__errno>
 800b798:	2316      	movs	r3, #22
 800b79a:	6003      	str	r3, [r0, #0]
 800b79c:	2000      	movs	r0, #0
 800b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b888 <_strtol_l.constprop.0+0x100>
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	462e      	mov	r6, r5
 800b7aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b7b2:	f017 0708 	ands.w	r7, r7, #8
 800b7b6:	d1f7      	bne.n	800b7a8 <_strtol_l.constprop.0+0x20>
 800b7b8:	2c2d      	cmp	r4, #45	; 0x2d
 800b7ba:	d132      	bne.n	800b822 <_strtol_l.constprop.0+0x9a>
 800b7bc:	782c      	ldrb	r4, [r5, #0]
 800b7be:	2701      	movs	r7, #1
 800b7c0:	1cb5      	adds	r5, r6, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d05b      	beq.n	800b87e <_strtol_l.constprop.0+0xf6>
 800b7c6:	2b10      	cmp	r3, #16
 800b7c8:	d109      	bne.n	800b7de <_strtol_l.constprop.0+0x56>
 800b7ca:	2c30      	cmp	r4, #48	; 0x30
 800b7cc:	d107      	bne.n	800b7de <_strtol_l.constprop.0+0x56>
 800b7ce:	782c      	ldrb	r4, [r5, #0]
 800b7d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b7d4:	2c58      	cmp	r4, #88	; 0x58
 800b7d6:	d14d      	bne.n	800b874 <_strtol_l.constprop.0+0xec>
 800b7d8:	786c      	ldrb	r4, [r5, #1]
 800b7da:	2310      	movs	r3, #16
 800b7dc:	3502      	adds	r5, #2
 800b7de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b7e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7e6:	f04f 0c00 	mov.w	ip, #0
 800b7ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800b7ee:	4666      	mov	r6, ip
 800b7f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b7f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b7f8:	f1be 0f09 	cmp.w	lr, #9
 800b7fc:	d816      	bhi.n	800b82c <_strtol_l.constprop.0+0xa4>
 800b7fe:	4674      	mov	r4, lr
 800b800:	42a3      	cmp	r3, r4
 800b802:	dd24      	ble.n	800b84e <_strtol_l.constprop.0+0xc6>
 800b804:	f1bc 0f00 	cmp.w	ip, #0
 800b808:	db1e      	blt.n	800b848 <_strtol_l.constprop.0+0xc0>
 800b80a:	45b1      	cmp	r9, r6
 800b80c:	d31c      	bcc.n	800b848 <_strtol_l.constprop.0+0xc0>
 800b80e:	d101      	bne.n	800b814 <_strtol_l.constprop.0+0x8c>
 800b810:	45a2      	cmp	sl, r4
 800b812:	db19      	blt.n	800b848 <_strtol_l.constprop.0+0xc0>
 800b814:	fb06 4603 	mla	r6, r6, r3, r4
 800b818:	f04f 0c01 	mov.w	ip, #1
 800b81c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b820:	e7e8      	b.n	800b7f4 <_strtol_l.constprop.0+0x6c>
 800b822:	2c2b      	cmp	r4, #43	; 0x2b
 800b824:	bf04      	itt	eq
 800b826:	782c      	ldrbeq	r4, [r5, #0]
 800b828:	1cb5      	addeq	r5, r6, #2
 800b82a:	e7ca      	b.n	800b7c2 <_strtol_l.constprop.0+0x3a>
 800b82c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b830:	f1be 0f19 	cmp.w	lr, #25
 800b834:	d801      	bhi.n	800b83a <_strtol_l.constprop.0+0xb2>
 800b836:	3c37      	subs	r4, #55	; 0x37
 800b838:	e7e2      	b.n	800b800 <_strtol_l.constprop.0+0x78>
 800b83a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b83e:	f1be 0f19 	cmp.w	lr, #25
 800b842:	d804      	bhi.n	800b84e <_strtol_l.constprop.0+0xc6>
 800b844:	3c57      	subs	r4, #87	; 0x57
 800b846:	e7db      	b.n	800b800 <_strtol_l.constprop.0+0x78>
 800b848:	f04f 3cff 	mov.w	ip, #4294967295
 800b84c:	e7e6      	b.n	800b81c <_strtol_l.constprop.0+0x94>
 800b84e:	f1bc 0f00 	cmp.w	ip, #0
 800b852:	da05      	bge.n	800b860 <_strtol_l.constprop.0+0xd8>
 800b854:	2322      	movs	r3, #34	; 0x22
 800b856:	6003      	str	r3, [r0, #0]
 800b858:	4646      	mov	r6, r8
 800b85a:	b942      	cbnz	r2, 800b86e <_strtol_l.constprop.0+0xe6>
 800b85c:	4630      	mov	r0, r6
 800b85e:	e79e      	b.n	800b79e <_strtol_l.constprop.0+0x16>
 800b860:	b107      	cbz	r7, 800b864 <_strtol_l.constprop.0+0xdc>
 800b862:	4276      	negs	r6, r6
 800b864:	2a00      	cmp	r2, #0
 800b866:	d0f9      	beq.n	800b85c <_strtol_l.constprop.0+0xd4>
 800b868:	f1bc 0f00 	cmp.w	ip, #0
 800b86c:	d000      	beq.n	800b870 <_strtol_l.constprop.0+0xe8>
 800b86e:	1e69      	subs	r1, r5, #1
 800b870:	6011      	str	r1, [r2, #0]
 800b872:	e7f3      	b.n	800b85c <_strtol_l.constprop.0+0xd4>
 800b874:	2430      	movs	r4, #48	; 0x30
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1b1      	bne.n	800b7de <_strtol_l.constprop.0+0x56>
 800b87a:	2308      	movs	r3, #8
 800b87c:	e7af      	b.n	800b7de <_strtol_l.constprop.0+0x56>
 800b87e:	2c30      	cmp	r4, #48	; 0x30
 800b880:	d0a5      	beq.n	800b7ce <_strtol_l.constprop.0+0x46>
 800b882:	230a      	movs	r3, #10
 800b884:	e7ab      	b.n	800b7de <_strtol_l.constprop.0+0x56>
 800b886:	bf00      	nop
 800b888:	0800ec61 	.word	0x0800ec61

0800b88c <_strtol_r>:
 800b88c:	f7ff bf7c 	b.w	800b788 <_strtol_l.constprop.0>

0800b890 <quorem>:
 800b890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	6903      	ldr	r3, [r0, #16]
 800b896:	690c      	ldr	r4, [r1, #16]
 800b898:	42a3      	cmp	r3, r4
 800b89a:	4607      	mov	r7, r0
 800b89c:	f2c0 8081 	blt.w	800b9a2 <quorem+0x112>
 800b8a0:	3c01      	subs	r4, #1
 800b8a2:	f101 0814 	add.w	r8, r1, #20
 800b8a6:	f100 0514 	add.w	r5, r0, #20
 800b8aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b8c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8c8:	d331      	bcc.n	800b92e <quorem+0x9e>
 800b8ca:	f04f 0e00 	mov.w	lr, #0
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	46ac      	mov	ip, r5
 800b8d2:	46f2      	mov	sl, lr
 800b8d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8d8:	b293      	uxth	r3, r2
 800b8da:	fb06 e303 	mla	r3, r6, r3, lr
 800b8de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	ebaa 0303 	sub.w	r3, sl, r3
 800b8e8:	f8dc a000 	ldr.w	sl, [ip]
 800b8ec:	0c12      	lsrs	r2, r2, #16
 800b8ee:	fa13 f38a 	uxtah	r3, r3, sl
 800b8f2:	fb06 e202 	mla	r2, r6, r2, lr
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	9b00      	ldr	r3, [sp, #0]
 800b8fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8fe:	b292      	uxth	r2, r2
 800b900:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b908:	f8bd 3000 	ldrh.w	r3, [sp]
 800b90c:	4581      	cmp	r9, r0
 800b90e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b912:	f84c 3b04 	str.w	r3, [ip], #4
 800b916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b91a:	d2db      	bcs.n	800b8d4 <quorem+0x44>
 800b91c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b920:	b92b      	cbnz	r3, 800b92e <quorem+0x9e>
 800b922:	9b01      	ldr	r3, [sp, #4]
 800b924:	3b04      	subs	r3, #4
 800b926:	429d      	cmp	r5, r3
 800b928:	461a      	mov	r2, r3
 800b92a:	d32e      	bcc.n	800b98a <quorem+0xfa>
 800b92c:	613c      	str	r4, [r7, #16]
 800b92e:	4638      	mov	r0, r7
 800b930:	f001 fc82 	bl	800d238 <__mcmp>
 800b934:	2800      	cmp	r0, #0
 800b936:	db24      	blt.n	800b982 <quorem+0xf2>
 800b938:	3601      	adds	r6, #1
 800b93a:	4628      	mov	r0, r5
 800b93c:	f04f 0c00 	mov.w	ip, #0
 800b940:	f858 2b04 	ldr.w	r2, [r8], #4
 800b944:	f8d0 e000 	ldr.w	lr, [r0]
 800b948:	b293      	uxth	r3, r2
 800b94a:	ebac 0303 	sub.w	r3, ip, r3
 800b94e:	0c12      	lsrs	r2, r2, #16
 800b950:	fa13 f38e 	uxtah	r3, r3, lr
 800b954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b962:	45c1      	cmp	r9, r8
 800b964:	f840 3b04 	str.w	r3, [r0], #4
 800b968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b96c:	d2e8      	bcs.n	800b940 <quorem+0xb0>
 800b96e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b976:	b922      	cbnz	r2, 800b982 <quorem+0xf2>
 800b978:	3b04      	subs	r3, #4
 800b97a:	429d      	cmp	r5, r3
 800b97c:	461a      	mov	r2, r3
 800b97e:	d30a      	bcc.n	800b996 <quorem+0x106>
 800b980:	613c      	str	r4, [r7, #16]
 800b982:	4630      	mov	r0, r6
 800b984:	b003      	add	sp, #12
 800b986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98a:	6812      	ldr	r2, [r2, #0]
 800b98c:	3b04      	subs	r3, #4
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d1cc      	bne.n	800b92c <quorem+0x9c>
 800b992:	3c01      	subs	r4, #1
 800b994:	e7c7      	b.n	800b926 <quorem+0x96>
 800b996:	6812      	ldr	r2, [r2, #0]
 800b998:	3b04      	subs	r3, #4
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	d1f0      	bne.n	800b980 <quorem+0xf0>
 800b99e:	3c01      	subs	r4, #1
 800b9a0:	e7eb      	b.n	800b97a <quorem+0xea>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e7ee      	b.n	800b984 <quorem+0xf4>
	...

0800b9a8 <_dtoa_r>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	ed2d 8b04 	vpush	{d8-d9}
 800b9b0:	ec57 6b10 	vmov	r6, r7, d0
 800b9b4:	b093      	sub	sp, #76	; 0x4c
 800b9b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b9b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b9bc:	9106      	str	r1, [sp, #24]
 800b9be:	ee10 aa10 	vmov	sl, s0
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b9c8:	46bb      	mov	fp, r7
 800b9ca:	b975      	cbnz	r5, 800b9ea <_dtoa_r+0x42>
 800b9cc:	2010      	movs	r0, #16
 800b9ce:	f001 f94d 	bl	800cc6c <malloc>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	6260      	str	r0, [r4, #36]	; 0x24
 800b9d6:	b920      	cbnz	r0, 800b9e2 <_dtoa_r+0x3a>
 800b9d8:	4ba7      	ldr	r3, [pc, #668]	; (800bc78 <_dtoa_r+0x2d0>)
 800b9da:	21ea      	movs	r1, #234	; 0xea
 800b9dc:	48a7      	ldr	r0, [pc, #668]	; (800bc7c <_dtoa_r+0x2d4>)
 800b9de:	f002 f8ad 	bl	800db3c <__assert_func>
 800b9e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9e6:	6005      	str	r5, [r0, #0]
 800b9e8:	60c5      	str	r5, [r0, #12]
 800b9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ec:	6819      	ldr	r1, [r3, #0]
 800b9ee:	b151      	cbz	r1, 800ba06 <_dtoa_r+0x5e>
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	604a      	str	r2, [r1, #4]
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4093      	lsls	r3, r2
 800b9f8:	608b      	str	r3, [r1, #8]
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f001 f990 	bl	800cd20 <_Bfree>
 800ba00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	1e3b      	subs	r3, r7, #0
 800ba08:	bfaa      	itet	ge
 800ba0a:	2300      	movge	r3, #0
 800ba0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ba10:	f8c8 3000 	strge.w	r3, [r8]
 800ba14:	4b9a      	ldr	r3, [pc, #616]	; (800bc80 <_dtoa_r+0x2d8>)
 800ba16:	bfbc      	itt	lt
 800ba18:	2201      	movlt	r2, #1
 800ba1a:	f8c8 2000 	strlt.w	r2, [r8]
 800ba1e:	ea33 030b 	bics.w	r3, r3, fp
 800ba22:	d11b      	bne.n	800ba5c <_dtoa_r+0xb4>
 800ba24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba26:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba30:	4333      	orrs	r3, r6
 800ba32:	f000 8592 	beq.w	800c55a <_dtoa_r+0xbb2>
 800ba36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba38:	b963      	cbnz	r3, 800ba54 <_dtoa_r+0xac>
 800ba3a:	4b92      	ldr	r3, [pc, #584]	; (800bc84 <_dtoa_r+0x2dc>)
 800ba3c:	e022      	b.n	800ba84 <_dtoa_r+0xdc>
 800ba3e:	4b92      	ldr	r3, [pc, #584]	; (800bc88 <_dtoa_r+0x2e0>)
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	3308      	adds	r3, #8
 800ba44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	9801      	ldr	r0, [sp, #4]
 800ba4a:	b013      	add	sp, #76	; 0x4c
 800ba4c:	ecbd 8b04 	vpop	{d8-d9}
 800ba50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba54:	4b8b      	ldr	r3, [pc, #556]	; (800bc84 <_dtoa_r+0x2dc>)
 800ba56:	9301      	str	r3, [sp, #4]
 800ba58:	3303      	adds	r3, #3
 800ba5a:	e7f3      	b.n	800ba44 <_dtoa_r+0x9c>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2300      	movs	r3, #0
 800ba60:	4650      	mov	r0, sl
 800ba62:	4659      	mov	r1, fp
 800ba64:	f7f5 f850 	bl	8000b08 <__aeabi_dcmpeq>
 800ba68:	ec4b ab19 	vmov	d9, sl, fp
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	b158      	cbz	r0, 800ba88 <_dtoa_r+0xe0>
 800ba70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba72:	2301      	movs	r3, #1
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 856b 	beq.w	800c554 <_dtoa_r+0xbac>
 800ba7e:	4883      	ldr	r0, [pc, #524]	; (800bc8c <_dtoa_r+0x2e4>)
 800ba80:	6018      	str	r0, [r3, #0]
 800ba82:	1e43      	subs	r3, r0, #1
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	e7df      	b.n	800ba48 <_dtoa_r+0xa0>
 800ba88:	ec4b ab10 	vmov	d0, sl, fp
 800ba8c:	aa10      	add	r2, sp, #64	; 0x40
 800ba8e:	a911      	add	r1, sp, #68	; 0x44
 800ba90:	4620      	mov	r0, r4
 800ba92:	f001 fcf3 	bl	800d47c <__d2b>
 800ba96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba9a:	ee08 0a10 	vmov	s16, r0
 800ba9e:	2d00      	cmp	r5, #0
 800baa0:	f000 8084 	beq.w	800bbac <_dtoa_r+0x204>
 800baa4:	ee19 3a90 	vmov	r3, s19
 800baa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bab0:	4656      	mov	r6, sl
 800bab2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800baba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800babe:	4b74      	ldr	r3, [pc, #464]	; (800bc90 <_dtoa_r+0x2e8>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f4 fbff 	bl	80002c8 <__aeabi_dsub>
 800baca:	a365      	add	r3, pc, #404	; (adr r3, 800bc60 <_dtoa_r+0x2b8>)
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f7f4 fdb2 	bl	8000638 <__aeabi_dmul>
 800bad4:	a364      	add	r3, pc, #400	; (adr r3, 800bc68 <_dtoa_r+0x2c0>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fbf7 	bl	80002cc <__adddf3>
 800bade:	4606      	mov	r6, r0
 800bae0:	4628      	mov	r0, r5
 800bae2:	460f      	mov	r7, r1
 800bae4:	f7f4 fd3e 	bl	8000564 <__aeabi_i2d>
 800bae8:	a361      	add	r3, pc, #388	; (adr r3, 800bc70 <_dtoa_r+0x2c8>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fda3 	bl	8000638 <__aeabi_dmul>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fbe7 	bl	80002cc <__adddf3>
 800bafe:	4606      	mov	r6, r0
 800bb00:	460f      	mov	r7, r1
 800bb02:	f7f5 f849 	bl	8000b98 <__aeabi_d2iz>
 800bb06:	2200      	movs	r2, #0
 800bb08:	9000      	str	r0, [sp, #0]
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	4639      	mov	r1, r7
 800bb10:	f7f5 f804 	bl	8000b1c <__aeabi_dcmplt>
 800bb14:	b150      	cbz	r0, 800bb2c <_dtoa_r+0x184>
 800bb16:	9800      	ldr	r0, [sp, #0]
 800bb18:	f7f4 fd24 	bl	8000564 <__aeabi_i2d>
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	463b      	mov	r3, r7
 800bb20:	f7f4 fff2 	bl	8000b08 <__aeabi_dcmpeq>
 800bb24:	b910      	cbnz	r0, 800bb2c <_dtoa_r+0x184>
 800bb26:	9b00      	ldr	r3, [sp, #0]
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	9b00      	ldr	r3, [sp, #0]
 800bb2e:	2b16      	cmp	r3, #22
 800bb30:	d85a      	bhi.n	800bbe8 <_dtoa_r+0x240>
 800bb32:	9a00      	ldr	r2, [sp, #0]
 800bb34:	4b57      	ldr	r3, [pc, #348]	; (800bc94 <_dtoa_r+0x2ec>)
 800bb36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	ec51 0b19 	vmov	r0, r1, d9
 800bb42:	f7f4 ffeb 	bl	8000b1c <__aeabi_dcmplt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d050      	beq.n	800bbec <_dtoa_r+0x244>
 800bb4a:	9b00      	ldr	r3, [sp, #0]
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	2300      	movs	r3, #0
 800bb52:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb56:	1b5d      	subs	r5, r3, r5
 800bb58:	1e6b      	subs	r3, r5, #1
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	bf45      	ittet	mi
 800bb5e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bb62:	9304      	strmi	r3, [sp, #16]
 800bb64:	2300      	movpl	r3, #0
 800bb66:	2300      	movmi	r3, #0
 800bb68:	bf4c      	ite	mi
 800bb6a:	9305      	strmi	r3, [sp, #20]
 800bb6c:	9304      	strpl	r3, [sp, #16]
 800bb6e:	9b00      	ldr	r3, [sp, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	db3d      	blt.n	800bbf0 <_dtoa_r+0x248>
 800bb74:	9b05      	ldr	r3, [sp, #20]
 800bb76:	9a00      	ldr	r2, [sp, #0]
 800bb78:	920a      	str	r2, [sp, #40]	; 0x28
 800bb7a:	4413      	add	r3, r2
 800bb7c:	9305      	str	r3, [sp, #20]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9307      	str	r3, [sp, #28]
 800bb82:	9b06      	ldr	r3, [sp, #24]
 800bb84:	2b09      	cmp	r3, #9
 800bb86:	f200 8089 	bhi.w	800bc9c <_dtoa_r+0x2f4>
 800bb8a:	2b05      	cmp	r3, #5
 800bb8c:	bfc4      	itt	gt
 800bb8e:	3b04      	subgt	r3, #4
 800bb90:	9306      	strgt	r3, [sp, #24]
 800bb92:	9b06      	ldr	r3, [sp, #24]
 800bb94:	f1a3 0302 	sub.w	r3, r3, #2
 800bb98:	bfcc      	ite	gt
 800bb9a:	2500      	movgt	r5, #0
 800bb9c:	2501      	movle	r5, #1
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	f200 8087 	bhi.w	800bcb2 <_dtoa_r+0x30a>
 800bba4:	e8df f003 	tbb	[pc, r3]
 800bba8:	59383a2d 	.word	0x59383a2d
 800bbac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bbb0:	441d      	add	r5, r3
 800bbb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bbb6:	2b20      	cmp	r3, #32
 800bbb8:	bfc1      	itttt	gt
 800bbba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bbbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bbc2:	fa0b f303 	lslgt.w	r3, fp, r3
 800bbc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bbca:	bfda      	itte	le
 800bbcc:	f1c3 0320 	rsble	r3, r3, #32
 800bbd0:	fa06 f003 	lslle.w	r0, r6, r3
 800bbd4:	4318      	orrgt	r0, r3
 800bbd6:	f7f4 fcb5 	bl	8000544 <__aeabi_ui2d>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4606      	mov	r6, r0
 800bbde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bbe2:	3d01      	subs	r5, #1
 800bbe4:	930e      	str	r3, [sp, #56]	; 0x38
 800bbe6:	e76a      	b.n	800babe <_dtoa_r+0x116>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e7b2      	b.n	800bb52 <_dtoa_r+0x1aa>
 800bbec:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbee:	e7b1      	b.n	800bb54 <_dtoa_r+0x1ac>
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	9a00      	ldr	r2, [sp, #0]
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	4253      	negs	r3, r2
 800bbfa:	9307      	str	r3, [sp, #28]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	930a      	str	r3, [sp, #40]	; 0x28
 800bc00:	e7bf      	b.n	800bb82 <_dtoa_r+0x1da>
 800bc02:	2300      	movs	r3, #0
 800bc04:	9308      	str	r3, [sp, #32]
 800bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dc55      	bgt.n	800bcb8 <_dtoa_r+0x310>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc12:	461a      	mov	r2, r3
 800bc14:	9209      	str	r2, [sp, #36]	; 0x24
 800bc16:	e00c      	b.n	800bc32 <_dtoa_r+0x28a>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e7f3      	b.n	800bc04 <_dtoa_r+0x25c>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc20:	9308      	str	r3, [sp, #32]
 800bc22:	9b00      	ldr	r3, [sp, #0]
 800bc24:	4413      	add	r3, r2
 800bc26:	9302      	str	r3, [sp, #8]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	9303      	str	r3, [sp, #12]
 800bc2e:	bfb8      	it	lt
 800bc30:	2301      	movlt	r3, #1
 800bc32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc34:	2200      	movs	r2, #0
 800bc36:	6042      	str	r2, [r0, #4]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	f102 0614 	add.w	r6, r2, #20
 800bc3e:	429e      	cmp	r6, r3
 800bc40:	6841      	ldr	r1, [r0, #4]
 800bc42:	d93d      	bls.n	800bcc0 <_dtoa_r+0x318>
 800bc44:	4620      	mov	r0, r4
 800bc46:	f001 f82b 	bl	800cca0 <_Balloc>
 800bc4a:	9001      	str	r0, [sp, #4]
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d13b      	bne.n	800bcc8 <_dtoa_r+0x320>
 800bc50:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <_dtoa_r+0x2f0>)
 800bc52:	4602      	mov	r2, r0
 800bc54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc58:	e6c0      	b.n	800b9dc <_dtoa_r+0x34>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e7df      	b.n	800bc1e <_dtoa_r+0x276>
 800bc5e:	bf00      	nop
 800bc60:	636f4361 	.word	0x636f4361
 800bc64:	3fd287a7 	.word	0x3fd287a7
 800bc68:	8b60c8b3 	.word	0x8b60c8b3
 800bc6c:	3fc68a28 	.word	0x3fc68a28
 800bc70:	509f79fb 	.word	0x509f79fb
 800bc74:	3fd34413 	.word	0x3fd34413
 800bc78:	0800ed6e 	.word	0x0800ed6e
 800bc7c:	0800ed85 	.word	0x0800ed85
 800bc80:	7ff00000 	.word	0x7ff00000
 800bc84:	0800ed6a 	.word	0x0800ed6a
 800bc88:	0800ed61 	.word	0x0800ed61
 800bc8c:	0800ebe1 	.word	0x0800ebe1
 800bc90:	3ff80000 	.word	0x3ff80000
 800bc94:	0800eef0 	.word	0x0800eef0
 800bc98:	0800ede0 	.word	0x0800ede0
 800bc9c:	2501      	movs	r5, #1
 800bc9e:	2300      	movs	r3, #0
 800bca0:	9306      	str	r3, [sp, #24]
 800bca2:	9508      	str	r5, [sp, #32]
 800bca4:	f04f 33ff 	mov.w	r3, #4294967295
 800bca8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcac:	2200      	movs	r2, #0
 800bcae:	2312      	movs	r3, #18
 800bcb0:	e7b0      	b.n	800bc14 <_dtoa_r+0x26c>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	9308      	str	r3, [sp, #32]
 800bcb6:	e7f5      	b.n	800bca4 <_dtoa_r+0x2fc>
 800bcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcbe:	e7b8      	b.n	800bc32 <_dtoa_r+0x28a>
 800bcc0:	3101      	adds	r1, #1
 800bcc2:	6041      	str	r1, [r0, #4]
 800bcc4:	0052      	lsls	r2, r2, #1
 800bcc6:	e7b8      	b.n	800bc3a <_dtoa_r+0x292>
 800bcc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcca:	9a01      	ldr	r2, [sp, #4]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	2b0e      	cmp	r3, #14
 800bcd2:	f200 809d 	bhi.w	800be10 <_dtoa_r+0x468>
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	f000 809a 	beq.w	800be10 <_dtoa_r+0x468>
 800bcdc:	9b00      	ldr	r3, [sp, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	dd32      	ble.n	800bd48 <_dtoa_r+0x3a0>
 800bce2:	4ab7      	ldr	r2, [pc, #732]	; (800bfc0 <_dtoa_r+0x618>)
 800bce4:	f003 030f 	and.w	r3, r3, #15
 800bce8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bcec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcf0:	9b00      	ldr	r3, [sp, #0]
 800bcf2:	05d8      	lsls	r0, r3, #23
 800bcf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bcf8:	d516      	bpl.n	800bd28 <_dtoa_r+0x380>
 800bcfa:	4bb2      	ldr	r3, [pc, #712]	; (800bfc4 <_dtoa_r+0x61c>)
 800bcfc:	ec51 0b19 	vmov	r0, r1, d9
 800bd00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd04:	f7f4 fdc2 	bl	800088c <__aeabi_ddiv>
 800bd08:	f007 070f 	and.w	r7, r7, #15
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	468b      	mov	fp, r1
 800bd10:	2503      	movs	r5, #3
 800bd12:	4eac      	ldr	r6, [pc, #688]	; (800bfc4 <_dtoa_r+0x61c>)
 800bd14:	b957      	cbnz	r7, 800bd2c <_dtoa_r+0x384>
 800bd16:	4642      	mov	r2, r8
 800bd18:	464b      	mov	r3, r9
 800bd1a:	4650      	mov	r0, sl
 800bd1c:	4659      	mov	r1, fp
 800bd1e:	f7f4 fdb5 	bl	800088c <__aeabi_ddiv>
 800bd22:	4682      	mov	sl, r0
 800bd24:	468b      	mov	fp, r1
 800bd26:	e028      	b.n	800bd7a <_dtoa_r+0x3d2>
 800bd28:	2502      	movs	r5, #2
 800bd2a:	e7f2      	b.n	800bd12 <_dtoa_r+0x36a>
 800bd2c:	07f9      	lsls	r1, r7, #31
 800bd2e:	d508      	bpl.n	800bd42 <_dtoa_r+0x39a>
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd38:	f7f4 fc7e 	bl	8000638 <__aeabi_dmul>
 800bd3c:	3501      	adds	r5, #1
 800bd3e:	4680      	mov	r8, r0
 800bd40:	4689      	mov	r9, r1
 800bd42:	107f      	asrs	r7, r7, #1
 800bd44:	3608      	adds	r6, #8
 800bd46:	e7e5      	b.n	800bd14 <_dtoa_r+0x36c>
 800bd48:	f000 809b 	beq.w	800be82 <_dtoa_r+0x4da>
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	4f9d      	ldr	r7, [pc, #628]	; (800bfc4 <_dtoa_r+0x61c>)
 800bd50:	425e      	negs	r6, r3
 800bd52:	4b9b      	ldr	r3, [pc, #620]	; (800bfc0 <_dtoa_r+0x618>)
 800bd54:	f006 020f 	and.w	r2, r6, #15
 800bd58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	ec51 0b19 	vmov	r0, r1, d9
 800bd64:	f7f4 fc68 	bl	8000638 <__aeabi_dmul>
 800bd68:	1136      	asrs	r6, r6, #4
 800bd6a:	4682      	mov	sl, r0
 800bd6c:	468b      	mov	fp, r1
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2502      	movs	r5, #2
 800bd72:	2e00      	cmp	r6, #0
 800bd74:	d17a      	bne.n	800be6c <_dtoa_r+0x4c4>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1d3      	bne.n	800bd22 <_dtoa_r+0x37a>
 800bd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8082 	beq.w	800be86 <_dtoa_r+0x4de>
 800bd82:	4b91      	ldr	r3, [pc, #580]	; (800bfc8 <_dtoa_r+0x620>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	4650      	mov	r0, sl
 800bd88:	4659      	mov	r1, fp
 800bd8a:	f7f4 fec7 	bl	8000b1c <__aeabi_dcmplt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d079      	beq.n	800be86 <_dtoa_r+0x4de>
 800bd92:	9b03      	ldr	r3, [sp, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d076      	beq.n	800be86 <_dtoa_r+0x4de>
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dd36      	ble.n	800be0c <_dtoa_r+0x464>
 800bd9e:	9b00      	ldr	r3, [sp, #0]
 800bda0:	4650      	mov	r0, sl
 800bda2:	4659      	mov	r1, fp
 800bda4:	1e5f      	subs	r7, r3, #1
 800bda6:	2200      	movs	r2, #0
 800bda8:	4b88      	ldr	r3, [pc, #544]	; (800bfcc <_dtoa_r+0x624>)
 800bdaa:	f7f4 fc45 	bl	8000638 <__aeabi_dmul>
 800bdae:	9e02      	ldr	r6, [sp, #8]
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	468b      	mov	fp, r1
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f7f4 fbd4 	bl	8000564 <__aeabi_i2d>
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	465b      	mov	r3, fp
 800bdc0:	f7f4 fc3a 	bl	8000638 <__aeabi_dmul>
 800bdc4:	4b82      	ldr	r3, [pc, #520]	; (800bfd0 <_dtoa_r+0x628>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f7f4 fa80 	bl	80002cc <__adddf3>
 800bdcc:	46d0      	mov	r8, sl
 800bdce:	46d9      	mov	r9, fp
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bdd6:	2e00      	cmp	r6, #0
 800bdd8:	d158      	bne.n	800be8c <_dtoa_r+0x4e4>
 800bdda:	4b7e      	ldr	r3, [pc, #504]	; (800bfd4 <_dtoa_r+0x62c>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	4640      	mov	r0, r8
 800bde0:	4649      	mov	r1, r9
 800bde2:	f7f4 fa71 	bl	80002c8 <__aeabi_dsub>
 800bde6:	4652      	mov	r2, sl
 800bde8:	465b      	mov	r3, fp
 800bdea:	4680      	mov	r8, r0
 800bdec:	4689      	mov	r9, r1
 800bdee:	f7f4 feb3 	bl	8000b58 <__aeabi_dcmpgt>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	f040 8295 	bne.w	800c322 <_dtoa_r+0x97a>
 800bdf8:	4652      	mov	r2, sl
 800bdfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdfe:	4640      	mov	r0, r8
 800be00:	4649      	mov	r1, r9
 800be02:	f7f4 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800be06:	2800      	cmp	r0, #0
 800be08:	f040 8289 	bne.w	800c31e <_dtoa_r+0x976>
 800be0c:	ec5b ab19 	vmov	sl, fp, d9
 800be10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be12:	2b00      	cmp	r3, #0
 800be14:	f2c0 8148 	blt.w	800c0a8 <_dtoa_r+0x700>
 800be18:	9a00      	ldr	r2, [sp, #0]
 800be1a:	2a0e      	cmp	r2, #14
 800be1c:	f300 8144 	bgt.w	800c0a8 <_dtoa_r+0x700>
 800be20:	4b67      	ldr	r3, [pc, #412]	; (800bfc0 <_dtoa_r+0x618>)
 800be22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f280 80d5 	bge.w	800bfdc <_dtoa_r+0x634>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f300 80d1 	bgt.w	800bfdc <_dtoa_r+0x634>
 800be3a:	f040 826f 	bne.w	800c31c <_dtoa_r+0x974>
 800be3e:	4b65      	ldr	r3, [pc, #404]	; (800bfd4 <_dtoa_r+0x62c>)
 800be40:	2200      	movs	r2, #0
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fbf7 	bl	8000638 <__aeabi_dmul>
 800be4a:	4652      	mov	r2, sl
 800be4c:	465b      	mov	r3, fp
 800be4e:	f7f4 fe79 	bl	8000b44 <__aeabi_dcmpge>
 800be52:	9e03      	ldr	r6, [sp, #12]
 800be54:	4637      	mov	r7, r6
 800be56:	2800      	cmp	r0, #0
 800be58:	f040 8245 	bne.w	800c2e6 <_dtoa_r+0x93e>
 800be5c:	9d01      	ldr	r5, [sp, #4]
 800be5e:	2331      	movs	r3, #49	; 0x31
 800be60:	f805 3b01 	strb.w	r3, [r5], #1
 800be64:	9b00      	ldr	r3, [sp, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	e240      	b.n	800c2ee <_dtoa_r+0x946>
 800be6c:	07f2      	lsls	r2, r6, #31
 800be6e:	d505      	bpl.n	800be7c <_dtoa_r+0x4d4>
 800be70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be74:	f7f4 fbe0 	bl	8000638 <__aeabi_dmul>
 800be78:	3501      	adds	r5, #1
 800be7a:	2301      	movs	r3, #1
 800be7c:	1076      	asrs	r6, r6, #1
 800be7e:	3708      	adds	r7, #8
 800be80:	e777      	b.n	800bd72 <_dtoa_r+0x3ca>
 800be82:	2502      	movs	r5, #2
 800be84:	e779      	b.n	800bd7a <_dtoa_r+0x3d2>
 800be86:	9f00      	ldr	r7, [sp, #0]
 800be88:	9e03      	ldr	r6, [sp, #12]
 800be8a:	e794      	b.n	800bdb6 <_dtoa_r+0x40e>
 800be8c:	9901      	ldr	r1, [sp, #4]
 800be8e:	4b4c      	ldr	r3, [pc, #304]	; (800bfc0 <_dtoa_r+0x618>)
 800be90:	4431      	add	r1, r6
 800be92:	910d      	str	r1, [sp, #52]	; 0x34
 800be94:	9908      	ldr	r1, [sp, #32]
 800be96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be9e:	2900      	cmp	r1, #0
 800bea0:	d043      	beq.n	800bf2a <_dtoa_r+0x582>
 800bea2:	494d      	ldr	r1, [pc, #308]	; (800bfd8 <_dtoa_r+0x630>)
 800bea4:	2000      	movs	r0, #0
 800bea6:	f7f4 fcf1 	bl	800088c <__aeabi_ddiv>
 800beaa:	4652      	mov	r2, sl
 800beac:	465b      	mov	r3, fp
 800beae:	f7f4 fa0b 	bl	80002c8 <__aeabi_dsub>
 800beb2:	9d01      	ldr	r5, [sp, #4]
 800beb4:	4682      	mov	sl, r0
 800beb6:	468b      	mov	fp, r1
 800beb8:	4649      	mov	r1, r9
 800beba:	4640      	mov	r0, r8
 800bebc:	f7f4 fe6c 	bl	8000b98 <__aeabi_d2iz>
 800bec0:	4606      	mov	r6, r0
 800bec2:	f7f4 fb4f 	bl	8000564 <__aeabi_i2d>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4640      	mov	r0, r8
 800becc:	4649      	mov	r1, r9
 800bece:	f7f4 f9fb 	bl	80002c8 <__aeabi_dsub>
 800bed2:	3630      	adds	r6, #48	; 0x30
 800bed4:	f805 6b01 	strb.w	r6, [r5], #1
 800bed8:	4652      	mov	r2, sl
 800beda:	465b      	mov	r3, fp
 800bedc:	4680      	mov	r8, r0
 800bede:	4689      	mov	r9, r1
 800bee0:	f7f4 fe1c 	bl	8000b1c <__aeabi_dcmplt>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d163      	bne.n	800bfb0 <_dtoa_r+0x608>
 800bee8:	4642      	mov	r2, r8
 800beea:	464b      	mov	r3, r9
 800beec:	4936      	ldr	r1, [pc, #216]	; (800bfc8 <_dtoa_r+0x620>)
 800beee:	2000      	movs	r0, #0
 800bef0:	f7f4 f9ea 	bl	80002c8 <__aeabi_dsub>
 800bef4:	4652      	mov	r2, sl
 800bef6:	465b      	mov	r3, fp
 800bef8:	f7f4 fe10 	bl	8000b1c <__aeabi_dcmplt>
 800befc:	2800      	cmp	r0, #0
 800befe:	f040 80b5 	bne.w	800c06c <_dtoa_r+0x6c4>
 800bf02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf04:	429d      	cmp	r5, r3
 800bf06:	d081      	beq.n	800be0c <_dtoa_r+0x464>
 800bf08:	4b30      	ldr	r3, [pc, #192]	; (800bfcc <_dtoa_r+0x624>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4650      	mov	r0, sl
 800bf0e:	4659      	mov	r1, fp
 800bf10:	f7f4 fb92 	bl	8000638 <__aeabi_dmul>
 800bf14:	4b2d      	ldr	r3, [pc, #180]	; (800bfcc <_dtoa_r+0x624>)
 800bf16:	4682      	mov	sl, r0
 800bf18:	468b      	mov	fp, r1
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f7f4 fb8a 	bl	8000638 <__aeabi_dmul>
 800bf24:	4680      	mov	r8, r0
 800bf26:	4689      	mov	r9, r1
 800bf28:	e7c6      	b.n	800beb8 <_dtoa_r+0x510>
 800bf2a:	4650      	mov	r0, sl
 800bf2c:	4659      	mov	r1, fp
 800bf2e:	f7f4 fb83 	bl	8000638 <__aeabi_dmul>
 800bf32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf34:	9d01      	ldr	r5, [sp, #4]
 800bf36:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf38:	4682      	mov	sl, r0
 800bf3a:	468b      	mov	fp, r1
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	4640      	mov	r0, r8
 800bf40:	f7f4 fe2a 	bl	8000b98 <__aeabi_d2iz>
 800bf44:	4606      	mov	r6, r0
 800bf46:	f7f4 fb0d 	bl	8000564 <__aeabi_i2d>
 800bf4a:	3630      	adds	r6, #48	; 0x30
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4640      	mov	r0, r8
 800bf52:	4649      	mov	r1, r9
 800bf54:	f7f4 f9b8 	bl	80002c8 <__aeabi_dsub>
 800bf58:	f805 6b01 	strb.w	r6, [r5], #1
 800bf5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf5e:	429d      	cmp	r5, r3
 800bf60:	4680      	mov	r8, r0
 800bf62:	4689      	mov	r9, r1
 800bf64:	f04f 0200 	mov.w	r2, #0
 800bf68:	d124      	bne.n	800bfb4 <_dtoa_r+0x60c>
 800bf6a:	4b1b      	ldr	r3, [pc, #108]	; (800bfd8 <_dtoa_r+0x630>)
 800bf6c:	4650      	mov	r0, sl
 800bf6e:	4659      	mov	r1, fp
 800bf70:	f7f4 f9ac 	bl	80002cc <__adddf3>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	4640      	mov	r0, r8
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7f4 fdec 	bl	8000b58 <__aeabi_dcmpgt>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d173      	bne.n	800c06c <_dtoa_r+0x6c4>
 800bf84:	4652      	mov	r2, sl
 800bf86:	465b      	mov	r3, fp
 800bf88:	4913      	ldr	r1, [pc, #76]	; (800bfd8 <_dtoa_r+0x630>)
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	f7f4 f99c 	bl	80002c8 <__aeabi_dsub>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	4640      	mov	r0, r8
 800bf96:	4649      	mov	r1, r9
 800bf98:	f7f4 fdc0 	bl	8000b1c <__aeabi_dcmplt>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f43f af35 	beq.w	800be0c <_dtoa_r+0x464>
 800bfa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bfa4:	1e6b      	subs	r3, r5, #1
 800bfa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfac:	2b30      	cmp	r3, #48	; 0x30
 800bfae:	d0f8      	beq.n	800bfa2 <_dtoa_r+0x5fa>
 800bfb0:	9700      	str	r7, [sp, #0]
 800bfb2:	e049      	b.n	800c048 <_dtoa_r+0x6a0>
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <_dtoa_r+0x624>)
 800bfb6:	f7f4 fb3f 	bl	8000638 <__aeabi_dmul>
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4689      	mov	r9, r1
 800bfbe:	e7bd      	b.n	800bf3c <_dtoa_r+0x594>
 800bfc0:	0800eef0 	.word	0x0800eef0
 800bfc4:	0800eec8 	.word	0x0800eec8
 800bfc8:	3ff00000 	.word	0x3ff00000
 800bfcc:	40240000 	.word	0x40240000
 800bfd0:	401c0000 	.word	0x401c0000
 800bfd4:	40140000 	.word	0x40140000
 800bfd8:	3fe00000 	.word	0x3fe00000
 800bfdc:	9d01      	ldr	r5, [sp, #4]
 800bfde:	4656      	mov	r6, sl
 800bfe0:	465f      	mov	r7, fp
 800bfe2:	4642      	mov	r2, r8
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 fc4f 	bl	800088c <__aeabi_ddiv>
 800bfee:	f7f4 fdd3 	bl	8000b98 <__aeabi_d2iz>
 800bff2:	4682      	mov	sl, r0
 800bff4:	f7f4 fab6 	bl	8000564 <__aeabi_i2d>
 800bff8:	4642      	mov	r2, r8
 800bffa:	464b      	mov	r3, r9
 800bffc:	f7f4 fb1c 	bl	8000638 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c00c:	f7f4 f95c 	bl	80002c8 <__aeabi_dsub>
 800c010:	f805 6b01 	strb.w	r6, [r5], #1
 800c014:	9e01      	ldr	r6, [sp, #4]
 800c016:	9f03      	ldr	r7, [sp, #12]
 800c018:	1bae      	subs	r6, r5, r6
 800c01a:	42b7      	cmp	r7, r6
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	d135      	bne.n	800c08e <_dtoa_r+0x6e6>
 800c022:	f7f4 f953 	bl	80002cc <__adddf3>
 800c026:	4642      	mov	r2, r8
 800c028:	464b      	mov	r3, r9
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	f7f4 fd93 	bl	8000b58 <__aeabi_dcmpgt>
 800c032:	b9d0      	cbnz	r0, 800c06a <_dtoa_r+0x6c2>
 800c034:	4642      	mov	r2, r8
 800c036:	464b      	mov	r3, r9
 800c038:	4630      	mov	r0, r6
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 fd64 	bl	8000b08 <__aeabi_dcmpeq>
 800c040:	b110      	cbz	r0, 800c048 <_dtoa_r+0x6a0>
 800c042:	f01a 0f01 	tst.w	sl, #1
 800c046:	d110      	bne.n	800c06a <_dtoa_r+0x6c2>
 800c048:	4620      	mov	r0, r4
 800c04a:	ee18 1a10 	vmov	r1, s16
 800c04e:	f000 fe67 	bl	800cd20 <_Bfree>
 800c052:	2300      	movs	r3, #0
 800c054:	9800      	ldr	r0, [sp, #0]
 800c056:	702b      	strb	r3, [r5, #0]
 800c058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c05a:	3001      	adds	r0, #1
 800c05c:	6018      	str	r0, [r3, #0]
 800c05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c060:	2b00      	cmp	r3, #0
 800c062:	f43f acf1 	beq.w	800ba48 <_dtoa_r+0xa0>
 800c066:	601d      	str	r5, [r3, #0]
 800c068:	e4ee      	b.n	800ba48 <_dtoa_r+0xa0>
 800c06a:	9f00      	ldr	r7, [sp, #0]
 800c06c:	462b      	mov	r3, r5
 800c06e:	461d      	mov	r5, r3
 800c070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c074:	2a39      	cmp	r2, #57	; 0x39
 800c076:	d106      	bne.n	800c086 <_dtoa_r+0x6de>
 800c078:	9a01      	ldr	r2, [sp, #4]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d1f7      	bne.n	800c06e <_dtoa_r+0x6c6>
 800c07e:	9901      	ldr	r1, [sp, #4]
 800c080:	2230      	movs	r2, #48	; 0x30
 800c082:	3701      	adds	r7, #1
 800c084:	700a      	strb	r2, [r1, #0]
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	3201      	adds	r2, #1
 800c08a:	701a      	strb	r2, [r3, #0]
 800c08c:	e790      	b.n	800bfb0 <_dtoa_r+0x608>
 800c08e:	4ba6      	ldr	r3, [pc, #664]	; (800c328 <_dtoa_r+0x980>)
 800c090:	2200      	movs	r2, #0
 800c092:	f7f4 fad1 	bl	8000638 <__aeabi_dmul>
 800c096:	2200      	movs	r2, #0
 800c098:	2300      	movs	r3, #0
 800c09a:	4606      	mov	r6, r0
 800c09c:	460f      	mov	r7, r1
 800c09e:	f7f4 fd33 	bl	8000b08 <__aeabi_dcmpeq>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d09d      	beq.n	800bfe2 <_dtoa_r+0x63a>
 800c0a6:	e7cf      	b.n	800c048 <_dtoa_r+0x6a0>
 800c0a8:	9a08      	ldr	r2, [sp, #32]
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	f000 80d7 	beq.w	800c25e <_dtoa_r+0x8b6>
 800c0b0:	9a06      	ldr	r2, [sp, #24]
 800c0b2:	2a01      	cmp	r2, #1
 800c0b4:	f300 80ba 	bgt.w	800c22c <_dtoa_r+0x884>
 800c0b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	f000 80b2 	beq.w	800c224 <_dtoa_r+0x87c>
 800c0c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0c4:	9e07      	ldr	r6, [sp, #28]
 800c0c6:	9d04      	ldr	r5, [sp, #16]
 800c0c8:	9a04      	ldr	r2, [sp, #16]
 800c0ca:	441a      	add	r2, r3
 800c0cc:	9204      	str	r2, [sp, #16]
 800c0ce:	9a05      	ldr	r2, [sp, #20]
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	441a      	add	r2, r3
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	9205      	str	r2, [sp, #20]
 800c0d8:	f000 ff24 	bl	800cf24 <__i2b>
 800c0dc:	4607      	mov	r7, r0
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	dd0c      	ble.n	800c0fc <_dtoa_r+0x754>
 800c0e2:	9b05      	ldr	r3, [sp, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	dd09      	ble.n	800c0fc <_dtoa_r+0x754>
 800c0e8:	42ab      	cmp	r3, r5
 800c0ea:	9a04      	ldr	r2, [sp, #16]
 800c0ec:	bfa8      	it	ge
 800c0ee:	462b      	movge	r3, r5
 800c0f0:	1ad2      	subs	r2, r2, r3
 800c0f2:	9204      	str	r2, [sp, #16]
 800c0f4:	9a05      	ldr	r2, [sp, #20]
 800c0f6:	1aed      	subs	r5, r5, r3
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	9305      	str	r3, [sp, #20]
 800c0fc:	9b07      	ldr	r3, [sp, #28]
 800c0fe:	b31b      	cbz	r3, 800c148 <_dtoa_r+0x7a0>
 800c100:	9b08      	ldr	r3, [sp, #32]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 80af 	beq.w	800c266 <_dtoa_r+0x8be>
 800c108:	2e00      	cmp	r6, #0
 800c10a:	dd13      	ble.n	800c134 <_dtoa_r+0x78c>
 800c10c:	4639      	mov	r1, r7
 800c10e:	4632      	mov	r2, r6
 800c110:	4620      	mov	r0, r4
 800c112:	f000 ffc7 	bl	800d0a4 <__pow5mult>
 800c116:	ee18 2a10 	vmov	r2, s16
 800c11a:	4601      	mov	r1, r0
 800c11c:	4607      	mov	r7, r0
 800c11e:	4620      	mov	r0, r4
 800c120:	f000 ff16 	bl	800cf50 <__multiply>
 800c124:	ee18 1a10 	vmov	r1, s16
 800c128:	4680      	mov	r8, r0
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 fdf8 	bl	800cd20 <_Bfree>
 800c130:	ee08 8a10 	vmov	s16, r8
 800c134:	9b07      	ldr	r3, [sp, #28]
 800c136:	1b9a      	subs	r2, r3, r6
 800c138:	d006      	beq.n	800c148 <_dtoa_r+0x7a0>
 800c13a:	ee18 1a10 	vmov	r1, s16
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 ffb0 	bl	800d0a4 <__pow5mult>
 800c144:	ee08 0a10 	vmov	s16, r0
 800c148:	2101      	movs	r1, #1
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 feea 	bl	800cf24 <__i2b>
 800c150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c152:	2b00      	cmp	r3, #0
 800c154:	4606      	mov	r6, r0
 800c156:	f340 8088 	ble.w	800c26a <_dtoa_r+0x8c2>
 800c15a:	461a      	mov	r2, r3
 800c15c:	4601      	mov	r1, r0
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 ffa0 	bl	800d0a4 <__pow5mult>
 800c164:	9b06      	ldr	r3, [sp, #24]
 800c166:	2b01      	cmp	r3, #1
 800c168:	4606      	mov	r6, r0
 800c16a:	f340 8081 	ble.w	800c270 <_dtoa_r+0x8c8>
 800c16e:	f04f 0800 	mov.w	r8, #0
 800c172:	6933      	ldr	r3, [r6, #16]
 800c174:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c178:	6918      	ldr	r0, [r3, #16]
 800c17a:	f000 fe83 	bl	800ce84 <__hi0bits>
 800c17e:	f1c0 0020 	rsb	r0, r0, #32
 800c182:	9b05      	ldr	r3, [sp, #20]
 800c184:	4418      	add	r0, r3
 800c186:	f010 001f 	ands.w	r0, r0, #31
 800c18a:	f000 8092 	beq.w	800c2b2 <_dtoa_r+0x90a>
 800c18e:	f1c0 0320 	rsb	r3, r0, #32
 800c192:	2b04      	cmp	r3, #4
 800c194:	f340 808a 	ble.w	800c2ac <_dtoa_r+0x904>
 800c198:	f1c0 001c 	rsb	r0, r0, #28
 800c19c:	9b04      	ldr	r3, [sp, #16]
 800c19e:	4403      	add	r3, r0
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	9b05      	ldr	r3, [sp, #20]
 800c1a4:	4403      	add	r3, r0
 800c1a6:	4405      	add	r5, r0
 800c1a8:	9305      	str	r3, [sp, #20]
 800c1aa:	9b04      	ldr	r3, [sp, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dd07      	ble.n	800c1c0 <_dtoa_r+0x818>
 800c1b0:	ee18 1a10 	vmov	r1, s16
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f000 ffce 	bl	800d158 <__lshift>
 800c1bc:	ee08 0a10 	vmov	s16, r0
 800c1c0:	9b05      	ldr	r3, [sp, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	dd05      	ble.n	800c1d2 <_dtoa_r+0x82a>
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 ffc4 	bl	800d158 <__lshift>
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d06e      	beq.n	800c2b6 <_dtoa_r+0x90e>
 800c1d8:	ee18 0a10 	vmov	r0, s16
 800c1dc:	4631      	mov	r1, r6
 800c1de:	f001 f82b 	bl	800d238 <__mcmp>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	da67      	bge.n	800c2b6 <_dtoa_r+0x90e>
 800c1e6:	9b00      	ldr	r3, [sp, #0]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	ee18 1a10 	vmov	r1, s16
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	220a      	movs	r2, #10
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 fdb5 	bl	800cd64 <__multadd>
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	ee08 0a10 	vmov	s16, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 81b1 	beq.w	800c568 <_dtoa_r+0xbc0>
 800c206:	2300      	movs	r3, #0
 800c208:	4639      	mov	r1, r7
 800c20a:	220a      	movs	r2, #10
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fda9 	bl	800cd64 <__multadd>
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	4607      	mov	r7, r0
 800c218:	f300 808e 	bgt.w	800c338 <_dtoa_r+0x990>
 800c21c:	9b06      	ldr	r3, [sp, #24]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	dc51      	bgt.n	800c2c6 <_dtoa_r+0x91e>
 800c222:	e089      	b.n	800c338 <_dtoa_r+0x990>
 800c224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c22a:	e74b      	b.n	800c0c4 <_dtoa_r+0x71c>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	1e5e      	subs	r6, r3, #1
 800c230:	9b07      	ldr	r3, [sp, #28]
 800c232:	42b3      	cmp	r3, r6
 800c234:	bfbf      	itttt	lt
 800c236:	9b07      	ldrlt	r3, [sp, #28]
 800c238:	9607      	strlt	r6, [sp, #28]
 800c23a:	1af2      	sublt	r2, r6, r3
 800c23c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c23e:	bfb6      	itet	lt
 800c240:	189b      	addlt	r3, r3, r2
 800c242:	1b9e      	subge	r6, r3, r6
 800c244:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c246:	9b03      	ldr	r3, [sp, #12]
 800c248:	bfb8      	it	lt
 800c24a:	2600      	movlt	r6, #0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	bfb7      	itett	lt
 800c250:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c254:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c258:	1a9d      	sublt	r5, r3, r2
 800c25a:	2300      	movlt	r3, #0
 800c25c:	e734      	b.n	800c0c8 <_dtoa_r+0x720>
 800c25e:	9e07      	ldr	r6, [sp, #28]
 800c260:	9d04      	ldr	r5, [sp, #16]
 800c262:	9f08      	ldr	r7, [sp, #32]
 800c264:	e73b      	b.n	800c0de <_dtoa_r+0x736>
 800c266:	9a07      	ldr	r2, [sp, #28]
 800c268:	e767      	b.n	800c13a <_dtoa_r+0x792>
 800c26a:	9b06      	ldr	r3, [sp, #24]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	dc18      	bgt.n	800c2a2 <_dtoa_r+0x8fa>
 800c270:	f1ba 0f00 	cmp.w	sl, #0
 800c274:	d115      	bne.n	800c2a2 <_dtoa_r+0x8fa>
 800c276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c27a:	b993      	cbnz	r3, 800c2a2 <_dtoa_r+0x8fa>
 800c27c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c280:	0d1b      	lsrs	r3, r3, #20
 800c282:	051b      	lsls	r3, r3, #20
 800c284:	b183      	cbz	r3, 800c2a8 <_dtoa_r+0x900>
 800c286:	9b04      	ldr	r3, [sp, #16]
 800c288:	3301      	adds	r3, #1
 800c28a:	9304      	str	r3, [sp, #16]
 800c28c:	9b05      	ldr	r3, [sp, #20]
 800c28e:	3301      	adds	r3, #1
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	f04f 0801 	mov.w	r8, #1
 800c296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f47f af6a 	bne.w	800c172 <_dtoa_r+0x7ca>
 800c29e:	2001      	movs	r0, #1
 800c2a0:	e76f      	b.n	800c182 <_dtoa_r+0x7da>
 800c2a2:	f04f 0800 	mov.w	r8, #0
 800c2a6:	e7f6      	b.n	800c296 <_dtoa_r+0x8ee>
 800c2a8:	4698      	mov	r8, r3
 800c2aa:	e7f4      	b.n	800c296 <_dtoa_r+0x8ee>
 800c2ac:	f43f af7d 	beq.w	800c1aa <_dtoa_r+0x802>
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	301c      	adds	r0, #28
 800c2b4:	e772      	b.n	800c19c <_dtoa_r+0x7f4>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	dc37      	bgt.n	800c32c <_dtoa_r+0x984>
 800c2bc:	9b06      	ldr	r3, [sp, #24]
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	dd34      	ble.n	800c32c <_dtoa_r+0x984>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	9302      	str	r3, [sp, #8]
 800c2c6:	9b02      	ldr	r3, [sp, #8]
 800c2c8:	b96b      	cbnz	r3, 800c2e6 <_dtoa_r+0x93e>
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	2205      	movs	r2, #5
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 fd48 	bl	800cd64 <__multadd>
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	ee18 0a10 	vmov	r0, s16
 800c2dc:	f000 ffac 	bl	800d238 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	f73f adbb 	bgt.w	800be5c <_dtoa_r+0x4b4>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e8:	9d01      	ldr	r5, [sp, #4]
 800c2ea:	43db      	mvns	r3, r3
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	f04f 0800 	mov.w	r8, #0
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f000 fd13 	bl	800cd20 <_Bfree>
 800c2fa:	2f00      	cmp	r7, #0
 800c2fc:	f43f aea4 	beq.w	800c048 <_dtoa_r+0x6a0>
 800c300:	f1b8 0f00 	cmp.w	r8, #0
 800c304:	d005      	beq.n	800c312 <_dtoa_r+0x96a>
 800c306:	45b8      	cmp	r8, r7
 800c308:	d003      	beq.n	800c312 <_dtoa_r+0x96a>
 800c30a:	4641      	mov	r1, r8
 800c30c:	4620      	mov	r0, r4
 800c30e:	f000 fd07 	bl	800cd20 <_Bfree>
 800c312:	4639      	mov	r1, r7
 800c314:	4620      	mov	r0, r4
 800c316:	f000 fd03 	bl	800cd20 <_Bfree>
 800c31a:	e695      	b.n	800c048 <_dtoa_r+0x6a0>
 800c31c:	2600      	movs	r6, #0
 800c31e:	4637      	mov	r7, r6
 800c320:	e7e1      	b.n	800c2e6 <_dtoa_r+0x93e>
 800c322:	9700      	str	r7, [sp, #0]
 800c324:	4637      	mov	r7, r6
 800c326:	e599      	b.n	800be5c <_dtoa_r+0x4b4>
 800c328:	40240000 	.word	0x40240000
 800c32c:	9b08      	ldr	r3, [sp, #32]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 80ca 	beq.w	800c4c8 <_dtoa_r+0xb20>
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	2d00      	cmp	r5, #0
 800c33a:	dd05      	ble.n	800c348 <_dtoa_r+0x9a0>
 800c33c:	4639      	mov	r1, r7
 800c33e:	462a      	mov	r2, r5
 800c340:	4620      	mov	r0, r4
 800c342:	f000 ff09 	bl	800d158 <__lshift>
 800c346:	4607      	mov	r7, r0
 800c348:	f1b8 0f00 	cmp.w	r8, #0
 800c34c:	d05b      	beq.n	800c406 <_dtoa_r+0xa5e>
 800c34e:	6879      	ldr	r1, [r7, #4]
 800c350:	4620      	mov	r0, r4
 800c352:	f000 fca5 	bl	800cca0 <_Balloc>
 800c356:	4605      	mov	r5, r0
 800c358:	b928      	cbnz	r0, 800c366 <_dtoa_r+0x9be>
 800c35a:	4b87      	ldr	r3, [pc, #540]	; (800c578 <_dtoa_r+0xbd0>)
 800c35c:	4602      	mov	r2, r0
 800c35e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c362:	f7ff bb3b 	b.w	800b9dc <_dtoa_r+0x34>
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	3202      	adds	r2, #2
 800c36a:	0092      	lsls	r2, r2, #2
 800c36c:	f107 010c 	add.w	r1, r7, #12
 800c370:	300c      	adds	r0, #12
 800c372:	f7fd fd31 	bl	8009dd8 <memcpy>
 800c376:	2201      	movs	r2, #1
 800c378:	4629      	mov	r1, r5
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 feec 	bl	800d158 <__lshift>
 800c380:	9b01      	ldr	r3, [sp, #4]
 800c382:	f103 0901 	add.w	r9, r3, #1
 800c386:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c38a:	4413      	add	r3, r2
 800c38c:	9305      	str	r3, [sp, #20]
 800c38e:	f00a 0301 	and.w	r3, sl, #1
 800c392:	46b8      	mov	r8, r7
 800c394:	9304      	str	r3, [sp, #16]
 800c396:	4607      	mov	r7, r0
 800c398:	4631      	mov	r1, r6
 800c39a:	ee18 0a10 	vmov	r0, s16
 800c39e:	f7ff fa77 	bl	800b890 <quorem>
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	9002      	str	r0, [sp, #8]
 800c3a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c3aa:	ee18 0a10 	vmov	r0, s16
 800c3ae:	f000 ff43 	bl	800d238 <__mcmp>
 800c3b2:	463a      	mov	r2, r7
 800c3b4:	9003      	str	r0, [sp, #12]
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f000 ff59 	bl	800d270 <__mdiff>
 800c3be:	68c2      	ldr	r2, [r0, #12]
 800c3c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	bb02      	cbnz	r2, 800c40a <_dtoa_r+0xa62>
 800c3c8:	4601      	mov	r1, r0
 800c3ca:	ee18 0a10 	vmov	r0, s16
 800c3ce:	f000 ff33 	bl	800d238 <__mcmp>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	9207      	str	r2, [sp, #28]
 800c3da:	f000 fca1 	bl	800cd20 <_Bfree>
 800c3de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c3e2:	ea43 0102 	orr.w	r1, r3, r2
 800c3e6:	9b04      	ldr	r3, [sp, #16]
 800c3e8:	430b      	orrs	r3, r1
 800c3ea:	464d      	mov	r5, r9
 800c3ec:	d10f      	bne.n	800c40e <_dtoa_r+0xa66>
 800c3ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3f2:	d02a      	beq.n	800c44a <_dtoa_r+0xaa2>
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dd02      	ble.n	800c400 <_dtoa_r+0xa58>
 800c3fa:	9b02      	ldr	r3, [sp, #8]
 800c3fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c400:	f88b a000 	strb.w	sl, [fp]
 800c404:	e775      	b.n	800c2f2 <_dtoa_r+0x94a>
 800c406:	4638      	mov	r0, r7
 800c408:	e7ba      	b.n	800c380 <_dtoa_r+0x9d8>
 800c40a:	2201      	movs	r2, #1
 800c40c:	e7e2      	b.n	800c3d4 <_dtoa_r+0xa2c>
 800c40e:	9b03      	ldr	r3, [sp, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	db04      	blt.n	800c41e <_dtoa_r+0xa76>
 800c414:	9906      	ldr	r1, [sp, #24]
 800c416:	430b      	orrs	r3, r1
 800c418:	9904      	ldr	r1, [sp, #16]
 800c41a:	430b      	orrs	r3, r1
 800c41c:	d122      	bne.n	800c464 <_dtoa_r+0xabc>
 800c41e:	2a00      	cmp	r2, #0
 800c420:	ddee      	ble.n	800c400 <_dtoa_r+0xa58>
 800c422:	ee18 1a10 	vmov	r1, s16
 800c426:	2201      	movs	r2, #1
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fe95 	bl	800d158 <__lshift>
 800c42e:	4631      	mov	r1, r6
 800c430:	ee08 0a10 	vmov	s16, r0
 800c434:	f000 ff00 	bl	800d238 <__mcmp>
 800c438:	2800      	cmp	r0, #0
 800c43a:	dc03      	bgt.n	800c444 <_dtoa_r+0xa9c>
 800c43c:	d1e0      	bne.n	800c400 <_dtoa_r+0xa58>
 800c43e:	f01a 0f01 	tst.w	sl, #1
 800c442:	d0dd      	beq.n	800c400 <_dtoa_r+0xa58>
 800c444:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c448:	d1d7      	bne.n	800c3fa <_dtoa_r+0xa52>
 800c44a:	2339      	movs	r3, #57	; 0x39
 800c44c:	f88b 3000 	strb.w	r3, [fp]
 800c450:	462b      	mov	r3, r5
 800c452:	461d      	mov	r5, r3
 800c454:	3b01      	subs	r3, #1
 800c456:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c45a:	2a39      	cmp	r2, #57	; 0x39
 800c45c:	d071      	beq.n	800c542 <_dtoa_r+0xb9a>
 800c45e:	3201      	adds	r2, #1
 800c460:	701a      	strb	r2, [r3, #0]
 800c462:	e746      	b.n	800c2f2 <_dtoa_r+0x94a>
 800c464:	2a00      	cmp	r2, #0
 800c466:	dd07      	ble.n	800c478 <_dtoa_r+0xad0>
 800c468:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c46c:	d0ed      	beq.n	800c44a <_dtoa_r+0xaa2>
 800c46e:	f10a 0301 	add.w	r3, sl, #1
 800c472:	f88b 3000 	strb.w	r3, [fp]
 800c476:	e73c      	b.n	800c2f2 <_dtoa_r+0x94a>
 800c478:	9b05      	ldr	r3, [sp, #20]
 800c47a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c47e:	4599      	cmp	r9, r3
 800c480:	d047      	beq.n	800c512 <_dtoa_r+0xb6a>
 800c482:	ee18 1a10 	vmov	r1, s16
 800c486:	2300      	movs	r3, #0
 800c488:	220a      	movs	r2, #10
 800c48a:	4620      	mov	r0, r4
 800c48c:	f000 fc6a 	bl	800cd64 <__multadd>
 800c490:	45b8      	cmp	r8, r7
 800c492:	ee08 0a10 	vmov	s16, r0
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	f04f 020a 	mov.w	r2, #10
 800c49e:	4641      	mov	r1, r8
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	d106      	bne.n	800c4b2 <_dtoa_r+0xb0a>
 800c4a4:	f000 fc5e 	bl	800cd64 <__multadd>
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	f109 0901 	add.w	r9, r9, #1
 800c4b0:	e772      	b.n	800c398 <_dtoa_r+0x9f0>
 800c4b2:	f000 fc57 	bl	800cd64 <__multadd>
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4680      	mov	r8, r0
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	220a      	movs	r2, #10
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 fc50 	bl	800cd64 <__multadd>
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	e7f1      	b.n	800c4ac <_dtoa_r+0xb04>
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	9302      	str	r3, [sp, #8]
 800c4cc:	9d01      	ldr	r5, [sp, #4]
 800c4ce:	ee18 0a10 	vmov	r0, s16
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	f7ff f9dc 	bl	800b890 <quorem>
 800c4d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4dc:	9b01      	ldr	r3, [sp, #4]
 800c4de:	f805 ab01 	strb.w	sl, [r5], #1
 800c4e2:	1aea      	subs	r2, r5, r3
 800c4e4:	9b02      	ldr	r3, [sp, #8]
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	dd09      	ble.n	800c4fe <_dtoa_r+0xb56>
 800c4ea:	ee18 1a10 	vmov	r1, s16
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	220a      	movs	r2, #10
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 fc36 	bl	800cd64 <__multadd>
 800c4f8:	ee08 0a10 	vmov	s16, r0
 800c4fc:	e7e7      	b.n	800c4ce <_dtoa_r+0xb26>
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	bfc8      	it	gt
 800c504:	461d      	movgt	r5, r3
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	bfd8      	it	le
 800c50a:	2501      	movle	r5, #1
 800c50c:	441d      	add	r5, r3
 800c50e:	f04f 0800 	mov.w	r8, #0
 800c512:	ee18 1a10 	vmov	r1, s16
 800c516:	2201      	movs	r2, #1
 800c518:	4620      	mov	r0, r4
 800c51a:	f000 fe1d 	bl	800d158 <__lshift>
 800c51e:	4631      	mov	r1, r6
 800c520:	ee08 0a10 	vmov	s16, r0
 800c524:	f000 fe88 	bl	800d238 <__mcmp>
 800c528:	2800      	cmp	r0, #0
 800c52a:	dc91      	bgt.n	800c450 <_dtoa_r+0xaa8>
 800c52c:	d102      	bne.n	800c534 <_dtoa_r+0xb8c>
 800c52e:	f01a 0f01 	tst.w	sl, #1
 800c532:	d18d      	bne.n	800c450 <_dtoa_r+0xaa8>
 800c534:	462b      	mov	r3, r5
 800c536:	461d      	mov	r5, r3
 800c538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c53c:	2a30      	cmp	r2, #48	; 0x30
 800c53e:	d0fa      	beq.n	800c536 <_dtoa_r+0xb8e>
 800c540:	e6d7      	b.n	800c2f2 <_dtoa_r+0x94a>
 800c542:	9a01      	ldr	r2, [sp, #4]
 800c544:	429a      	cmp	r2, r3
 800c546:	d184      	bne.n	800c452 <_dtoa_r+0xaaa>
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	3301      	adds	r3, #1
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	2331      	movs	r3, #49	; 0x31
 800c550:	7013      	strb	r3, [r2, #0]
 800c552:	e6ce      	b.n	800c2f2 <_dtoa_r+0x94a>
 800c554:	4b09      	ldr	r3, [pc, #36]	; (800c57c <_dtoa_r+0xbd4>)
 800c556:	f7ff ba95 	b.w	800ba84 <_dtoa_r+0xdc>
 800c55a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f47f aa6e 	bne.w	800ba3e <_dtoa_r+0x96>
 800c562:	4b07      	ldr	r3, [pc, #28]	; (800c580 <_dtoa_r+0xbd8>)
 800c564:	f7ff ba8e 	b.w	800ba84 <_dtoa_r+0xdc>
 800c568:	9b02      	ldr	r3, [sp, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	dcae      	bgt.n	800c4cc <_dtoa_r+0xb24>
 800c56e:	9b06      	ldr	r3, [sp, #24]
 800c570:	2b02      	cmp	r3, #2
 800c572:	f73f aea8 	bgt.w	800c2c6 <_dtoa_r+0x91e>
 800c576:	e7a9      	b.n	800c4cc <_dtoa_r+0xb24>
 800c578:	0800ede0 	.word	0x0800ede0
 800c57c:	0800ebe0 	.word	0x0800ebe0
 800c580:	0800ed61 	.word	0x0800ed61

0800c584 <rshift>:
 800c584:	6903      	ldr	r3, [r0, #16]
 800c586:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c58a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c58e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c592:	f100 0414 	add.w	r4, r0, #20
 800c596:	dd45      	ble.n	800c624 <rshift+0xa0>
 800c598:	f011 011f 	ands.w	r1, r1, #31
 800c59c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c5a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5a4:	d10c      	bne.n	800c5c0 <rshift+0x3c>
 800c5a6:	f100 0710 	add.w	r7, r0, #16
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	42b1      	cmp	r1, r6
 800c5ae:	d334      	bcc.n	800c61a <rshift+0x96>
 800c5b0:	1a9b      	subs	r3, r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	1eea      	subs	r2, r5, #3
 800c5b6:	4296      	cmp	r6, r2
 800c5b8:	bf38      	it	cc
 800c5ba:	2300      	movcc	r3, #0
 800c5bc:	4423      	add	r3, r4
 800c5be:	e015      	b.n	800c5ec <rshift+0x68>
 800c5c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5c4:	f1c1 0820 	rsb	r8, r1, #32
 800c5c8:	40cf      	lsrs	r7, r1
 800c5ca:	f105 0e04 	add.w	lr, r5, #4
 800c5ce:	46a1      	mov	r9, r4
 800c5d0:	4576      	cmp	r6, lr
 800c5d2:	46f4      	mov	ip, lr
 800c5d4:	d815      	bhi.n	800c602 <rshift+0x7e>
 800c5d6:	1a9a      	subs	r2, r3, r2
 800c5d8:	0092      	lsls	r2, r2, #2
 800c5da:	3a04      	subs	r2, #4
 800c5dc:	3501      	adds	r5, #1
 800c5de:	42ae      	cmp	r6, r5
 800c5e0:	bf38      	it	cc
 800c5e2:	2200      	movcc	r2, #0
 800c5e4:	18a3      	adds	r3, r4, r2
 800c5e6:	50a7      	str	r7, [r4, r2]
 800c5e8:	b107      	cbz	r7, 800c5ec <rshift+0x68>
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	1b1a      	subs	r2, r3, r4
 800c5ee:	42a3      	cmp	r3, r4
 800c5f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5f4:	bf08      	it	eq
 800c5f6:	2300      	moveq	r3, #0
 800c5f8:	6102      	str	r2, [r0, #16]
 800c5fa:	bf08      	it	eq
 800c5fc:	6143      	streq	r3, [r0, #20]
 800c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c602:	f8dc c000 	ldr.w	ip, [ip]
 800c606:	fa0c fc08 	lsl.w	ip, ip, r8
 800c60a:	ea4c 0707 	orr.w	r7, ip, r7
 800c60e:	f849 7b04 	str.w	r7, [r9], #4
 800c612:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c616:	40cf      	lsrs	r7, r1
 800c618:	e7da      	b.n	800c5d0 <rshift+0x4c>
 800c61a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c61e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c622:	e7c3      	b.n	800c5ac <rshift+0x28>
 800c624:	4623      	mov	r3, r4
 800c626:	e7e1      	b.n	800c5ec <rshift+0x68>

0800c628 <__hexdig_fun>:
 800c628:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c62c:	2b09      	cmp	r3, #9
 800c62e:	d802      	bhi.n	800c636 <__hexdig_fun+0xe>
 800c630:	3820      	subs	r0, #32
 800c632:	b2c0      	uxtb	r0, r0
 800c634:	4770      	bx	lr
 800c636:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c63a:	2b05      	cmp	r3, #5
 800c63c:	d801      	bhi.n	800c642 <__hexdig_fun+0x1a>
 800c63e:	3847      	subs	r0, #71	; 0x47
 800c640:	e7f7      	b.n	800c632 <__hexdig_fun+0xa>
 800c642:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c646:	2b05      	cmp	r3, #5
 800c648:	d801      	bhi.n	800c64e <__hexdig_fun+0x26>
 800c64a:	3827      	subs	r0, #39	; 0x27
 800c64c:	e7f1      	b.n	800c632 <__hexdig_fun+0xa>
 800c64e:	2000      	movs	r0, #0
 800c650:	4770      	bx	lr
	...

0800c654 <__gethex>:
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	ed2d 8b02 	vpush	{d8}
 800c65c:	b089      	sub	sp, #36	; 0x24
 800c65e:	ee08 0a10 	vmov	s16, r0
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	4bb4      	ldr	r3, [pc, #720]	; (800c938 <__gethex+0x2e4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	4618      	mov	r0, r3
 800c66c:	468b      	mov	fp, r1
 800c66e:	4690      	mov	r8, r2
 800c670:	f7f3 fdce 	bl	8000210 <strlen>
 800c674:	9b01      	ldr	r3, [sp, #4]
 800c676:	f8db 2000 	ldr.w	r2, [fp]
 800c67a:	4403      	add	r3, r0
 800c67c:	4682      	mov	sl, r0
 800c67e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c682:	9305      	str	r3, [sp, #20]
 800c684:	1c93      	adds	r3, r2, #2
 800c686:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c68a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c68e:	32fe      	adds	r2, #254	; 0xfe
 800c690:	18d1      	adds	r1, r2, r3
 800c692:	461f      	mov	r7, r3
 800c694:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c698:	9100      	str	r1, [sp, #0]
 800c69a:	2830      	cmp	r0, #48	; 0x30
 800c69c:	d0f8      	beq.n	800c690 <__gethex+0x3c>
 800c69e:	f7ff ffc3 	bl	800c628 <__hexdig_fun>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d13a      	bne.n	800c71e <__gethex+0xca>
 800c6a8:	9901      	ldr	r1, [sp, #4]
 800c6aa:	4652      	mov	r2, sl
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f001 fa23 	bl	800daf8 <strncmp>
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d168      	bne.n	800c78a <__gethex+0x136>
 800c6b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c6bc:	eb07 060a 	add.w	r6, r7, sl
 800c6c0:	f7ff ffb2 	bl	800c628 <__hexdig_fun>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d062      	beq.n	800c78e <__gethex+0x13a>
 800c6c8:	4633      	mov	r3, r6
 800c6ca:	7818      	ldrb	r0, [r3, #0]
 800c6cc:	2830      	cmp	r0, #48	; 0x30
 800c6ce:	461f      	mov	r7, r3
 800c6d0:	f103 0301 	add.w	r3, r3, #1
 800c6d4:	d0f9      	beq.n	800c6ca <__gethex+0x76>
 800c6d6:	f7ff ffa7 	bl	800c628 <__hexdig_fun>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	fab0 f480 	clz	r4, r0
 800c6e0:	0964      	lsrs	r4, r4, #5
 800c6e2:	4635      	mov	r5, r6
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	463a      	mov	r2, r7
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	3201      	adds	r2, #1
 800c6ec:	7830      	ldrb	r0, [r6, #0]
 800c6ee:	f7ff ff9b 	bl	800c628 <__hexdig_fun>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1f8      	bne.n	800c6e8 <__gethex+0x94>
 800c6f6:	9901      	ldr	r1, [sp, #4]
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f001 f9fc 	bl	800daf8 <strncmp>
 800c700:	b980      	cbnz	r0, 800c724 <__gethex+0xd0>
 800c702:	b94d      	cbnz	r5, 800c718 <__gethex+0xc4>
 800c704:	eb06 050a 	add.w	r5, r6, sl
 800c708:	462a      	mov	r2, r5
 800c70a:	4616      	mov	r6, r2
 800c70c:	3201      	adds	r2, #1
 800c70e:	7830      	ldrb	r0, [r6, #0]
 800c710:	f7ff ff8a 	bl	800c628 <__hexdig_fun>
 800c714:	2800      	cmp	r0, #0
 800c716:	d1f8      	bne.n	800c70a <__gethex+0xb6>
 800c718:	1bad      	subs	r5, r5, r6
 800c71a:	00ad      	lsls	r5, r5, #2
 800c71c:	e004      	b.n	800c728 <__gethex+0xd4>
 800c71e:	2400      	movs	r4, #0
 800c720:	4625      	mov	r5, r4
 800c722:	e7e0      	b.n	800c6e6 <__gethex+0x92>
 800c724:	2d00      	cmp	r5, #0
 800c726:	d1f7      	bne.n	800c718 <__gethex+0xc4>
 800c728:	7833      	ldrb	r3, [r6, #0]
 800c72a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c72e:	2b50      	cmp	r3, #80	; 0x50
 800c730:	d13b      	bne.n	800c7aa <__gethex+0x156>
 800c732:	7873      	ldrb	r3, [r6, #1]
 800c734:	2b2b      	cmp	r3, #43	; 0x2b
 800c736:	d02c      	beq.n	800c792 <__gethex+0x13e>
 800c738:	2b2d      	cmp	r3, #45	; 0x2d
 800c73a:	d02e      	beq.n	800c79a <__gethex+0x146>
 800c73c:	1c71      	adds	r1, r6, #1
 800c73e:	f04f 0900 	mov.w	r9, #0
 800c742:	7808      	ldrb	r0, [r1, #0]
 800c744:	f7ff ff70 	bl	800c628 <__hexdig_fun>
 800c748:	1e43      	subs	r3, r0, #1
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b18      	cmp	r3, #24
 800c74e:	d82c      	bhi.n	800c7aa <__gethex+0x156>
 800c750:	f1a0 0210 	sub.w	r2, r0, #16
 800c754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c758:	f7ff ff66 	bl	800c628 <__hexdig_fun>
 800c75c:	1e43      	subs	r3, r0, #1
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b18      	cmp	r3, #24
 800c762:	d91d      	bls.n	800c7a0 <__gethex+0x14c>
 800c764:	f1b9 0f00 	cmp.w	r9, #0
 800c768:	d000      	beq.n	800c76c <__gethex+0x118>
 800c76a:	4252      	negs	r2, r2
 800c76c:	4415      	add	r5, r2
 800c76e:	f8cb 1000 	str.w	r1, [fp]
 800c772:	b1e4      	cbz	r4, 800c7ae <__gethex+0x15a>
 800c774:	9b00      	ldr	r3, [sp, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	bf14      	ite	ne
 800c77a:	2700      	movne	r7, #0
 800c77c:	2706      	moveq	r7, #6
 800c77e:	4638      	mov	r0, r7
 800c780:	b009      	add	sp, #36	; 0x24
 800c782:	ecbd 8b02 	vpop	{d8}
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	463e      	mov	r6, r7
 800c78c:	4625      	mov	r5, r4
 800c78e:	2401      	movs	r4, #1
 800c790:	e7ca      	b.n	800c728 <__gethex+0xd4>
 800c792:	f04f 0900 	mov.w	r9, #0
 800c796:	1cb1      	adds	r1, r6, #2
 800c798:	e7d3      	b.n	800c742 <__gethex+0xee>
 800c79a:	f04f 0901 	mov.w	r9, #1
 800c79e:	e7fa      	b.n	800c796 <__gethex+0x142>
 800c7a0:	230a      	movs	r3, #10
 800c7a2:	fb03 0202 	mla	r2, r3, r2, r0
 800c7a6:	3a10      	subs	r2, #16
 800c7a8:	e7d4      	b.n	800c754 <__gethex+0x100>
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	e7df      	b.n	800c76e <__gethex+0x11a>
 800c7ae:	1bf3      	subs	r3, r6, r7
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	2b07      	cmp	r3, #7
 800c7b6:	dc0b      	bgt.n	800c7d0 <__gethex+0x17c>
 800c7b8:	ee18 0a10 	vmov	r0, s16
 800c7bc:	f000 fa70 	bl	800cca0 <_Balloc>
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	b940      	cbnz	r0, 800c7d6 <__gethex+0x182>
 800c7c4:	4b5d      	ldr	r3, [pc, #372]	; (800c93c <__gethex+0x2e8>)
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	21de      	movs	r1, #222	; 0xde
 800c7ca:	485d      	ldr	r0, [pc, #372]	; (800c940 <__gethex+0x2ec>)
 800c7cc:	f001 f9b6 	bl	800db3c <__assert_func>
 800c7d0:	3101      	adds	r1, #1
 800c7d2:	105b      	asrs	r3, r3, #1
 800c7d4:	e7ee      	b.n	800c7b4 <__gethex+0x160>
 800c7d6:	f100 0914 	add.w	r9, r0, #20
 800c7da:	f04f 0b00 	mov.w	fp, #0
 800c7de:	f1ca 0301 	rsb	r3, sl, #1
 800c7e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7e6:	f8cd b000 	str.w	fp, [sp]
 800c7ea:	9306      	str	r3, [sp, #24]
 800c7ec:	42b7      	cmp	r7, r6
 800c7ee:	d340      	bcc.n	800c872 <__gethex+0x21e>
 800c7f0:	9802      	ldr	r0, [sp, #8]
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	f840 3b04 	str.w	r3, [r0], #4
 800c7f8:	eba0 0009 	sub.w	r0, r0, r9
 800c7fc:	1080      	asrs	r0, r0, #2
 800c7fe:	0146      	lsls	r6, r0, #5
 800c800:	6120      	str	r0, [r4, #16]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fb3e 	bl	800ce84 <__hi0bits>
 800c808:	1a30      	subs	r0, r6, r0
 800c80a:	f8d8 6000 	ldr.w	r6, [r8]
 800c80e:	42b0      	cmp	r0, r6
 800c810:	dd63      	ble.n	800c8da <__gethex+0x286>
 800c812:	1b87      	subs	r7, r0, r6
 800c814:	4639      	mov	r1, r7
 800c816:	4620      	mov	r0, r4
 800c818:	f000 fee2 	bl	800d5e0 <__any_on>
 800c81c:	4682      	mov	sl, r0
 800c81e:	b1a8      	cbz	r0, 800c84c <__gethex+0x1f8>
 800c820:	1e7b      	subs	r3, r7, #1
 800c822:	1159      	asrs	r1, r3, #5
 800c824:	f003 021f 	and.w	r2, r3, #31
 800c828:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c82c:	f04f 0a01 	mov.w	sl, #1
 800c830:	fa0a f202 	lsl.w	r2, sl, r2
 800c834:	420a      	tst	r2, r1
 800c836:	d009      	beq.n	800c84c <__gethex+0x1f8>
 800c838:	4553      	cmp	r3, sl
 800c83a:	dd05      	ble.n	800c848 <__gethex+0x1f4>
 800c83c:	1eb9      	subs	r1, r7, #2
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fece 	bl	800d5e0 <__any_on>
 800c844:	2800      	cmp	r0, #0
 800c846:	d145      	bne.n	800c8d4 <__gethex+0x280>
 800c848:	f04f 0a02 	mov.w	sl, #2
 800c84c:	4639      	mov	r1, r7
 800c84e:	4620      	mov	r0, r4
 800c850:	f7ff fe98 	bl	800c584 <rshift>
 800c854:	443d      	add	r5, r7
 800c856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c85a:	42ab      	cmp	r3, r5
 800c85c:	da4c      	bge.n	800c8f8 <__gethex+0x2a4>
 800c85e:	ee18 0a10 	vmov	r0, s16
 800c862:	4621      	mov	r1, r4
 800c864:	f000 fa5c 	bl	800cd20 <_Bfree>
 800c868:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c86a:	2300      	movs	r3, #0
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	27a3      	movs	r7, #163	; 0xa3
 800c870:	e785      	b.n	800c77e <__gethex+0x12a>
 800c872:	1e73      	subs	r3, r6, #1
 800c874:	9a05      	ldr	r2, [sp, #20]
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d019      	beq.n	800c8b4 <__gethex+0x260>
 800c880:	f1bb 0f20 	cmp.w	fp, #32
 800c884:	d107      	bne.n	800c896 <__gethex+0x242>
 800c886:	9b02      	ldr	r3, [sp, #8]
 800c888:	9a00      	ldr	r2, [sp, #0]
 800c88a:	f843 2b04 	str.w	r2, [r3], #4
 800c88e:	9302      	str	r3, [sp, #8]
 800c890:	2300      	movs	r3, #0
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	469b      	mov	fp, r3
 800c896:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c89a:	f7ff fec5 	bl	800c628 <__hexdig_fun>
 800c89e:	9b00      	ldr	r3, [sp, #0]
 800c8a0:	f000 000f 	and.w	r0, r0, #15
 800c8a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c8a8:	4303      	orrs	r3, r0
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	f10b 0b04 	add.w	fp, fp, #4
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	e00d      	b.n	800c8d0 <__gethex+0x27c>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	9a06      	ldr	r2, [sp, #24]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	42bb      	cmp	r3, r7
 800c8bc:	d3e0      	bcc.n	800c880 <__gethex+0x22c>
 800c8be:	4618      	mov	r0, r3
 800c8c0:	9901      	ldr	r1, [sp, #4]
 800c8c2:	9307      	str	r3, [sp, #28]
 800c8c4:	4652      	mov	r2, sl
 800c8c6:	f001 f917 	bl	800daf8 <strncmp>
 800c8ca:	9b07      	ldr	r3, [sp, #28]
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d1d7      	bne.n	800c880 <__gethex+0x22c>
 800c8d0:	461e      	mov	r6, r3
 800c8d2:	e78b      	b.n	800c7ec <__gethex+0x198>
 800c8d4:	f04f 0a03 	mov.w	sl, #3
 800c8d8:	e7b8      	b.n	800c84c <__gethex+0x1f8>
 800c8da:	da0a      	bge.n	800c8f2 <__gethex+0x29e>
 800c8dc:	1a37      	subs	r7, r6, r0
 800c8de:	4621      	mov	r1, r4
 800c8e0:	ee18 0a10 	vmov	r0, s16
 800c8e4:	463a      	mov	r2, r7
 800c8e6:	f000 fc37 	bl	800d158 <__lshift>
 800c8ea:	1bed      	subs	r5, r5, r7
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	f100 0914 	add.w	r9, r0, #20
 800c8f2:	f04f 0a00 	mov.w	sl, #0
 800c8f6:	e7ae      	b.n	800c856 <__gethex+0x202>
 800c8f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8fc:	42a8      	cmp	r0, r5
 800c8fe:	dd72      	ble.n	800c9e6 <__gethex+0x392>
 800c900:	1b45      	subs	r5, r0, r5
 800c902:	42ae      	cmp	r6, r5
 800c904:	dc36      	bgt.n	800c974 <__gethex+0x320>
 800c906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d02a      	beq.n	800c964 <__gethex+0x310>
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d02c      	beq.n	800c96c <__gethex+0x318>
 800c912:	2b01      	cmp	r3, #1
 800c914:	d11c      	bne.n	800c950 <__gethex+0x2fc>
 800c916:	42ae      	cmp	r6, r5
 800c918:	d11a      	bne.n	800c950 <__gethex+0x2fc>
 800c91a:	2e01      	cmp	r6, #1
 800c91c:	d112      	bne.n	800c944 <__gethex+0x2f0>
 800c91e:	9a04      	ldr	r2, [sp, #16]
 800c920:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	2301      	movs	r3, #1
 800c928:	6123      	str	r3, [r4, #16]
 800c92a:	f8c9 3000 	str.w	r3, [r9]
 800c92e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c930:	2762      	movs	r7, #98	; 0x62
 800c932:	601c      	str	r4, [r3, #0]
 800c934:	e723      	b.n	800c77e <__gethex+0x12a>
 800c936:	bf00      	nop
 800c938:	0800ee58 	.word	0x0800ee58
 800c93c:	0800ede0 	.word	0x0800ede0
 800c940:	0800edf1 	.word	0x0800edf1
 800c944:	1e71      	subs	r1, r6, #1
 800c946:	4620      	mov	r0, r4
 800c948:	f000 fe4a 	bl	800d5e0 <__any_on>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d1e6      	bne.n	800c91e <__gethex+0x2ca>
 800c950:	ee18 0a10 	vmov	r0, s16
 800c954:	4621      	mov	r1, r4
 800c956:	f000 f9e3 	bl	800cd20 <_Bfree>
 800c95a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c95c:	2300      	movs	r3, #0
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	2750      	movs	r7, #80	; 0x50
 800c962:	e70c      	b.n	800c77e <__gethex+0x12a>
 800c964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1f2      	bne.n	800c950 <__gethex+0x2fc>
 800c96a:	e7d8      	b.n	800c91e <__gethex+0x2ca>
 800c96c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1d5      	bne.n	800c91e <__gethex+0x2ca>
 800c972:	e7ed      	b.n	800c950 <__gethex+0x2fc>
 800c974:	1e6f      	subs	r7, r5, #1
 800c976:	f1ba 0f00 	cmp.w	sl, #0
 800c97a:	d131      	bne.n	800c9e0 <__gethex+0x38c>
 800c97c:	b127      	cbz	r7, 800c988 <__gethex+0x334>
 800c97e:	4639      	mov	r1, r7
 800c980:	4620      	mov	r0, r4
 800c982:	f000 fe2d 	bl	800d5e0 <__any_on>
 800c986:	4682      	mov	sl, r0
 800c988:	117b      	asrs	r3, r7, #5
 800c98a:	2101      	movs	r1, #1
 800c98c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c990:	f007 071f 	and.w	r7, r7, #31
 800c994:	fa01 f707 	lsl.w	r7, r1, r7
 800c998:	421f      	tst	r7, r3
 800c99a:	4629      	mov	r1, r5
 800c99c:	4620      	mov	r0, r4
 800c99e:	bf18      	it	ne
 800c9a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c9a4:	1b76      	subs	r6, r6, r5
 800c9a6:	f7ff fded 	bl	800c584 <rshift>
 800c9aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c9ae:	2702      	movs	r7, #2
 800c9b0:	f1ba 0f00 	cmp.w	sl, #0
 800c9b4:	d048      	beq.n	800ca48 <__gethex+0x3f4>
 800c9b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d015      	beq.n	800c9ea <__gethex+0x396>
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d017      	beq.n	800c9f2 <__gethex+0x39e>
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d109      	bne.n	800c9da <__gethex+0x386>
 800c9c6:	f01a 0f02 	tst.w	sl, #2
 800c9ca:	d006      	beq.n	800c9da <__gethex+0x386>
 800c9cc:	f8d9 0000 	ldr.w	r0, [r9]
 800c9d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c9d4:	f01a 0f01 	tst.w	sl, #1
 800c9d8:	d10e      	bne.n	800c9f8 <__gethex+0x3a4>
 800c9da:	f047 0710 	orr.w	r7, r7, #16
 800c9de:	e033      	b.n	800ca48 <__gethex+0x3f4>
 800c9e0:	f04f 0a01 	mov.w	sl, #1
 800c9e4:	e7d0      	b.n	800c988 <__gethex+0x334>
 800c9e6:	2701      	movs	r7, #1
 800c9e8:	e7e2      	b.n	800c9b0 <__gethex+0x35c>
 800c9ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9ec:	f1c3 0301 	rsb	r3, r3, #1
 800c9f0:	9315      	str	r3, [sp, #84]	; 0x54
 800c9f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d0f0      	beq.n	800c9da <__gethex+0x386>
 800c9f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9fc:	f104 0314 	add.w	r3, r4, #20
 800ca00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca08:	f04f 0c00 	mov.w	ip, #0
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca12:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca16:	d01c      	beq.n	800ca52 <__gethex+0x3fe>
 800ca18:	3201      	adds	r2, #1
 800ca1a:	6002      	str	r2, [r0, #0]
 800ca1c:	2f02      	cmp	r7, #2
 800ca1e:	f104 0314 	add.w	r3, r4, #20
 800ca22:	d13f      	bne.n	800caa4 <__gethex+0x450>
 800ca24:	f8d8 2000 	ldr.w	r2, [r8]
 800ca28:	3a01      	subs	r2, #1
 800ca2a:	42b2      	cmp	r2, r6
 800ca2c:	d10a      	bne.n	800ca44 <__gethex+0x3f0>
 800ca2e:	1171      	asrs	r1, r6, #5
 800ca30:	2201      	movs	r2, #1
 800ca32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca36:	f006 061f 	and.w	r6, r6, #31
 800ca3a:	fa02 f606 	lsl.w	r6, r2, r6
 800ca3e:	421e      	tst	r6, r3
 800ca40:	bf18      	it	ne
 800ca42:	4617      	movne	r7, r2
 800ca44:	f047 0720 	orr.w	r7, r7, #32
 800ca48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca4a:	601c      	str	r4, [r3, #0]
 800ca4c:	9b04      	ldr	r3, [sp, #16]
 800ca4e:	601d      	str	r5, [r3, #0]
 800ca50:	e695      	b.n	800c77e <__gethex+0x12a>
 800ca52:	4299      	cmp	r1, r3
 800ca54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca58:	d8d8      	bhi.n	800ca0c <__gethex+0x3b8>
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	459b      	cmp	fp, r3
 800ca5e:	db19      	blt.n	800ca94 <__gethex+0x440>
 800ca60:	6861      	ldr	r1, [r4, #4]
 800ca62:	ee18 0a10 	vmov	r0, s16
 800ca66:	3101      	adds	r1, #1
 800ca68:	f000 f91a 	bl	800cca0 <_Balloc>
 800ca6c:	4681      	mov	r9, r0
 800ca6e:	b918      	cbnz	r0, 800ca78 <__gethex+0x424>
 800ca70:	4b1a      	ldr	r3, [pc, #104]	; (800cadc <__gethex+0x488>)
 800ca72:	4602      	mov	r2, r0
 800ca74:	2184      	movs	r1, #132	; 0x84
 800ca76:	e6a8      	b.n	800c7ca <__gethex+0x176>
 800ca78:	6922      	ldr	r2, [r4, #16]
 800ca7a:	3202      	adds	r2, #2
 800ca7c:	f104 010c 	add.w	r1, r4, #12
 800ca80:	0092      	lsls	r2, r2, #2
 800ca82:	300c      	adds	r0, #12
 800ca84:	f7fd f9a8 	bl	8009dd8 <memcpy>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	ee18 0a10 	vmov	r0, s16
 800ca8e:	f000 f947 	bl	800cd20 <_Bfree>
 800ca92:	464c      	mov	r4, r9
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca9c:	6122      	str	r2, [r4, #16]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	615a      	str	r2, [r3, #20]
 800caa2:	e7bb      	b.n	800ca1c <__gethex+0x3c8>
 800caa4:	6922      	ldr	r2, [r4, #16]
 800caa6:	455a      	cmp	r2, fp
 800caa8:	dd0b      	ble.n	800cac2 <__gethex+0x46e>
 800caaa:	2101      	movs	r1, #1
 800caac:	4620      	mov	r0, r4
 800caae:	f7ff fd69 	bl	800c584 <rshift>
 800cab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cab6:	3501      	adds	r5, #1
 800cab8:	42ab      	cmp	r3, r5
 800caba:	f6ff aed0 	blt.w	800c85e <__gethex+0x20a>
 800cabe:	2701      	movs	r7, #1
 800cac0:	e7c0      	b.n	800ca44 <__gethex+0x3f0>
 800cac2:	f016 061f 	ands.w	r6, r6, #31
 800cac6:	d0fa      	beq.n	800cabe <__gethex+0x46a>
 800cac8:	4453      	add	r3, sl
 800caca:	f1c6 0620 	rsb	r6, r6, #32
 800cace:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cad2:	f000 f9d7 	bl	800ce84 <__hi0bits>
 800cad6:	42b0      	cmp	r0, r6
 800cad8:	dbe7      	blt.n	800caaa <__gethex+0x456>
 800cada:	e7f0      	b.n	800cabe <__gethex+0x46a>
 800cadc:	0800ede0 	.word	0x0800ede0

0800cae0 <L_shift>:
 800cae0:	f1c2 0208 	rsb	r2, r2, #8
 800cae4:	0092      	lsls	r2, r2, #2
 800cae6:	b570      	push	{r4, r5, r6, lr}
 800cae8:	f1c2 0620 	rsb	r6, r2, #32
 800caec:	6843      	ldr	r3, [r0, #4]
 800caee:	6804      	ldr	r4, [r0, #0]
 800caf0:	fa03 f506 	lsl.w	r5, r3, r6
 800caf4:	432c      	orrs	r4, r5
 800caf6:	40d3      	lsrs	r3, r2
 800caf8:	6004      	str	r4, [r0, #0]
 800cafa:	f840 3f04 	str.w	r3, [r0, #4]!
 800cafe:	4288      	cmp	r0, r1
 800cb00:	d3f4      	bcc.n	800caec <L_shift+0xc>
 800cb02:	bd70      	pop	{r4, r5, r6, pc}

0800cb04 <__match>:
 800cb04:	b530      	push	{r4, r5, lr}
 800cb06:	6803      	ldr	r3, [r0, #0]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb0e:	b914      	cbnz	r4, 800cb16 <__match+0x12>
 800cb10:	6003      	str	r3, [r0, #0]
 800cb12:	2001      	movs	r0, #1
 800cb14:	bd30      	pop	{r4, r5, pc}
 800cb16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cb1e:	2d19      	cmp	r5, #25
 800cb20:	bf98      	it	ls
 800cb22:	3220      	addls	r2, #32
 800cb24:	42a2      	cmp	r2, r4
 800cb26:	d0f0      	beq.n	800cb0a <__match+0x6>
 800cb28:	2000      	movs	r0, #0
 800cb2a:	e7f3      	b.n	800cb14 <__match+0x10>

0800cb2c <__hexnan>:
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	680b      	ldr	r3, [r1, #0]
 800cb32:	115e      	asrs	r6, r3, #5
 800cb34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb38:	f013 031f 	ands.w	r3, r3, #31
 800cb3c:	b087      	sub	sp, #28
 800cb3e:	bf18      	it	ne
 800cb40:	3604      	addne	r6, #4
 800cb42:	2500      	movs	r5, #0
 800cb44:	1f37      	subs	r7, r6, #4
 800cb46:	4690      	mov	r8, r2
 800cb48:	6802      	ldr	r2, [r0, #0]
 800cb4a:	9301      	str	r3, [sp, #4]
 800cb4c:	4682      	mov	sl, r0
 800cb4e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb52:	46b9      	mov	r9, r7
 800cb54:	463c      	mov	r4, r7
 800cb56:	9502      	str	r5, [sp, #8]
 800cb58:	46ab      	mov	fp, r5
 800cb5a:	7851      	ldrb	r1, [r2, #1]
 800cb5c:	1c53      	adds	r3, r2, #1
 800cb5e:	9303      	str	r3, [sp, #12]
 800cb60:	b341      	cbz	r1, 800cbb4 <__hexnan+0x88>
 800cb62:	4608      	mov	r0, r1
 800cb64:	9205      	str	r2, [sp, #20]
 800cb66:	9104      	str	r1, [sp, #16]
 800cb68:	f7ff fd5e 	bl	800c628 <__hexdig_fun>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d14f      	bne.n	800cc10 <__hexnan+0xe4>
 800cb70:	9904      	ldr	r1, [sp, #16]
 800cb72:	9a05      	ldr	r2, [sp, #20]
 800cb74:	2920      	cmp	r1, #32
 800cb76:	d818      	bhi.n	800cbaa <__hexnan+0x7e>
 800cb78:	9b02      	ldr	r3, [sp, #8]
 800cb7a:	459b      	cmp	fp, r3
 800cb7c:	dd13      	ble.n	800cba6 <__hexnan+0x7a>
 800cb7e:	454c      	cmp	r4, r9
 800cb80:	d206      	bcs.n	800cb90 <__hexnan+0x64>
 800cb82:	2d07      	cmp	r5, #7
 800cb84:	dc04      	bgt.n	800cb90 <__hexnan+0x64>
 800cb86:	462a      	mov	r2, r5
 800cb88:	4649      	mov	r1, r9
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7ff ffa8 	bl	800cae0 <L_shift>
 800cb90:	4544      	cmp	r4, r8
 800cb92:	d950      	bls.n	800cc36 <__hexnan+0x10a>
 800cb94:	2300      	movs	r3, #0
 800cb96:	f1a4 0904 	sub.w	r9, r4, #4
 800cb9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb9e:	f8cd b008 	str.w	fp, [sp, #8]
 800cba2:	464c      	mov	r4, r9
 800cba4:	461d      	mov	r5, r3
 800cba6:	9a03      	ldr	r2, [sp, #12]
 800cba8:	e7d7      	b.n	800cb5a <__hexnan+0x2e>
 800cbaa:	2929      	cmp	r1, #41	; 0x29
 800cbac:	d156      	bne.n	800cc5c <__hexnan+0x130>
 800cbae:	3202      	adds	r2, #2
 800cbb0:	f8ca 2000 	str.w	r2, [sl]
 800cbb4:	f1bb 0f00 	cmp.w	fp, #0
 800cbb8:	d050      	beq.n	800cc5c <__hexnan+0x130>
 800cbba:	454c      	cmp	r4, r9
 800cbbc:	d206      	bcs.n	800cbcc <__hexnan+0xa0>
 800cbbe:	2d07      	cmp	r5, #7
 800cbc0:	dc04      	bgt.n	800cbcc <__hexnan+0xa0>
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7ff ff8a 	bl	800cae0 <L_shift>
 800cbcc:	4544      	cmp	r4, r8
 800cbce:	d934      	bls.n	800cc3a <__hexnan+0x10e>
 800cbd0:	f1a8 0204 	sub.w	r2, r8, #4
 800cbd4:	4623      	mov	r3, r4
 800cbd6:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbda:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbde:	429f      	cmp	r7, r3
 800cbe0:	d2f9      	bcs.n	800cbd6 <__hexnan+0xaa>
 800cbe2:	1b3b      	subs	r3, r7, r4
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	3304      	adds	r3, #4
 800cbea:	3401      	adds	r4, #1
 800cbec:	3e03      	subs	r6, #3
 800cbee:	42b4      	cmp	r4, r6
 800cbf0:	bf88      	it	hi
 800cbf2:	2304      	movhi	r3, #4
 800cbf4:	4443      	add	r3, r8
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f843 2b04 	str.w	r2, [r3], #4
 800cbfc:	429f      	cmp	r7, r3
 800cbfe:	d2fb      	bcs.n	800cbf8 <__hexnan+0xcc>
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	b91b      	cbnz	r3, 800cc0c <__hexnan+0xe0>
 800cc04:	4547      	cmp	r7, r8
 800cc06:	d127      	bne.n	800cc58 <__hexnan+0x12c>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	2005      	movs	r0, #5
 800cc0e:	e026      	b.n	800cc5e <__hexnan+0x132>
 800cc10:	3501      	adds	r5, #1
 800cc12:	2d08      	cmp	r5, #8
 800cc14:	f10b 0b01 	add.w	fp, fp, #1
 800cc18:	dd06      	ble.n	800cc28 <__hexnan+0xfc>
 800cc1a:	4544      	cmp	r4, r8
 800cc1c:	d9c3      	bls.n	800cba6 <__hexnan+0x7a>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc24:	2501      	movs	r5, #1
 800cc26:	3c04      	subs	r4, #4
 800cc28:	6822      	ldr	r2, [r4, #0]
 800cc2a:	f000 000f 	and.w	r0, r0, #15
 800cc2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cc32:	6022      	str	r2, [r4, #0]
 800cc34:	e7b7      	b.n	800cba6 <__hexnan+0x7a>
 800cc36:	2508      	movs	r5, #8
 800cc38:	e7b5      	b.n	800cba6 <__hexnan+0x7a>
 800cc3a:	9b01      	ldr	r3, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0df      	beq.n	800cc00 <__hexnan+0xd4>
 800cc40:	f04f 32ff 	mov.w	r2, #4294967295
 800cc44:	f1c3 0320 	rsb	r3, r3, #32
 800cc48:	fa22 f303 	lsr.w	r3, r2, r3
 800cc4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc50:	401a      	ands	r2, r3
 800cc52:	f846 2c04 	str.w	r2, [r6, #-4]
 800cc56:	e7d3      	b.n	800cc00 <__hexnan+0xd4>
 800cc58:	3f04      	subs	r7, #4
 800cc5a:	e7d1      	b.n	800cc00 <__hexnan+0xd4>
 800cc5c:	2004      	movs	r0, #4
 800cc5e:	b007      	add	sp, #28
 800cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc64 <_localeconv_r>:
 800cc64:	4800      	ldr	r0, [pc, #0]	; (800cc68 <_localeconv_r+0x4>)
 800cc66:	4770      	bx	lr
 800cc68:	20000168 	.word	0x20000168

0800cc6c <malloc>:
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <malloc+0xc>)
 800cc6e:	4601      	mov	r1, r0
 800cc70:	6818      	ldr	r0, [r3, #0]
 800cc72:	f000 bd59 	b.w	800d728 <_malloc_r>
 800cc76:	bf00      	nop
 800cc78:	20000010 	.word	0x20000010

0800cc7c <__ascii_mbtowc>:
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	b901      	cbnz	r1, 800cc82 <__ascii_mbtowc+0x6>
 800cc80:	a901      	add	r1, sp, #4
 800cc82:	b142      	cbz	r2, 800cc96 <__ascii_mbtowc+0x1a>
 800cc84:	b14b      	cbz	r3, 800cc9a <__ascii_mbtowc+0x1e>
 800cc86:	7813      	ldrb	r3, [r2, #0]
 800cc88:	600b      	str	r3, [r1, #0]
 800cc8a:	7812      	ldrb	r2, [r2, #0]
 800cc8c:	1e10      	subs	r0, r2, #0
 800cc8e:	bf18      	it	ne
 800cc90:	2001      	movne	r0, #1
 800cc92:	b002      	add	sp, #8
 800cc94:	4770      	bx	lr
 800cc96:	4610      	mov	r0, r2
 800cc98:	e7fb      	b.n	800cc92 <__ascii_mbtowc+0x16>
 800cc9a:	f06f 0001 	mvn.w	r0, #1
 800cc9e:	e7f8      	b.n	800cc92 <__ascii_mbtowc+0x16>

0800cca0 <_Balloc>:
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cca4:	4604      	mov	r4, r0
 800cca6:	460d      	mov	r5, r1
 800cca8:	b976      	cbnz	r6, 800ccc8 <_Balloc+0x28>
 800ccaa:	2010      	movs	r0, #16
 800ccac:	f7ff ffde 	bl	800cc6c <malloc>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	6260      	str	r0, [r4, #36]	; 0x24
 800ccb4:	b920      	cbnz	r0, 800ccc0 <_Balloc+0x20>
 800ccb6:	4b18      	ldr	r3, [pc, #96]	; (800cd18 <_Balloc+0x78>)
 800ccb8:	4818      	ldr	r0, [pc, #96]	; (800cd1c <_Balloc+0x7c>)
 800ccba:	2166      	movs	r1, #102	; 0x66
 800ccbc:	f000 ff3e 	bl	800db3c <__assert_func>
 800ccc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccc4:	6006      	str	r6, [r0, #0]
 800ccc6:	60c6      	str	r6, [r0, #12]
 800ccc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ccca:	68f3      	ldr	r3, [r6, #12]
 800cccc:	b183      	cbz	r3, 800ccf0 <_Balloc+0x50>
 800ccce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccd6:	b9b8      	cbnz	r0, 800cd08 <_Balloc+0x68>
 800ccd8:	2101      	movs	r1, #1
 800ccda:	fa01 f605 	lsl.w	r6, r1, r5
 800ccde:	1d72      	adds	r2, r6, #5
 800cce0:	0092      	lsls	r2, r2, #2
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fc9d 	bl	800d622 <_calloc_r>
 800cce8:	b160      	cbz	r0, 800cd04 <_Balloc+0x64>
 800ccea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccee:	e00e      	b.n	800cd0e <_Balloc+0x6e>
 800ccf0:	2221      	movs	r2, #33	; 0x21
 800ccf2:	2104      	movs	r1, #4
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fc94 	bl	800d622 <_calloc_r>
 800ccfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccfc:	60f0      	str	r0, [r6, #12]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1e4      	bne.n	800ccce <_Balloc+0x2e>
 800cd04:	2000      	movs	r0, #0
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	6802      	ldr	r2, [r0, #0]
 800cd0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd14:	e7f7      	b.n	800cd06 <_Balloc+0x66>
 800cd16:	bf00      	nop
 800cd18:	0800ed6e 	.word	0x0800ed6e
 800cd1c:	0800ee6c 	.word	0x0800ee6c

0800cd20 <_Bfree>:
 800cd20:	b570      	push	{r4, r5, r6, lr}
 800cd22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd24:	4605      	mov	r5, r0
 800cd26:	460c      	mov	r4, r1
 800cd28:	b976      	cbnz	r6, 800cd48 <_Bfree+0x28>
 800cd2a:	2010      	movs	r0, #16
 800cd2c:	f7ff ff9e 	bl	800cc6c <malloc>
 800cd30:	4602      	mov	r2, r0
 800cd32:	6268      	str	r0, [r5, #36]	; 0x24
 800cd34:	b920      	cbnz	r0, 800cd40 <_Bfree+0x20>
 800cd36:	4b09      	ldr	r3, [pc, #36]	; (800cd5c <_Bfree+0x3c>)
 800cd38:	4809      	ldr	r0, [pc, #36]	; (800cd60 <_Bfree+0x40>)
 800cd3a:	218a      	movs	r1, #138	; 0x8a
 800cd3c:	f000 fefe 	bl	800db3c <__assert_func>
 800cd40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd44:	6006      	str	r6, [r0, #0]
 800cd46:	60c6      	str	r6, [r0, #12]
 800cd48:	b13c      	cbz	r4, 800cd5a <_Bfree+0x3a>
 800cd4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd4c:	6862      	ldr	r2, [r4, #4]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd54:	6021      	str	r1, [r4, #0]
 800cd56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	0800ed6e 	.word	0x0800ed6e
 800cd60:	0800ee6c 	.word	0x0800ee6c

0800cd64 <__multadd>:
 800cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd68:	690d      	ldr	r5, [r1, #16]
 800cd6a:	4607      	mov	r7, r0
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	461e      	mov	r6, r3
 800cd70:	f101 0c14 	add.w	ip, r1, #20
 800cd74:	2000      	movs	r0, #0
 800cd76:	f8dc 3000 	ldr.w	r3, [ip]
 800cd7a:	b299      	uxth	r1, r3
 800cd7c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd80:	0c1e      	lsrs	r6, r3, #16
 800cd82:	0c0b      	lsrs	r3, r1, #16
 800cd84:	fb02 3306 	mla	r3, r2, r6, r3
 800cd88:	b289      	uxth	r1, r1
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd90:	4285      	cmp	r5, r0
 800cd92:	f84c 1b04 	str.w	r1, [ip], #4
 800cd96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd9a:	dcec      	bgt.n	800cd76 <__multadd+0x12>
 800cd9c:	b30e      	cbz	r6, 800cde2 <__multadd+0x7e>
 800cd9e:	68a3      	ldr	r3, [r4, #8]
 800cda0:	42ab      	cmp	r3, r5
 800cda2:	dc19      	bgt.n	800cdd8 <__multadd+0x74>
 800cda4:	6861      	ldr	r1, [r4, #4]
 800cda6:	4638      	mov	r0, r7
 800cda8:	3101      	adds	r1, #1
 800cdaa:	f7ff ff79 	bl	800cca0 <_Balloc>
 800cdae:	4680      	mov	r8, r0
 800cdb0:	b928      	cbnz	r0, 800cdbe <__multadd+0x5a>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	4b0c      	ldr	r3, [pc, #48]	; (800cde8 <__multadd+0x84>)
 800cdb6:	480d      	ldr	r0, [pc, #52]	; (800cdec <__multadd+0x88>)
 800cdb8:	21b5      	movs	r1, #181	; 0xb5
 800cdba:	f000 febf 	bl	800db3c <__assert_func>
 800cdbe:	6922      	ldr	r2, [r4, #16]
 800cdc0:	3202      	adds	r2, #2
 800cdc2:	f104 010c 	add.w	r1, r4, #12
 800cdc6:	0092      	lsls	r2, r2, #2
 800cdc8:	300c      	adds	r0, #12
 800cdca:	f7fd f805 	bl	8009dd8 <memcpy>
 800cdce:	4621      	mov	r1, r4
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f7ff ffa5 	bl	800cd20 <_Bfree>
 800cdd6:	4644      	mov	r4, r8
 800cdd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cddc:	3501      	adds	r5, #1
 800cdde:	615e      	str	r6, [r3, #20]
 800cde0:	6125      	str	r5, [r4, #16]
 800cde2:	4620      	mov	r0, r4
 800cde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde8:	0800ede0 	.word	0x0800ede0
 800cdec:	0800ee6c 	.word	0x0800ee6c

0800cdf0 <__s2b>:
 800cdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	4615      	mov	r5, r2
 800cdf8:	461f      	mov	r7, r3
 800cdfa:	2209      	movs	r2, #9
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	4606      	mov	r6, r0
 800ce00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce04:	2100      	movs	r1, #0
 800ce06:	2201      	movs	r2, #1
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	db09      	blt.n	800ce20 <__s2b+0x30>
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f7ff ff47 	bl	800cca0 <_Balloc>
 800ce12:	b940      	cbnz	r0, 800ce26 <__s2b+0x36>
 800ce14:	4602      	mov	r2, r0
 800ce16:	4b19      	ldr	r3, [pc, #100]	; (800ce7c <__s2b+0x8c>)
 800ce18:	4819      	ldr	r0, [pc, #100]	; (800ce80 <__s2b+0x90>)
 800ce1a:	21ce      	movs	r1, #206	; 0xce
 800ce1c:	f000 fe8e 	bl	800db3c <__assert_func>
 800ce20:	0052      	lsls	r2, r2, #1
 800ce22:	3101      	adds	r1, #1
 800ce24:	e7f0      	b.n	800ce08 <__s2b+0x18>
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	6143      	str	r3, [r0, #20]
 800ce2a:	2d09      	cmp	r5, #9
 800ce2c:	f04f 0301 	mov.w	r3, #1
 800ce30:	6103      	str	r3, [r0, #16]
 800ce32:	dd16      	ble.n	800ce62 <__s2b+0x72>
 800ce34:	f104 0909 	add.w	r9, r4, #9
 800ce38:	46c8      	mov	r8, r9
 800ce3a:	442c      	add	r4, r5
 800ce3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce40:	4601      	mov	r1, r0
 800ce42:	3b30      	subs	r3, #48	; 0x30
 800ce44:	220a      	movs	r2, #10
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7ff ff8c 	bl	800cd64 <__multadd>
 800ce4c:	45a0      	cmp	r8, r4
 800ce4e:	d1f5      	bne.n	800ce3c <__s2b+0x4c>
 800ce50:	f1a5 0408 	sub.w	r4, r5, #8
 800ce54:	444c      	add	r4, r9
 800ce56:	1b2d      	subs	r5, r5, r4
 800ce58:	1963      	adds	r3, r4, r5
 800ce5a:	42bb      	cmp	r3, r7
 800ce5c:	db04      	blt.n	800ce68 <__s2b+0x78>
 800ce5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce62:	340a      	adds	r4, #10
 800ce64:	2509      	movs	r5, #9
 800ce66:	e7f6      	b.n	800ce56 <__s2b+0x66>
 800ce68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce6c:	4601      	mov	r1, r0
 800ce6e:	3b30      	subs	r3, #48	; 0x30
 800ce70:	220a      	movs	r2, #10
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7ff ff76 	bl	800cd64 <__multadd>
 800ce78:	e7ee      	b.n	800ce58 <__s2b+0x68>
 800ce7a:	bf00      	nop
 800ce7c:	0800ede0 	.word	0x0800ede0
 800ce80:	0800ee6c 	.word	0x0800ee6c

0800ce84 <__hi0bits>:
 800ce84:	0c03      	lsrs	r3, r0, #16
 800ce86:	041b      	lsls	r3, r3, #16
 800ce88:	b9d3      	cbnz	r3, 800cec0 <__hi0bits+0x3c>
 800ce8a:	0400      	lsls	r0, r0, #16
 800ce8c:	2310      	movs	r3, #16
 800ce8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce92:	bf04      	itt	eq
 800ce94:	0200      	lsleq	r0, r0, #8
 800ce96:	3308      	addeq	r3, #8
 800ce98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce9c:	bf04      	itt	eq
 800ce9e:	0100      	lsleq	r0, r0, #4
 800cea0:	3304      	addeq	r3, #4
 800cea2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cea6:	bf04      	itt	eq
 800cea8:	0080      	lsleq	r0, r0, #2
 800ceaa:	3302      	addeq	r3, #2
 800ceac:	2800      	cmp	r0, #0
 800ceae:	db05      	blt.n	800cebc <__hi0bits+0x38>
 800ceb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ceb4:	f103 0301 	add.w	r3, r3, #1
 800ceb8:	bf08      	it	eq
 800ceba:	2320      	moveq	r3, #32
 800cebc:	4618      	mov	r0, r3
 800cebe:	4770      	bx	lr
 800cec0:	2300      	movs	r3, #0
 800cec2:	e7e4      	b.n	800ce8e <__hi0bits+0xa>

0800cec4 <__lo0bits>:
 800cec4:	6803      	ldr	r3, [r0, #0]
 800cec6:	f013 0207 	ands.w	r2, r3, #7
 800ceca:	4601      	mov	r1, r0
 800cecc:	d00b      	beq.n	800cee6 <__lo0bits+0x22>
 800cece:	07da      	lsls	r2, r3, #31
 800ced0:	d423      	bmi.n	800cf1a <__lo0bits+0x56>
 800ced2:	0798      	lsls	r0, r3, #30
 800ced4:	bf49      	itett	mi
 800ced6:	085b      	lsrmi	r3, r3, #1
 800ced8:	089b      	lsrpl	r3, r3, #2
 800ceda:	2001      	movmi	r0, #1
 800cedc:	600b      	strmi	r3, [r1, #0]
 800cede:	bf5c      	itt	pl
 800cee0:	600b      	strpl	r3, [r1, #0]
 800cee2:	2002      	movpl	r0, #2
 800cee4:	4770      	bx	lr
 800cee6:	b298      	uxth	r0, r3
 800cee8:	b9a8      	cbnz	r0, 800cf16 <__lo0bits+0x52>
 800ceea:	0c1b      	lsrs	r3, r3, #16
 800ceec:	2010      	movs	r0, #16
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	b90a      	cbnz	r2, 800cef6 <__lo0bits+0x32>
 800cef2:	3008      	adds	r0, #8
 800cef4:	0a1b      	lsrs	r3, r3, #8
 800cef6:	071a      	lsls	r2, r3, #28
 800cef8:	bf04      	itt	eq
 800cefa:	091b      	lsreq	r3, r3, #4
 800cefc:	3004      	addeq	r0, #4
 800cefe:	079a      	lsls	r2, r3, #30
 800cf00:	bf04      	itt	eq
 800cf02:	089b      	lsreq	r3, r3, #2
 800cf04:	3002      	addeq	r0, #2
 800cf06:	07da      	lsls	r2, r3, #31
 800cf08:	d403      	bmi.n	800cf12 <__lo0bits+0x4e>
 800cf0a:	085b      	lsrs	r3, r3, #1
 800cf0c:	f100 0001 	add.w	r0, r0, #1
 800cf10:	d005      	beq.n	800cf1e <__lo0bits+0x5a>
 800cf12:	600b      	str	r3, [r1, #0]
 800cf14:	4770      	bx	lr
 800cf16:	4610      	mov	r0, r2
 800cf18:	e7e9      	b.n	800ceee <__lo0bits+0x2a>
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	4770      	bx	lr
 800cf1e:	2020      	movs	r0, #32
 800cf20:	4770      	bx	lr
	...

0800cf24 <__i2b>:
 800cf24:	b510      	push	{r4, lr}
 800cf26:	460c      	mov	r4, r1
 800cf28:	2101      	movs	r1, #1
 800cf2a:	f7ff feb9 	bl	800cca0 <_Balloc>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	b928      	cbnz	r0, 800cf3e <__i2b+0x1a>
 800cf32:	4b05      	ldr	r3, [pc, #20]	; (800cf48 <__i2b+0x24>)
 800cf34:	4805      	ldr	r0, [pc, #20]	; (800cf4c <__i2b+0x28>)
 800cf36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf3a:	f000 fdff 	bl	800db3c <__assert_func>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	6144      	str	r4, [r0, #20]
 800cf42:	6103      	str	r3, [r0, #16]
 800cf44:	bd10      	pop	{r4, pc}
 800cf46:	bf00      	nop
 800cf48:	0800ede0 	.word	0x0800ede0
 800cf4c:	0800ee6c 	.word	0x0800ee6c

0800cf50 <__multiply>:
 800cf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	4691      	mov	r9, r2
 800cf56:	690a      	ldr	r2, [r1, #16]
 800cf58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	bfb8      	it	lt
 800cf60:	460b      	movlt	r3, r1
 800cf62:	460c      	mov	r4, r1
 800cf64:	bfbc      	itt	lt
 800cf66:	464c      	movlt	r4, r9
 800cf68:	4699      	movlt	r9, r3
 800cf6a:	6927      	ldr	r7, [r4, #16]
 800cf6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf70:	68a3      	ldr	r3, [r4, #8]
 800cf72:	6861      	ldr	r1, [r4, #4]
 800cf74:	eb07 060a 	add.w	r6, r7, sl
 800cf78:	42b3      	cmp	r3, r6
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	bfb8      	it	lt
 800cf7e:	3101      	addlt	r1, #1
 800cf80:	f7ff fe8e 	bl	800cca0 <_Balloc>
 800cf84:	b930      	cbnz	r0, 800cf94 <__multiply+0x44>
 800cf86:	4602      	mov	r2, r0
 800cf88:	4b44      	ldr	r3, [pc, #272]	; (800d09c <__multiply+0x14c>)
 800cf8a:	4845      	ldr	r0, [pc, #276]	; (800d0a0 <__multiply+0x150>)
 800cf8c:	f240 115d 	movw	r1, #349	; 0x15d
 800cf90:	f000 fdd4 	bl	800db3c <__assert_func>
 800cf94:	f100 0514 	add.w	r5, r0, #20
 800cf98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	4543      	cmp	r3, r8
 800cfa2:	d321      	bcc.n	800cfe8 <__multiply+0x98>
 800cfa4:	f104 0314 	add.w	r3, r4, #20
 800cfa8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfac:	f109 0314 	add.w	r3, r9, #20
 800cfb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfb4:	9202      	str	r2, [sp, #8]
 800cfb6:	1b3a      	subs	r2, r7, r4
 800cfb8:	3a15      	subs	r2, #21
 800cfba:	f022 0203 	bic.w	r2, r2, #3
 800cfbe:	3204      	adds	r2, #4
 800cfc0:	f104 0115 	add.w	r1, r4, #21
 800cfc4:	428f      	cmp	r7, r1
 800cfc6:	bf38      	it	cc
 800cfc8:	2204      	movcc	r2, #4
 800cfca:	9201      	str	r2, [sp, #4]
 800cfcc:	9a02      	ldr	r2, [sp, #8]
 800cfce:	9303      	str	r3, [sp, #12]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d80c      	bhi.n	800cfee <__multiply+0x9e>
 800cfd4:	2e00      	cmp	r6, #0
 800cfd6:	dd03      	ble.n	800cfe0 <__multiply+0x90>
 800cfd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d05a      	beq.n	800d096 <__multiply+0x146>
 800cfe0:	6106      	str	r6, [r0, #16]
 800cfe2:	b005      	add	sp, #20
 800cfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe8:	f843 2b04 	str.w	r2, [r3], #4
 800cfec:	e7d8      	b.n	800cfa0 <__multiply+0x50>
 800cfee:	f8b3 a000 	ldrh.w	sl, [r3]
 800cff2:	f1ba 0f00 	cmp.w	sl, #0
 800cff6:	d024      	beq.n	800d042 <__multiply+0xf2>
 800cff8:	f104 0e14 	add.w	lr, r4, #20
 800cffc:	46a9      	mov	r9, r5
 800cffe:	f04f 0c00 	mov.w	ip, #0
 800d002:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d006:	f8d9 1000 	ldr.w	r1, [r9]
 800d00a:	fa1f fb82 	uxth.w	fp, r2
 800d00e:	b289      	uxth	r1, r1
 800d010:	fb0a 110b 	mla	r1, sl, fp, r1
 800d014:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d018:	f8d9 2000 	ldr.w	r2, [r9]
 800d01c:	4461      	add	r1, ip
 800d01e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d022:	fb0a c20b 	mla	r2, sl, fp, ip
 800d026:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d02a:	b289      	uxth	r1, r1
 800d02c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d030:	4577      	cmp	r7, lr
 800d032:	f849 1b04 	str.w	r1, [r9], #4
 800d036:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d03a:	d8e2      	bhi.n	800d002 <__multiply+0xb2>
 800d03c:	9a01      	ldr	r2, [sp, #4]
 800d03e:	f845 c002 	str.w	ip, [r5, r2]
 800d042:	9a03      	ldr	r2, [sp, #12]
 800d044:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d048:	3304      	adds	r3, #4
 800d04a:	f1b9 0f00 	cmp.w	r9, #0
 800d04e:	d020      	beq.n	800d092 <__multiply+0x142>
 800d050:	6829      	ldr	r1, [r5, #0]
 800d052:	f104 0c14 	add.w	ip, r4, #20
 800d056:	46ae      	mov	lr, r5
 800d058:	f04f 0a00 	mov.w	sl, #0
 800d05c:	f8bc b000 	ldrh.w	fp, [ip]
 800d060:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d064:	fb09 220b 	mla	r2, r9, fp, r2
 800d068:	4492      	add	sl, r2
 800d06a:	b289      	uxth	r1, r1
 800d06c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d070:	f84e 1b04 	str.w	r1, [lr], #4
 800d074:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d078:	f8be 1000 	ldrh.w	r1, [lr]
 800d07c:	0c12      	lsrs	r2, r2, #16
 800d07e:	fb09 1102 	mla	r1, r9, r2, r1
 800d082:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d086:	4567      	cmp	r7, ip
 800d088:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d08c:	d8e6      	bhi.n	800d05c <__multiply+0x10c>
 800d08e:	9a01      	ldr	r2, [sp, #4]
 800d090:	50a9      	str	r1, [r5, r2]
 800d092:	3504      	adds	r5, #4
 800d094:	e79a      	b.n	800cfcc <__multiply+0x7c>
 800d096:	3e01      	subs	r6, #1
 800d098:	e79c      	b.n	800cfd4 <__multiply+0x84>
 800d09a:	bf00      	nop
 800d09c:	0800ede0 	.word	0x0800ede0
 800d0a0:	0800ee6c 	.word	0x0800ee6c

0800d0a4 <__pow5mult>:
 800d0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	4615      	mov	r5, r2
 800d0aa:	f012 0203 	ands.w	r2, r2, #3
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	d007      	beq.n	800d0c4 <__pow5mult+0x20>
 800d0b4:	4c25      	ldr	r4, [pc, #148]	; (800d14c <__pow5mult+0xa8>)
 800d0b6:	3a01      	subs	r2, #1
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0be:	f7ff fe51 	bl	800cd64 <__multadd>
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	10ad      	asrs	r5, r5, #2
 800d0c6:	d03d      	beq.n	800d144 <__pow5mult+0xa0>
 800d0c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0ca:	b97c      	cbnz	r4, 800d0ec <__pow5mult+0x48>
 800d0cc:	2010      	movs	r0, #16
 800d0ce:	f7ff fdcd 	bl	800cc6c <malloc>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	6270      	str	r0, [r6, #36]	; 0x24
 800d0d6:	b928      	cbnz	r0, 800d0e4 <__pow5mult+0x40>
 800d0d8:	4b1d      	ldr	r3, [pc, #116]	; (800d150 <__pow5mult+0xac>)
 800d0da:	481e      	ldr	r0, [pc, #120]	; (800d154 <__pow5mult+0xb0>)
 800d0dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0e0:	f000 fd2c 	bl	800db3c <__assert_func>
 800d0e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0e8:	6004      	str	r4, [r0, #0]
 800d0ea:	60c4      	str	r4, [r0, #12]
 800d0ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0f4:	b94c      	cbnz	r4, 800d10a <__pow5mult+0x66>
 800d0f6:	f240 2171 	movw	r1, #625	; 0x271
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ff12 	bl	800cf24 <__i2b>
 800d100:	2300      	movs	r3, #0
 800d102:	f8c8 0008 	str.w	r0, [r8, #8]
 800d106:	4604      	mov	r4, r0
 800d108:	6003      	str	r3, [r0, #0]
 800d10a:	f04f 0900 	mov.w	r9, #0
 800d10e:	07eb      	lsls	r3, r5, #31
 800d110:	d50a      	bpl.n	800d128 <__pow5mult+0x84>
 800d112:	4639      	mov	r1, r7
 800d114:	4622      	mov	r2, r4
 800d116:	4630      	mov	r0, r6
 800d118:	f7ff ff1a 	bl	800cf50 <__multiply>
 800d11c:	4639      	mov	r1, r7
 800d11e:	4680      	mov	r8, r0
 800d120:	4630      	mov	r0, r6
 800d122:	f7ff fdfd 	bl	800cd20 <_Bfree>
 800d126:	4647      	mov	r7, r8
 800d128:	106d      	asrs	r5, r5, #1
 800d12a:	d00b      	beq.n	800d144 <__pow5mult+0xa0>
 800d12c:	6820      	ldr	r0, [r4, #0]
 800d12e:	b938      	cbnz	r0, 800d140 <__pow5mult+0x9c>
 800d130:	4622      	mov	r2, r4
 800d132:	4621      	mov	r1, r4
 800d134:	4630      	mov	r0, r6
 800d136:	f7ff ff0b 	bl	800cf50 <__multiply>
 800d13a:	6020      	str	r0, [r4, #0]
 800d13c:	f8c0 9000 	str.w	r9, [r0]
 800d140:	4604      	mov	r4, r0
 800d142:	e7e4      	b.n	800d10e <__pow5mult+0x6a>
 800d144:	4638      	mov	r0, r7
 800d146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d14a:	bf00      	nop
 800d14c:	0800efb8 	.word	0x0800efb8
 800d150:	0800ed6e 	.word	0x0800ed6e
 800d154:	0800ee6c 	.word	0x0800ee6c

0800d158 <__lshift>:
 800d158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	6849      	ldr	r1, [r1, #4]
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d166:	68a3      	ldr	r3, [r4, #8]
 800d168:	4607      	mov	r7, r0
 800d16a:	4691      	mov	r9, r2
 800d16c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d170:	f108 0601 	add.w	r6, r8, #1
 800d174:	42b3      	cmp	r3, r6
 800d176:	db0b      	blt.n	800d190 <__lshift+0x38>
 800d178:	4638      	mov	r0, r7
 800d17a:	f7ff fd91 	bl	800cca0 <_Balloc>
 800d17e:	4605      	mov	r5, r0
 800d180:	b948      	cbnz	r0, 800d196 <__lshift+0x3e>
 800d182:	4602      	mov	r2, r0
 800d184:	4b2a      	ldr	r3, [pc, #168]	; (800d230 <__lshift+0xd8>)
 800d186:	482b      	ldr	r0, [pc, #172]	; (800d234 <__lshift+0xdc>)
 800d188:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d18c:	f000 fcd6 	bl	800db3c <__assert_func>
 800d190:	3101      	adds	r1, #1
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	e7ee      	b.n	800d174 <__lshift+0x1c>
 800d196:	2300      	movs	r3, #0
 800d198:	f100 0114 	add.w	r1, r0, #20
 800d19c:	f100 0210 	add.w	r2, r0, #16
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	4553      	cmp	r3, sl
 800d1a4:	db37      	blt.n	800d216 <__lshift+0xbe>
 800d1a6:	6920      	ldr	r0, [r4, #16]
 800d1a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1ac:	f104 0314 	add.w	r3, r4, #20
 800d1b0:	f019 091f 	ands.w	r9, r9, #31
 800d1b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1bc:	d02f      	beq.n	800d21e <__lshift+0xc6>
 800d1be:	f1c9 0e20 	rsb	lr, r9, #32
 800d1c2:	468a      	mov	sl, r1
 800d1c4:	f04f 0c00 	mov.w	ip, #0
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	fa02 f209 	lsl.w	r2, r2, r9
 800d1ce:	ea42 020c 	orr.w	r2, r2, ip
 800d1d2:	f84a 2b04 	str.w	r2, [sl], #4
 800d1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1da:	4298      	cmp	r0, r3
 800d1dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1e0:	d8f2      	bhi.n	800d1c8 <__lshift+0x70>
 800d1e2:	1b03      	subs	r3, r0, r4
 800d1e4:	3b15      	subs	r3, #21
 800d1e6:	f023 0303 	bic.w	r3, r3, #3
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	f104 0215 	add.w	r2, r4, #21
 800d1f0:	4290      	cmp	r0, r2
 800d1f2:	bf38      	it	cc
 800d1f4:	2304      	movcc	r3, #4
 800d1f6:	f841 c003 	str.w	ip, [r1, r3]
 800d1fa:	f1bc 0f00 	cmp.w	ip, #0
 800d1fe:	d001      	beq.n	800d204 <__lshift+0xac>
 800d200:	f108 0602 	add.w	r6, r8, #2
 800d204:	3e01      	subs	r6, #1
 800d206:	4638      	mov	r0, r7
 800d208:	612e      	str	r6, [r5, #16]
 800d20a:	4621      	mov	r1, r4
 800d20c:	f7ff fd88 	bl	800cd20 <_Bfree>
 800d210:	4628      	mov	r0, r5
 800d212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d216:	f842 0f04 	str.w	r0, [r2, #4]!
 800d21a:	3301      	adds	r3, #1
 800d21c:	e7c1      	b.n	800d1a2 <__lshift+0x4a>
 800d21e:	3904      	subs	r1, #4
 800d220:	f853 2b04 	ldr.w	r2, [r3], #4
 800d224:	f841 2f04 	str.w	r2, [r1, #4]!
 800d228:	4298      	cmp	r0, r3
 800d22a:	d8f9      	bhi.n	800d220 <__lshift+0xc8>
 800d22c:	e7ea      	b.n	800d204 <__lshift+0xac>
 800d22e:	bf00      	nop
 800d230:	0800ede0 	.word	0x0800ede0
 800d234:	0800ee6c 	.word	0x0800ee6c

0800d238 <__mcmp>:
 800d238:	b530      	push	{r4, r5, lr}
 800d23a:	6902      	ldr	r2, [r0, #16]
 800d23c:	690c      	ldr	r4, [r1, #16]
 800d23e:	1b12      	subs	r2, r2, r4
 800d240:	d10e      	bne.n	800d260 <__mcmp+0x28>
 800d242:	f100 0314 	add.w	r3, r0, #20
 800d246:	3114      	adds	r1, #20
 800d248:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d24c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d250:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d254:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d258:	42a5      	cmp	r5, r4
 800d25a:	d003      	beq.n	800d264 <__mcmp+0x2c>
 800d25c:	d305      	bcc.n	800d26a <__mcmp+0x32>
 800d25e:	2201      	movs	r2, #1
 800d260:	4610      	mov	r0, r2
 800d262:	bd30      	pop	{r4, r5, pc}
 800d264:	4283      	cmp	r3, r0
 800d266:	d3f3      	bcc.n	800d250 <__mcmp+0x18>
 800d268:	e7fa      	b.n	800d260 <__mcmp+0x28>
 800d26a:	f04f 32ff 	mov.w	r2, #4294967295
 800d26e:	e7f7      	b.n	800d260 <__mcmp+0x28>

0800d270 <__mdiff>:
 800d270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	460c      	mov	r4, r1
 800d276:	4606      	mov	r6, r0
 800d278:	4611      	mov	r1, r2
 800d27a:	4620      	mov	r0, r4
 800d27c:	4690      	mov	r8, r2
 800d27e:	f7ff ffdb 	bl	800d238 <__mcmp>
 800d282:	1e05      	subs	r5, r0, #0
 800d284:	d110      	bne.n	800d2a8 <__mdiff+0x38>
 800d286:	4629      	mov	r1, r5
 800d288:	4630      	mov	r0, r6
 800d28a:	f7ff fd09 	bl	800cca0 <_Balloc>
 800d28e:	b930      	cbnz	r0, 800d29e <__mdiff+0x2e>
 800d290:	4b3a      	ldr	r3, [pc, #232]	; (800d37c <__mdiff+0x10c>)
 800d292:	4602      	mov	r2, r0
 800d294:	f240 2132 	movw	r1, #562	; 0x232
 800d298:	4839      	ldr	r0, [pc, #228]	; (800d380 <__mdiff+0x110>)
 800d29a:	f000 fc4f 	bl	800db3c <__assert_func>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a8:	bfa4      	itt	ge
 800d2aa:	4643      	movge	r3, r8
 800d2ac:	46a0      	movge	r8, r4
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2b4:	bfa6      	itte	ge
 800d2b6:	461c      	movge	r4, r3
 800d2b8:	2500      	movge	r5, #0
 800d2ba:	2501      	movlt	r5, #1
 800d2bc:	f7ff fcf0 	bl	800cca0 <_Balloc>
 800d2c0:	b920      	cbnz	r0, 800d2cc <__mdiff+0x5c>
 800d2c2:	4b2e      	ldr	r3, [pc, #184]	; (800d37c <__mdiff+0x10c>)
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2ca:	e7e5      	b.n	800d298 <__mdiff+0x28>
 800d2cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2d0:	6926      	ldr	r6, [r4, #16]
 800d2d2:	60c5      	str	r5, [r0, #12]
 800d2d4:	f104 0914 	add.w	r9, r4, #20
 800d2d8:	f108 0514 	add.w	r5, r8, #20
 800d2dc:	f100 0e14 	add.w	lr, r0, #20
 800d2e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2e8:	f108 0210 	add.w	r2, r8, #16
 800d2ec:	46f2      	mov	sl, lr
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2f8:	fa1f f883 	uxth.w	r8, r3
 800d2fc:	fa11 f18b 	uxtah	r1, r1, fp
 800d300:	0c1b      	lsrs	r3, r3, #16
 800d302:	eba1 0808 	sub.w	r8, r1, r8
 800d306:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d30a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d30e:	fa1f f888 	uxth.w	r8, r8
 800d312:	1419      	asrs	r1, r3, #16
 800d314:	454e      	cmp	r6, r9
 800d316:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d31a:	f84a 3b04 	str.w	r3, [sl], #4
 800d31e:	d8e7      	bhi.n	800d2f0 <__mdiff+0x80>
 800d320:	1b33      	subs	r3, r6, r4
 800d322:	3b15      	subs	r3, #21
 800d324:	f023 0303 	bic.w	r3, r3, #3
 800d328:	3304      	adds	r3, #4
 800d32a:	3415      	adds	r4, #21
 800d32c:	42a6      	cmp	r6, r4
 800d32e:	bf38      	it	cc
 800d330:	2304      	movcc	r3, #4
 800d332:	441d      	add	r5, r3
 800d334:	4473      	add	r3, lr
 800d336:	469e      	mov	lr, r3
 800d338:	462e      	mov	r6, r5
 800d33a:	4566      	cmp	r6, ip
 800d33c:	d30e      	bcc.n	800d35c <__mdiff+0xec>
 800d33e:	f10c 0203 	add.w	r2, ip, #3
 800d342:	1b52      	subs	r2, r2, r5
 800d344:	f022 0203 	bic.w	r2, r2, #3
 800d348:	3d03      	subs	r5, #3
 800d34a:	45ac      	cmp	ip, r5
 800d34c:	bf38      	it	cc
 800d34e:	2200      	movcc	r2, #0
 800d350:	441a      	add	r2, r3
 800d352:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d356:	b17b      	cbz	r3, 800d378 <__mdiff+0x108>
 800d358:	6107      	str	r7, [r0, #16]
 800d35a:	e7a3      	b.n	800d2a4 <__mdiff+0x34>
 800d35c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d360:	fa11 f288 	uxtah	r2, r1, r8
 800d364:	1414      	asrs	r4, r2, #16
 800d366:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d36a:	b292      	uxth	r2, r2
 800d36c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d370:	f84e 2b04 	str.w	r2, [lr], #4
 800d374:	1421      	asrs	r1, r4, #16
 800d376:	e7e0      	b.n	800d33a <__mdiff+0xca>
 800d378:	3f01      	subs	r7, #1
 800d37a:	e7ea      	b.n	800d352 <__mdiff+0xe2>
 800d37c:	0800ede0 	.word	0x0800ede0
 800d380:	0800ee6c 	.word	0x0800ee6c

0800d384 <__ulp>:
 800d384:	b082      	sub	sp, #8
 800d386:	ed8d 0b00 	vstr	d0, [sp]
 800d38a:	9b01      	ldr	r3, [sp, #4]
 800d38c:	4912      	ldr	r1, [pc, #72]	; (800d3d8 <__ulp+0x54>)
 800d38e:	4019      	ands	r1, r3
 800d390:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d394:	2900      	cmp	r1, #0
 800d396:	dd05      	ble.n	800d3a4 <__ulp+0x20>
 800d398:	2200      	movs	r2, #0
 800d39a:	460b      	mov	r3, r1
 800d39c:	ec43 2b10 	vmov	d0, r2, r3
 800d3a0:	b002      	add	sp, #8
 800d3a2:	4770      	bx	lr
 800d3a4:	4249      	negs	r1, r1
 800d3a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d3aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d3ae:	f04f 0200 	mov.w	r2, #0
 800d3b2:	f04f 0300 	mov.w	r3, #0
 800d3b6:	da04      	bge.n	800d3c2 <__ulp+0x3e>
 800d3b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d3bc:	fa41 f300 	asr.w	r3, r1, r0
 800d3c0:	e7ec      	b.n	800d39c <__ulp+0x18>
 800d3c2:	f1a0 0114 	sub.w	r1, r0, #20
 800d3c6:	291e      	cmp	r1, #30
 800d3c8:	bfda      	itte	le
 800d3ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d3ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800d3d2:	2101      	movgt	r1, #1
 800d3d4:	460a      	mov	r2, r1
 800d3d6:	e7e1      	b.n	800d39c <__ulp+0x18>
 800d3d8:	7ff00000 	.word	0x7ff00000

0800d3dc <__b2d>:
 800d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3de:	6905      	ldr	r5, [r0, #16]
 800d3e0:	f100 0714 	add.w	r7, r0, #20
 800d3e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d3e8:	1f2e      	subs	r6, r5, #4
 800d3ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f7ff fd48 	bl	800ce84 <__hi0bits>
 800d3f4:	f1c0 0320 	rsb	r3, r0, #32
 800d3f8:	280a      	cmp	r0, #10
 800d3fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d478 <__b2d+0x9c>
 800d3fe:	600b      	str	r3, [r1, #0]
 800d400:	dc14      	bgt.n	800d42c <__b2d+0x50>
 800d402:	f1c0 0e0b 	rsb	lr, r0, #11
 800d406:	fa24 f10e 	lsr.w	r1, r4, lr
 800d40a:	42b7      	cmp	r7, r6
 800d40c:	ea41 030c 	orr.w	r3, r1, ip
 800d410:	bf34      	ite	cc
 800d412:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d416:	2100      	movcs	r1, #0
 800d418:	3015      	adds	r0, #21
 800d41a:	fa04 f000 	lsl.w	r0, r4, r0
 800d41e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d422:	ea40 0201 	orr.w	r2, r0, r1
 800d426:	ec43 2b10 	vmov	d0, r2, r3
 800d42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d42c:	42b7      	cmp	r7, r6
 800d42e:	bf3a      	itte	cc
 800d430:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d434:	f1a5 0608 	subcc.w	r6, r5, #8
 800d438:	2100      	movcs	r1, #0
 800d43a:	380b      	subs	r0, #11
 800d43c:	d017      	beq.n	800d46e <__b2d+0x92>
 800d43e:	f1c0 0c20 	rsb	ip, r0, #32
 800d442:	fa04 f500 	lsl.w	r5, r4, r0
 800d446:	42be      	cmp	r6, r7
 800d448:	fa21 f40c 	lsr.w	r4, r1, ip
 800d44c:	ea45 0504 	orr.w	r5, r5, r4
 800d450:	bf8c      	ite	hi
 800d452:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d456:	2400      	movls	r4, #0
 800d458:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d45c:	fa01 f000 	lsl.w	r0, r1, r0
 800d460:	fa24 f40c 	lsr.w	r4, r4, ip
 800d464:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d468:	ea40 0204 	orr.w	r2, r0, r4
 800d46c:	e7db      	b.n	800d426 <__b2d+0x4a>
 800d46e:	ea44 030c 	orr.w	r3, r4, ip
 800d472:	460a      	mov	r2, r1
 800d474:	e7d7      	b.n	800d426 <__b2d+0x4a>
 800d476:	bf00      	nop
 800d478:	3ff00000 	.word	0x3ff00000

0800d47c <__d2b>:
 800d47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d480:	4689      	mov	r9, r1
 800d482:	2101      	movs	r1, #1
 800d484:	ec57 6b10 	vmov	r6, r7, d0
 800d488:	4690      	mov	r8, r2
 800d48a:	f7ff fc09 	bl	800cca0 <_Balloc>
 800d48e:	4604      	mov	r4, r0
 800d490:	b930      	cbnz	r0, 800d4a0 <__d2b+0x24>
 800d492:	4602      	mov	r2, r0
 800d494:	4b25      	ldr	r3, [pc, #148]	; (800d52c <__d2b+0xb0>)
 800d496:	4826      	ldr	r0, [pc, #152]	; (800d530 <__d2b+0xb4>)
 800d498:	f240 310a 	movw	r1, #778	; 0x30a
 800d49c:	f000 fb4e 	bl	800db3c <__assert_func>
 800d4a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d4a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4a8:	bb35      	cbnz	r5, 800d4f8 <__d2b+0x7c>
 800d4aa:	2e00      	cmp	r6, #0
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	d028      	beq.n	800d502 <__d2b+0x86>
 800d4b0:	4668      	mov	r0, sp
 800d4b2:	9600      	str	r6, [sp, #0]
 800d4b4:	f7ff fd06 	bl	800cec4 <__lo0bits>
 800d4b8:	9900      	ldr	r1, [sp, #0]
 800d4ba:	b300      	cbz	r0, 800d4fe <__d2b+0x82>
 800d4bc:	9a01      	ldr	r2, [sp, #4]
 800d4be:	f1c0 0320 	rsb	r3, r0, #32
 800d4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c6:	430b      	orrs	r3, r1
 800d4c8:	40c2      	lsrs	r2, r0
 800d4ca:	6163      	str	r3, [r4, #20]
 800d4cc:	9201      	str	r2, [sp, #4]
 800d4ce:	9b01      	ldr	r3, [sp, #4]
 800d4d0:	61a3      	str	r3, [r4, #24]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bf14      	ite	ne
 800d4d6:	2202      	movne	r2, #2
 800d4d8:	2201      	moveq	r2, #1
 800d4da:	6122      	str	r2, [r4, #16]
 800d4dc:	b1d5      	cbz	r5, 800d514 <__d2b+0x98>
 800d4de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4e2:	4405      	add	r5, r0
 800d4e4:	f8c9 5000 	str.w	r5, [r9]
 800d4e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4ec:	f8c8 0000 	str.w	r0, [r8]
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	b003      	add	sp, #12
 800d4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4fc:	e7d5      	b.n	800d4aa <__d2b+0x2e>
 800d4fe:	6161      	str	r1, [r4, #20]
 800d500:	e7e5      	b.n	800d4ce <__d2b+0x52>
 800d502:	a801      	add	r0, sp, #4
 800d504:	f7ff fcde 	bl	800cec4 <__lo0bits>
 800d508:	9b01      	ldr	r3, [sp, #4]
 800d50a:	6163      	str	r3, [r4, #20]
 800d50c:	2201      	movs	r2, #1
 800d50e:	6122      	str	r2, [r4, #16]
 800d510:	3020      	adds	r0, #32
 800d512:	e7e3      	b.n	800d4dc <__d2b+0x60>
 800d514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d51c:	f8c9 0000 	str.w	r0, [r9]
 800d520:	6918      	ldr	r0, [r3, #16]
 800d522:	f7ff fcaf 	bl	800ce84 <__hi0bits>
 800d526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d52a:	e7df      	b.n	800d4ec <__d2b+0x70>
 800d52c:	0800ede0 	.word	0x0800ede0
 800d530:	0800ee6c 	.word	0x0800ee6c

0800d534 <__ratio>:
 800d534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d538:	4688      	mov	r8, r1
 800d53a:	4669      	mov	r1, sp
 800d53c:	4681      	mov	r9, r0
 800d53e:	f7ff ff4d 	bl	800d3dc <__b2d>
 800d542:	a901      	add	r1, sp, #4
 800d544:	4640      	mov	r0, r8
 800d546:	ec55 4b10 	vmov	r4, r5, d0
 800d54a:	f7ff ff47 	bl	800d3dc <__b2d>
 800d54e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d552:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d556:	eba3 0c02 	sub.w	ip, r3, r2
 800d55a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d55e:	1a9b      	subs	r3, r3, r2
 800d560:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d564:	ec51 0b10 	vmov	r0, r1, d0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bfd6      	itet	le
 800d56c:	460a      	movle	r2, r1
 800d56e:	462a      	movgt	r2, r5
 800d570:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d574:	468b      	mov	fp, r1
 800d576:	462f      	mov	r7, r5
 800d578:	bfd4      	ite	le
 800d57a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d57e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d582:	4620      	mov	r0, r4
 800d584:	ee10 2a10 	vmov	r2, s0
 800d588:	465b      	mov	r3, fp
 800d58a:	4639      	mov	r1, r7
 800d58c:	f7f3 f97e 	bl	800088c <__aeabi_ddiv>
 800d590:	ec41 0b10 	vmov	d0, r0, r1
 800d594:	b003      	add	sp, #12
 800d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d59a <__copybits>:
 800d59a:	3901      	subs	r1, #1
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	1149      	asrs	r1, r1, #5
 800d5a0:	6914      	ldr	r4, [r2, #16]
 800d5a2:	3101      	adds	r1, #1
 800d5a4:	f102 0314 	add.w	r3, r2, #20
 800d5a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5b0:	1f05      	subs	r5, r0, #4
 800d5b2:	42a3      	cmp	r3, r4
 800d5b4:	d30c      	bcc.n	800d5d0 <__copybits+0x36>
 800d5b6:	1aa3      	subs	r3, r4, r2
 800d5b8:	3b11      	subs	r3, #17
 800d5ba:	f023 0303 	bic.w	r3, r3, #3
 800d5be:	3211      	adds	r2, #17
 800d5c0:	42a2      	cmp	r2, r4
 800d5c2:	bf88      	it	hi
 800d5c4:	2300      	movhi	r3, #0
 800d5c6:	4418      	add	r0, r3
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4288      	cmp	r0, r1
 800d5cc:	d305      	bcc.n	800d5da <__copybits+0x40>
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5d8:	e7eb      	b.n	800d5b2 <__copybits+0x18>
 800d5da:	f840 3b04 	str.w	r3, [r0], #4
 800d5de:	e7f4      	b.n	800d5ca <__copybits+0x30>

0800d5e0 <__any_on>:
 800d5e0:	f100 0214 	add.w	r2, r0, #20
 800d5e4:	6900      	ldr	r0, [r0, #16]
 800d5e6:	114b      	asrs	r3, r1, #5
 800d5e8:	4298      	cmp	r0, r3
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	db11      	blt.n	800d612 <__any_on+0x32>
 800d5ee:	dd0a      	ble.n	800d606 <__any_on+0x26>
 800d5f0:	f011 011f 	ands.w	r1, r1, #31
 800d5f4:	d007      	beq.n	800d606 <__any_on+0x26>
 800d5f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5fa:	fa24 f001 	lsr.w	r0, r4, r1
 800d5fe:	fa00 f101 	lsl.w	r1, r0, r1
 800d602:	428c      	cmp	r4, r1
 800d604:	d10b      	bne.n	800d61e <__any_on+0x3e>
 800d606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d803      	bhi.n	800d616 <__any_on+0x36>
 800d60e:	2000      	movs	r0, #0
 800d610:	bd10      	pop	{r4, pc}
 800d612:	4603      	mov	r3, r0
 800d614:	e7f7      	b.n	800d606 <__any_on+0x26>
 800d616:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d61a:	2900      	cmp	r1, #0
 800d61c:	d0f5      	beq.n	800d60a <__any_on+0x2a>
 800d61e:	2001      	movs	r0, #1
 800d620:	e7f6      	b.n	800d610 <__any_on+0x30>

0800d622 <_calloc_r>:
 800d622:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d624:	fba1 2402 	umull	r2, r4, r1, r2
 800d628:	b94c      	cbnz	r4, 800d63e <_calloc_r+0x1c>
 800d62a:	4611      	mov	r1, r2
 800d62c:	9201      	str	r2, [sp, #4]
 800d62e:	f000 f87b 	bl	800d728 <_malloc_r>
 800d632:	9a01      	ldr	r2, [sp, #4]
 800d634:	4605      	mov	r5, r0
 800d636:	b930      	cbnz	r0, 800d646 <_calloc_r+0x24>
 800d638:	4628      	mov	r0, r5
 800d63a:	b003      	add	sp, #12
 800d63c:	bd30      	pop	{r4, r5, pc}
 800d63e:	220c      	movs	r2, #12
 800d640:	6002      	str	r2, [r0, #0]
 800d642:	2500      	movs	r5, #0
 800d644:	e7f8      	b.n	800d638 <_calloc_r+0x16>
 800d646:	4621      	mov	r1, r4
 800d648:	f7fc fbd4 	bl	8009df4 <memset>
 800d64c:	e7f4      	b.n	800d638 <_calloc_r+0x16>
	...

0800d650 <_free_r>:
 800d650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d652:	2900      	cmp	r1, #0
 800d654:	d044      	beq.n	800d6e0 <_free_r+0x90>
 800d656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65a:	9001      	str	r0, [sp, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f1a1 0404 	sub.w	r4, r1, #4
 800d662:	bfb8      	it	lt
 800d664:	18e4      	addlt	r4, r4, r3
 800d666:	f000 fab3 	bl	800dbd0 <__malloc_lock>
 800d66a:	4a1e      	ldr	r2, [pc, #120]	; (800d6e4 <_free_r+0x94>)
 800d66c:	9801      	ldr	r0, [sp, #4]
 800d66e:	6813      	ldr	r3, [r2, #0]
 800d670:	b933      	cbnz	r3, 800d680 <_free_r+0x30>
 800d672:	6063      	str	r3, [r4, #4]
 800d674:	6014      	str	r4, [r2, #0]
 800d676:	b003      	add	sp, #12
 800d678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d67c:	f000 baae 	b.w	800dbdc <__malloc_unlock>
 800d680:	42a3      	cmp	r3, r4
 800d682:	d908      	bls.n	800d696 <_free_r+0x46>
 800d684:	6825      	ldr	r5, [r4, #0]
 800d686:	1961      	adds	r1, r4, r5
 800d688:	428b      	cmp	r3, r1
 800d68a:	bf01      	itttt	eq
 800d68c:	6819      	ldreq	r1, [r3, #0]
 800d68e:	685b      	ldreq	r3, [r3, #4]
 800d690:	1949      	addeq	r1, r1, r5
 800d692:	6021      	streq	r1, [r4, #0]
 800d694:	e7ed      	b.n	800d672 <_free_r+0x22>
 800d696:	461a      	mov	r2, r3
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	b10b      	cbz	r3, 800d6a0 <_free_r+0x50>
 800d69c:	42a3      	cmp	r3, r4
 800d69e:	d9fa      	bls.n	800d696 <_free_r+0x46>
 800d6a0:	6811      	ldr	r1, [r2, #0]
 800d6a2:	1855      	adds	r5, r2, r1
 800d6a4:	42a5      	cmp	r5, r4
 800d6a6:	d10b      	bne.n	800d6c0 <_free_r+0x70>
 800d6a8:	6824      	ldr	r4, [r4, #0]
 800d6aa:	4421      	add	r1, r4
 800d6ac:	1854      	adds	r4, r2, r1
 800d6ae:	42a3      	cmp	r3, r4
 800d6b0:	6011      	str	r1, [r2, #0]
 800d6b2:	d1e0      	bne.n	800d676 <_free_r+0x26>
 800d6b4:	681c      	ldr	r4, [r3, #0]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	6053      	str	r3, [r2, #4]
 800d6ba:	4421      	add	r1, r4
 800d6bc:	6011      	str	r1, [r2, #0]
 800d6be:	e7da      	b.n	800d676 <_free_r+0x26>
 800d6c0:	d902      	bls.n	800d6c8 <_free_r+0x78>
 800d6c2:	230c      	movs	r3, #12
 800d6c4:	6003      	str	r3, [r0, #0]
 800d6c6:	e7d6      	b.n	800d676 <_free_r+0x26>
 800d6c8:	6825      	ldr	r5, [r4, #0]
 800d6ca:	1961      	adds	r1, r4, r5
 800d6cc:	428b      	cmp	r3, r1
 800d6ce:	bf04      	itt	eq
 800d6d0:	6819      	ldreq	r1, [r3, #0]
 800d6d2:	685b      	ldreq	r3, [r3, #4]
 800d6d4:	6063      	str	r3, [r4, #4]
 800d6d6:	bf04      	itt	eq
 800d6d8:	1949      	addeq	r1, r1, r5
 800d6da:	6021      	streq	r1, [r4, #0]
 800d6dc:	6054      	str	r4, [r2, #4]
 800d6de:	e7ca      	b.n	800d676 <_free_r+0x26>
 800d6e0:	b003      	add	sp, #12
 800d6e2:	bd30      	pop	{r4, r5, pc}
 800d6e4:	200002a0 	.word	0x200002a0

0800d6e8 <sbrk_aligned>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	4e0e      	ldr	r6, [pc, #56]	; (800d724 <sbrk_aligned+0x3c>)
 800d6ec:	460c      	mov	r4, r1
 800d6ee:	6831      	ldr	r1, [r6, #0]
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	b911      	cbnz	r1, 800d6fa <sbrk_aligned+0x12>
 800d6f4:	f000 f9f0 	bl	800dad8 <_sbrk_r>
 800d6f8:	6030      	str	r0, [r6, #0]
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f000 f9eb 	bl	800dad8 <_sbrk_r>
 800d702:	1c43      	adds	r3, r0, #1
 800d704:	d00a      	beq.n	800d71c <sbrk_aligned+0x34>
 800d706:	1cc4      	adds	r4, r0, #3
 800d708:	f024 0403 	bic.w	r4, r4, #3
 800d70c:	42a0      	cmp	r0, r4
 800d70e:	d007      	beq.n	800d720 <sbrk_aligned+0x38>
 800d710:	1a21      	subs	r1, r4, r0
 800d712:	4628      	mov	r0, r5
 800d714:	f000 f9e0 	bl	800dad8 <_sbrk_r>
 800d718:	3001      	adds	r0, #1
 800d71a:	d101      	bne.n	800d720 <sbrk_aligned+0x38>
 800d71c:	f04f 34ff 	mov.w	r4, #4294967295
 800d720:	4620      	mov	r0, r4
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	200002a4 	.word	0x200002a4

0800d728 <_malloc_r>:
 800d728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d72c:	1ccd      	adds	r5, r1, #3
 800d72e:	f025 0503 	bic.w	r5, r5, #3
 800d732:	3508      	adds	r5, #8
 800d734:	2d0c      	cmp	r5, #12
 800d736:	bf38      	it	cc
 800d738:	250c      	movcc	r5, #12
 800d73a:	2d00      	cmp	r5, #0
 800d73c:	4607      	mov	r7, r0
 800d73e:	db01      	blt.n	800d744 <_malloc_r+0x1c>
 800d740:	42a9      	cmp	r1, r5
 800d742:	d905      	bls.n	800d750 <_malloc_r+0x28>
 800d744:	230c      	movs	r3, #12
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	2600      	movs	r6, #0
 800d74a:	4630      	mov	r0, r6
 800d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d750:	4e2e      	ldr	r6, [pc, #184]	; (800d80c <_malloc_r+0xe4>)
 800d752:	f000 fa3d 	bl	800dbd0 <__malloc_lock>
 800d756:	6833      	ldr	r3, [r6, #0]
 800d758:	461c      	mov	r4, r3
 800d75a:	bb34      	cbnz	r4, 800d7aa <_malloc_r+0x82>
 800d75c:	4629      	mov	r1, r5
 800d75e:	4638      	mov	r0, r7
 800d760:	f7ff ffc2 	bl	800d6e8 <sbrk_aligned>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	4604      	mov	r4, r0
 800d768:	d14d      	bne.n	800d806 <_malloc_r+0xde>
 800d76a:	6834      	ldr	r4, [r6, #0]
 800d76c:	4626      	mov	r6, r4
 800d76e:	2e00      	cmp	r6, #0
 800d770:	d140      	bne.n	800d7f4 <_malloc_r+0xcc>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	4631      	mov	r1, r6
 800d776:	4638      	mov	r0, r7
 800d778:	eb04 0803 	add.w	r8, r4, r3
 800d77c:	f000 f9ac 	bl	800dad8 <_sbrk_r>
 800d780:	4580      	cmp	r8, r0
 800d782:	d13a      	bne.n	800d7fa <_malloc_r+0xd2>
 800d784:	6821      	ldr	r1, [r4, #0]
 800d786:	3503      	adds	r5, #3
 800d788:	1a6d      	subs	r5, r5, r1
 800d78a:	f025 0503 	bic.w	r5, r5, #3
 800d78e:	3508      	adds	r5, #8
 800d790:	2d0c      	cmp	r5, #12
 800d792:	bf38      	it	cc
 800d794:	250c      	movcc	r5, #12
 800d796:	4629      	mov	r1, r5
 800d798:	4638      	mov	r0, r7
 800d79a:	f7ff ffa5 	bl	800d6e8 <sbrk_aligned>
 800d79e:	3001      	adds	r0, #1
 800d7a0:	d02b      	beq.n	800d7fa <_malloc_r+0xd2>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	442b      	add	r3, r5
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	e00e      	b.n	800d7c8 <_malloc_r+0xa0>
 800d7aa:	6822      	ldr	r2, [r4, #0]
 800d7ac:	1b52      	subs	r2, r2, r5
 800d7ae:	d41e      	bmi.n	800d7ee <_malloc_r+0xc6>
 800d7b0:	2a0b      	cmp	r2, #11
 800d7b2:	d916      	bls.n	800d7e2 <_malloc_r+0xba>
 800d7b4:	1961      	adds	r1, r4, r5
 800d7b6:	42a3      	cmp	r3, r4
 800d7b8:	6025      	str	r5, [r4, #0]
 800d7ba:	bf18      	it	ne
 800d7bc:	6059      	strne	r1, [r3, #4]
 800d7be:	6863      	ldr	r3, [r4, #4]
 800d7c0:	bf08      	it	eq
 800d7c2:	6031      	streq	r1, [r6, #0]
 800d7c4:	5162      	str	r2, [r4, r5]
 800d7c6:	604b      	str	r3, [r1, #4]
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f104 060b 	add.w	r6, r4, #11
 800d7ce:	f000 fa05 	bl	800dbdc <__malloc_unlock>
 800d7d2:	f026 0607 	bic.w	r6, r6, #7
 800d7d6:	1d23      	adds	r3, r4, #4
 800d7d8:	1af2      	subs	r2, r6, r3
 800d7da:	d0b6      	beq.n	800d74a <_malloc_r+0x22>
 800d7dc:	1b9b      	subs	r3, r3, r6
 800d7de:	50a3      	str	r3, [r4, r2]
 800d7e0:	e7b3      	b.n	800d74a <_malloc_r+0x22>
 800d7e2:	6862      	ldr	r2, [r4, #4]
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	bf0c      	ite	eq
 800d7e8:	6032      	streq	r2, [r6, #0]
 800d7ea:	605a      	strne	r2, [r3, #4]
 800d7ec:	e7ec      	b.n	800d7c8 <_malloc_r+0xa0>
 800d7ee:	4623      	mov	r3, r4
 800d7f0:	6864      	ldr	r4, [r4, #4]
 800d7f2:	e7b2      	b.n	800d75a <_malloc_r+0x32>
 800d7f4:	4634      	mov	r4, r6
 800d7f6:	6876      	ldr	r6, [r6, #4]
 800d7f8:	e7b9      	b.n	800d76e <_malloc_r+0x46>
 800d7fa:	230c      	movs	r3, #12
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	4638      	mov	r0, r7
 800d800:	f000 f9ec 	bl	800dbdc <__malloc_unlock>
 800d804:	e7a1      	b.n	800d74a <_malloc_r+0x22>
 800d806:	6025      	str	r5, [r4, #0]
 800d808:	e7de      	b.n	800d7c8 <_malloc_r+0xa0>
 800d80a:	bf00      	nop
 800d80c:	200002a0 	.word	0x200002a0

0800d810 <__ssputs_r>:
 800d810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d814:	688e      	ldr	r6, [r1, #8]
 800d816:	429e      	cmp	r6, r3
 800d818:	4682      	mov	sl, r0
 800d81a:	460c      	mov	r4, r1
 800d81c:	4690      	mov	r8, r2
 800d81e:	461f      	mov	r7, r3
 800d820:	d838      	bhi.n	800d894 <__ssputs_r+0x84>
 800d822:	898a      	ldrh	r2, [r1, #12]
 800d824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d828:	d032      	beq.n	800d890 <__ssputs_r+0x80>
 800d82a:	6825      	ldr	r5, [r4, #0]
 800d82c:	6909      	ldr	r1, [r1, #16]
 800d82e:	eba5 0901 	sub.w	r9, r5, r1
 800d832:	6965      	ldr	r5, [r4, #20]
 800d834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d83c:	3301      	adds	r3, #1
 800d83e:	444b      	add	r3, r9
 800d840:	106d      	asrs	r5, r5, #1
 800d842:	429d      	cmp	r5, r3
 800d844:	bf38      	it	cc
 800d846:	461d      	movcc	r5, r3
 800d848:	0553      	lsls	r3, r2, #21
 800d84a:	d531      	bpl.n	800d8b0 <__ssputs_r+0xa0>
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7ff ff6b 	bl	800d728 <_malloc_r>
 800d852:	4606      	mov	r6, r0
 800d854:	b950      	cbnz	r0, 800d86c <__ssputs_r+0x5c>
 800d856:	230c      	movs	r3, #12
 800d858:	f8ca 3000 	str.w	r3, [sl]
 800d85c:	89a3      	ldrh	r3, [r4, #12]
 800d85e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d862:	81a3      	strh	r3, [r4, #12]
 800d864:	f04f 30ff 	mov.w	r0, #4294967295
 800d868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86c:	6921      	ldr	r1, [r4, #16]
 800d86e:	464a      	mov	r2, r9
 800d870:	f7fc fab2 	bl	8009dd8 <memcpy>
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d87e:	81a3      	strh	r3, [r4, #12]
 800d880:	6126      	str	r6, [r4, #16]
 800d882:	6165      	str	r5, [r4, #20]
 800d884:	444e      	add	r6, r9
 800d886:	eba5 0509 	sub.w	r5, r5, r9
 800d88a:	6026      	str	r6, [r4, #0]
 800d88c:	60a5      	str	r5, [r4, #8]
 800d88e:	463e      	mov	r6, r7
 800d890:	42be      	cmp	r6, r7
 800d892:	d900      	bls.n	800d896 <__ssputs_r+0x86>
 800d894:	463e      	mov	r6, r7
 800d896:	6820      	ldr	r0, [r4, #0]
 800d898:	4632      	mov	r2, r6
 800d89a:	4641      	mov	r1, r8
 800d89c:	f000 f97e 	bl	800db9c <memmove>
 800d8a0:	68a3      	ldr	r3, [r4, #8]
 800d8a2:	1b9b      	subs	r3, r3, r6
 800d8a4:	60a3      	str	r3, [r4, #8]
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	4433      	add	r3, r6
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	e7db      	b.n	800d868 <__ssputs_r+0x58>
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	f000 f999 	bl	800dbe8 <_realloc_r>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d1e1      	bne.n	800d880 <__ssputs_r+0x70>
 800d8bc:	6921      	ldr	r1, [r4, #16]
 800d8be:	4650      	mov	r0, sl
 800d8c0:	f7ff fec6 	bl	800d650 <_free_r>
 800d8c4:	e7c7      	b.n	800d856 <__ssputs_r+0x46>
	...

0800d8c8 <_svfiprintf_r>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	4698      	mov	r8, r3
 800d8ce:	898b      	ldrh	r3, [r1, #12]
 800d8d0:	061b      	lsls	r3, r3, #24
 800d8d2:	b09d      	sub	sp, #116	; 0x74
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	4614      	mov	r4, r2
 800d8da:	d50e      	bpl.n	800d8fa <_svfiprintf_r+0x32>
 800d8dc:	690b      	ldr	r3, [r1, #16]
 800d8de:	b963      	cbnz	r3, 800d8fa <_svfiprintf_r+0x32>
 800d8e0:	2140      	movs	r1, #64	; 0x40
 800d8e2:	f7ff ff21 	bl	800d728 <_malloc_r>
 800d8e6:	6028      	str	r0, [r5, #0]
 800d8e8:	6128      	str	r0, [r5, #16]
 800d8ea:	b920      	cbnz	r0, 800d8f6 <_svfiprintf_r+0x2e>
 800d8ec:	230c      	movs	r3, #12
 800d8ee:	603b      	str	r3, [r7, #0]
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	e0d1      	b.n	800da9a <_svfiprintf_r+0x1d2>
 800d8f6:	2340      	movs	r3, #64	; 0x40
 800d8f8:	616b      	str	r3, [r5, #20]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fe:	2320      	movs	r3, #32
 800d900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d904:	f8cd 800c 	str.w	r8, [sp, #12]
 800d908:	2330      	movs	r3, #48	; 0x30
 800d90a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dab4 <_svfiprintf_r+0x1ec>
 800d90e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d912:	f04f 0901 	mov.w	r9, #1
 800d916:	4623      	mov	r3, r4
 800d918:	469a      	mov	sl, r3
 800d91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d91e:	b10a      	cbz	r2, 800d924 <_svfiprintf_r+0x5c>
 800d920:	2a25      	cmp	r2, #37	; 0x25
 800d922:	d1f9      	bne.n	800d918 <_svfiprintf_r+0x50>
 800d924:	ebba 0b04 	subs.w	fp, sl, r4
 800d928:	d00b      	beq.n	800d942 <_svfiprintf_r+0x7a>
 800d92a:	465b      	mov	r3, fp
 800d92c:	4622      	mov	r2, r4
 800d92e:	4629      	mov	r1, r5
 800d930:	4638      	mov	r0, r7
 800d932:	f7ff ff6d 	bl	800d810 <__ssputs_r>
 800d936:	3001      	adds	r0, #1
 800d938:	f000 80aa 	beq.w	800da90 <_svfiprintf_r+0x1c8>
 800d93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93e:	445a      	add	r2, fp
 800d940:	9209      	str	r2, [sp, #36]	; 0x24
 800d942:	f89a 3000 	ldrb.w	r3, [sl]
 800d946:	2b00      	cmp	r3, #0
 800d948:	f000 80a2 	beq.w	800da90 <_svfiprintf_r+0x1c8>
 800d94c:	2300      	movs	r3, #0
 800d94e:	f04f 32ff 	mov.w	r2, #4294967295
 800d952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d956:	f10a 0a01 	add.w	sl, sl, #1
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	9307      	str	r3, [sp, #28]
 800d95e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d962:	931a      	str	r3, [sp, #104]	; 0x68
 800d964:	4654      	mov	r4, sl
 800d966:	2205      	movs	r2, #5
 800d968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d96c:	4851      	ldr	r0, [pc, #324]	; (800dab4 <_svfiprintf_r+0x1ec>)
 800d96e:	f7f2 fc57 	bl	8000220 <memchr>
 800d972:	9a04      	ldr	r2, [sp, #16]
 800d974:	b9d8      	cbnz	r0, 800d9ae <_svfiprintf_r+0xe6>
 800d976:	06d0      	lsls	r0, r2, #27
 800d978:	bf44      	itt	mi
 800d97a:	2320      	movmi	r3, #32
 800d97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d980:	0711      	lsls	r1, r2, #28
 800d982:	bf44      	itt	mi
 800d984:	232b      	movmi	r3, #43	; 0x2b
 800d986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d98a:	f89a 3000 	ldrb.w	r3, [sl]
 800d98e:	2b2a      	cmp	r3, #42	; 0x2a
 800d990:	d015      	beq.n	800d9be <_svfiprintf_r+0xf6>
 800d992:	9a07      	ldr	r2, [sp, #28]
 800d994:	4654      	mov	r4, sl
 800d996:	2000      	movs	r0, #0
 800d998:	f04f 0c0a 	mov.w	ip, #10
 800d99c:	4621      	mov	r1, r4
 800d99e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a2:	3b30      	subs	r3, #48	; 0x30
 800d9a4:	2b09      	cmp	r3, #9
 800d9a6:	d94e      	bls.n	800da46 <_svfiprintf_r+0x17e>
 800d9a8:	b1b0      	cbz	r0, 800d9d8 <_svfiprintf_r+0x110>
 800d9aa:	9207      	str	r2, [sp, #28]
 800d9ac:	e014      	b.n	800d9d8 <_svfiprintf_r+0x110>
 800d9ae:	eba0 0308 	sub.w	r3, r0, r8
 800d9b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	9304      	str	r3, [sp, #16]
 800d9ba:	46a2      	mov	sl, r4
 800d9bc:	e7d2      	b.n	800d964 <_svfiprintf_r+0x9c>
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	1d19      	adds	r1, r3, #4
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	9103      	str	r1, [sp, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	bfbb      	ittet	lt
 800d9ca:	425b      	neglt	r3, r3
 800d9cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d9d0:	9307      	strge	r3, [sp, #28]
 800d9d2:	9307      	strlt	r3, [sp, #28]
 800d9d4:	bfb8      	it	lt
 800d9d6:	9204      	strlt	r2, [sp, #16]
 800d9d8:	7823      	ldrb	r3, [r4, #0]
 800d9da:	2b2e      	cmp	r3, #46	; 0x2e
 800d9dc:	d10c      	bne.n	800d9f8 <_svfiprintf_r+0x130>
 800d9de:	7863      	ldrb	r3, [r4, #1]
 800d9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e2:	d135      	bne.n	800da50 <_svfiprintf_r+0x188>
 800d9e4:	9b03      	ldr	r3, [sp, #12]
 800d9e6:	1d1a      	adds	r2, r3, #4
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	9203      	str	r2, [sp, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	bfb8      	it	lt
 800d9f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9f4:	3402      	adds	r4, #2
 800d9f6:	9305      	str	r3, [sp, #20]
 800d9f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dac4 <_svfiprintf_r+0x1fc>
 800d9fc:	7821      	ldrb	r1, [r4, #0]
 800d9fe:	2203      	movs	r2, #3
 800da00:	4650      	mov	r0, sl
 800da02:	f7f2 fc0d 	bl	8000220 <memchr>
 800da06:	b140      	cbz	r0, 800da1a <_svfiprintf_r+0x152>
 800da08:	2340      	movs	r3, #64	; 0x40
 800da0a:	eba0 000a 	sub.w	r0, r0, sl
 800da0e:	fa03 f000 	lsl.w	r0, r3, r0
 800da12:	9b04      	ldr	r3, [sp, #16]
 800da14:	4303      	orrs	r3, r0
 800da16:	3401      	adds	r4, #1
 800da18:	9304      	str	r3, [sp, #16]
 800da1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1e:	4826      	ldr	r0, [pc, #152]	; (800dab8 <_svfiprintf_r+0x1f0>)
 800da20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da24:	2206      	movs	r2, #6
 800da26:	f7f2 fbfb 	bl	8000220 <memchr>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d038      	beq.n	800daa0 <_svfiprintf_r+0x1d8>
 800da2e:	4b23      	ldr	r3, [pc, #140]	; (800dabc <_svfiprintf_r+0x1f4>)
 800da30:	bb1b      	cbnz	r3, 800da7a <_svfiprintf_r+0x1b2>
 800da32:	9b03      	ldr	r3, [sp, #12]
 800da34:	3307      	adds	r3, #7
 800da36:	f023 0307 	bic.w	r3, r3, #7
 800da3a:	3308      	adds	r3, #8
 800da3c:	9303      	str	r3, [sp, #12]
 800da3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da40:	4433      	add	r3, r6
 800da42:	9309      	str	r3, [sp, #36]	; 0x24
 800da44:	e767      	b.n	800d916 <_svfiprintf_r+0x4e>
 800da46:	fb0c 3202 	mla	r2, ip, r2, r3
 800da4a:	460c      	mov	r4, r1
 800da4c:	2001      	movs	r0, #1
 800da4e:	e7a5      	b.n	800d99c <_svfiprintf_r+0xd4>
 800da50:	2300      	movs	r3, #0
 800da52:	3401      	adds	r4, #1
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	4619      	mov	r1, r3
 800da58:	f04f 0c0a 	mov.w	ip, #10
 800da5c:	4620      	mov	r0, r4
 800da5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da62:	3a30      	subs	r2, #48	; 0x30
 800da64:	2a09      	cmp	r2, #9
 800da66:	d903      	bls.n	800da70 <_svfiprintf_r+0x1a8>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0c5      	beq.n	800d9f8 <_svfiprintf_r+0x130>
 800da6c:	9105      	str	r1, [sp, #20]
 800da6e:	e7c3      	b.n	800d9f8 <_svfiprintf_r+0x130>
 800da70:	fb0c 2101 	mla	r1, ip, r1, r2
 800da74:	4604      	mov	r4, r0
 800da76:	2301      	movs	r3, #1
 800da78:	e7f0      	b.n	800da5c <_svfiprintf_r+0x194>
 800da7a:	ab03      	add	r3, sp, #12
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	462a      	mov	r2, r5
 800da80:	4b0f      	ldr	r3, [pc, #60]	; (800dac0 <_svfiprintf_r+0x1f8>)
 800da82:	a904      	add	r1, sp, #16
 800da84:	4638      	mov	r0, r7
 800da86:	f7fc fa5d 	bl	8009f44 <_printf_float>
 800da8a:	1c42      	adds	r2, r0, #1
 800da8c:	4606      	mov	r6, r0
 800da8e:	d1d6      	bne.n	800da3e <_svfiprintf_r+0x176>
 800da90:	89ab      	ldrh	r3, [r5, #12]
 800da92:	065b      	lsls	r3, r3, #25
 800da94:	f53f af2c 	bmi.w	800d8f0 <_svfiprintf_r+0x28>
 800da98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da9a:	b01d      	add	sp, #116	; 0x74
 800da9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa0:	ab03      	add	r3, sp, #12
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	462a      	mov	r2, r5
 800daa6:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <_svfiprintf_r+0x1f8>)
 800daa8:	a904      	add	r1, sp, #16
 800daaa:	4638      	mov	r0, r7
 800daac:	f7fc fcee 	bl	800a48c <_printf_i>
 800dab0:	e7eb      	b.n	800da8a <_svfiprintf_r+0x1c2>
 800dab2:	bf00      	nop
 800dab4:	0800efc4 	.word	0x0800efc4
 800dab8:	0800efce 	.word	0x0800efce
 800dabc:	08009f45 	.word	0x08009f45
 800dac0:	0800d811 	.word	0x0800d811
 800dac4:	0800efca 	.word	0x0800efca

0800dac8 <nan>:
 800dac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dad0 <nan+0x8>
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	00000000 	.word	0x00000000
 800dad4:	7ff80000 	.word	0x7ff80000

0800dad8 <_sbrk_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d06      	ldr	r5, [pc, #24]	; (800daf4 <_sbrk_r+0x1c>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	f7f4 fb5a 	bl	800219c <_sbrk>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d102      	bne.n	800daf2 <_sbrk_r+0x1a>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	b103      	cbz	r3, 800daf2 <_sbrk_r+0x1a>
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	200002a8 	.word	0x200002a8

0800daf8 <strncmp>:
 800daf8:	b510      	push	{r4, lr}
 800dafa:	b17a      	cbz	r2, 800db1c <strncmp+0x24>
 800dafc:	4603      	mov	r3, r0
 800dafe:	3901      	subs	r1, #1
 800db00:	1884      	adds	r4, r0, r2
 800db02:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db0a:	4290      	cmp	r0, r2
 800db0c:	d101      	bne.n	800db12 <strncmp+0x1a>
 800db0e:	42a3      	cmp	r3, r4
 800db10:	d101      	bne.n	800db16 <strncmp+0x1e>
 800db12:	1a80      	subs	r0, r0, r2
 800db14:	bd10      	pop	{r4, pc}
 800db16:	2800      	cmp	r0, #0
 800db18:	d1f3      	bne.n	800db02 <strncmp+0xa>
 800db1a:	e7fa      	b.n	800db12 <strncmp+0x1a>
 800db1c:	4610      	mov	r0, r2
 800db1e:	e7f9      	b.n	800db14 <strncmp+0x1c>

0800db20 <__ascii_wctomb>:
 800db20:	b149      	cbz	r1, 800db36 <__ascii_wctomb+0x16>
 800db22:	2aff      	cmp	r2, #255	; 0xff
 800db24:	bf85      	ittet	hi
 800db26:	238a      	movhi	r3, #138	; 0x8a
 800db28:	6003      	strhi	r3, [r0, #0]
 800db2a:	700a      	strbls	r2, [r1, #0]
 800db2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800db30:	bf98      	it	ls
 800db32:	2001      	movls	r0, #1
 800db34:	4770      	bx	lr
 800db36:	4608      	mov	r0, r1
 800db38:	4770      	bx	lr
	...

0800db3c <__assert_func>:
 800db3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db3e:	4614      	mov	r4, r2
 800db40:	461a      	mov	r2, r3
 800db42:	4b09      	ldr	r3, [pc, #36]	; (800db68 <__assert_func+0x2c>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4605      	mov	r5, r0
 800db48:	68d8      	ldr	r0, [r3, #12]
 800db4a:	b14c      	cbz	r4, 800db60 <__assert_func+0x24>
 800db4c:	4b07      	ldr	r3, [pc, #28]	; (800db6c <__assert_func+0x30>)
 800db4e:	9100      	str	r1, [sp, #0]
 800db50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db54:	4906      	ldr	r1, [pc, #24]	; (800db70 <__assert_func+0x34>)
 800db56:	462b      	mov	r3, r5
 800db58:	f000 f80e 	bl	800db78 <fiprintf>
 800db5c:	f000 fa8c 	bl	800e078 <abort>
 800db60:	4b04      	ldr	r3, [pc, #16]	; (800db74 <__assert_func+0x38>)
 800db62:	461c      	mov	r4, r3
 800db64:	e7f3      	b.n	800db4e <__assert_func+0x12>
 800db66:	bf00      	nop
 800db68:	20000010 	.word	0x20000010
 800db6c:	0800efd5 	.word	0x0800efd5
 800db70:	0800efe2 	.word	0x0800efe2
 800db74:	0800f010 	.word	0x0800f010

0800db78 <fiprintf>:
 800db78:	b40e      	push	{r1, r2, r3}
 800db7a:	b503      	push	{r0, r1, lr}
 800db7c:	4601      	mov	r1, r0
 800db7e:	ab03      	add	r3, sp, #12
 800db80:	4805      	ldr	r0, [pc, #20]	; (800db98 <fiprintf+0x20>)
 800db82:	f853 2b04 	ldr.w	r2, [r3], #4
 800db86:	6800      	ldr	r0, [r0, #0]
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	f000 f885 	bl	800dc98 <_vfiprintf_r>
 800db8e:	b002      	add	sp, #8
 800db90:	f85d eb04 	ldr.w	lr, [sp], #4
 800db94:	b003      	add	sp, #12
 800db96:	4770      	bx	lr
 800db98:	20000010 	.word	0x20000010

0800db9c <memmove>:
 800db9c:	4288      	cmp	r0, r1
 800db9e:	b510      	push	{r4, lr}
 800dba0:	eb01 0402 	add.w	r4, r1, r2
 800dba4:	d902      	bls.n	800dbac <memmove+0x10>
 800dba6:	4284      	cmp	r4, r0
 800dba8:	4623      	mov	r3, r4
 800dbaa:	d807      	bhi.n	800dbbc <memmove+0x20>
 800dbac:	1e43      	subs	r3, r0, #1
 800dbae:	42a1      	cmp	r1, r4
 800dbb0:	d008      	beq.n	800dbc4 <memmove+0x28>
 800dbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbba:	e7f8      	b.n	800dbae <memmove+0x12>
 800dbbc:	4402      	add	r2, r0
 800dbbe:	4601      	mov	r1, r0
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	d100      	bne.n	800dbc6 <memmove+0x2a>
 800dbc4:	bd10      	pop	{r4, pc}
 800dbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbce:	e7f7      	b.n	800dbc0 <memmove+0x24>

0800dbd0 <__malloc_lock>:
 800dbd0:	4801      	ldr	r0, [pc, #4]	; (800dbd8 <__malloc_lock+0x8>)
 800dbd2:	f000 bc11 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800dbd6:	bf00      	nop
 800dbd8:	200002ac 	.word	0x200002ac

0800dbdc <__malloc_unlock>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	; (800dbe4 <__malloc_unlock+0x8>)
 800dbde:	f000 bc0c 	b.w	800e3fa <__retarget_lock_release_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	200002ac 	.word	0x200002ac

0800dbe8 <_realloc_r>:
 800dbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbec:	4680      	mov	r8, r0
 800dbee:	4614      	mov	r4, r2
 800dbf0:	460e      	mov	r6, r1
 800dbf2:	b921      	cbnz	r1, 800dbfe <_realloc_r+0x16>
 800dbf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	f7ff bd95 	b.w	800d728 <_malloc_r>
 800dbfe:	b92a      	cbnz	r2, 800dc0c <_realloc_r+0x24>
 800dc00:	f7ff fd26 	bl	800d650 <_free_r>
 800dc04:	4625      	mov	r5, r4
 800dc06:	4628      	mov	r0, r5
 800dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc0c:	f000 fc5c 	bl	800e4c8 <_malloc_usable_size_r>
 800dc10:	4284      	cmp	r4, r0
 800dc12:	4607      	mov	r7, r0
 800dc14:	d802      	bhi.n	800dc1c <_realloc_r+0x34>
 800dc16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc1a:	d812      	bhi.n	800dc42 <_realloc_r+0x5a>
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4640      	mov	r0, r8
 800dc20:	f7ff fd82 	bl	800d728 <_malloc_r>
 800dc24:	4605      	mov	r5, r0
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d0ed      	beq.n	800dc06 <_realloc_r+0x1e>
 800dc2a:	42bc      	cmp	r4, r7
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	4631      	mov	r1, r6
 800dc30:	bf28      	it	cs
 800dc32:	463a      	movcs	r2, r7
 800dc34:	f7fc f8d0 	bl	8009dd8 <memcpy>
 800dc38:	4631      	mov	r1, r6
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	f7ff fd08 	bl	800d650 <_free_r>
 800dc40:	e7e1      	b.n	800dc06 <_realloc_r+0x1e>
 800dc42:	4635      	mov	r5, r6
 800dc44:	e7df      	b.n	800dc06 <_realloc_r+0x1e>

0800dc46 <__sfputc_r>:
 800dc46:	6893      	ldr	r3, [r2, #8]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	b410      	push	{r4}
 800dc4e:	6093      	str	r3, [r2, #8]
 800dc50:	da08      	bge.n	800dc64 <__sfputc_r+0x1e>
 800dc52:	6994      	ldr	r4, [r2, #24]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	db01      	blt.n	800dc5c <__sfputc_r+0x16>
 800dc58:	290a      	cmp	r1, #10
 800dc5a:	d103      	bne.n	800dc64 <__sfputc_r+0x1e>
 800dc5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc60:	f000 b94a 	b.w	800def8 <__swbuf_r>
 800dc64:	6813      	ldr	r3, [r2, #0]
 800dc66:	1c58      	adds	r0, r3, #1
 800dc68:	6010      	str	r0, [r2, #0]
 800dc6a:	7019      	strb	r1, [r3, #0]
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <__sfputs_r>:
 800dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc76:	4606      	mov	r6, r0
 800dc78:	460f      	mov	r7, r1
 800dc7a:	4614      	mov	r4, r2
 800dc7c:	18d5      	adds	r5, r2, r3
 800dc7e:	42ac      	cmp	r4, r5
 800dc80:	d101      	bne.n	800dc86 <__sfputs_r+0x12>
 800dc82:	2000      	movs	r0, #0
 800dc84:	e007      	b.n	800dc96 <__sfputs_r+0x22>
 800dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8a:	463a      	mov	r2, r7
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	f7ff ffda 	bl	800dc46 <__sfputc_r>
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	d1f3      	bne.n	800dc7e <__sfputs_r+0xa>
 800dc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc98 <_vfiprintf_r>:
 800dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	b09d      	sub	sp, #116	; 0x74
 800dca0:	4614      	mov	r4, r2
 800dca2:	4698      	mov	r8, r3
 800dca4:	4606      	mov	r6, r0
 800dca6:	b118      	cbz	r0, 800dcb0 <_vfiprintf_r+0x18>
 800dca8:	6983      	ldr	r3, [r0, #24]
 800dcaa:	b90b      	cbnz	r3, 800dcb0 <_vfiprintf_r+0x18>
 800dcac:	f000 fb06 	bl	800e2bc <__sinit>
 800dcb0:	4b89      	ldr	r3, [pc, #548]	; (800ded8 <_vfiprintf_r+0x240>)
 800dcb2:	429d      	cmp	r5, r3
 800dcb4:	d11b      	bne.n	800dcee <_vfiprintf_r+0x56>
 800dcb6:	6875      	ldr	r5, [r6, #4]
 800dcb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcba:	07d9      	lsls	r1, r3, #31
 800dcbc:	d405      	bmi.n	800dcca <_vfiprintf_r+0x32>
 800dcbe:	89ab      	ldrh	r3, [r5, #12]
 800dcc0:	059a      	lsls	r2, r3, #22
 800dcc2:	d402      	bmi.n	800dcca <_vfiprintf_r+0x32>
 800dcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcc6:	f000 fb97 	bl	800e3f8 <__retarget_lock_acquire_recursive>
 800dcca:	89ab      	ldrh	r3, [r5, #12]
 800dccc:	071b      	lsls	r3, r3, #28
 800dcce:	d501      	bpl.n	800dcd4 <_vfiprintf_r+0x3c>
 800dcd0:	692b      	ldr	r3, [r5, #16]
 800dcd2:	b9eb      	cbnz	r3, 800dd10 <_vfiprintf_r+0x78>
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f000 f960 	bl	800df9c <__swsetup_r>
 800dcdc:	b1c0      	cbz	r0, 800dd10 <_vfiprintf_r+0x78>
 800dcde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dce0:	07dc      	lsls	r4, r3, #31
 800dce2:	d50e      	bpl.n	800dd02 <_vfiprintf_r+0x6a>
 800dce4:	f04f 30ff 	mov.w	r0, #4294967295
 800dce8:	b01d      	add	sp, #116	; 0x74
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	4b7b      	ldr	r3, [pc, #492]	; (800dedc <_vfiprintf_r+0x244>)
 800dcf0:	429d      	cmp	r5, r3
 800dcf2:	d101      	bne.n	800dcf8 <_vfiprintf_r+0x60>
 800dcf4:	68b5      	ldr	r5, [r6, #8]
 800dcf6:	e7df      	b.n	800dcb8 <_vfiprintf_r+0x20>
 800dcf8:	4b79      	ldr	r3, [pc, #484]	; (800dee0 <_vfiprintf_r+0x248>)
 800dcfa:	429d      	cmp	r5, r3
 800dcfc:	bf08      	it	eq
 800dcfe:	68f5      	ldreq	r5, [r6, #12]
 800dd00:	e7da      	b.n	800dcb8 <_vfiprintf_r+0x20>
 800dd02:	89ab      	ldrh	r3, [r5, #12]
 800dd04:	0598      	lsls	r0, r3, #22
 800dd06:	d4ed      	bmi.n	800dce4 <_vfiprintf_r+0x4c>
 800dd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd0a:	f000 fb76 	bl	800e3fa <__retarget_lock_release_recursive>
 800dd0e:	e7e9      	b.n	800dce4 <_vfiprintf_r+0x4c>
 800dd10:	2300      	movs	r3, #0
 800dd12:	9309      	str	r3, [sp, #36]	; 0x24
 800dd14:	2320      	movs	r3, #32
 800dd16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd1e:	2330      	movs	r3, #48	; 0x30
 800dd20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dee4 <_vfiprintf_r+0x24c>
 800dd24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd28:	f04f 0901 	mov.w	r9, #1
 800dd2c:	4623      	mov	r3, r4
 800dd2e:	469a      	mov	sl, r3
 800dd30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd34:	b10a      	cbz	r2, 800dd3a <_vfiprintf_r+0xa2>
 800dd36:	2a25      	cmp	r2, #37	; 0x25
 800dd38:	d1f9      	bne.n	800dd2e <_vfiprintf_r+0x96>
 800dd3a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd3e:	d00b      	beq.n	800dd58 <_vfiprintf_r+0xc0>
 800dd40:	465b      	mov	r3, fp
 800dd42:	4622      	mov	r2, r4
 800dd44:	4629      	mov	r1, r5
 800dd46:	4630      	mov	r0, r6
 800dd48:	f7ff ff94 	bl	800dc74 <__sfputs_r>
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	f000 80aa 	beq.w	800dea6 <_vfiprintf_r+0x20e>
 800dd52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd54:	445a      	add	r2, fp
 800dd56:	9209      	str	r2, [sp, #36]	; 0x24
 800dd58:	f89a 3000 	ldrb.w	r3, [sl]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 80a2 	beq.w	800dea6 <_vfiprintf_r+0x20e>
 800dd62:	2300      	movs	r3, #0
 800dd64:	f04f 32ff 	mov.w	r2, #4294967295
 800dd68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd6c:	f10a 0a01 	add.w	sl, sl, #1
 800dd70:	9304      	str	r3, [sp, #16]
 800dd72:	9307      	str	r3, [sp, #28]
 800dd74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd78:	931a      	str	r3, [sp, #104]	; 0x68
 800dd7a:	4654      	mov	r4, sl
 800dd7c:	2205      	movs	r2, #5
 800dd7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd82:	4858      	ldr	r0, [pc, #352]	; (800dee4 <_vfiprintf_r+0x24c>)
 800dd84:	f7f2 fa4c 	bl	8000220 <memchr>
 800dd88:	9a04      	ldr	r2, [sp, #16]
 800dd8a:	b9d8      	cbnz	r0, 800ddc4 <_vfiprintf_r+0x12c>
 800dd8c:	06d1      	lsls	r1, r2, #27
 800dd8e:	bf44      	itt	mi
 800dd90:	2320      	movmi	r3, #32
 800dd92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd96:	0713      	lsls	r3, r2, #28
 800dd98:	bf44      	itt	mi
 800dd9a:	232b      	movmi	r3, #43	; 0x2b
 800dd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dda0:	f89a 3000 	ldrb.w	r3, [sl]
 800dda4:	2b2a      	cmp	r3, #42	; 0x2a
 800dda6:	d015      	beq.n	800ddd4 <_vfiprintf_r+0x13c>
 800dda8:	9a07      	ldr	r2, [sp, #28]
 800ddaa:	4654      	mov	r4, sl
 800ddac:	2000      	movs	r0, #0
 800ddae:	f04f 0c0a 	mov.w	ip, #10
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddb8:	3b30      	subs	r3, #48	; 0x30
 800ddba:	2b09      	cmp	r3, #9
 800ddbc:	d94e      	bls.n	800de5c <_vfiprintf_r+0x1c4>
 800ddbe:	b1b0      	cbz	r0, 800ddee <_vfiprintf_r+0x156>
 800ddc0:	9207      	str	r2, [sp, #28]
 800ddc2:	e014      	b.n	800ddee <_vfiprintf_r+0x156>
 800ddc4:	eba0 0308 	sub.w	r3, r0, r8
 800ddc8:	fa09 f303 	lsl.w	r3, r9, r3
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	9304      	str	r3, [sp, #16]
 800ddd0:	46a2      	mov	sl, r4
 800ddd2:	e7d2      	b.n	800dd7a <_vfiprintf_r+0xe2>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	1d19      	adds	r1, r3, #4
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	9103      	str	r1, [sp, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	bfbb      	ittet	lt
 800dde0:	425b      	neglt	r3, r3
 800dde2:	f042 0202 	orrlt.w	r2, r2, #2
 800dde6:	9307      	strge	r3, [sp, #28]
 800dde8:	9307      	strlt	r3, [sp, #28]
 800ddea:	bfb8      	it	lt
 800ddec:	9204      	strlt	r2, [sp, #16]
 800ddee:	7823      	ldrb	r3, [r4, #0]
 800ddf0:	2b2e      	cmp	r3, #46	; 0x2e
 800ddf2:	d10c      	bne.n	800de0e <_vfiprintf_r+0x176>
 800ddf4:	7863      	ldrb	r3, [r4, #1]
 800ddf6:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf8:	d135      	bne.n	800de66 <_vfiprintf_r+0x1ce>
 800ddfa:	9b03      	ldr	r3, [sp, #12]
 800ddfc:	1d1a      	adds	r2, r3, #4
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	9203      	str	r2, [sp, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	bfb8      	it	lt
 800de06:	f04f 33ff 	movlt.w	r3, #4294967295
 800de0a:	3402      	adds	r4, #2
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800def4 <_vfiprintf_r+0x25c>
 800de12:	7821      	ldrb	r1, [r4, #0]
 800de14:	2203      	movs	r2, #3
 800de16:	4650      	mov	r0, sl
 800de18:	f7f2 fa02 	bl	8000220 <memchr>
 800de1c:	b140      	cbz	r0, 800de30 <_vfiprintf_r+0x198>
 800de1e:	2340      	movs	r3, #64	; 0x40
 800de20:	eba0 000a 	sub.w	r0, r0, sl
 800de24:	fa03 f000 	lsl.w	r0, r3, r0
 800de28:	9b04      	ldr	r3, [sp, #16]
 800de2a:	4303      	orrs	r3, r0
 800de2c:	3401      	adds	r4, #1
 800de2e:	9304      	str	r3, [sp, #16]
 800de30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de34:	482c      	ldr	r0, [pc, #176]	; (800dee8 <_vfiprintf_r+0x250>)
 800de36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de3a:	2206      	movs	r2, #6
 800de3c:	f7f2 f9f0 	bl	8000220 <memchr>
 800de40:	2800      	cmp	r0, #0
 800de42:	d03f      	beq.n	800dec4 <_vfiprintf_r+0x22c>
 800de44:	4b29      	ldr	r3, [pc, #164]	; (800deec <_vfiprintf_r+0x254>)
 800de46:	bb1b      	cbnz	r3, 800de90 <_vfiprintf_r+0x1f8>
 800de48:	9b03      	ldr	r3, [sp, #12]
 800de4a:	3307      	adds	r3, #7
 800de4c:	f023 0307 	bic.w	r3, r3, #7
 800de50:	3308      	adds	r3, #8
 800de52:	9303      	str	r3, [sp, #12]
 800de54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de56:	443b      	add	r3, r7
 800de58:	9309      	str	r3, [sp, #36]	; 0x24
 800de5a:	e767      	b.n	800dd2c <_vfiprintf_r+0x94>
 800de5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de60:	460c      	mov	r4, r1
 800de62:	2001      	movs	r0, #1
 800de64:	e7a5      	b.n	800ddb2 <_vfiprintf_r+0x11a>
 800de66:	2300      	movs	r3, #0
 800de68:	3401      	adds	r4, #1
 800de6a:	9305      	str	r3, [sp, #20]
 800de6c:	4619      	mov	r1, r3
 800de6e:	f04f 0c0a 	mov.w	ip, #10
 800de72:	4620      	mov	r0, r4
 800de74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de78:	3a30      	subs	r2, #48	; 0x30
 800de7a:	2a09      	cmp	r2, #9
 800de7c:	d903      	bls.n	800de86 <_vfiprintf_r+0x1ee>
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0c5      	beq.n	800de0e <_vfiprintf_r+0x176>
 800de82:	9105      	str	r1, [sp, #20]
 800de84:	e7c3      	b.n	800de0e <_vfiprintf_r+0x176>
 800de86:	fb0c 2101 	mla	r1, ip, r1, r2
 800de8a:	4604      	mov	r4, r0
 800de8c:	2301      	movs	r3, #1
 800de8e:	e7f0      	b.n	800de72 <_vfiprintf_r+0x1da>
 800de90:	ab03      	add	r3, sp, #12
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	462a      	mov	r2, r5
 800de96:	4b16      	ldr	r3, [pc, #88]	; (800def0 <_vfiprintf_r+0x258>)
 800de98:	a904      	add	r1, sp, #16
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7fc f852 	bl	8009f44 <_printf_float>
 800dea0:	4607      	mov	r7, r0
 800dea2:	1c78      	adds	r0, r7, #1
 800dea4:	d1d6      	bne.n	800de54 <_vfiprintf_r+0x1bc>
 800dea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea8:	07d9      	lsls	r1, r3, #31
 800deaa:	d405      	bmi.n	800deb8 <_vfiprintf_r+0x220>
 800deac:	89ab      	ldrh	r3, [r5, #12]
 800deae:	059a      	lsls	r2, r3, #22
 800deb0:	d402      	bmi.n	800deb8 <_vfiprintf_r+0x220>
 800deb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deb4:	f000 faa1 	bl	800e3fa <__retarget_lock_release_recursive>
 800deb8:	89ab      	ldrh	r3, [r5, #12]
 800deba:	065b      	lsls	r3, r3, #25
 800debc:	f53f af12 	bmi.w	800dce4 <_vfiprintf_r+0x4c>
 800dec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dec2:	e711      	b.n	800dce8 <_vfiprintf_r+0x50>
 800dec4:	ab03      	add	r3, sp, #12
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	462a      	mov	r2, r5
 800deca:	4b09      	ldr	r3, [pc, #36]	; (800def0 <_vfiprintf_r+0x258>)
 800decc:	a904      	add	r1, sp, #16
 800dece:	4630      	mov	r0, r6
 800ded0:	f7fc fadc 	bl	800a48c <_printf_i>
 800ded4:	e7e4      	b.n	800dea0 <_vfiprintf_r+0x208>
 800ded6:	bf00      	nop
 800ded8:	0800f034 	.word	0x0800f034
 800dedc:	0800f054 	.word	0x0800f054
 800dee0:	0800f014 	.word	0x0800f014
 800dee4:	0800efc4 	.word	0x0800efc4
 800dee8:	0800efce 	.word	0x0800efce
 800deec:	08009f45 	.word	0x08009f45
 800def0:	0800dc75 	.word	0x0800dc75
 800def4:	0800efca 	.word	0x0800efca

0800def8 <__swbuf_r>:
 800def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800defa:	460e      	mov	r6, r1
 800defc:	4614      	mov	r4, r2
 800defe:	4605      	mov	r5, r0
 800df00:	b118      	cbz	r0, 800df0a <__swbuf_r+0x12>
 800df02:	6983      	ldr	r3, [r0, #24]
 800df04:	b90b      	cbnz	r3, 800df0a <__swbuf_r+0x12>
 800df06:	f000 f9d9 	bl	800e2bc <__sinit>
 800df0a:	4b21      	ldr	r3, [pc, #132]	; (800df90 <__swbuf_r+0x98>)
 800df0c:	429c      	cmp	r4, r3
 800df0e:	d12b      	bne.n	800df68 <__swbuf_r+0x70>
 800df10:	686c      	ldr	r4, [r5, #4]
 800df12:	69a3      	ldr	r3, [r4, #24]
 800df14:	60a3      	str	r3, [r4, #8]
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	071a      	lsls	r2, r3, #28
 800df1a:	d52f      	bpl.n	800df7c <__swbuf_r+0x84>
 800df1c:	6923      	ldr	r3, [r4, #16]
 800df1e:	b36b      	cbz	r3, 800df7c <__swbuf_r+0x84>
 800df20:	6923      	ldr	r3, [r4, #16]
 800df22:	6820      	ldr	r0, [r4, #0]
 800df24:	1ac0      	subs	r0, r0, r3
 800df26:	6963      	ldr	r3, [r4, #20]
 800df28:	b2f6      	uxtb	r6, r6
 800df2a:	4283      	cmp	r3, r0
 800df2c:	4637      	mov	r7, r6
 800df2e:	dc04      	bgt.n	800df3a <__swbuf_r+0x42>
 800df30:	4621      	mov	r1, r4
 800df32:	4628      	mov	r0, r5
 800df34:	f000 f92e 	bl	800e194 <_fflush_r>
 800df38:	bb30      	cbnz	r0, 800df88 <__swbuf_r+0x90>
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	60a3      	str	r3, [r4, #8]
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	1c5a      	adds	r2, r3, #1
 800df44:	6022      	str	r2, [r4, #0]
 800df46:	701e      	strb	r6, [r3, #0]
 800df48:	6963      	ldr	r3, [r4, #20]
 800df4a:	3001      	adds	r0, #1
 800df4c:	4283      	cmp	r3, r0
 800df4e:	d004      	beq.n	800df5a <__swbuf_r+0x62>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	07db      	lsls	r3, r3, #31
 800df54:	d506      	bpl.n	800df64 <__swbuf_r+0x6c>
 800df56:	2e0a      	cmp	r6, #10
 800df58:	d104      	bne.n	800df64 <__swbuf_r+0x6c>
 800df5a:	4621      	mov	r1, r4
 800df5c:	4628      	mov	r0, r5
 800df5e:	f000 f919 	bl	800e194 <_fflush_r>
 800df62:	b988      	cbnz	r0, 800df88 <__swbuf_r+0x90>
 800df64:	4638      	mov	r0, r7
 800df66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <__swbuf_r+0x9c>)
 800df6a:	429c      	cmp	r4, r3
 800df6c:	d101      	bne.n	800df72 <__swbuf_r+0x7a>
 800df6e:	68ac      	ldr	r4, [r5, #8]
 800df70:	e7cf      	b.n	800df12 <__swbuf_r+0x1a>
 800df72:	4b09      	ldr	r3, [pc, #36]	; (800df98 <__swbuf_r+0xa0>)
 800df74:	429c      	cmp	r4, r3
 800df76:	bf08      	it	eq
 800df78:	68ec      	ldreq	r4, [r5, #12]
 800df7a:	e7ca      	b.n	800df12 <__swbuf_r+0x1a>
 800df7c:	4621      	mov	r1, r4
 800df7e:	4628      	mov	r0, r5
 800df80:	f000 f80c 	bl	800df9c <__swsetup_r>
 800df84:	2800      	cmp	r0, #0
 800df86:	d0cb      	beq.n	800df20 <__swbuf_r+0x28>
 800df88:	f04f 37ff 	mov.w	r7, #4294967295
 800df8c:	e7ea      	b.n	800df64 <__swbuf_r+0x6c>
 800df8e:	bf00      	nop
 800df90:	0800f034 	.word	0x0800f034
 800df94:	0800f054 	.word	0x0800f054
 800df98:	0800f014 	.word	0x0800f014

0800df9c <__swsetup_r>:
 800df9c:	4b32      	ldr	r3, [pc, #200]	; (800e068 <__swsetup_r+0xcc>)
 800df9e:	b570      	push	{r4, r5, r6, lr}
 800dfa0:	681d      	ldr	r5, [r3, #0]
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	b125      	cbz	r5, 800dfb2 <__swsetup_r+0x16>
 800dfa8:	69ab      	ldr	r3, [r5, #24]
 800dfaa:	b913      	cbnz	r3, 800dfb2 <__swsetup_r+0x16>
 800dfac:	4628      	mov	r0, r5
 800dfae:	f000 f985 	bl	800e2bc <__sinit>
 800dfb2:	4b2e      	ldr	r3, [pc, #184]	; (800e06c <__swsetup_r+0xd0>)
 800dfb4:	429c      	cmp	r4, r3
 800dfb6:	d10f      	bne.n	800dfd8 <__swsetup_r+0x3c>
 800dfb8:	686c      	ldr	r4, [r5, #4]
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc0:	0719      	lsls	r1, r3, #28
 800dfc2:	d42c      	bmi.n	800e01e <__swsetup_r+0x82>
 800dfc4:	06dd      	lsls	r5, r3, #27
 800dfc6:	d411      	bmi.n	800dfec <__swsetup_r+0x50>
 800dfc8:	2309      	movs	r3, #9
 800dfca:	6033      	str	r3, [r6, #0]
 800dfcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfd0:	81a3      	strh	r3, [r4, #12]
 800dfd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd6:	e03e      	b.n	800e056 <__swsetup_r+0xba>
 800dfd8:	4b25      	ldr	r3, [pc, #148]	; (800e070 <__swsetup_r+0xd4>)
 800dfda:	429c      	cmp	r4, r3
 800dfdc:	d101      	bne.n	800dfe2 <__swsetup_r+0x46>
 800dfde:	68ac      	ldr	r4, [r5, #8]
 800dfe0:	e7eb      	b.n	800dfba <__swsetup_r+0x1e>
 800dfe2:	4b24      	ldr	r3, [pc, #144]	; (800e074 <__swsetup_r+0xd8>)
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	bf08      	it	eq
 800dfe8:	68ec      	ldreq	r4, [r5, #12]
 800dfea:	e7e6      	b.n	800dfba <__swsetup_r+0x1e>
 800dfec:	0758      	lsls	r0, r3, #29
 800dfee:	d512      	bpl.n	800e016 <__swsetup_r+0x7a>
 800dff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dff2:	b141      	cbz	r1, 800e006 <__swsetup_r+0x6a>
 800dff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dff8:	4299      	cmp	r1, r3
 800dffa:	d002      	beq.n	800e002 <__swsetup_r+0x66>
 800dffc:	4630      	mov	r0, r6
 800dffe:	f7ff fb27 	bl	800d650 <_free_r>
 800e002:	2300      	movs	r3, #0
 800e004:	6363      	str	r3, [r4, #52]	; 0x34
 800e006:	89a3      	ldrh	r3, [r4, #12]
 800e008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e00c:	81a3      	strh	r3, [r4, #12]
 800e00e:	2300      	movs	r3, #0
 800e010:	6063      	str	r3, [r4, #4]
 800e012:	6923      	ldr	r3, [r4, #16]
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	f043 0308 	orr.w	r3, r3, #8
 800e01c:	81a3      	strh	r3, [r4, #12]
 800e01e:	6923      	ldr	r3, [r4, #16]
 800e020:	b94b      	cbnz	r3, 800e036 <__swsetup_r+0x9a>
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e02c:	d003      	beq.n	800e036 <__swsetup_r+0x9a>
 800e02e:	4621      	mov	r1, r4
 800e030:	4630      	mov	r0, r6
 800e032:	f000 fa09 	bl	800e448 <__smakebuf_r>
 800e036:	89a0      	ldrh	r0, [r4, #12]
 800e038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e03c:	f010 0301 	ands.w	r3, r0, #1
 800e040:	d00a      	beq.n	800e058 <__swsetup_r+0xbc>
 800e042:	2300      	movs	r3, #0
 800e044:	60a3      	str	r3, [r4, #8]
 800e046:	6963      	ldr	r3, [r4, #20]
 800e048:	425b      	negs	r3, r3
 800e04a:	61a3      	str	r3, [r4, #24]
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	b943      	cbnz	r3, 800e062 <__swsetup_r+0xc6>
 800e050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e054:	d1ba      	bne.n	800dfcc <__swsetup_r+0x30>
 800e056:	bd70      	pop	{r4, r5, r6, pc}
 800e058:	0781      	lsls	r1, r0, #30
 800e05a:	bf58      	it	pl
 800e05c:	6963      	ldrpl	r3, [r4, #20]
 800e05e:	60a3      	str	r3, [r4, #8]
 800e060:	e7f4      	b.n	800e04c <__swsetup_r+0xb0>
 800e062:	2000      	movs	r0, #0
 800e064:	e7f7      	b.n	800e056 <__swsetup_r+0xba>
 800e066:	bf00      	nop
 800e068:	20000010 	.word	0x20000010
 800e06c:	0800f034 	.word	0x0800f034
 800e070:	0800f054 	.word	0x0800f054
 800e074:	0800f014 	.word	0x0800f014

0800e078 <abort>:
 800e078:	b508      	push	{r3, lr}
 800e07a:	2006      	movs	r0, #6
 800e07c:	f000 fa54 	bl	800e528 <raise>
 800e080:	2001      	movs	r0, #1
 800e082:	f7f4 f813 	bl	80020ac <_exit>
	...

0800e088 <__sflush_r>:
 800e088:	898a      	ldrh	r2, [r1, #12]
 800e08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08e:	4605      	mov	r5, r0
 800e090:	0710      	lsls	r0, r2, #28
 800e092:	460c      	mov	r4, r1
 800e094:	d458      	bmi.n	800e148 <__sflush_r+0xc0>
 800e096:	684b      	ldr	r3, [r1, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	dc05      	bgt.n	800e0a8 <__sflush_r+0x20>
 800e09c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	dc02      	bgt.n	800e0a8 <__sflush_r+0x20>
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	d0f9      	beq.n	800e0a2 <__sflush_r+0x1a>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0b4:	682f      	ldr	r7, [r5, #0]
 800e0b6:	602b      	str	r3, [r5, #0]
 800e0b8:	d032      	beq.n	800e120 <__sflush_r+0x98>
 800e0ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	075a      	lsls	r2, r3, #29
 800e0c0:	d505      	bpl.n	800e0ce <__sflush_r+0x46>
 800e0c2:	6863      	ldr	r3, [r4, #4]
 800e0c4:	1ac0      	subs	r0, r0, r3
 800e0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0c8:	b10b      	cbz	r3, 800e0ce <__sflush_r+0x46>
 800e0ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0cc:	1ac0      	subs	r0, r0, r3
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d4:	6a21      	ldr	r1, [r4, #32]
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b0      	blx	r6
 800e0da:	1c43      	adds	r3, r0, #1
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	d106      	bne.n	800e0ee <__sflush_r+0x66>
 800e0e0:	6829      	ldr	r1, [r5, #0]
 800e0e2:	291d      	cmp	r1, #29
 800e0e4:	d82c      	bhi.n	800e140 <__sflush_r+0xb8>
 800e0e6:	4a2a      	ldr	r2, [pc, #168]	; (800e190 <__sflush_r+0x108>)
 800e0e8:	40ca      	lsrs	r2, r1
 800e0ea:	07d6      	lsls	r6, r2, #31
 800e0ec:	d528      	bpl.n	800e140 <__sflush_r+0xb8>
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	6062      	str	r2, [r4, #4]
 800e0f2:	04d9      	lsls	r1, r3, #19
 800e0f4:	6922      	ldr	r2, [r4, #16]
 800e0f6:	6022      	str	r2, [r4, #0]
 800e0f8:	d504      	bpl.n	800e104 <__sflush_r+0x7c>
 800e0fa:	1c42      	adds	r2, r0, #1
 800e0fc:	d101      	bne.n	800e102 <__sflush_r+0x7a>
 800e0fe:	682b      	ldr	r3, [r5, #0]
 800e100:	b903      	cbnz	r3, 800e104 <__sflush_r+0x7c>
 800e102:	6560      	str	r0, [r4, #84]	; 0x54
 800e104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e106:	602f      	str	r7, [r5, #0]
 800e108:	2900      	cmp	r1, #0
 800e10a:	d0ca      	beq.n	800e0a2 <__sflush_r+0x1a>
 800e10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e110:	4299      	cmp	r1, r3
 800e112:	d002      	beq.n	800e11a <__sflush_r+0x92>
 800e114:	4628      	mov	r0, r5
 800e116:	f7ff fa9b 	bl	800d650 <_free_r>
 800e11a:	2000      	movs	r0, #0
 800e11c:	6360      	str	r0, [r4, #52]	; 0x34
 800e11e:	e7c1      	b.n	800e0a4 <__sflush_r+0x1c>
 800e120:	6a21      	ldr	r1, [r4, #32]
 800e122:	2301      	movs	r3, #1
 800e124:	4628      	mov	r0, r5
 800e126:	47b0      	blx	r6
 800e128:	1c41      	adds	r1, r0, #1
 800e12a:	d1c7      	bne.n	800e0bc <__sflush_r+0x34>
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d0c4      	beq.n	800e0bc <__sflush_r+0x34>
 800e132:	2b1d      	cmp	r3, #29
 800e134:	d001      	beq.n	800e13a <__sflush_r+0xb2>
 800e136:	2b16      	cmp	r3, #22
 800e138:	d101      	bne.n	800e13e <__sflush_r+0xb6>
 800e13a:	602f      	str	r7, [r5, #0]
 800e13c:	e7b1      	b.n	800e0a2 <__sflush_r+0x1a>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e144:	81a3      	strh	r3, [r4, #12]
 800e146:	e7ad      	b.n	800e0a4 <__sflush_r+0x1c>
 800e148:	690f      	ldr	r7, [r1, #16]
 800e14a:	2f00      	cmp	r7, #0
 800e14c:	d0a9      	beq.n	800e0a2 <__sflush_r+0x1a>
 800e14e:	0793      	lsls	r3, r2, #30
 800e150:	680e      	ldr	r6, [r1, #0]
 800e152:	bf08      	it	eq
 800e154:	694b      	ldreq	r3, [r1, #20]
 800e156:	600f      	str	r7, [r1, #0]
 800e158:	bf18      	it	ne
 800e15a:	2300      	movne	r3, #0
 800e15c:	eba6 0807 	sub.w	r8, r6, r7
 800e160:	608b      	str	r3, [r1, #8]
 800e162:	f1b8 0f00 	cmp.w	r8, #0
 800e166:	dd9c      	ble.n	800e0a2 <__sflush_r+0x1a>
 800e168:	6a21      	ldr	r1, [r4, #32]
 800e16a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e16c:	4643      	mov	r3, r8
 800e16e:	463a      	mov	r2, r7
 800e170:	4628      	mov	r0, r5
 800e172:	47b0      	blx	r6
 800e174:	2800      	cmp	r0, #0
 800e176:	dc06      	bgt.n	800e186 <__sflush_r+0xfe>
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e17e:	81a3      	strh	r3, [r4, #12]
 800e180:	f04f 30ff 	mov.w	r0, #4294967295
 800e184:	e78e      	b.n	800e0a4 <__sflush_r+0x1c>
 800e186:	4407      	add	r7, r0
 800e188:	eba8 0800 	sub.w	r8, r8, r0
 800e18c:	e7e9      	b.n	800e162 <__sflush_r+0xda>
 800e18e:	bf00      	nop
 800e190:	20400001 	.word	0x20400001

0800e194 <_fflush_r>:
 800e194:	b538      	push	{r3, r4, r5, lr}
 800e196:	690b      	ldr	r3, [r1, #16]
 800e198:	4605      	mov	r5, r0
 800e19a:	460c      	mov	r4, r1
 800e19c:	b913      	cbnz	r3, 800e1a4 <_fflush_r+0x10>
 800e19e:	2500      	movs	r5, #0
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	b118      	cbz	r0, 800e1ae <_fflush_r+0x1a>
 800e1a6:	6983      	ldr	r3, [r0, #24]
 800e1a8:	b90b      	cbnz	r3, 800e1ae <_fflush_r+0x1a>
 800e1aa:	f000 f887 	bl	800e2bc <__sinit>
 800e1ae:	4b14      	ldr	r3, [pc, #80]	; (800e200 <_fflush_r+0x6c>)
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	d11b      	bne.n	800e1ec <_fflush_r+0x58>
 800e1b4:	686c      	ldr	r4, [r5, #4]
 800e1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0ef      	beq.n	800e19e <_fflush_r+0xa>
 800e1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1c0:	07d0      	lsls	r0, r2, #31
 800e1c2:	d404      	bmi.n	800e1ce <_fflush_r+0x3a>
 800e1c4:	0599      	lsls	r1, r3, #22
 800e1c6:	d402      	bmi.n	800e1ce <_fflush_r+0x3a>
 800e1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ca:	f000 f915 	bl	800e3f8 <__retarget_lock_acquire_recursive>
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	f7ff ff59 	bl	800e088 <__sflush_r>
 800e1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1d8:	07da      	lsls	r2, r3, #31
 800e1da:	4605      	mov	r5, r0
 800e1dc:	d4e0      	bmi.n	800e1a0 <_fflush_r+0xc>
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	059b      	lsls	r3, r3, #22
 800e1e2:	d4dd      	bmi.n	800e1a0 <_fflush_r+0xc>
 800e1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1e6:	f000 f908 	bl	800e3fa <__retarget_lock_release_recursive>
 800e1ea:	e7d9      	b.n	800e1a0 <_fflush_r+0xc>
 800e1ec:	4b05      	ldr	r3, [pc, #20]	; (800e204 <_fflush_r+0x70>)
 800e1ee:	429c      	cmp	r4, r3
 800e1f0:	d101      	bne.n	800e1f6 <_fflush_r+0x62>
 800e1f2:	68ac      	ldr	r4, [r5, #8]
 800e1f4:	e7df      	b.n	800e1b6 <_fflush_r+0x22>
 800e1f6:	4b04      	ldr	r3, [pc, #16]	; (800e208 <_fflush_r+0x74>)
 800e1f8:	429c      	cmp	r4, r3
 800e1fa:	bf08      	it	eq
 800e1fc:	68ec      	ldreq	r4, [r5, #12]
 800e1fe:	e7da      	b.n	800e1b6 <_fflush_r+0x22>
 800e200:	0800f034 	.word	0x0800f034
 800e204:	0800f054 	.word	0x0800f054
 800e208:	0800f014 	.word	0x0800f014

0800e20c <std>:
 800e20c:	2300      	movs	r3, #0
 800e20e:	b510      	push	{r4, lr}
 800e210:	4604      	mov	r4, r0
 800e212:	e9c0 3300 	strd	r3, r3, [r0]
 800e216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e21a:	6083      	str	r3, [r0, #8]
 800e21c:	8181      	strh	r1, [r0, #12]
 800e21e:	6643      	str	r3, [r0, #100]	; 0x64
 800e220:	81c2      	strh	r2, [r0, #14]
 800e222:	6183      	str	r3, [r0, #24]
 800e224:	4619      	mov	r1, r3
 800e226:	2208      	movs	r2, #8
 800e228:	305c      	adds	r0, #92	; 0x5c
 800e22a:	f7fb fde3 	bl	8009df4 <memset>
 800e22e:	4b05      	ldr	r3, [pc, #20]	; (800e244 <std+0x38>)
 800e230:	6263      	str	r3, [r4, #36]	; 0x24
 800e232:	4b05      	ldr	r3, [pc, #20]	; (800e248 <std+0x3c>)
 800e234:	62a3      	str	r3, [r4, #40]	; 0x28
 800e236:	4b05      	ldr	r3, [pc, #20]	; (800e24c <std+0x40>)
 800e238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e23a:	4b05      	ldr	r3, [pc, #20]	; (800e250 <std+0x44>)
 800e23c:	6224      	str	r4, [r4, #32]
 800e23e:	6323      	str	r3, [r4, #48]	; 0x30
 800e240:	bd10      	pop	{r4, pc}
 800e242:	bf00      	nop
 800e244:	0800e561 	.word	0x0800e561
 800e248:	0800e583 	.word	0x0800e583
 800e24c:	0800e5bb 	.word	0x0800e5bb
 800e250:	0800e5df 	.word	0x0800e5df

0800e254 <_cleanup_r>:
 800e254:	4901      	ldr	r1, [pc, #4]	; (800e25c <_cleanup_r+0x8>)
 800e256:	f000 b8af 	b.w	800e3b8 <_fwalk_reent>
 800e25a:	bf00      	nop
 800e25c:	0800e195 	.word	0x0800e195

0800e260 <__sfmoreglue>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	2268      	movs	r2, #104	; 0x68
 800e264:	1e4d      	subs	r5, r1, #1
 800e266:	4355      	muls	r5, r2
 800e268:	460e      	mov	r6, r1
 800e26a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e26e:	f7ff fa5b 	bl	800d728 <_malloc_r>
 800e272:	4604      	mov	r4, r0
 800e274:	b140      	cbz	r0, 800e288 <__sfmoreglue+0x28>
 800e276:	2100      	movs	r1, #0
 800e278:	e9c0 1600 	strd	r1, r6, [r0]
 800e27c:	300c      	adds	r0, #12
 800e27e:	60a0      	str	r0, [r4, #8]
 800e280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e284:	f7fb fdb6 	bl	8009df4 <memset>
 800e288:	4620      	mov	r0, r4
 800e28a:	bd70      	pop	{r4, r5, r6, pc}

0800e28c <__sfp_lock_acquire>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__sfp_lock_acquire+0x8>)
 800e28e:	f000 b8b3 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800e292:	bf00      	nop
 800e294:	200002ad 	.word	0x200002ad

0800e298 <__sfp_lock_release>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__sfp_lock_release+0x8>)
 800e29a:	f000 b8ae 	b.w	800e3fa <__retarget_lock_release_recursive>
 800e29e:	bf00      	nop
 800e2a0:	200002ad 	.word	0x200002ad

0800e2a4 <__sinit_lock_acquire>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__sinit_lock_acquire+0x8>)
 800e2a6:	f000 b8a7 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	200002ae 	.word	0x200002ae

0800e2b0 <__sinit_lock_release>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__sinit_lock_release+0x8>)
 800e2b2:	f000 b8a2 	b.w	800e3fa <__retarget_lock_release_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	200002ae 	.word	0x200002ae

0800e2bc <__sinit>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	4604      	mov	r4, r0
 800e2c0:	f7ff fff0 	bl	800e2a4 <__sinit_lock_acquire>
 800e2c4:	69a3      	ldr	r3, [r4, #24]
 800e2c6:	b11b      	cbz	r3, 800e2d0 <__sinit+0x14>
 800e2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2cc:	f7ff bff0 	b.w	800e2b0 <__sinit_lock_release>
 800e2d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2d4:	6523      	str	r3, [r4, #80]	; 0x50
 800e2d6:	4b13      	ldr	r3, [pc, #76]	; (800e324 <__sinit+0x68>)
 800e2d8:	4a13      	ldr	r2, [pc, #76]	; (800e328 <__sinit+0x6c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2de:	42a3      	cmp	r3, r4
 800e2e0:	bf04      	itt	eq
 800e2e2:	2301      	moveq	r3, #1
 800e2e4:	61a3      	streq	r3, [r4, #24]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f000 f820 	bl	800e32c <__sfp>
 800e2ec:	6060      	str	r0, [r4, #4]
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f000 f81c 	bl	800e32c <__sfp>
 800e2f4:	60a0      	str	r0, [r4, #8]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 f818 	bl	800e32c <__sfp>
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	60e0      	str	r0, [r4, #12]
 800e300:	2104      	movs	r1, #4
 800e302:	6860      	ldr	r0, [r4, #4]
 800e304:	f7ff ff82 	bl	800e20c <std>
 800e308:	68a0      	ldr	r0, [r4, #8]
 800e30a:	2201      	movs	r2, #1
 800e30c:	2109      	movs	r1, #9
 800e30e:	f7ff ff7d 	bl	800e20c <std>
 800e312:	68e0      	ldr	r0, [r4, #12]
 800e314:	2202      	movs	r2, #2
 800e316:	2112      	movs	r1, #18
 800e318:	f7ff ff78 	bl	800e20c <std>
 800e31c:	2301      	movs	r3, #1
 800e31e:	61a3      	str	r3, [r4, #24]
 800e320:	e7d2      	b.n	800e2c8 <__sinit+0xc>
 800e322:	bf00      	nop
 800e324:	0800ebcc 	.word	0x0800ebcc
 800e328:	0800e255 	.word	0x0800e255

0800e32c <__sfp>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	4607      	mov	r7, r0
 800e330:	f7ff ffac 	bl	800e28c <__sfp_lock_acquire>
 800e334:	4b1e      	ldr	r3, [pc, #120]	; (800e3b0 <__sfp+0x84>)
 800e336:	681e      	ldr	r6, [r3, #0]
 800e338:	69b3      	ldr	r3, [r6, #24]
 800e33a:	b913      	cbnz	r3, 800e342 <__sfp+0x16>
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7ff ffbd 	bl	800e2bc <__sinit>
 800e342:	3648      	adds	r6, #72	; 0x48
 800e344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e348:	3b01      	subs	r3, #1
 800e34a:	d503      	bpl.n	800e354 <__sfp+0x28>
 800e34c:	6833      	ldr	r3, [r6, #0]
 800e34e:	b30b      	cbz	r3, 800e394 <__sfp+0x68>
 800e350:	6836      	ldr	r6, [r6, #0]
 800e352:	e7f7      	b.n	800e344 <__sfp+0x18>
 800e354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e358:	b9d5      	cbnz	r5, 800e390 <__sfp+0x64>
 800e35a:	4b16      	ldr	r3, [pc, #88]	; (800e3b4 <__sfp+0x88>)
 800e35c:	60e3      	str	r3, [r4, #12]
 800e35e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e362:	6665      	str	r5, [r4, #100]	; 0x64
 800e364:	f000 f847 	bl	800e3f6 <__retarget_lock_init_recursive>
 800e368:	f7ff ff96 	bl	800e298 <__sfp_lock_release>
 800e36c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e374:	6025      	str	r5, [r4, #0]
 800e376:	61a5      	str	r5, [r4, #24]
 800e378:	2208      	movs	r2, #8
 800e37a:	4629      	mov	r1, r5
 800e37c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e380:	f7fb fd38 	bl	8009df4 <memset>
 800e384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e38c:	4620      	mov	r0, r4
 800e38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e390:	3468      	adds	r4, #104	; 0x68
 800e392:	e7d9      	b.n	800e348 <__sfp+0x1c>
 800e394:	2104      	movs	r1, #4
 800e396:	4638      	mov	r0, r7
 800e398:	f7ff ff62 	bl	800e260 <__sfmoreglue>
 800e39c:	4604      	mov	r4, r0
 800e39e:	6030      	str	r0, [r6, #0]
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d1d5      	bne.n	800e350 <__sfp+0x24>
 800e3a4:	f7ff ff78 	bl	800e298 <__sfp_lock_release>
 800e3a8:	230c      	movs	r3, #12
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	e7ee      	b.n	800e38c <__sfp+0x60>
 800e3ae:	bf00      	nop
 800e3b0:	0800ebcc 	.word	0x0800ebcc
 800e3b4:	ffff0001 	.word	0xffff0001

0800e3b8 <_fwalk_reent>:
 800e3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	4606      	mov	r6, r0
 800e3be:	4688      	mov	r8, r1
 800e3c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3c4:	2700      	movs	r7, #0
 800e3c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3ca:	f1b9 0901 	subs.w	r9, r9, #1
 800e3ce:	d505      	bpl.n	800e3dc <_fwalk_reent+0x24>
 800e3d0:	6824      	ldr	r4, [r4, #0]
 800e3d2:	2c00      	cmp	r4, #0
 800e3d4:	d1f7      	bne.n	800e3c6 <_fwalk_reent+0xe>
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3dc:	89ab      	ldrh	r3, [r5, #12]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d907      	bls.n	800e3f2 <_fwalk_reent+0x3a>
 800e3e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	d003      	beq.n	800e3f2 <_fwalk_reent+0x3a>
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	47c0      	blx	r8
 800e3f0:	4307      	orrs	r7, r0
 800e3f2:	3568      	adds	r5, #104	; 0x68
 800e3f4:	e7e9      	b.n	800e3ca <_fwalk_reent+0x12>

0800e3f6 <__retarget_lock_init_recursive>:
 800e3f6:	4770      	bx	lr

0800e3f8 <__retarget_lock_acquire_recursive>:
 800e3f8:	4770      	bx	lr

0800e3fa <__retarget_lock_release_recursive>:
 800e3fa:	4770      	bx	lr

0800e3fc <__swhatbuf_r>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	460e      	mov	r6, r1
 800e400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e404:	2900      	cmp	r1, #0
 800e406:	b096      	sub	sp, #88	; 0x58
 800e408:	4614      	mov	r4, r2
 800e40a:	461d      	mov	r5, r3
 800e40c:	da08      	bge.n	800e420 <__swhatbuf_r+0x24>
 800e40e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	602a      	str	r2, [r5, #0]
 800e416:	061a      	lsls	r2, r3, #24
 800e418:	d410      	bmi.n	800e43c <__swhatbuf_r+0x40>
 800e41a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e41e:	e00e      	b.n	800e43e <__swhatbuf_r+0x42>
 800e420:	466a      	mov	r2, sp
 800e422:	f000 f903 	bl	800e62c <_fstat_r>
 800e426:	2800      	cmp	r0, #0
 800e428:	dbf1      	blt.n	800e40e <__swhatbuf_r+0x12>
 800e42a:	9a01      	ldr	r2, [sp, #4]
 800e42c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e430:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e434:	425a      	negs	r2, r3
 800e436:	415a      	adcs	r2, r3
 800e438:	602a      	str	r2, [r5, #0]
 800e43a:	e7ee      	b.n	800e41a <__swhatbuf_r+0x1e>
 800e43c:	2340      	movs	r3, #64	; 0x40
 800e43e:	2000      	movs	r0, #0
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	b016      	add	sp, #88	; 0x58
 800e444:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e448 <__smakebuf_r>:
 800e448:	898b      	ldrh	r3, [r1, #12]
 800e44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e44c:	079d      	lsls	r5, r3, #30
 800e44e:	4606      	mov	r6, r0
 800e450:	460c      	mov	r4, r1
 800e452:	d507      	bpl.n	800e464 <__smakebuf_r+0x1c>
 800e454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	6123      	str	r3, [r4, #16]
 800e45c:	2301      	movs	r3, #1
 800e45e:	6163      	str	r3, [r4, #20]
 800e460:	b002      	add	sp, #8
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	ab01      	add	r3, sp, #4
 800e466:	466a      	mov	r2, sp
 800e468:	f7ff ffc8 	bl	800e3fc <__swhatbuf_r>
 800e46c:	9900      	ldr	r1, [sp, #0]
 800e46e:	4605      	mov	r5, r0
 800e470:	4630      	mov	r0, r6
 800e472:	f7ff f959 	bl	800d728 <_malloc_r>
 800e476:	b948      	cbnz	r0, 800e48c <__smakebuf_r+0x44>
 800e478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47c:	059a      	lsls	r2, r3, #22
 800e47e:	d4ef      	bmi.n	800e460 <__smakebuf_r+0x18>
 800e480:	f023 0303 	bic.w	r3, r3, #3
 800e484:	f043 0302 	orr.w	r3, r3, #2
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	e7e3      	b.n	800e454 <__smakebuf_r+0xc>
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <__smakebuf_r+0x7c>)
 800e48e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e490:	89a3      	ldrh	r3, [r4, #12]
 800e492:	6020      	str	r0, [r4, #0]
 800e494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e498:	81a3      	strh	r3, [r4, #12]
 800e49a:	9b00      	ldr	r3, [sp, #0]
 800e49c:	6163      	str	r3, [r4, #20]
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	6120      	str	r0, [r4, #16]
 800e4a2:	b15b      	cbz	r3, 800e4bc <__smakebuf_r+0x74>
 800e4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 f8d1 	bl	800e650 <_isatty_r>
 800e4ae:	b128      	cbz	r0, 800e4bc <__smakebuf_r+0x74>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f023 0303 	bic.w	r3, r3, #3
 800e4b6:	f043 0301 	orr.w	r3, r3, #1
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	89a0      	ldrh	r0, [r4, #12]
 800e4be:	4305      	orrs	r5, r0
 800e4c0:	81a5      	strh	r5, [r4, #12]
 800e4c2:	e7cd      	b.n	800e460 <__smakebuf_r+0x18>
 800e4c4:	0800e255 	.word	0x0800e255

0800e4c8 <_malloc_usable_size_r>:
 800e4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4cc:	1f18      	subs	r0, r3, #4
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bfbc      	itt	lt
 800e4d2:	580b      	ldrlt	r3, [r1, r0]
 800e4d4:	18c0      	addlt	r0, r0, r3
 800e4d6:	4770      	bx	lr

0800e4d8 <_raise_r>:
 800e4d8:	291f      	cmp	r1, #31
 800e4da:	b538      	push	{r3, r4, r5, lr}
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	d904      	bls.n	800e4ec <_raise_r+0x14>
 800e4e2:	2316      	movs	r3, #22
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4ee:	b112      	cbz	r2, 800e4f6 <_raise_r+0x1e>
 800e4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4f4:	b94b      	cbnz	r3, 800e50a <_raise_r+0x32>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f000 f830 	bl	800e55c <_getpid_r>
 800e4fc:	462a      	mov	r2, r5
 800e4fe:	4601      	mov	r1, r0
 800e500:	4620      	mov	r0, r4
 800e502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e506:	f000 b817 	b.w	800e538 <_kill_r>
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d00a      	beq.n	800e524 <_raise_r+0x4c>
 800e50e:	1c59      	adds	r1, r3, #1
 800e510:	d103      	bne.n	800e51a <_raise_r+0x42>
 800e512:	2316      	movs	r3, #22
 800e514:	6003      	str	r3, [r0, #0]
 800e516:	2001      	movs	r0, #1
 800e518:	e7e7      	b.n	800e4ea <_raise_r+0x12>
 800e51a:	2400      	movs	r4, #0
 800e51c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e520:	4628      	mov	r0, r5
 800e522:	4798      	blx	r3
 800e524:	2000      	movs	r0, #0
 800e526:	e7e0      	b.n	800e4ea <_raise_r+0x12>

0800e528 <raise>:
 800e528:	4b02      	ldr	r3, [pc, #8]	; (800e534 <raise+0xc>)
 800e52a:	4601      	mov	r1, r0
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	f7ff bfd3 	b.w	800e4d8 <_raise_r>
 800e532:	bf00      	nop
 800e534:	20000010 	.word	0x20000010

0800e538 <_kill_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d07      	ldr	r5, [pc, #28]	; (800e558 <_kill_r+0x20>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	4611      	mov	r1, r2
 800e544:	602b      	str	r3, [r5, #0]
 800e546:	f7f3 fda1 	bl	800208c <_kill>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	d102      	bne.n	800e554 <_kill_r+0x1c>
 800e54e:	682b      	ldr	r3, [r5, #0]
 800e550:	b103      	cbz	r3, 800e554 <_kill_r+0x1c>
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	200002a8 	.word	0x200002a8

0800e55c <_getpid_r>:
 800e55c:	f7f3 bd8e 	b.w	800207c <_getpid>

0800e560 <__sread>:
 800e560:	b510      	push	{r4, lr}
 800e562:	460c      	mov	r4, r1
 800e564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e568:	f000 f894 	bl	800e694 <_read_r>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	bfab      	itete	ge
 800e570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e572:	89a3      	ldrhlt	r3, [r4, #12]
 800e574:	181b      	addge	r3, r3, r0
 800e576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e57a:	bfac      	ite	ge
 800e57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e57e:	81a3      	strhlt	r3, [r4, #12]
 800e580:	bd10      	pop	{r4, pc}

0800e582 <__swrite>:
 800e582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e586:	461f      	mov	r7, r3
 800e588:	898b      	ldrh	r3, [r1, #12]
 800e58a:	05db      	lsls	r3, r3, #23
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	4616      	mov	r6, r2
 800e592:	d505      	bpl.n	800e5a0 <__swrite+0x1e>
 800e594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e598:	2302      	movs	r3, #2
 800e59a:	2200      	movs	r2, #0
 800e59c:	f000 f868 	bl	800e670 <_lseek_r>
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	463b      	mov	r3, r7
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b6:	f000 b817 	b.w	800e5e8 <_write_r>

0800e5ba <__sseek>:
 800e5ba:	b510      	push	{r4, lr}
 800e5bc:	460c      	mov	r4, r1
 800e5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c2:	f000 f855 	bl	800e670 <_lseek_r>
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	bf15      	itete	ne
 800e5cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5d6:	81a3      	strheq	r3, [r4, #12]
 800e5d8:	bf18      	it	ne
 800e5da:	81a3      	strhne	r3, [r4, #12]
 800e5dc:	bd10      	pop	{r4, pc}

0800e5de <__sclose>:
 800e5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e2:	f000 b813 	b.w	800e60c <_close_r>
	...

0800e5e8 <_write_r>:
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	4d07      	ldr	r5, [pc, #28]	; (800e608 <_write_r+0x20>)
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f7f3 fd7f 	bl	80020fa <_write>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d102      	bne.n	800e606 <_write_r+0x1e>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	b103      	cbz	r3, 800e606 <_write_r+0x1e>
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	bd38      	pop	{r3, r4, r5, pc}
 800e608:	200002a8 	.word	0x200002a8

0800e60c <_close_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d06      	ldr	r5, [pc, #24]	; (800e628 <_close_r+0x1c>)
 800e610:	2300      	movs	r3, #0
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	602b      	str	r3, [r5, #0]
 800e618:	f7f3 fd8b 	bl	8002132 <_close>
 800e61c:	1c43      	adds	r3, r0, #1
 800e61e:	d102      	bne.n	800e626 <_close_r+0x1a>
 800e620:	682b      	ldr	r3, [r5, #0]
 800e622:	b103      	cbz	r3, 800e626 <_close_r+0x1a>
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	bd38      	pop	{r3, r4, r5, pc}
 800e628:	200002a8 	.word	0x200002a8

0800e62c <_fstat_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4d07      	ldr	r5, [pc, #28]	; (800e64c <_fstat_r+0x20>)
 800e630:	2300      	movs	r3, #0
 800e632:	4604      	mov	r4, r0
 800e634:	4608      	mov	r0, r1
 800e636:	4611      	mov	r1, r2
 800e638:	602b      	str	r3, [r5, #0]
 800e63a:	f7f3 fd86 	bl	800214a <_fstat>
 800e63e:	1c43      	adds	r3, r0, #1
 800e640:	d102      	bne.n	800e648 <_fstat_r+0x1c>
 800e642:	682b      	ldr	r3, [r5, #0]
 800e644:	b103      	cbz	r3, 800e648 <_fstat_r+0x1c>
 800e646:	6023      	str	r3, [r4, #0]
 800e648:	bd38      	pop	{r3, r4, r5, pc}
 800e64a:	bf00      	nop
 800e64c:	200002a8 	.word	0x200002a8

0800e650 <_isatty_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4d06      	ldr	r5, [pc, #24]	; (800e66c <_isatty_r+0x1c>)
 800e654:	2300      	movs	r3, #0
 800e656:	4604      	mov	r4, r0
 800e658:	4608      	mov	r0, r1
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	f7f3 fd85 	bl	800216a <_isatty>
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	d102      	bne.n	800e66a <_isatty_r+0x1a>
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	b103      	cbz	r3, 800e66a <_isatty_r+0x1a>
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	bd38      	pop	{r3, r4, r5, pc}
 800e66c:	200002a8 	.word	0x200002a8

0800e670 <_lseek_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4d07      	ldr	r5, [pc, #28]	; (800e690 <_lseek_r+0x20>)
 800e674:	4604      	mov	r4, r0
 800e676:	4608      	mov	r0, r1
 800e678:	4611      	mov	r1, r2
 800e67a:	2200      	movs	r2, #0
 800e67c:	602a      	str	r2, [r5, #0]
 800e67e:	461a      	mov	r2, r3
 800e680:	f7f3 fd7e 	bl	8002180 <_lseek>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d102      	bne.n	800e68e <_lseek_r+0x1e>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	b103      	cbz	r3, 800e68e <_lseek_r+0x1e>
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	200002a8 	.word	0x200002a8

0800e694 <_read_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d07      	ldr	r5, [pc, #28]	; (800e6b4 <_read_r+0x20>)
 800e698:	4604      	mov	r4, r0
 800e69a:	4608      	mov	r0, r1
 800e69c:	4611      	mov	r1, r2
 800e69e:	2200      	movs	r2, #0
 800e6a0:	602a      	str	r2, [r5, #0]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f7f3 fd0c 	bl	80020c0 <_read>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_read_r+0x1e>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_read_r+0x1e>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	200002a8 	.word	0x200002a8

0800e6b8 <_init>:
 800e6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ba:	bf00      	nop
 800e6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6be:	bc08      	pop	{r3}
 800e6c0:	469e      	mov	lr, r3
 800e6c2:	4770      	bx	lr

0800e6c4 <_fini>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	bf00      	nop
 800e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ca:	bc08      	pop	{r3}
 800e6cc:	469e      	mov	lr, r3
 800e6ce:	4770      	bx	lr
